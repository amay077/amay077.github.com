<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>https://blog.amay0777.net/</link>
    <atom:link href="https://blog.amay0777.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 27 Mar 2020 01:41:12 -0500</pubDate>
    <lastBuildDate>Fri, 27 Mar 2020 01:41:12 -0500</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>Vue+Nuxt+TypeScript のプロジェクトを VSCode でデバッグ可能にする</title>
        <description>&lt;p&gt;vue 初心者です。&lt;br /&gt;
Angular のマネをしたら、なんだかできたのでメモしておきます。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;vue のプロジェクトは &lt;a href=&quot;https://github.com/tokyo-metropolitan-gov/covid19&quot;&gt;tokyo-metropolitan-gov/covid19&lt;/a&gt; から派生した &lt;a href=&quot;https://github.com/code4nagoya/covid19&quot;&gt;code4nagoya/covid19: 愛知県 新型コロナウイルス感染症対策サイト&lt;/a&gt; を使います。&lt;/p&gt;

&lt;p&gt;VSCode の拡張機能は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vetur&lt;/li&gt;
  &lt;li&gt;Debugger for Chrome&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を入れています。&lt;/p&gt;

&lt;h2 id=&quot;1-sourcemap-を有効にする&quot;&gt;1. SourceMap を有効にする&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nuxt.config.ts&lt;/code&gt; に sourceMap を有効にする設定を記述します。&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;err&quot;&gt;＜省略＞&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;googleAnalytics&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xxx'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//// 追加ここから&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;devtool&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'source-map'&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//// 追加ここまで&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;postcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;autoprefixer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'autoplace'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;purgecss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;＜省略＞&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-vscode-のタスクを追加する&quot;&gt;2. VSCode のタスクを追加する&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/tasks.json&lt;/code&gt; に、デバッグを開始するためのタスクを追加します。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tasks&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;label&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn-dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;shell&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;isBackground&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;problemMatcher&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;owner&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;custom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;pattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;regexp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;^$&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;background&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;activeOnStart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;beginsPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn run.*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endsPattern&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.*Waiting for file changes.*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn dev&lt;/code&gt; でローカルサーバーを起動、Webアプリが配置されますが、それをバックグラウンドで行うタスクです。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn dev&lt;/code&gt; コマンドは、その開始時に &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn run&lt;/code&gt; という文字列が出力されるので、それをタスクの開始を示す &lt;code class=&quot;highlighter-rouge&quot;&gt;beginsPattern&lt;/code&gt; に指定します。&lt;br /&gt;
同じく、&lt;code class=&quot;highlighter-rouge&quot;&gt;yarn dev&lt;/code&gt; でローカルサーバーの準備ができたときに &lt;code class=&quot;highlighter-rouge&quot;&gt;Waiting for file changes&lt;/code&gt; という文字が出力されるので、それを “endsPattern” に指定しておきます。&lt;br /&gt;
つまり &lt;code class=&quot;highlighter-rouge&quot;&gt;Waiting for file changes&lt;/code&gt; が来たら、このタスクは終了となります。&lt;/p&gt;

&lt;h2 id=&quot;3-vscode-の起動設定を追加する&quot;&gt;3. VSCode の起動設定を追加する&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; に、デバッグを開始する設定を記述します。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Launch Chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:3000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webRoot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;preLaunchTask&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;yarn-dev&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Chrome を起動して http://localhost:3000 を開くというコマンドですが、&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;preLaunchTask&quot;: &quot;yarn-dev&quot;&lt;/code&gt; とすることで、バックグラウンドで &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn dev&lt;/code&gt; の準備ができたらブラウザを起動する、という挙動になります。&lt;/p&gt;

&lt;h2 id=&quot;4-デバッグ実行してみる&quot;&gt;4. デバッグ実行してみる&lt;/h2&gt;

&lt;p&gt;例えば &lt;code class=&quot;highlighter-rouge&quot;&gt;pages/about.vue&lt;/code&gt; のタイトルを返す行あたりにブレークポイントを張って、&lt;br /&gt;
F5 キーまたはメニュー -&amp;gt; Debug -&amp;gt; Start Debugging を実行します。&lt;/p&gt;

&lt;p&gt;しばらく待つとブラウザでページが表示されるので、「当サイトについて」を押すと、ブレークポイントで停まります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/437d0d5e-b570-3eb5-4994-72772628f708.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;（なぜか仕掛けた行で止まってくれないこともあるけど、大目に見よう）&lt;/p&gt;

&lt;p&gt;vue.js は何もわからないので、もっと良いやり方があったら教えて下さい。&lt;/p&gt;

&lt;p&gt;今回の修正差分は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/amay077/covid19-1/commit/eb717611210af1477e0b2b90c72d805b7c56e009&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。&lt;/p&gt;

&lt;h2 id=&quot;物足りないところ&quot;&gt;物足りないところ&lt;/h2&gt;

&lt;p&gt;F5 でデバッグ開始できるようになりましたが、Shift + F5（あるいはメニュー -&amp;gt; Debug -&amp;gt; Stop Debugging）すると、ブラウザは閉じますが、バックグラウンドで動いているローカルサーバーは停止しません。ファイル監視モードで常駐しているので放置でも問題ないですが、ちょっと気持ち悪いです。停止させるには Terminal で Ctrl+c しなければなりません。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/62e1eb656fbd730b3dd1&quot;&gt;Angular + VSCode でデバッグ開始したときに ng serve する - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/vscode-recipes/blob/master/vuejs-cli/README.md&quot;&gt;vscode-recipes/README.md at master · microsoft/vscode-recipes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://codeburst.io/debugging-nuxt-js-with-visual-studio-code-724920140b8f&quot;&gt;Debugging Nuxt.js with Visual Studio Code - codeburst&lt;/a&gt;  ※情報古いな&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 12 Mar 2020 08:30:00 -0500</pubDate>
        <link>https://blog.amay0777.net/blog/2020/03/12/cddd1bbd158ea4e79647/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2020/03/12/cddd1bbd158ea4e79647/</guid>
        
        
        <category>Vue.js</category>
        
        <category>TypeScript</category>
        
        <category>VSCode</category>
        
        <category>Chrome</category>
        
      </item>
    
      <item>
        <title>Serverless Framework で AWS Lambda と API Gateway をデプロイする</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://serverless.connpass.com/event/165352/&quot;&gt;Serverless Meetup Tokyo #16 （オンライン開催）&lt;/a&gt; を拝見していて、ちょうど今、AWS への各種リソースのデプロイの自動化が課題だったので、よい機会と思い Serverless Framework を使ってみた。&lt;br /&gt;
尚、Serlverless Framwork については知っていたが、offline-start しか使ったことがなかった程度の人間です。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;やったこと&quot;&gt;やったこと&lt;/h2&gt;

&lt;p&gt;弊社では Webシステムを、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;フロントエンド: SPA(Angular)&lt;/li&gt;
  &lt;li&gt;バックエンド:
    &lt;ul&gt;
      &lt;li&gt;REST っぽいAPI: Lambda + API Gateway&lt;/li&gt;
      &lt;li&gt;DB: PostgreSQL 他&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で組むことが増えてきていて、プロジェクトの取っ掛かり時の環境構築を手動でやっているのがダルくなってきた。&lt;br /&gt;
今回は、「REST っぽいAPI: Lambda + API Gateway」のところを Serverless Framework で自動化してみた。&lt;/p&gt;

&lt;h2 id=&quot;手順&quot;&gt;手順&lt;/h2&gt;

&lt;h3 id=&quot;1-環境構築用-iam-の作成&quot;&gt;1. 環境構築用 IAM の作成&lt;/h3&gt;

&lt;p&gt;IAM コンソールで「serverless_deployment」という名前で作成。以下のポリシーをアタッチした。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AWSLambdaFullAccess&lt;/li&gt;
  &lt;li&gt;AmazonS3FullAccess&lt;/li&gt;
  &lt;li&gt;AmazonAPIGatewayAdministrator&lt;/li&gt;
  &lt;li&gt;AWSCloudFormationFullAccess&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに、以下のようなインラインポリシーを追加した。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VisualEditor0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:DeleteRolePolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:CreateRole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:DeleteRole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;iam:PutRolePolicy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;IAMFullAccess はさすがにヤバいかなと思い必要な権限だけ抽出したものだが、たぶん他の xxxFullAccess も必要なものだけにした方がよいだろう。&lt;/p&gt;

&lt;p&gt;作成した IAM のアクセスキーなどを自PCの &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.aws/credentials&lt;/code&gt; に追加した。ちなみに環境は Windows 10 内の WSL(Ubuntu)。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.aws/credentials&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[serverless-deployment]
aws_access_key_id = AKIAxxxxx
aws_secret_access_key = 49s9xxxxxxxxxxxxxxxxxxxxxxxxxxxx
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;2-ツールのインストール&quot;&gt;2. ツールのインストール&lt;/h3&gt;

&lt;p&gt;awscli は現在最新の v2 をインストール&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install&quot;&gt;Installing the AWS CLI version 2 on Linux - AWS Command Line Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;node は 12.14.1&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/ja/&quot;&gt;Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;そして Serverless Framework をインストールする。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless.com/&quot;&gt;Serverless - The Serverless Application Framework powered by AWS Lambda, API Gateway, and more&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;serverless &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.bash_profile
serverless &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Framework Core: 1.65.0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Plugin: 3.4.1
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; SDK: 2.3.0
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; Components: 2.22.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;global じゃなくてもいいけど、パス通すのが面倒なので。&lt;/p&gt;

&lt;h2 id=&quot;3-テンプレートからプロジェクトの作成&quot;&gt;3. テンプレートからプロジェクトの作成&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless create &lt;span class=&quot;nt&quot;&gt;--template&lt;/span&gt; aws-nodejs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;で、nodejs のテンプレートから Serverless Framework のプロジェクトを作成。&lt;/p&gt;

&lt;p&gt;また、&lt;code class=&quot;highlighter-rouge&quot;&gt;npm init&lt;/code&gt; で適当に &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; を作って、&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--save-dev&lt;/span&gt; serverless-plugin-custom-binary
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行しておく。これは後に必要になるプラグイン。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ls&lt;/code&gt; すると以下のようなファイルとディレクトリがある。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;handler.js  node_modules  package-lock.json  package.json  serverless.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;4-serverlessyml-を編集する&quot;&gt;4. serverless.yml を編集する&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serverless.yml&lt;/code&gt; を開いて次のように編集する（これだと最早テンプレートの意味ないが）。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-awesome-service&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;serverless-plugin-custom-binary&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;custom&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiGateway&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;binaryMediaTypes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;image/jpeg&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aws&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nodejs12.x&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${opt:stage, 'dev'}&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;region&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ap-northeast-1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${self:service}-${self:provider.stage}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;functions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;handler.hello&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${self:service}-api-${self:provider.stage}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;events&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/{proxy+}&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;get&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;integration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;lambda&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;まず &lt;code class=&quot;highlighter-rouge&quot;&gt;service: my-awesome-service&lt;/code&gt;、これが AWS に作成されるリソース名の元になるのでちゃんと考えて命名しよう。重複したらどうなちゃうのかは不明。 &lt;a href=&quot;https://qiita.com/ybiquitous/items/75288bacb596a82a2805&quot;&gt;&lt;strong&gt;kebab-case&lt;/strong&gt;&lt;/a&gt; を採用しておくと良いと思われる。例えばサービス名で S3 Bucket を作りたいとき、Bucket 名は CamelCase(大文字) を許可してないため。&lt;/p&gt;

&lt;p&gt;次に Plugins と binaryMediaTypes。これを行うために先に serverless-plugin-custom-binary をインストールしておいた。&lt;/p&gt;

&lt;p&gt;provider-apiName。これは API Gateway の名前なんだけど、これをしない場合 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;stage名&amp;gt;-&amp;lt;service名&amp;gt;&lt;/code&gt; になる。Lambda とかは &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;service名&amp;gt;-&amp;lt;stage名&amp;gt;&lt;/code&gt; となり逆で気持ち悪いので、他の同じになるように直している。&lt;/p&gt;

&lt;p&gt;stage: ${opt:stage, ‘dev’}。単純に &lt;code class=&quot;highlighter-rouge&quot;&gt;stage: dev&lt;/code&gt; とするだけだと、 &lt;code class=&quot;highlighter-rouge&quot;&gt;--stage prod&lt;/code&gt; を引数で指定された値が &lt;code class=&quot;highlighter-rouge&quot;&gt;${self:provider.stage}&lt;/code&gt; に代入されないので注意。&lt;/p&gt;

&lt;p&gt;functions-api。Labmda に &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;service名&amp;gt;-&amp;lt;stage名&amp;gt;-api&lt;/code&gt; という名前の関数が作成される。”api” は任意の名称で ok。&lt;/p&gt;

&lt;p&gt;functions-api-name。既定だと &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;service名&amp;gt;-&amp;lt;stage名&amp;gt;-api&lt;/code&gt; になるが、&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;service名&amp;gt;-api-&amp;lt;stage名&amp;gt;&lt;/code&gt;にしたい(stage名は最後尾に統一したい) ので &lt;code class=&quot;highlighter-rouge&quot;&gt;name: ${self:service}-api-${self:provider.stage}&lt;/code&gt; とした。&lt;/p&gt;

&lt;p&gt;handler:  handler.hello。 &lt;code class=&quot;highlighter-rouge&quot;&gt;handles.js&lt;/code&gt; の hello 関数を呼び出すの意。&lt;/p&gt;

&lt;p&gt;path: /{proxy+}。呼び出し URL のパス部分を全てスルーする。&lt;code class=&quot;highlighter-rouge&quot;&gt;https://hoge.net/dev/fuga/piyo/gege&lt;/code&gt; とか。&lt;/p&gt;

&lt;p&gt;integration: lambda。既定で ON ぽいので要らないかも。&lt;/p&gt;

&lt;h3 id=&quot;5-aws-にデプロイする&quot;&gt;5. AWS にデプロイする&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless deploy &lt;span class=&quot;nt&quot;&gt;--aws-profile&lt;/span&gt; serverless-deployment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行する。&lt;code class=&quot;highlighter-rouge&quot;&gt;--aws-profile serverless-deployment&lt;/code&gt; で AWSプロファイルを指定している事に注意。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Serverless: Packaging service...
Serverless: Excluding development dependencies...
Serverless: Creating Stack...
Serverless: Checking Stack create progress...
........
Serverless: Stack create finished...
Serverless: Uploading CloudFormation file to S3...
Serverless: Uploading artifacts...
Serverless: Uploading service MyAwesomeService.zip file to S3 (1.13 KB)...
Serverless: Validating template...
Serverless: Updating Stack...
Serverless: Checking Stack update progress...
...............................
Serverless: Stack update finished...
Service Information
service: MyAwesomeService
stage: dev
region: ap-northeast-1
stack: MyAwesomeService-dev
resources: 11
api keys:
  None
endpoints:
  GET - https://xxxx.execute-api.ap-northeast-1.amazonaws.com/dev/{proxy+}
functions:
  api: MyAwesomeService-dev-api
layers:
  None
Serverless: Run the &quot;serverless&quot; command to setup monitoring, troubleshooting and testing.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;なんやかんや実行されてデプロイされたみたい。&lt;/p&gt;

&lt;h3 id=&quot;6-デプロイされたか確認&quot;&gt;6. デプロイされたか確認&lt;/h3&gt;

&lt;h4 id=&quot;api-gateway&quot;&gt;API Gateway&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/061865db-2644-945c-bd22-30aa39746845.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/320b3303-657a-4d0c-c3f8-59ea5d572482.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;lambda&quot;&gt;Lambda&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/d0a87c53-babc-05d6-bda4-74f38ae4fa01.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e3827772-e025-a0d3-545a-cca87071cfba.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;cURL で呼び出してみる。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; curl https://xxxx.execute-api.ap-northeast-1.amazonaws.com/dev/aaa/bbb/ccc
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;statusCode&quot;:200,&quot;body&quot;:&quot;{\n  \&quot;message\&quot;: \&quot;Go Serverless v1.0! Your function executed successfully!\&quot;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;うまくいったみたい。&lt;/p&gt;

&lt;h3 id=&quot;7-後片付け削除&quot;&gt;7. 後片付け（削除）&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;serverless remove &lt;span class=&quot;nt&quot;&gt;--aws-profile&lt;/span&gt; serverless-deployment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ですべてのリソースがキレイさっぱり消えます。これはこれで怖いので IAM の権限で制限したほうが良さそう。&lt;/p&gt;

&lt;h2 id=&quot;トラブルシューティング&quot;&gt;トラブルシューティング&lt;/h2&gt;

&lt;h3 id=&quot;q-デプロイが全然終わらない&quot;&gt;Q: デプロイが全然終わらない&lt;/h3&gt;

&lt;p&gt;A: Console から CloudFormation の該当スタックを削除してリトライ&lt;/p&gt;

&lt;h3 id=&quot;q-sls-deploy-や-remove-がs3-のバケットが無いとかでエラーになる&quot;&gt;Q: sls deploy や remove が「S3 のバケットが無い」とかでエラーになる&lt;/h3&gt;

&lt;p&gt;A: 該当バケット(&lt;code class=&quot;highlighter-rouge&quot;&gt;my-awesome-service-veri-serverlessdeploymentbucke-rzr9e2jjdrlv&lt;/code&gt; のようなごちゃごちゃしたやつ) を手動作成するか、Console から CloudFormation の該当スタックを削除してリトライ&lt;/p&gt;

&lt;h2 id=&quot;今後やりたいこと&quot;&gt;今後やりたいこと&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Lambda へ VPC の設定&lt;/li&gt;
  &lt;li&gt;Lambda タイムアウト値の設定&lt;/li&gt;
  &lt;li&gt;スクリプトでビルドとか Webpack した結果を Serverless でデプロイ&lt;/li&gt;
  &lt;li&gt;S3 Bucket の作成&lt;/li&gt;
  &lt;li&gt;S3 に SPA をデプロイ&lt;/li&gt;
  &lt;li&gt;リソース権限周りをもっと深堀り&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless.com/framework/docs/providers/aws/guide/intro/&quot;&gt;Serverless Framework - AWS Lambda Guide - Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://serverless.com/framework/docs/providers/aws/guide/variables/&quot;&gt;Serverless Variables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/makoll/items/5f330b2469e310474c4e&quot;&gt;Serverless FlameworkでAPI Gatewayのバイナリメディアタイプを設定する方法 - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/maaaashin324/items/9e5d3f02fca94989e9f6&quot;&gt;Serverless Framework で API Gateway &amp;amp; Lambda を構築する - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/wara_be/items/f3ec38e5be6bdea7c79d&quot;&gt;Serverlessで任意のディレクトリ配下に、関数毎にディレクトリを切ってソースを配置する with webpack building - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/aical/items/c498c5a69b66b1ea7c3d&quot;&gt;一時的にPATHを追加する（Linux） - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hkou.hatenablog.com/entry/2018/05/07/213412&quot;&gt;ServerlessFrameworkでS3の静的サイトのホスティングをする - マコーの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 05 Mar 2020 07:30:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2020/03/05/81bbb556b9d6063370fb/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2020/03/05/81bbb556b9d6063370fb/</guid>
        
        
        <category>AWS</category>
        
        <category>ServerlessFramework</category>
        
        <category>Node.js</category>
        
        <category>lambda</category>
        
        <category>APIGateway</category>
        
      </item>
    
      <item>
        <title>MapBox GL JS でラベル付きマーカー</title>
        <description>&lt;p&gt;MapBox GL のサンプルにカスタムマーカーがあるので、それを参考に「ラベル付きのマーカー」を実現してみた。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/6332001c-8d5c-f095-235e-672f1ccf4bd7.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;動作するサンプルはこちら。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jsfiddle.net/amay077/vn3741o6/15/&quot;&gt;MapBox GL JS Marker with label / JSFiddle - Code Playground&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ソースコード&quot;&gt;ソースコード&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'viewport'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'initial-scale=1,maximum-scale=1,user-scalable=no'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://fonts.googleapis.com/css?family=Open+Sans&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://api.tiles.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.js'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'https://api.tiles.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.css'&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'stylesheet'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./index.css&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;media=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;screen&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'map'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;template&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;marker&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;marker-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;title&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;marker-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;img&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;marker-icon&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://img.icons8.com/ios-filled/40/0000FF/marker.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&amp;gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./index.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.css&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;#map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;absolute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;bottom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.marker-container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;flex-direction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;align-items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.marker-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;100px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ellipsis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;white-space&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nowrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.marker-icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;30px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;auto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
  &lt;span class=&quot;nl&quot;&gt;background-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cover&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.mapboxgl-popup&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;max-width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.mapboxgl-popup-content&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;text-align&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;'Open Sans'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sans-serif&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geojson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'FeatureCollection'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Feature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Point'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;77.032&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;38.913&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Mapbox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Washington, D.C.'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Feature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Point'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;122.414&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;37.776&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Mapbox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'San Francisco, California'&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'map'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;center&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;96&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;37.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;zoom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;sources&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;OSM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;raster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;tiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'http://a.tile.openstreetmap.org/{z}/{x}/{y}.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;tileSize&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;layers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OSM&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;raster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;source&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;OSM&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;geojson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// Create element for marker from template&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'marker'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;importNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firstElementChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bottom'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setLngLat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;geometry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;coordinates&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setPopup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mapboxgl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Popup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;anchor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bottom'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// add popups&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;h3&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/h3&amp;gt;&amp;lt;p&amp;gt;'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;/p&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;マーカーとして使用する HTML 要素を &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; タグで用意しておきます。&lt;/li&gt;
  &lt;li&gt;マーカーごとに &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; から要素を生成(&lt;code class=&quot;highlighter-rouge&quot;&gt;importNode&lt;/code&gt; で複製しないと同じ要素が使い回されるので注意)してラベルを設定、その要素から MapBox の Marker を生成します。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;※地図を OpenStreetMaps にしているのは、MapBox の地図を表示するには AccessToken を設定する必要があるためです。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Add custom markers in Mapbox GL JS&lt;/td&gt;
          &lt;td&gt;Help&lt;/td&gt;
          &lt;td&gt;Mapbox](https://docs.mapbox.com/help/tutorials/custom-markers-gl-js/)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hinoshita.hatenadiary.com/entry/2018/07/31/163225&quot;&gt;mapbox-gl.jsでOSMを表示 - hinosita’s diary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 24 Feb 2020 07:30:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2020/02/24/386da362df3ecc0157e2/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2020/02/24/386da362df3ecc0157e2/</guid>
        
        
        <category>JavaScript</category>
        
        <category>geo</category>
        
        <category>mapbox</category>
        
        <category>mapbox-gl-js</category>
        
        <category>map</category>
        
      </item>
    
      <item>
        <title>Debugger for Chrome の launch で Google  アカウントでのログインができなくなった件</title>
        <description>&lt;p&gt;Firebase Auth を使った Web アプリを VSCode にて開発中、昨年(2019年)末からだと思うのですけど、Google アカウントでのログインができなくなったことに気づきました。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;あ、これを書いてる時点の Chrome バージョンは 80.0.3987.106（Official Build） （64 ビット）で、OS は Windows 10 Pro で依然として再現しています。&lt;/p&gt;

&lt;p&gt;Web アプリ開発で、VSCode に &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome&quot;&gt;Debugger for Chrome&lt;/a&gt; を追加して  &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; に次のように記述する方法はよく知られています。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Debug with Chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4200&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webRoot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;が、これで起動される Chrome では、Google アカウントでのログインができず、次のようなエラーになってしまいます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/0a705bb3-7981-a565-37e4-5ddc7b0d1b0c.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;なぜこれが発生するのかは私は完全に理解していませんが、起動された Chrome がセキュリティ要件を満たさないものと推測されます。（同じ時期に、Google アカウントを利用したゲームにログインできなくなった、というような話題を主に海外で発見しました。）&lt;/p&gt;

&lt;h2 id=&quot;解決方法&quot;&gt;解決方法&lt;/h2&gt;

&lt;p&gt;ということをツイートしたら、有用な情報を頂きました。ありがとうございます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;ん、私はなんか出来てますね。&lt;br /&gt;Debugger用にprofileを分けてるからっていうのもあるかもしれません。&lt;br /&gt;&amp;quot;webRoot&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,&lt;br /&gt;&amp;quot;sourceMaps&amp;quot;: true,&lt;br /&gt;&amp;quot;userDataDir&amp;quot;: &amp;quot;${workspaceRoot}/.vscode/chrome&amp;quot;,&lt;br /&gt;こんな感じで、プロファイルを.vscode以下に作るようにしてます。&lt;/p&gt;&amp;mdash; ちゅうこ (@y_chu5) &lt;a href=&quot;https://twitter.com/y_chu5/status/1228329982021095427?ref_src=twsrc%5Etfw&quot;&gt;February 14, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;さらに調べたところ、  &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; に次のように &lt;code class=&quot;highlighter-rouge&quot;&gt;userDataDir&lt;/code&gt; を追記することで解決できました。&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Debug with Chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:4200&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webRoot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceFolder}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;userDataDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;userDataDir&quot;: &quot;&quot;&lt;/code&gt; と空文字を指定すると、起動する Chrome がいつものユーザー、いつものプロファイルになり、Google アカウントでのログインも行えるようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e0a3c886-482d-0577-5209-00892e5d4746.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注意点は、この指定で起動される Chrome は、普段使いの Chrome が既に起動済の場合は、そのプロセスを流用する、ということです。&lt;/p&gt;

&lt;p&gt;そのため、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;開発中のアプリが死ぬと普段使いのタブも道連れに死ぬ&lt;/li&gt;
  &lt;li&gt;普段使いの Chrome もデバッグ用のポートを開けておかないとデバッグできない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という注意点があります。&lt;/p&gt;

&lt;p&gt;普段使う Chrome のショートカットに引数を追加しておきます（最初から付いてたっけ？）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8ee7f851-730b-e6d6-a792-7e35792891fc.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;C:\Program Files (x86)\Google\Chrome\Application\chrome.exe&quot; --profile-directory=Default --remote-debugging-port=9222
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;その他の解決方法&quot;&gt;その他の解決方法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/microsoft-edge/visual-studio-code/debugger-for-edge&quot;&gt;Debugger for Edge (Chromium)&lt;/a&gt; を使う&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=firefox-devtools.vscode-firefox-debug&quot;&gt;Debugger for Firefox&lt;/a&gt; を使う&lt;/li&gt;
  &lt;li&gt;launch ではなく &lt;a href=&quot;https://github.com/Microsoft/vscode-chrome-debug#attach&quot;&gt;&lt;strong&gt;attach&lt;/strong&gt;&lt;/a&gt; を使う&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Debugger for Edge でも問題を解決することができました。&lt;br /&gt;
Debugger for Firefox は未確認で「たぶん解決できるだろう」という程度です。&lt;br /&gt;
&lt;strong&gt;attach&lt;/strong&gt; は launch より面倒な感じがして試してません、みんな常用してるのでしょうか。。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/microsoft/vscode-chrome-debug/blob/master/README.md&quot;&gt;vscode-chrome-debug/README.md at master · microsoft/vscode-chrome-debug&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://chrome.half-moon.org/43.htm&quot;&gt;起動オプション - Google Chrome まとめWiki&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ics.media/entry/11356/&quot;&gt;Visual Studio CodeでのJSのデバッグ方法（2018年版） - ICS MEDIA&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 15 Feb 2020 07:30:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2020/02/15/d090838479eab90f4abb/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2020/02/15/d090838479eab90f4abb/</guid>
        
        
        <category>VSCode</category>
        
        <category>JavaScript</category>
        
        <category>Firebase</category>
        
        <category>FirebaseAuth. googleapi</category>
        
      </item>
    
      <item>
        <title>先輩に捧げる全国の飛び地リストを作る（市区町村編）</title>
        <description>&lt;p&gt;先輩が「飛び地を訪れる」のが趣味&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; とのことなので、全国の飛び地を調べてみました。&lt;br /&gt;
「飛び地のまとめサイト」なんかも既にありますが、せっかく国土地理院さんが協力されているので、ここでは国土地理院が提供する地図データを使って飛び地を抽出してみましょう。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;結果だけ見たい人は &lt;a href=&quot;https://github.com/amay077/japan_tobichi/tree/master/out&quot;&gt;&lt;strong&gt;ココ&lt;/strong&gt;&lt;/a&gt; の適当なファイルをクリックしてみてください。ファイル名の連番は &lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html&quot;&gt;都道府県コード&lt;/a&gt; です。&lt;/p&gt;

&lt;h2 id=&quot;使用する地図データと対象とする行政区画&quot;&gt;使用する地図データと対象とする行政区画&lt;/h2&gt;

&lt;p&gt;国土地理院が提供する「地球地図日本」の「行政界」データを使います。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gsi.go.jp/kankyochiri/gm_jpn.html&quot;&gt;地球地図日本｜国土地理院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このデータに含まれる行政界は「市区町村」なのでそれを対象とします（町丁目レベルの細かい飛び地は対応できません）。&lt;br /&gt;
また、データの精度は高くないので、市区町村レベルでは微小とされる細かな飛び地は拾えないものと思います。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;この地球地図日本のサイトから、「第2.2版ベクタ（2016年公開）／全レイヤ」のファイルをダウンロードして解凍します。&lt;/li&gt;
  &lt;li&gt;解凍してできたファイル群の内、&lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.shp&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.shx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.dbf&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.prj&lt;/code&gt; の 4つ のファイルをZIP圧縮して、ファイル名を &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.zip&lt;/code&gt; とします（polbnda_jpn.xxx が「行政界」のポリゴンデータ(Polygon Boundary Japan の略と思われる)なので、他のは不要です）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.zip&lt;/code&gt; というファイル、 https://mapshaper.org/ というサイトを開いて、ドラッグ＆ドロップすると、その内容が見られます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/c27be93d-74f7-77d9-6f1b-73cc67246373.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;mapshaper-で飛び地を確認&quot;&gt;MapShaper で飛び地を確認&lt;/h2&gt;

&lt;p&gt;このデータが本当に使用に耐えられるものか、引き続き MapShaper で確認してみましょう。&lt;/p&gt;

&lt;p&gt;例えば「千葉県船橋市」。この市は大きな「本体ポリゴン」の他に、3つ の「サブポリゴン」を持っています。&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;本体ポリゴン&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;サブポリゴン&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8beadd40-0219-eb7b-badc-1b9b23b0af53.png&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8b9dde48-5275-85b0-8db5-fb2d88730b86.png&quot; style=&quot;max-width:100%;&quot; /&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;左上に表示される属性情報を見てみると次のような特徴がありそうです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nam: 都道府県名&lt;/li&gt;
  &lt;li&gt;laa: 市区町村名&lt;/li&gt;
  &lt;li&gt;adm_code: 市区町村コード&lt;/li&gt;
  &lt;li&gt;pop: 人口(ただしサブポリゴンの場合は、&lt;code class=&quot;highlighter-rouge&quot;&gt;-89999999&lt;/code&gt; が入る&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上を踏まえると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本体ポリゴン: &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; の値が 0以上&lt;/li&gt;
  &lt;li&gt;サブポリゴン: &lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; の値が 0未満&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という雑な条件で判定できそうです。&lt;/p&gt;

&lt;p&gt;尚、このデータの詳細な仕様は、&lt;a href=&quot;https://github.com/globalmaps/specifications/blob/master/README.md&quot;&gt;Global Map Specifications&lt;/a&gt; に置いてある PDF で確認できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; については、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;-99999999 Unknown &lt;br /&gt;
-89999999 *1 Attributed in the main polygon&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書かれているのでまあよいでしょう。&lt;/p&gt;

&lt;h2 id=&quot;飛び地の定義&quot;&gt;「飛び地」の定義&lt;/h2&gt;

&lt;p&gt;さて、本体ポリゴンとサブポリゴン群を識別することができましたが、ところで「飛び地」とは何でしょう？&lt;br /&gt;
幾何学形状だけを見れば、陸地続きの離れた地域も、「島」も飛び地とみなせます。&lt;br /&gt;
また、他の行政界領域に空いた「穴」のみを飛び地とみなしたい人も居るかもですね。&lt;/p&gt;

&lt;p&gt;ここでは、先輩が訪れやすいように、「島」は除外して「陸地続きの離れた地域」を「飛び地」とすることにします。&lt;br /&gt;
&lt;del&gt;上の船橋市の例では南にある「島」のサブポリゴンは飛び地とみなしません。&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;処理に不具合があったので、「サブポリゴンと隣接するサブポリゴン」は飛び地とする事にしました。たぶん島の多い地域ではカウントが増えます。&lt;/p&gt;

&lt;p&gt;データの下調べは十分に行えたので、このデータを使って飛び地を抽出するプログラムを作成します。&lt;/p&gt;

&lt;h2 id=&quot;必要な環境など&quot;&gt;必要な環境など&lt;/h2&gt;

&lt;h3 id=&quot;環境&quot;&gt;環境&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://nodejs.org/ja/&quot;&gt;node.js&lt;/a&gt;: v12.14.1 以上&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;: v3.7.3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TypeScript/JavaScript を使うので Windows でも macOS でも Linux でも OK なはずです。&lt;/p&gt;

&lt;h3 id=&quot;主な使用ライブラリ&quot;&gt;主な使用ライブラリ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/shpjs&quot;&gt;shpjs&lt;/a&gt;: Shapefile(準備した &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.zip&lt;/code&gt;) を読み込んで GeoJson 形式に変換する JavaScript ライブラリ&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/@turf/turf&quot;&gt;turfjs&lt;/a&gt;: 地理空間データの接合判定とか距離計算とかいろいろできちゃうすごい JavaScript ライブラリ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらがあれば8割くらいは出来たも同然です。&lt;/p&gt;

&lt;h2 id=&quot;実装&quot;&gt;実装&lt;/h2&gt;

&lt;p&gt;そしてできたものがこちらになります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/japan_tobichi&quot;&gt;amay077/japan_tobichi: 国土地理院の地球地図日本データから飛び地を抽出するツール&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;使い方&quot;&gt;使い方&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gsi.go.jp/kankyochiri/gm_jpn.html&quot;&gt;地球地図日本データ&lt;/a&gt; 第2.2版ベクタ（2016年公開）の「全レイヤ」をダウンロードする&lt;/li&gt;
  &lt;li&gt;ファイルを解凍して &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.*&lt;/code&gt; だけを圧縮して &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.zip&lt;/code&gt; とする&lt;/li&gt;
  &lt;li&gt;このリポジトリを Clone する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.zip&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;tool/assets&lt;/code&gt; ディレクトリに置く&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tool&lt;/code&gt; ディレクトリで &lt;code class=&quot;highlighter-rouge&quot;&gt;npm ci&lt;/code&gt; を行う&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run exec&lt;/code&gt; を行う&lt;/li&gt;
  &lt;li&gt;・・・しばらく待つ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;../out&lt;/code&gt; ディレクトリに &lt;code class=&quot;highlighter-rouge&quot;&gt;*.geojson&lt;/code&gt; ファイルが出力される&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;実装の簡単な解説&quot;&gt;実装の簡単な解説&lt;/h2&gt;

&lt;p&gt;すべて &lt;code class=&quot;highlighter-rouge&quot;&gt;src/tobichi-extractor.ts&lt;/code&gt; で行っています。&lt;/p&gt;

&lt;h3 id=&quot;1-shapefile-の読み込み&quot;&gt;1. Shapefile の読み込み&lt;/h3&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// import * as shp from 'shpjs';&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Shapefile を読み込み&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../assets/polbnda_jpn.zip'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geoJson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geoJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;shpjs&lt;/code&gt; を使って &lt;code class=&quot;highlighter-rouge&quot;&gt;polbnda_jpn.zip&lt;/code&gt; を読み込みます。ファイルパスを直接指定できなかったので、自力でバイナリとして読んでそのデータを渡します。&lt;/p&gt;

&lt;p&gt;読み込まれた &lt;code class=&quot;highlighter-rouge&quot;&gt;geoJson&lt;/code&gt; は GeoJson 形式の FeatureCollection です。&lt;/p&gt;

&lt;h3 id=&quot;2-本体ポリゴンとサブポリゴンの識別&quot;&gt;2. 本体ポリゴンとサブポリゴンの識別&lt;/h3&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;geoJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;features&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;99999999&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// UNKNOWN は除外&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mainFeatures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subFeatures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;UNKNOWN&lt;/code&gt; なデータを除外し、Feature を識別できるように &lt;code class=&quot;highlighter-rouge&quot;&gt;_no&lt;/code&gt; に採番しておきます。&lt;/p&gt;

&lt;p&gt;「2. 本体ポリゴンとサブポリゴンの識別」で定義したように、&lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt; 値で本体かサブを判定して、それぞれ別々のリストにしておきます。&lt;/p&gt;

&lt;h3 id=&quot;3-サブポリゴン群から飛び地とみなすポリゴンのみを抽出&quot;&gt;3. サブポリゴン群から「飛び地」とみなすポリゴンのみを抽出&lt;/h3&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// import * as turf from '@turf/turf';&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tobichiSubFeatures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sourceFeatures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outerF&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 自分は除外&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outerF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_no&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_no&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;turf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;booleanDisjoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;outerF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;del&gt;本体ポリゴン群と「接している」サブポリゴンは「飛び地」とみなしています。&lt;/del&gt;&lt;br /&gt;
他のポリゴン群と「接している」サブポリゴンは「飛び地」とみなしています。&lt;/p&gt;

&lt;p&gt;「接している」の判定は &lt;a href=&quot;http://turfjs.org/docs/#booleanDisjoint&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;turf.booleanDisjoint&lt;/code&gt;&lt;/a&gt; を使います。これは「図形と図形が離れているか？」を調べる関数ですが、これが &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; であれば「接している」とみなせます(他によい関数があるかも知れません)。&lt;/p&gt;

&lt;p&gt;&lt;del&gt;また、本体ポリゴン群のみ判定に使っているのは、冒頭で表示した千葉県船橋市の南の島のような、「他のサブポリゴンに接している島」を除外するためです。&lt;/del&gt;&lt;br /&gt;
↑この条件は、青森県中泊町のように本州の端っこでサブポリゴンにしか接していないサブポリゴンが意図せず除外されてしまうのでやめました。&lt;/p&gt;

&lt;p&gt;本体ポリゴンがサブポリゴンを内包している(本体ポリゴンの一部が他市区町村の飛び地である)場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;turf.disjoint&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; を返すのかは未検証ですなぜなら、このような場合、本体ポリゴンには「穴」が適切に空いているためです&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;turf.disjoint&lt;/code&gt; は穴も適切に判定しているようです。&lt;/p&gt;

&lt;p&gt;そしてこの「総当りの」二重ループはとても遅いですが、我慢できる範囲なので今は最適化はしません。&lt;/p&gt;

&lt;p&gt;ここで得られた &lt;code class=&quot;highlighter-rouge&quot;&gt;tobichiSubFeatures&lt;/code&gt; が、全国市区町村の「飛び地」のリストです。&lt;br /&gt;
あとはこれを本体ポリゴンと組にして GeoJson ファイルに出力するのが、後続の処理ですが、ここでは説明を割愛します。&lt;/p&gt;

&lt;h2 id=&quot;飛び地を地図で見てみよう&quot;&gt;飛び地を地図で見てみよう&lt;/h2&gt;

&lt;p&gt;処理を実行した結果の &lt;code class=&quot;highlighter-rouge&quot;&gt;.geojson&lt;/code&gt; ファイル群は、&lt;code class=&quot;highlighter-rouge&quot;&gt;tool&lt;/code&gt; と同じレベルの &lt;code class=&quot;highlighter-rouge&quot;&gt;out&lt;/code&gt; というディレクトリに出力されます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tobichi_00_all.geojson&lt;/code&gt; … すべての飛び地とその本体ポリゴンが格納された GeoJson ファイル&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tobichi_{nn}.geojson&lt;/code&gt; … 都道府県ごとの飛び地とその本体ポリゴンが格納された GeoJson ファイル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このファイルを地図上に表示する方法を 2つ 紹介します。&lt;/p&gt;

&lt;h3 id=&quot;github-で見る&quot;&gt;GitHub で見る&lt;/h3&gt;

&lt;p&gt;GitHub は &lt;code class=&quot;highlighter-rouge&quot;&gt;.geojson&lt;/code&gt; ファイルを自動的に Mapbox の地図に描画してくれます。&lt;/p&gt;

&lt;p&gt;私が出力してコミットしておいた https://github.com/amay077/japan_tobichi/tree/master/out の任意のファイルをクリックすると、それぞれ地図上に表示ができます。&lt;/p&gt;

&lt;p&gt;下図は千葉県の &lt;code class=&quot;highlighter-rouge&quot;&gt;tobichi_12.geojson&lt;/code&gt; の船橋市付近を表示してみた例です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/599bdfbf-4cee-08b7-1a9c-6e765e3f3996.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;地理院地図で見る&quot;&gt;地理院地図で見る&lt;/h3&gt;

&lt;p&gt;最後まで国土地理院さんにお世話になりましょう。&lt;br /&gt;
国土地理院が提供する「地理院地図」というサービスがあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://maps.gsi.go.jp/&quot;&gt;地理院地図｜国土地理院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブラウザで上記URLを開いて、ローカルの任意の &lt;code class=&quot;highlighter-rouge&quot;&gt;tobichi_xx.geojson&lt;/code&gt; ファイルを、表示されている地図へドラッグ＆ドロップします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8161e20e-f3b5-1814-11da-199dbb75626f.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;すると上図のように &lt;code class=&quot;highlighter-rouge&quot;&gt;geojson&lt;/code&gt; ファイルが地図に描画されます。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;tobichi_00_all.geojson&lt;/code&gt; は少し負荷が高いので、都道府県毎のファイルの方が快適です。&lt;br /&gt;
こちらも飛び地ポリゴンと本体ポリゴンが描画され、同じ市区町村は同じ色になります。&lt;/p&gt;

&lt;p&gt;複数の &lt;code class=&quot;highlighter-rouge&quot;&gt;.geojson&lt;/code&gt; ファイルをドロップして表示できるし、右上の「機能」→ ツール → 作図・ファイル で、表示の ON/OFF や図形やスタイルの変更もできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/15b32384-db02-f733-8ae7-101a2cf119af.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;背景地図がごちゃごちゃして見づらいならば、右上の「情報」→ ベースマップ で、「白地図」や「淡色地図」を選んでもよいし、ベースマップを選んでから、グレースケールON や 透過率を設定することもできます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e1ef798a-6533-a870-0699-8eab41d32b32.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;衛星(航空)写真や、先輩と同じように国土地理院の地図が見たい人は、地理院地図を使うのがオススメです。&lt;/p&gt;

&lt;h2 id=&quot;statistics&quot;&gt;Statistics&lt;/h2&gt;

&lt;p&gt;抽出したデータをいろいろ集計してみました。&lt;/p&gt;

&lt;p&gt;お断り：地図データの精度により、飛び地の数や面積、距離など、実際とは異なりますので予めご了承ください。&lt;/p&gt;

&lt;p&gt;飛び地ポリゴンの判定処理を変更したのと件数に本体ポリゴンが含まれていたので再集計しました。&lt;/p&gt;

&lt;h3 id=&quot;飛び地の数&quot;&gt;飛び地の数&lt;/h3&gt;

&lt;p&gt;まず、全国市区町村レベルでの飛び地の総数は &lt;strong&gt;144&lt;/strong&gt; 箇所でした。&lt;/p&gt;

&lt;p&gt;都道府県毎で、最も飛び地を多く持つのは、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;27: 大阪府(11箇所)&lt;/li&gt;
  &lt;li&gt;46: 鹿児島県(10箇所)&lt;/li&gt;
  &lt;li&gt;06: 山形県(9箇所)&lt;/li&gt;
  &lt;li&gt;12: 千葉件(9箇所)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;でした。&lt;/p&gt;

&lt;p&gt;再集計したら大阪府が1位になってしまった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/f7580cd2-49a2-ce36-2222-d4a55cc9f07d.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;関西国際空港って、３つに割れとったんかい！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/883c15d0-d47f-577f-3c2a-ea30d60c948b.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3位の山形県を地理院地図で見てみましょう。一見するとそう飛び地が多くは見えませんが。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8dd99652-63e1-169a-d928-93ca211db38e.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拡大してみると・・・&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/b9996916-7a00-e9fb-74de-edeccd879459.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;山形県大江町、なかなか闇の深そうな飛び地をしておられます。写真で見ると田畑っぽいですね。。。&lt;br /&gt;
ちなみに市区町村毎の飛び地数でも山形県大江町が1位(6つ)でした。&lt;/p&gt;

&lt;p&gt;一方、飛び地がひとつも無い都道府県が 10 ありました。領地争いの少ない、平和な土地だったのでしょうか。。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;03: 岩手県&lt;/li&gt;
  &lt;li&gt;22: 静岡県&lt;/li&gt;
  &lt;li&gt;25: 滋賀県&lt;/li&gt;
  &lt;li&gt;29: 奈良県&lt;/li&gt;
  &lt;li&gt;31: 鳥取県&lt;/li&gt;
  &lt;li&gt;38: 愛媛県&lt;/li&gt;
  &lt;li&gt;40: 福岡県&lt;/li&gt;
  &lt;li&gt;41: 佐賀県&lt;/li&gt;
  &lt;li&gt;44: 大分県&lt;/li&gt;
  &lt;li&gt;45: 宮崎県&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;東京都もお台場などが飛び地扱いになりますね。練馬区の例の場所は精度上拾えませんが。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/6cd78b1c-e87c-a66c-d418-0d49ffc171ad.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;面積の大きい小さい飛び地&quot;&gt;面積の大きい／小さい飛び地&lt;/h3&gt;

&lt;p&gt;次に、「面積が最も小さい」飛び地は、宮城県仙台市 の飛び地で &lt;strong&gt;2,833㎡&lt;/strong&gt; でした。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/f7ad7fa3-597e-b7ed-b84f-f8592f84d8c3.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これは小っさ！ちなみに地理院地図では距離や面積の計測もできますよ。&lt;/p&gt;

&lt;p&gt;反対に「面積が最も大きな」飛び地は、やはり北海道、 北海道日高町 で、面積は &lt;strong&gt;564,806,056㎡&lt;/strong&gt; でした。ケタ違い。&lt;br /&gt;
尚、このランキングは上位3位を北海道が独占しました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/b6e8bff3-dfc6-b69c-31ac-f1d510bb48bf.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;地図で見ると本体よりデカいんじゃないかと思えます。お隣の伊達市の飛び地もそうですね。&lt;/p&gt;

&lt;p&gt;という事で次は「飛び地の方が本体よりデカい市区町村」を調べてみました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;7件&lt;/strong&gt; もありました。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;01233:北海道伊達市 - 本:175,055,053㎡ &amp;lt; 飛:274,726,478㎡&lt;/li&gt;
  &lt;li&gt;01601:北海道日高町 - 本:429,338,399㎡ &amp;lt; 飛:564,806,056㎡&lt;/li&gt;
  &lt;li&gt;10203:群馬県桐生市 - 本:137,068,936㎡ &amp;lt; 飛:138,857,m922㎡&lt;/li&gt;
  &lt;li&gt;20385:長野県南箕輪村 - 本:20,433,376㎡ &amp;lt; 飛:20,503,493㎡&lt;/li&gt;
  &lt;li&gt;21202:岐阜県大垣市 - 本:79,689,605㎡ &amp;lt; 飛:123,817,042㎡&lt;/li&gt;
  &lt;li&gt;27362:大阪府田尻町 - 本:2,479,536㎡ &amp;lt; 飛:3,343,210㎡&lt;/li&gt;
  &lt;li&gt;43212:熊本県上天草市 - 本:29,751,514㎡ &amp;lt; 飛:80,488,305㎡&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;北海道の２つはやはりとして、熊本県上天草市は本体小さスギィ！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/2dedd6b0-de5f-ca20-5e03-e41ad46e2062.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;地図で見ると、むしろ &lt;strong&gt;本体が島&lt;/strong&gt; なのですね。&lt;/p&gt;

&lt;p&gt;当初は、「都道府県ポリゴン群で一番面積が広いのが本体」などと思案していたので、これはよい発見でした、今後に活きます。&lt;/p&gt;

&lt;h3 id=&quot;本体から飛び地までの距離&quot;&gt;本体から飛び地までの距離&lt;/h3&gt;

&lt;p&gt;最後に、「本体と飛び地の距離」を調べてみました。&lt;/p&gt;

&lt;p&gt;まず、距離の遠いランキング。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;01601:北海道日高町 - 16km [^4]&lt;/li&gt;
  &lt;li&gt;01206:北海道釧路市 - 12km&lt;/li&gt;
  &lt;li&gt;34211:広島県大竹市 - 11km&lt;/li&gt;
&lt;/ol&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[^4]: [日本一離れた飛び地「北海道沙流郡日高町」&lt;/td&gt;
      &lt;td&gt;ココロココ 地方と都市をつなぐ・つたえる](https://cocolococo.jp/27311)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;北海道勢が安定のワン・ツー。&lt;br /&gt;
3位の 広島県大竹市 を見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e16f18e3-2756-1db6-3aa2-e31fe9c6af26.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「甲島」という島が、大竹市と岩国市で分け合う形になってますね。どうしてこうなった。&lt;/p&gt;

&lt;p&gt;ちなみに距離の算出は「頂点 vs 頂点」で行ってます。嘘、&lt;a href=&quot;http://turfjs.org/docs/#nearestPointOnLine&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;turf.nearestPointOnLine&lt;/code&gt;&lt;/a&gt; で行っており飛び地側は「線上の点」です。&lt;/p&gt;

&lt;p&gt;逆に、距離の近いランキング。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;08546:茨城県境町 - 0km&lt;/li&gt;
  &lt;li&gt;11100:埼玉県さいたま市 - 0km&lt;/li&gt;
  &lt;li&gt;14100:神奈川県横浜市 - 0.027km&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;おい 0km ってｗｗ&lt;br /&gt;
プログラムのバグかと思いましたが一応見てみます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/eb6cec48-e164-6832-0c43-49f9431eb050.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;んーなるほど！これはデータの精度のせいで、実際には離れていますね。ベースマップを見ると分かります。「境町飛地」とも書いてあるし。&lt;/p&gt;

&lt;p&gt;つかこの飛び地、すごい豪邸に見えるのだけど、「ポツンと豪邸」じゃない？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/0c2a0f0a-8f7a-002c-a3e7-035eb91e442c.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;おまけ１&quot;&gt;おまけ１&lt;/h3&gt;

&lt;p&gt;広島県広島市に穴が空いてるのに、この穴は隣の市の飛び地じゃないの？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/3b772c64-6562-efbb-8f37-a4299c90ac7f.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;と思ったら、&lt;a href=&quot;https://www.town.fuchu.hiroshima.jp/&quot;&gt;広島県安芸郡府中町&lt;/a&gt; はこの &lt;strong&gt;穴でしかない&lt;/strong&gt; のですね。四面楚歌じゃん。&lt;/p&gt;

&lt;h3 id=&quot;おまけ２&quot;&gt;おまけ２&lt;/h3&gt;

&lt;p&gt;山梨県の富士山付近に、小さな飛び地があります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/499fc56e-fdd8-786f-bdb7-a18a72dfd328.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;富士河口湖町の飛び地のようです。富士山へ向かう道の途中にも見えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8b3bfaad-85a0-bd65-5b7f-732edf2d1972.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;拡大してみると、「小室浅間神社（おむろせんげんじんじゃ）」という神社があるようです。&lt;/p&gt;

&lt;p&gt;この神社だけが富士河口湖町なのか？と思いましたが、&lt;a href=&quot;http://www.fgo.jp/~yabusame/&quot;&gt;神社のホームページ&lt;/a&gt;を見ると 富士吉田市 と書いてあるし、飛び地とは関係ないのかも知れません、謎です。。。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;国土地理院の地図データを使って、プログラムで「飛び地」を抽出してみました。&lt;/p&gt;

&lt;p&gt;飛び地の発生理由はさまざまですが、大きな要因の一つは「平成の大合併」と呼ばれる 2005年頃 の市区町村合併ラッシュです。&lt;/p&gt;

&lt;p&gt;その前後の様子が↓の資料で確認できます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gsi.go.jp/KOKUJYOHO/gappei_index.htm&quot;&gt;全国都道府県別・市町村合併新旧一覧図(平成15年以降)｜国土地理院&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;飛び地となっている地域と併せて、この資料を見てみるとなかなか面白いです。&lt;/p&gt;

&lt;p&gt;今回は市区町村レベルで行いましたが、もっと詳細な地図データを使えば、町丁目界での抽出も可能かなと思います。ただしデータ量がバクハツするので線形に処理している箇所で空間インデックスを使うなどの工夫が必要です。&lt;/p&gt;

&lt;h3 id=&quot;より詳細な境界データ&quot;&gt;より詳細な境界データ&lt;/h3&gt;

&lt;h4 id=&quot;国土数値情報&quot;&gt;国土数値情報&lt;/h4&gt;

&lt;p&gt;詳細なデータとしては、国土地理院も所属する国土交通省が &lt;a href=&quot;http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-v2_3.html&quot;&gt;国土数値情報 行政区域データ&lt;/a&gt; というデータを提供しています。&lt;/p&gt;

&lt;h4 id=&quot;国土地理院ベクトルタイル&quot;&gt;国土地理院ベクトルタイル？&lt;/h4&gt;

&lt;p&gt;あるいは、地理院地図のベクトル地図版およびベクトルタイルデータが配信実験中です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://maps.gsi.go.jp/development/vt.html&quot;&gt;地理院地図｜ベクトルタイルとその提供実験について&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;詳細な行政界のベクトルタイルが配信されたなら、そこから町丁目界のポリゴンを取得することが可能になるかも知れません。&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h4 id=&quot;統計gisの境界データ&quot;&gt;統計GISの境界データ&lt;/h4&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[統計GISデータダウンロード&lt;/td&gt;
      &lt;td&gt;政府統計の総合窓口](https://www.e-stat.go.jp/gis/statmap-search?page=1&amp;amp;type=2&amp;amp;aggregateUnitForBoundary=A&amp;amp;toukeiCode=00200521&amp;amp;toukeiYear=2015&amp;amp;serveyId=A002005212015&amp;amp;coordsys=1&amp;amp;format=shape) では、かなり精度の高いの町丁目界のポリゴンデータがダウンロードできるようです。こちらも国土地理院の提供で、細かな飛び地を拾える可能性があります。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e987c4e9-0330-f3a0-2026-2e979824df62.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;また、同じデータが &lt;a href=&quot;https://niaesvic.dc.affrc.go.jp/dataset/h27-census-polygon&quot;&gt;H27国勢調査（小地域）境界データ - データセット - NIAES VIC&lt;/a&gt; で &lt;strong&gt;GeoJSON 変換済&lt;/strong&gt; で提供されています。&lt;a href=&quot;https://twitter.com/wata909/status/1222777564558548992&quot;&gt;情報ありがとうございます！&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;私は、実際に街歩きをするよりも、このようなデータをこねくり回す方が好きなので、この方面からお手伝いできたらよいなと思います。&lt;/p&gt;

&lt;h2 id=&quot;バグってた直した&quot;&gt;バグってた→直した&lt;/h2&gt;

&lt;h3 id=&quot;青森県中泊町&quot;&gt;青森県中泊町&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/amay077/japan_tobichi/blob/4bcc49778d0e9c0f2c9e815663aee40e003f74fc/out/tobichi_02.geojson&quot;&gt;青森県&lt;/a&gt; 中泊町は飛び地のはずですよね。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/60459310-6cca-54bf-dba9-8276f7ef7b7b.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;飛び地判定ロジックを直したので正しく &lt;a href=&quot;https://github.com/amay077/japan_tobichi/blob/e0279eab4ee787bdad6509441b29ee46be87d1bd/out/tobichi_02.geojson&quot;&gt;拾えました&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/2a3c63af-2b29-913d-418b-41ef13f9c09f.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;テレビで先輩が訪れていた地域は厳密?には飛び地でなく「細長く入り組んだ境界」でしたが、&lt;a href=&quot;https://comic-fuz.com/series/1856&quot;&gt;FUZ&lt;/a&gt; で観たらちゃんと「飛び地」でしたね。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;GeoJson の Polygon は「外周」「穴(群)」の座標群を持つ事ができ、外周は座標が時計回り、「穴(群)」は反時計周りとなっています。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;ベクトルタイルとは言え分析用ではなく「表示用」と思われるため、面(ポリゴン)データは提供されないかも知れません。 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 01 Feb 2020 07:30:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2020/02/01/2c4d2234b7f8b0e11f4b/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2020/02/01/2c4d2234b7f8b0e11f4b/</guid>
        
        
        <category>geo</category>
        
        <category>map</category>
        
        <category>Turf.js</category>
        
        <category>JavaScript</category>
        
        <category>TypeScript</category>
        
      </item>
    
      <item>
        <title>CLI のテンプレートプロジェクト by node and TypeScript</title>
        <description>&lt;p&gt;node で CLI(Command Line Interface) を開発する機会が数回あって、せっかくなのでテンプレートプロジェクトとしてまとめてみた。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;テンプレートプロジェクト&quot;&gt;テンプレートプロジェクト&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/node-cli-sample&quot;&gt;amay077/node-cli-sample: Sample npm project for development your CLI&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;必要なモノ&quot;&gt;必要なモノ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;nodejs: v11.13.0+&lt;/li&gt;
  &lt;li&gt;typescript: v3.7.3+&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;試し方&quot;&gt;試し方&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;上記のリポジトリを Clone する&lt;/li&gt;
  &lt;li&gt;リポジトリのディレクトリに cd して &lt;code class=&quot;highlighter-rouge&quot;&gt;npm ci&lt;/code&gt; する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm link&lt;/code&gt; する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;source ~/.bash_profile&lt;/code&gt; を行うかまたはターミナルを再起動する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;これでどのディレクトリでも &lt;code class=&quot;highlighter-rouge&quot;&gt;my-great&lt;/code&gt; コマンドが使用できるようになる。&lt;/p&gt;

&lt;h4 id=&quot;例&quot;&gt;例&lt;/h4&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; my-great hello &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; Echizen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; Ooka &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; 42
&lt;span class=&quot;go&quot;&gt;
Hello Echizen Ooka.
You're 42 years old.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-terminal highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; my-great something wrong param
&lt;span class=&quot;go&quot;&gt;
Command Line Interface for My great service

  Sample for CLI.

Commands

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;  my-great hello -f &amp;lt;first_name&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &amp;lt;second_name&amp;gt;   Say Hello.
&lt;span class=&quot;go&quot;&gt;  my-great version                                  Show version.
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;アンインストール&quot;&gt;アンインストール&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm uninstall -g @amay/my-great-cli
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;要点&quot;&gt;要点&lt;/h2&gt;

&lt;h3 id=&quot;コマンドライン引数の解析と使用方法の表示&quot;&gt;コマンドライン引数の解析と使用方法の表示&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/command-line-args&quot;&gt;command-line-args - npm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/command-line-usage&quot;&gt;command-line-usage - npm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/yargs&quot;&gt;yargs&lt;/a&gt; とかいろいろあったけど、自分的に使いやすかったのでこれを選択。&lt;/p&gt;

&lt;h2 id=&quot;プログラム構成&quot;&gt;プログラム構成&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-great hello -f &amp;lt;first_name&amp;gt; -s &amp;lt;second_name&amp;gt;   Say Hello.
my-great version                                  Show version.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のように、第一引数を「コマンド」とし、第2引数以降をそのコマンド専用の引数群としたかったので、&lt;code class=&quot;highlighter-rouge&quot;&gt;index.ts&lt;/code&gt; で第一引数のみを parse して取得し、コマンド毎に &lt;code class=&quot;highlighter-rouge&quot;&gt;command-xxxx.ts&lt;/code&gt; へ委譲している。&lt;/p&gt;

&lt;p&gt;command-line-args では &lt;code class=&quot;highlighter-rouge&quot;&gt;commandLineArgs(this.paramDef, { partial: true })&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;partial:true&lt;/code&gt; を設定すると、引数定義(&lt;code class=&quot;highlighter-rouge&quot;&gt;paramDef&lt;/code&gt;) に存在しない引数があっても無視する。&lt;/p&gt;

&lt;h3 id=&quot;cli-コマンド名&quot;&gt;cli コマンド名&lt;/h3&gt;

&lt;p&gt;cliコマンド名 &lt;code class=&quot;highlighter-rouge&quot;&gt;my-great&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;bin:&lt;/code&gt; で指定している。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;@amay/my-great-cli&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;＜省略＞&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;my-great&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build/index.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;＜省略＞&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ビルドされた &lt;code class=&quot;highlighter-rouge&quot;&gt;./build/index.js&lt;/code&gt; を指すように設定している。&lt;br /&gt;
ちなみに npm run 経由で node を実行する場合は、引数の前に &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt; を付ける（例: &lt;code class=&quot;highlighter-rouge&quot;&gt;node ./build/index.js -- version&lt;/code&gt;）。&lt;/p&gt;

&lt;h3 id=&quot;必須引数のチェック&quot;&gt;必須引数のチェック&lt;/h3&gt;

&lt;p&gt;command-line-args では &lt;a href=&quot;https://github.com/75lb/command-line-args/wiki/Validation&quot;&gt;引数の必須チェックを自力で行わなければならない&lt;/a&gt; ようなので、定義体の &lt;code class=&quot;highlighter-rouge&quot;&gt;paramDef&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;require: boolean&lt;/code&gt; を追加し、パースした実際の引数である &lt;code class=&quot;highlighter-rouge&quot;&gt;XxxxConfig&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;require = true&lt;/code&gt; な項目が含まれているかをチェックするようにした。&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Valid require params&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requiresNotSetted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paramDef&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;`--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requiresNotSetted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`Param: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;requiresNotSetted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; is required.`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;`------------------------------------`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;optionList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;paramDef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;usg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commandLineUsage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;usg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;kebab-case-vs-camelcase-vs--snake_case&quot;&gt;kebab-case VS camelCase VS  snake_case&lt;/h3&gt;

&lt;p&gt;コマンドの引数は kebab-case がデファクトスタンダードの模様。&lt;br /&gt;
command-line-args では &lt;code class=&quot;highlighter-rouge&quot;&gt;commandLineArgs(this.paramDef, { camelCase: true })&lt;/code&gt; とすると、&lt;code class=&quot;highlighter-rouge&quot;&gt;--first-name&lt;/code&gt; に渡された引数を、&lt;code class=&quot;highlighter-rouge&quot;&gt;firstName&lt;/code&gt; 変数に格納してくれる。&lt;/p&gt;

&lt;p&gt;が、前述の必須引数のチェックが(定義体と実体の変数名が異なるため)正しく機能しなくなるので妥協案として snake_case の &lt;code class=&quot;highlighter-rouge&quot;&gt;--first_name&lt;/code&gt; を採用している。&lt;/p&gt;

&lt;h3 id=&quot;コマンドを追加するには&quot;&gt;コマンドを追加するには&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.ts&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;CommandType&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;xxxx&lt;/code&gt; を増やす&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;command-xxx.ts&lt;/code&gt;(&lt;code class=&quot;highlighter-rouge&quot;&gt;CommandXxxx&lt;/code&gt; クラス) を作る&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;index.ts&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;commandMap&lt;/code&gt; に追加する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mainUsage&lt;/code&gt; になんか書く&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/toshi-toma/items/ea76b8894e7771d47e10&quot;&gt;Node.jsでのCLIの作り方と便利なライブラリまとめ - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/qrusadorz/items/db042f65be95f34d6271&quot;&gt;npm runでコマンドライン引数を渡す方法 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 24 Jan 2020 07:30:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2020/01/24/c19ab5304176326d584a/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2020/01/24/c19ab5304176326d584a/</guid>
        
        
        <category>Node.js</category>
        
        <category>JavaScript</category>
        
        <category>TypeScript</category>
        
        <category>cli</category>
        
      </item>
    
      <item>
        <title>トグルスイッチとチェックボックスの違い</title>
        <description>&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[トグルスイッチの誤用をやめよう&lt;/td&gt;
      &lt;td&gt;UX MILK](https://uxmilk.jp/83368) を読んでの私見です。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;文脈上の状態-vs-システムの状態&quot;&gt;文脈上の状態 vs システムの状態&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;トグルスイッチはシステムの状態を管理し、トグルボタンは文脈上の状態を管理します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最初の例はちょっと賛同しかねた。&lt;br /&gt;
「状態」の適用範囲で、スクショにある &lt;code class=&quot;highlighter-rouge&quot;&gt;UISegmentedControl&lt;/code&gt; か &lt;code class=&quot;highlighter-rouge&quot;&gt;UISwitch&lt;/code&gt; を使い分ける、というのは、それが成されている事例があっても気づけない気がする。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ユーザーはスイッチをオンにするとすぐに効果が現れると期待します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは賛同する。&lt;br /&gt;
私は、「スイッチ」とは、家の壁にある &lt;a href=&quot;https://www.monotaro.com/p/4105/7816/?utm_medium=cpc&amp;amp;utm_source=Adwords&amp;amp;utm_campaign=246-833-4061_6515858576&amp;amp;utm_content=86698184788&amp;amp;utm_term=_380604181365_1o3_pla-799401264920&amp;amp;gclid=Cj0KCQiAiNnuBRD3ARIsAM8KmltAvZoTFj-Uwyy3x0KxSs2Pl-qTNgyJE2RfW4qMMouS7XSx2CHszdEaAjZZEALw_wcB&quot;&gt;こういうの&lt;/a&gt; をイメージしている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/20191121a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このスイッチは「押すとすぐに電気が付いたり消えたりする」事を期待する。&lt;br /&gt;
なので、スイッチを「状態を表現する」為だけに使われていると違和感を覚える。&lt;/p&gt;

&lt;p&gt;少し前に &lt;a href=&quot;https://github.com/amay077/XamMaterialTodo&quot;&gt;Xamarin.Forms を使って TODO アプリを作ってみた&lt;/a&gt; のだけど、当時の Xamarin.Forms には「チェックボックス」が無くて、まあいいやと思って「スイッチ」を使って、「タスクが完了したか」を示したのだが、アプリを実際に動かしてみると違和感ありまくりだった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/20191121b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;結局画像を使ってチェックボックスの ON/OFF を表現した(尚、現在の Xamarin.Forms には &lt;code class=&quot;highlighter-rouge&quot;&gt;CheckBox&lt;/code&gt; がある)。&lt;/p&gt;

&lt;p&gt;GMail とか、アイテムが一覧表示される画面でアイテムを一つまたは複数選択するとき、それが「スイッチ」ではなく「チェック」であるというのは、現実世界に置き換えても自然な表現だと思う。&lt;/p&gt;

&lt;h2 id=&quot;0か1の選択-vs-対立する選択&quot;&gt;0か1の選択 vs 対立する選択&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;スイッチは０か１の選択のためのもので、対立する選択のためのものではありません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは分かりやすいです、同意。&lt;/p&gt;

&lt;h2 id=&quot;状態-vs-行動&quot;&gt;状態 vs 行動&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;トグルスイッチをダウンロード用のボタンに使っています&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そりゃ NG でしょ、同意。&lt;/p&gt;

&lt;h2 id=&quot;スイッチを使うための３つの条件&quot;&gt;スイッチを使うための３つの条件&lt;/h2&gt;

&lt;p&gt;まとめ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;利用環境ではなくシステムの状態のトグルに使っている&lt;/li&gt;
    &lt;li&gt;対立的選択肢ではなくバイナリ選択肢を示している&lt;/li&gt;
    &lt;li&gt;行動を起こすのではなく、状態を有効化している&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;1 はよく分からん。&lt;br /&gt;
2 と 3 は同意。&lt;/p&gt;

&lt;p&gt;特に 3 の「行動を起こすのではなく、状態を有効化している」はミソだと思っていて、スイッチの操作が「何らかのアクションを起こす」のではなく「状態が変わる」という点。スイッチを ON にすると「電気を付ける」のではなく「部屋が明るくなる」という感覚か。&lt;br /&gt;
「同じじゃん」と思われるかもだけど、ちょっとした捉え方の違いが重要な気がした。&lt;/p&gt;

&lt;h2 id=&quot;おまけ-状態を変えようとしたけど変わらなかったスイッチはありか&quot;&gt;おまけ: 「状態を変えようとしたけど変わらなかったスイッチ」はありか？&lt;/h2&gt;

&lt;p&gt;この記事を読んでいて気づいたことがあったんだけど、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;スイッチを操作するとすぐに状態の変化が起こる&lt;/li&gt;
  &lt;li&gt;それは「状態を変化させるためにデータを変更する」事になる&lt;/li&gt;
  &lt;li&gt;では「データの変更ができない」事があるかもしれない(端末のストレージにアクセスできなかったり、通信不良でクラウド上のデータに書き込みできなかったり)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;結果として、「スイッチを ON にしたが、データの書き込みに失敗して、数秒後に OFF に戻った」という挙動になっちゃったりするのだけど、これはアリか無しか。&lt;/p&gt;

&lt;p&gt;現実世界では、冒頭に示したパッチンスイッチなら「無し」だけど、 &lt;a href=&quot;https://www.yodobashi.com/product/100000001000361665/?gad1=&amp;amp;gad2=g&amp;amp;gad3=&amp;amp;gad4=56278881131&amp;amp;gad5=3442618118066054801&amp;amp;gad6=1o7&amp;amp;gclid=Cj0KCQiAiNnuBRD3ARIsAM8KmlsgMbm36dHBhGJRD4reOPu2BbwsZeEZQc-Ln1mU5kYCJKO7zqIRmV4aAhkZEALw_wcB&amp;amp;xfr=pla&quot;&gt;こういう&lt;/a&gt; LED で ON/OFF 表現するスイッチなら「アリ」かもしれない（余談だけど私は LED の緑と赤どっちが ON か迷うことが多々あるのでよい UX ではないと思う）。&lt;/p&gt;

&lt;p&gt;たぶん「データの更新に失敗する可能性は普通にある」ならそれは「アクション」と捉えボタンにする。&lt;br /&gt;
「失敗する可能性が極めて少ない、あるいは無視できる」ならばスイッチでよいのかな、とここでは考えておこう。&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Nov 2019 07:30:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2019/11/21/toggle_vs_check/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2019/11/21/toggle_vs_check/</guid>
        
        
        <category>UI</category>
        
        <category>UX</category>
        
      </item>
    
      <item>
        <title>シェルスクリプトで日本時間のYYYYMMDDを返す</title>
        <description>&lt;p&gt;実行環境に依存せずに、任意のタイムゾーンでの「今日の YYYYMMDD」を取得したい。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 1. 今日の UNIX時刻(=UTCでの経過時間(秒)) を取得&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;unix_today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +&lt;span class=&quot;s1&quot;&gt;'%s'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 2. タイムゾーンをズラす(+9:00 を秒に変換している)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;unix_today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$((&lt;/span&gt;unix_today+32400&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 3. YYYYMMDD に変換&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;jst_ymd_today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'+%Y%m%d'&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--date&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$unix_today&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 出力&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$jst_ymd_today&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;出力&quot;&gt;出力&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;20190327
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;もっと短くかけないもんですかねえ。&lt;/p&gt;

&lt;h2 id=&quot;追記&quot;&gt;追記&lt;/h2&gt;

&lt;p&gt;コメントで教えてもらいました。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# JST で今日の YYYYMMDD を得る&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;jst_ymd_today&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;UTC-9 &lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'+%Y%m%d'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 出力&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$jst_ymd_today&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 27 Mar 2019 08:30:00 -0500</pubDate>
        <link>https://blog.amay0777.net/blog/2019/03/27/901a04254cd71fa1a957/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2019/03/27/901a04254cd71fa1a957/</guid>
        
        
        <category>Bash</category>
        
        <category>ShellScript</category>
        
      </item>
    
      <item>
        <title>Docker で AngularアプリをビルドしてAWS S3へデプロイする</title>
        <description>&lt;h2 id=&quot;やりたい事&quot;&gt;やりたい事&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;git repo からソースを clone する（複数の repo を clone する必要がある)&lt;/li&gt;
  &lt;li&gt;それは Angular のアプリなので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ng --prod build&lt;/code&gt; する&lt;/li&gt;
  &lt;li&gt;ビルドされたアプリのファイル群を aws cli を使って S3 にアップロードする&lt;br /&gt;
&lt;!--more--&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://qiita.com/ABCompany1/items/c92ac5087519c103f056&quot;&gt;AWS CLIをDocker環境で実行する&lt;/a&gt; で紹介されていた Dockerfile に、 node と Angular をインストールするスクリプトを追加したものです。&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; python:3.6&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; pip_installer=&quot;https://bootstrap.pypa.io/get-pip.py&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;ARG&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; awscli_version=&quot;1.16.76&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install awscli&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;awscli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;awscli_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Install sam&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;pip &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--upgrade&lt;/span&gt; aws-sam-cli
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /data
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; /data

&lt;span class=&quot;c&quot;&gt;# Install nodejs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update 
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;curl software-properties-common &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-sL&lt;/span&gt; https://deb.nodesource.com/setup_10.x | bash -
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;nodejs

&lt;span class=&quot;c&quot;&gt;# Install angular&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; @angular/cli@7.3.6

&lt;span class=&quot;k&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; PATH $PATH:/root/.local/bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;実行スクリプト&quot;&gt;実行スクリプト&lt;/h2&gt;

&lt;p&gt;次に Docker 内で実行するスクリプトです。&lt;br /&gt;
ファイル名は &lt;code class=&quot;highlighter-rouge&quot;&gt;Deploy.sh&lt;/code&gt; としておきます。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Setup git user/password&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;machine &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_DOMAIN&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;login &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_USER&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;password &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GIT_PW&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; ~/.netrc

&lt;span class=&quot;c&quot;&gt;# Create work directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;work
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;work

&lt;span class=&quot;c&quot;&gt;# Clone projects&lt;/span&gt;
git clone &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GIT_BRANCH&lt;/span&gt; https://xxxx/my-awesome-lib.git
git clone &lt;span class=&quot;nt&quot;&gt;-b&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$GIT_BRANCH&lt;/span&gt; https://xxxx/my-awesome-app.git

&lt;span class=&quot;c&quot;&gt;# Restore node_modules&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-awesome-lib
npm ci
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ..

&lt;span class=&quot;c&quot;&gt;# Build angular prod&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;my-awesome-app
npm ci
ng &lt;span class=&quot;nt&quot;&gt;--base-href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;./ &lt;span class=&quot;nt&quot;&gt;--prod&lt;/span&gt; build

&lt;span class=&quot;c&quot;&gt;# Deploy to S3&lt;/span&gt;
aws s3 &lt;span class=&quot;nb&quot;&gt;sync&lt;/span&gt; ./dist/my-awesome-app/ s3://my-awesome-bucket/www &lt;span class=&quot;nt&quot;&gt;--acl&lt;/span&gt; public-read
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;冒頭で言ったように、複数のリポジトリから Clone する必要があるプロジェクトです。&lt;br /&gt;
また Private なので user/password が必要ですが、どうせ docker コンテナは使い捨てだし &lt;code class=&quot;highlighter-rouge&quot;&gt;.netrc&lt;/code&gt; でいっか、と思ってますがどうなんでしょう？&lt;/p&gt;

&lt;p&gt;clone した後、それぞれのディレクトリに移動して &lt;code class=&quot;highlighter-rouge&quot;&gt;npm ci&lt;/code&gt; をして node_modules を復元します。&lt;/p&gt;

&lt;p&gt;その後、Angular アプリをビルド (&lt;code class=&quot;highlighter-rouge&quot;&gt;ng --prod build&lt;/code&gt;)します。&lt;/p&gt;

&lt;p&gt;最後に、 &lt;code class=&quot;highlighter-rouge&quot;&gt;s3 sync&lt;/code&gt; で AWS S3 の指定バケットにアップロードしています。&lt;code class=&quot;highlighter-rouge&quot;&gt;--acl public-read&lt;/code&gt; は、誰でも閲覧できるサイトにするために付けています。&lt;/p&gt;

&lt;h3 id=&quot;必要な環境変数&quot;&gt;必要な環境変数&lt;/h3&gt;

&lt;p&gt;Dockerコンテナ内で、次の環境変数が必要です。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Git アクセス
    &lt;ul&gt;
      &lt;li&gt;GIT_DOMAIN - git リポジトリのドメイン&lt;/li&gt;
      &lt;li&gt;GIT_USER - git ユーザー&lt;/li&gt;
      &lt;li&gt;GIT_PW - ↑のパスワード&lt;/li&gt;
      &lt;li&gt;GIT_BRANCH - 取得する branch 名&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;AWS S3 アクセス
    &lt;ul&gt;
      &lt;li&gt;AWS_ACCESS_KEY_ID - S3 への書込権限を持った IAMユーザーのアクセスキー&lt;/li&gt;
      &lt;li&gt;AWS_SECRET_ACCESS_KEY - ↑のシークレットキー&lt;/li&gt;
      &lt;li&gt;AWS_DEFAULT_REGION - リージョン（S3 だから要らないかも）&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらの値は、後述の &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt; する時に渡します。&lt;/p&gt;

&lt;h2 id=&quot;docker-イメージのビルドとコンテナの実行&quot;&gt;Docker イメージのビルドとコンテナの実行&lt;/h2&gt;

&lt;h3 id=&quot;docker-イメージのビルド&quot;&gt;Docker イメージのビルド&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; のあるディレクトリで、以下のコマンドを実行します。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t aws-angular .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; で aws-angular が作成されていれば成功です。&lt;/p&gt;

&lt;h3 id=&quot;コンテナ実行スクリプト&quot;&gt;コンテナ実行スクリプト&lt;/h3&gt;

&lt;p&gt;実行スクリプトファイル &lt;code class=&quot;highlighter-rouge&quot;&gt;Deploy.sh&lt;/code&gt; があるディレクトリで、以下のコマンドを実行します。&lt;br /&gt;
環境変数に入れる値はそれぞれ準備してください。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AWS_ACCESS_KEY_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;xxxxxxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;AWS_DEFAULT_REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ap-northeast-1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GIT_DOMAIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your.repo.com &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GIT_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_user_id &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GIT_PW&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;your_password &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;GIT_BRANCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;:/data &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 aws-angular sh /data/deploy.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これを実行すると、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;git repo からソースを clone する（複数の repo を clone する必要がある)&lt;/li&gt;
  &lt;li&gt;それは Angular のアプリなので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;ng --prod build&lt;/code&gt; する&lt;/li&gt;
  &lt;li&gt;ビルドされたアプリのファイル群を aws cli を使って S3 にアップロードする&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;が順次実行されます。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/ABCompany1/items/c92ac5087519c103f056&quot;&gt;AWS CLIをDocker環境で実行する - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.codebind.com/linux-tutorials/install-latest-nodejs-npm-ubuntu-18-04-linux/&quot;&gt;How to Install Latest Nodejs with Npm on Ubuntu 18.04 (Linux)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/azusanakano/items/8dc1d7e384b00239d4d9#1-netrc%E3%81%AB%E3%83%A6%E3%83%BC%E3%82%B6%E5%90%8D%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F&quot;&gt;GitHubでユーザ名・パスワード省略（push, pull） - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html&quot;&gt;Using High-Level (s3) Commands with the AWS CLI - AWS Command Line Interface&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 27 Mar 2019 08:30:00 -0500</pubDate>
        <link>https://blog.amay0777.net/blog/2019/03/27/0955097fe1d210b1b655/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2019/03/27/0955097fe1d210b1b655/</guid>
        
        
        <category>Docker</category>
        
        <category>AWS</category>
        
        <category>angular-cli</category>
        
      </item>
    
      <item>
        <title>Xamarin.UITest が HttpRequestException で失敗する場合の対処</title>
        <description>&lt;h2 id=&quot;症状&quot;&gt;症状&lt;/h2&gt;

&lt;p&gt;Xamarin.Forms の新規ソリューションを UITest 付きで作成して、すぐに Android 側の UITest を実行してみたところ、&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SetUp : System.Net.Http.HttpRequestException : An error occurred while sending the request
  ----&amp;gt; System.IO.IOException : Unable to write data to the transport connection: The socket has been shut down.
  ----&amp;gt; System.Net.Sockets.SocketException : The socket has been shut down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;という例外が発生して、テストが成功しませんでした。&lt;/p&gt;

&lt;p&gt;テンプレで作成されるテストケースは&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Test]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WelcomeTextIsDisplayed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AppResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;results&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WaitForElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Marked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome to Xamarin.Forms!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Welcome screen.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;IsTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;というもので、画面に “Welcome to Xamarin.Forms” が表示されたら成功ですが、&lt;br /&gt;
そもそもテスト対象アプリが起動せず終了しています。&lt;/p&gt;

&lt;h2 id=&quot;原因と対処&quot;&gt;原因と対処&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/xamarin/xamarin-android/issues/1817&quot;&gt;VS 4 Mac beta - Socket error on UITest tests · Issue #1817 · xamarin/xamarin-android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UITest のプロジェクトが参照している Xamarin.UITest パッケージのバージョンが古い(2.24以下?)と発生するようです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/024bc5c7-2ad4-2258-e06b-1fc5a4aa85ec.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;パッケージをアップデート(この時点では 2.2.7 になりました)してテストを実行しなおすと、無事アプリが起動してテストが成功するようになりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/9bf64824-8c99-0aed-d08e-baab4c2fe9eb.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Visual Studio for Mac 7.7.3 での事でしたが、理由はともかく、いきなり動かんのはおかんむりです。&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Mar 2019 08:30:00 -0500</pubDate>
        <link>https://blog.amay0777.net/blog/2019/03/13/57dc477fcec9192aa7e0/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2019/03/13/57dc477fcec9192aa7e0/</guid>
        
        
        <category>Xamarin</category>
        
        <category>UITest</category>
        
      </item>
    
  </channel>
</rss>
