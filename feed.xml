<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>https://blog.amay0777.net/</link>
    <atom:link href="https://blog.amay0777.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 21 Nov 2019 08:52:33 -0600</pubDate>
    <lastBuildDate>Thu, 21 Nov 2019 08:52:33 -0600</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>トグルスイッチとチェックボックスの違い</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://uxmilk.jp/83368&quot;&gt;トグルスイッチの誤用をやめよう | UX MILK&lt;/a&gt; を読んでの私見です。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;文脈上の状態-vs-システムの状態&quot;&gt;文脈上の状態 vs システムの状態&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;トグルスイッチはシステムの状態を管理し、トグルボタンは文脈上の状態を管理します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最初の例はちょっと賛同しかねた。&lt;br /&gt;
「状態」の適用範囲で、スクショにある &lt;code class=&quot;highlighter-rouge&quot;&gt;UISegmentedControl&lt;/code&gt; か &lt;code class=&quot;highlighter-rouge&quot;&gt;UISwitch&lt;/code&gt; を使い分ける、というのは、それが成されている事例があっても気づけない気がする。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ユーザーはスイッチをオンにするとすぐに効果が現れると期待します。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは賛同する。&lt;br /&gt;
私は、「スイッチ」とは、家の壁にある &lt;a href=&quot;https://www.monotaro.com/p/4105/7816/?utm_medium=cpc&amp;amp;utm_source=Adwords&amp;amp;utm_campaign=246-833-4061_6515858576&amp;amp;utm_content=86698184788&amp;amp;utm_term=_380604181365_1o3_pla-799401264920&amp;amp;gclid=Cj0KCQiAiNnuBRD3ARIsAM8KmltAvZoTFj-Uwyy3x0KxSs2Pl-qTNgyJE2RfW4qMMouS7XSx2CHszdEaAjZZEALw_wcB&quot;&gt;こういうの&lt;/a&gt; をイメージしている。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/20191121a.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このスイッチは「押すとすぐに電気が付いたり消えたりする」事を期待する。&lt;br /&gt;
なので、スイッチを「状態を表現する」為だけに使われていると違和感を覚える。&lt;/p&gt;

&lt;p&gt;少し前に &lt;a href=&quot;https://github.com/amay077/XamMaterialTodo&quot;&gt;Xamarin.Forms を使って TODO アプリを作ってみた&lt;/a&gt; のだけど、当時の Xamarin.Forms には「チェックボックス」が無くて、まあいいやと思って「スイッチ」を使って、「タスクが完了したか」を示したのだが、アプリを実際に動かしてみると違和感ありまくりだった。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/20191121b.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;結局画像を使ってチェックボックスの ON/OFF を表現した(尚、現在の Xamarin.Forms には &lt;code class=&quot;highlighter-rouge&quot;&gt;CheckBox&lt;/code&gt; がある)。&lt;/p&gt;

&lt;p&gt;GMail とか、アイテムが一覧表示される画面でアイテムを一つまたは複数選択するとき、それが「スイッチ」ではなく「チェック」であるというのは、現実世界に置き換えても自然な表現だと思う。&lt;/p&gt;

&lt;h2 id=&quot;0か1の選択-vs-対立する選択&quot;&gt;0か1の選択 vs 対立する選択&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;スイッチは０か１の選択のためのもので、対立する選択のためのものではありません。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これは分かりやすいです、同意。&lt;/p&gt;

&lt;h2 id=&quot;状態-vs-行動&quot;&gt;状態 vs 行動&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;トグルスイッチをダウンロード用のボタンに使っています&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;そりゃ NG でしょ、同意。&lt;/p&gt;

&lt;h2 id=&quot;スイッチを使うための３つの条件&quot;&gt;スイッチを使うための３つの条件&lt;/h2&gt;

&lt;p&gt;まとめ。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;利用環境ではなくシステムの状態のトグルに使っている&lt;/li&gt;
    &lt;li&gt;対立的選択肢ではなくバイナリ選択肢を示している&lt;/li&gt;
    &lt;li&gt;行動を起こすのではなく、状態を有効化している&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;1 はよく分からん。&lt;br /&gt;
2 と 3 は同意。&lt;/p&gt;

&lt;p&gt;特に 3 の「行動を起こすのではなく、状態を有効化している」はミソだと思っていて、スイッチの操作が「何らかのアクションを起こす」のではなく「状態が変わる」という点。スイッチを ON にすると「電気を付ける」のではなく「部屋が明るくなる」という感覚か。&lt;br /&gt;
「同じじゃん」と思われるかもだけど、ちょっとした捉え方の違いが重要な気がした。&lt;/p&gt;

&lt;h2 id=&quot;おまけ-状態を変えようとしたけど変わらなかったスイッチはありか&quot;&gt;おまけ: 「状態を変えようとしたけど変わらなかったスイッチ」はありか？&lt;/h2&gt;

&lt;p&gt;この記事を読んでいて気づいたことがあったんだけど、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;スイッチを操作するとすぐに状態の変化が起こる&lt;/li&gt;
  &lt;li&gt;それは「状態を変化させるためにデータを変更する」事になる&lt;/li&gt;
  &lt;li&gt;では「データの変更ができない」事があるかもしれない(端末のストレージにアクセスできなかったり、通信不良でクラウド上のデータに書き込みできなかったり)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;結果として、「スイッチを ON にしたが、データの書き込みに失敗して、数秒後に OFF に戻った」という挙動になっちゃったりするのだけど、これはアリか無しか。&lt;/p&gt;

&lt;p&gt;現実世界では、冒頭に示したパッチンスイッチなら「無し」だけど、 &lt;a href=&quot;https://www.yodobashi.com/product/100000001000361665/?gad1=&amp;amp;gad2=g&amp;amp;gad3=&amp;amp;gad4=56278881131&amp;amp;gad5=3442618118066054801&amp;amp;gad6=1o7&amp;amp;gclid=Cj0KCQiAiNnuBRD3ARIsAM8KmlsgMbm36dHBhGJRD4reOPu2BbwsZeEZQc-Ln1mU5kYCJKO7zqIRmV4aAhkZEALw_wcB&amp;amp;xfr=pla&quot;&gt;こういう&lt;/a&gt; LED で ON/OFF 表現するスイッチなら「アリ」かもしれない（余談だけど私は LED の緑と赤どっちが ON か迷うことが多々あるのでよい UX ではないと思う）。&lt;/p&gt;

&lt;p&gt;たぶん「データの更新に失敗する可能性は普通にある」ならそれは「アクション」と捉えボタンにする。&lt;br /&gt;
「失敗する可能性が極めて少ない、あるいは無視できる」ならばスイッチでよいのかな、とここでは考えておこう。&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Nov 2019 07:30:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2019/11/21/toggle_vs_check/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2019/11/21/toggle_vs_check/</guid>
        
        
        <category>UI</category>
        
        <category>UX</category>
        
      </item>
    
      <item>
        <title>DroidKaigi2019 でクロスプラットフォーム開発ツールについて話しました</title>
        <description>&lt;p&gt;2019.2.7〜2.8 に行われた &lt;a href=&quot;https://droidkaigi.jp/2019/&quot;&gt;DroidKaigi2019&lt;/a&gt; に登壇させてもらいました。&lt;br /&gt;
参加者としての感想は &lt;a href=&quot;https://qiita.com/amay077/items/ed43ef822c34677d2254&quot;&gt;別に書きました&lt;/a&gt;。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2019_02_10_droidkaigi2019.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;登壇&quot;&gt;登壇&lt;/h2&gt;

&lt;p&gt;「&lt;a href=&quot;https://droidkaigi.jp/2019/timetable/70891&quot;&gt;クロスプラットフォームモバイルアプリ開発ツール総ざらい2019 〜Titanium MobileからKotlin/Nativeまで〜&lt;/a&gt;」というタイトルで登壇してきました。&lt;/p&gt;

&lt;p&gt;RoomC に来ていただいた方々、ありがとうございます。&lt;br /&gt;
観ていない方は、資料や動画もすでに公開(早い！)していただいているので、よければ観てみてください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;資料 - &lt;a href=&quot;https://speakerdeck.com/amay077/native-made-number-droidkaigi&quot;&gt;クロスプラットフォームモバイルアプリ開発ツール総ざらい2019 〜Titanium Mobile から Kotlin/Native まで〜 #droidkaigi - Speaker Deck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;セッション動画 - &lt;a href=&quot;https://youtu.be/51SW52cf2UY&quot;&gt;YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コルーチンや LiveData+MVx まわりの事は他の人の方がガッツリやっていてライバルが多いだろうという事と、自分が近年注力していることで DroidKaigi に CfP を出せるのはやはりクロスプラットフォーム関連しかないなという事で、今回のネタになりました。&lt;/p&gt;

&lt;p&gt;セッションの内容は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/dff88e7ce6868615a9bb&quot;&gt;Xamarin と React Native と Flutter の違いを正しく理解しよう - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の内容を30分で話すために、簡潔に整理して私の最新の視点を加えたものです。&lt;/p&gt;

&lt;p&gt;改めて、「まとめ」だけ引用して振り返りましょうか。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;モバイルクロスプラットフォーム開発ツールは必要悪&lt;/li&gt;
  &lt;li&gt;どのツールもオワコンではない&lt;/li&gt;
  &lt;li&gt;Kotlin／Native には言語の壁を超えられる魅力がある&lt;/li&gt;
  &lt;li&gt;プラットフォームとその言語へのリスペクトを忘れずに&lt;/li&gt;
  &lt;li&gt;Webアプリとも仲良くやっていこう&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;クロスプラットフォーム開発ツールは、十分な開発リソース・期間・保守コストが確保できれば使う必要はないわけです。しかし、現実には大企業でも、イケイケなサービス企業でも、プロジェクト単位・チーム単位ではリソースは制限されていて、クロスプラットフォーム開発ツールが利用検討対象に挙がることはよくあるのだと思います。&lt;br /&gt;
正直、「どんなツールを選択すべきか？」はどうでもいいです。現実的には提供企業の規模とあなたのチームのスキルセットでだいたい選択肢は絞られるので、「あなたはその答えをもう持っているのだから…」とか返答しましょう。&lt;/p&gt;

&lt;p&gt;クロスプラットフォーム流行の歴史では、私の観測範囲内でこれまでに登場してきたツールについて触れました。Xamarin 利用歴が一番長いので、視点がそれよりになってしまったかもですが、極力特定のツールに依存しない話にしたつもりです。&lt;br /&gt;
“Titanium” を知らない、読み方がわからないという方が一定数いらっしゃる事を知ったときには、 &lt;strong&gt;「モバイルクロスプラットフォーム開発ツール老人会」&lt;/strong&gt; の発足が頭をよぎりましたね。&lt;/p&gt;

&lt;p&gt;各ツールの説明にはややdisりが含まれていたかも知れません(そう感じた方にはすみません)が、どのツールもdisconにはなっておらず(disconになったツールはそもそも紹介してない)、世界的に見れば利用されている方は多いと思います。&lt;br /&gt;
“とある開発ツール” を利用する(あるいは利用しない)のには、それなりの理由があるのですから、その理由を理解しようとしないまま「オワコンだ」とか「成功しない」とかは言わない方がよいと思います。それよりは、利用した／しなかった 理由についての知識を溜め、自分のケースに当てはめて判断したらよいと考えています。&lt;/p&gt;

&lt;p&gt;Kotlin/Native に関しては、他言語向けに親和性の高いライブラリをビルド&amp;amp;出力できる開発ツールは、モバイル関連では他に実用レベルに至っているものを知りません(.NET/C# における同類技術である &lt;a href=&quot;https://github.com/mono/Embeddinator-4000&quot;&gt;.NET Embedding コードネーム:Embeddinator-4000&lt;/a&gt; は、開発が停滞しているというウワサも聞きます)。&lt;br /&gt;
Android/Kotlin の Google / JetBrains / OSS 周辺の開発パワーはとても高いので、急速に環境が整備されていくのだろうなと感じています。&lt;/p&gt;

&lt;p&gt;となると、Android/iOS アプリの多くの領域を Kotlin で書けるようになるため、「Kotlin/Native強硬派」が現れると思うのですが、それについてこれまで Swift で iOS アプリを開発していた人たちがどう思うかは十分に話し合って導入して欲しいと思います。敵対関係になってしまってはまったく意味がないです。(逆の立場だったらどうでしょう？)&lt;/p&gt;

&lt;p&gt;「ガワネイティブ」は、脊髄反射で「NO」と言わない方がよい技術であることもお話しました。&lt;br /&gt;
SPA, PWA に代表される Web 技術は、確実にネイティブアプリの領域と重なって来ています。&lt;br /&gt;
クロスプラットフォームアプリ開発技術者としては、 &lt;strong&gt;「PWA などのWeb技術の海」と、「ネイティブアプリ技術の陸地」の波打ち際&lt;/strong&gt; に注目していて、2019年2月の現時点だと、「クロスプラットフォーム開発ツールで作るガワネイティブアプリ」は、有力な「おとしどころ」だと思っています。&lt;/p&gt;

&lt;p&gt;話さなかった(知識不足で話せなかった)ことに関して言えば、WebAssembly があります。&lt;br /&gt;
例えば、「ガワネイティブアプリの中にある HTML ページの div タグ内でネイティブのUIパーツが利用される」などという世界線があるのかも知れないし、ぜんぜん無いのかも知れないです。&lt;/p&gt;

&lt;p&gt;なんやかんやでクロスプラットフォームアプリ開発ツールに関連する領域は、モバイルだけを見てもまだまだネタに尽きないですし、モバイルに拘らなければ無限にありますので、ウォッチしていて飽きないですね。&lt;/p&gt;

&lt;p&gt;とりあえず来年の DroidKaigi には &lt;strong&gt;Kotlin/Native with Multi Platform Project に関するセッションが10個以上はある&lt;/strong&gt; と思っています。今、CfP を考えてみても、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;実践！Kotlin/Native with MPP アプリ開発&lt;/li&gt;
  &lt;li&gt;Kotlin MPP に対応済のライブラリたち&lt;/li&gt;
  &lt;li&gt;Kotlin/Native ＋ xxx(←任意のクロスプラットフォーム開発ツール)&lt;/li&gt;
  &lt;li&gt;Kotlin MPP を踏まえたアプリケーション設計手法&lt;/li&gt;
  &lt;li&gt;Kotlin/Native for XXX を作って(!)みた&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど、挙げたらキリがないですね。&lt;br /&gt;
来年 CfP を出すとしても、セッションを聞くとしてもとても楽しみです。&lt;/p&gt;

&lt;h2 id=&quot;コミュニケーション&quot;&gt;コミュニケーション&lt;/h2&gt;

&lt;p&gt;わざわざ声をかけていただいて「Qiita の投稿、勉強になってます！」などと言って頂いたのは死ぬほど嬉しかったです。&lt;br /&gt;
前々回も、同じように若いITエンジニアさんに声かけていただいて、承認要求充足おじさんでした。&lt;br /&gt;
ただそれが目的にならないように、たくさんの人からいいね!されるよりは、誰か一人が「超助かった」と言ってもらえるようなアウトプットを心がけたい思っています。&lt;/p&gt;

&lt;p&gt;パーティでの「登壇者風船プレイ」も良かったですね(風船を付けたのは数年前の de:code 以来でした)。&lt;br /&gt;
こちらからグイグイいくタイプでないので、風船のおかげで何人かの人に声をかけてもらえました。&lt;br /&gt;
お話ししていただいた皆さん、ありがとうございました。&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;スタッフの皆さま、今回も最高のイベントでした。&lt;br /&gt;
スムースな Registration に会場移動、セッション終了時刻を意図的にズラしての流量調整など、イベントのプロでも実施できるチームは少ないのではないでしょうか、素晴らしい運営だったと思います。&lt;/p&gt;

&lt;p&gt;遠方からのスピーカーに対するサポート強化もありがたかったです。&lt;br /&gt;
できましたら、(パーティ始まりに?)スタッフの皆様の紹介をしていただけたら、個別にごあいさつできたのですが。。。&lt;br /&gt;
(メール対応していただいた方の名前と Twitter アカウントと顔が一致しないとか)&lt;/p&gt;

&lt;p&gt;DroidKaigi には毎年参加していて、今回含め2度登壇させてもらってますが、やはり登壇した方が楽しいですね。&lt;br /&gt;
また、次回があると信じていますが、その時はなんらかのネタで登壇を狙いたいと思います。&lt;/p&gt;

&lt;p&gt;ありがとうございました！&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Feb 2019 08:59:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2019/02/11/talk_for_droidkaigi_2019/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2019/02/11/talk_for_droidkaigi_2019/</guid>
        
        
        <category>Kotlin</category>
        
        <category>Android</category>
        
        <category>DroidKaigi</category>
        
      </item>
    
      <item>
        <title>Azure Pipelines の Android アプリビルドでビルドタイプを指定する</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/ja-jp/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt; で Android アプリ(Not Xamarin)をビルドする時、&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;普通にテンプレから作った gradle タスクは、 &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew build&lt;/code&gt; を実行しますが、これはアプリのプロジェクトに含まれる全てのビルドタイプをビルドするため、多くの場合ムダです。&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;例えば私のプロジェクトの場合、ビルドタイプは標準の「Debug」,「Release」に加え実験用の「Experiment」を用意していたので、タスクの実行に 12分 もかかっていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/346f0a15-a0c9-f671-9046-d90d3e39ce5a.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;完了後、Debug, Release, Experiment それぞれの &lt;code class=&quot;highlighter-rouge&quot;&gt;.apk&lt;/code&gt; が生成されていました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/5390eac9-9deb-42b1-8155-a3e0659f25cf.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;release-のみをビルドする&quot;&gt;Release のみをビルドする&lt;/h2&gt;

&lt;p&gt;特定のビルドタイプのみ（ここでは Release とします）をビルドする場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew build&lt;/code&gt; の代わりに &lt;code class=&quot;highlighter-rouge&quot;&gt;gradlew assembleRelease&lt;/code&gt; を実行すればよいのですが、既定で追加されている gradle タスクではなぜか変更できません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/91a0b402-1cdc-2628-dfde-67c25b693a65.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;仕方がないので、既存の gradle タスクは削除して、「＋」 で gradle タスクを検索して追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/70053a12-60e8-d632-03af-6bac2faf4d66.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;こちらの Tasks は変更できるので &lt;code class=&quot;highlighter-rouge&quot;&gt;assembleRelease&lt;/code&gt; を設定します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/13f771df-de9e-f480-21ec-1f8926722de3.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これで保存してパイプラインを実行すると、ビルドタスクの時間が 12分 から &lt;strong&gt;8分&lt;/strong&gt; に短縮されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/c59dc0e7-8e5f-6cb6-387a-6872f4de6610.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Artifacts にも Release 版の apk しか生成されていないのが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/cbc5cf63-50cf-6eea-88a2-0d0c3f22ecac.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/penguin_sharp/status/1077762715853107201&quot;&gt;@penguin_sharp さん&lt;/a&gt;、ありがとうございました。&lt;/p&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;上記はビルドAgent 「Hosted VS2017」 で作業してたんですが、これを 「Hosted macOS」 に替えたところ、 8分かかっていたビルド時間が &lt;strong&gt;「2分50秒」&lt;/strong&gt; に短縮されました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/05a69245-4fe5-ab16-53de-24fdca7cca13.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;VS2017 が遅いのか Hosted macOS が早いのか分かりませんが、とりあえず Android アプリのビルドは Hosted macOS を使うとよさそうです。&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;Debug ビルドで単体テストを行い、同時に配布用 Release ビルドを生成したい、というケースでもあるのでしょうか？わからん。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Xamarin.Android も Hosted macOS でビルドしたいなー、確か Xamarin.iOS しかビルドできないんだよなー &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Wed, 26 Dec 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2018/12/26/e31652bf6e384b6ffbed/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/12/26/e31652bf6e384b6ffbed/</guid>
        
        
        <category>Azure</category>
        
        <category>AzureDevOps</category>
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Xamarin.Forms でも HotReload がしたい！</title>
        <description>&lt;p&gt;こんにちわ.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;過去5年で9個!のアドベントカレンダーをこなして来た Xamarin、過渡期における認知・普及に大いに貢献できたと思います、参加頂いた皆様に改めてお礼申し上げまする。&lt;br /&gt;
Xamarin が成熟期に入ったであろう今年は「そろそろ頃合いかな&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;」とホストもせず放置していましたが、@muak_x さんが立ち上げられたので「ならば協力せねば」という事で、埋まりづらいであろうトリに名乗りを上げさせて頂きました。しかしその後の様子を見るにそれも杞憂だったかな、と。皆様の Xamarin に対する意欲の高さを感じることができました。&lt;/p&gt;

&lt;p&gt;さて前置きはこのくらいで、、、、&lt;br /&gt;
画面の開発（画面レイアウト作成）をする際、みなさんが好む「スタイル」は何ですか？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;デザイナーでポチポチ&lt;/li&gt;
  &lt;li&gt;xml や xaml などの DSL を手書き&lt;/li&gt;
  &lt;li&gt;DSL も使わん、全部プログラム言語で手書き&lt;/li&gt;
  &lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;私は 「xml や xaml などの DSL を手書き」 派です。&lt;/p&gt;

&lt;p&gt;いずれにしても「UIの見た目」を逐次確認しながら開発できるというのは、画面開発においては必須要件です。&lt;br /&gt;
この 「見た目を確認する機能」 は、プラットフォームや IDE によっていくつかの提供方式があります。&lt;/p&gt;

&lt;h2 id=&quot;uiデザイナ-vs-プレビューア-vs-hotreload&quot;&gt;UIデザイナ vs プレビューア vs HotReload&lt;/h2&gt;

&lt;p&gt;UIデザイナとはアプリ開発環境でいうと「UI部品をドラッグ&amp;amp;ドロップでレイアウトできる」機能を差します。多くの場合はそれが「プレビューア」も兼ねています。&lt;/p&gt;

&lt;p&gt;プレビューアとは、コードで記述されたUI定義の「見た目」を「シミュレート」する機能です。&lt;/p&gt;

&lt;p&gt;HotReload とは、「実際のアプリケーション」を動かしながらも、コードやUI定義の変更を即座に実際のアプリケーションに反映させる機能を言うものとします。&lt;/p&gt;

&lt;p&gt;それぞれのメリットデメリットを考えて挙げてみました。（個人の恣意的な見解を大いに含みます。）&lt;/p&gt;

&lt;h3 id=&quot;uiデザイナ&quot;&gt;UIデザイナ&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;⭕ - 初心者に「使いやすい」と思わせることができる&lt;/li&gt;
  &lt;li&gt;❌ - 生成されるUI定義コードが人間には理解不能(and diff unfriendly)&lt;/li&gt;
  &lt;li&gt;❌ - (IDE提供会社側)機能を作るのが超大変・面倒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;UIデザイナを採用するのは Visual Basic 6, Windows Forms, WPF/UWP/ASP.NET(Web Forms)/Xamarin Native(Android/iOS) など、macOS/iOSアプリ開発の Xcode(Interface Builder/Storyboard)、Android Studio の UI Editor、アプリ開発以外では Word やホームページビルダーなどもそうですね（これらを挙げるのは恣意的ですがw）。&lt;/p&gt;

&lt;h2 id=&quot;プレビューア&quot;&gt;プレビューア&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;⭕ - (自力で)視認性の高いコードを記述できる(ツールに邪魔されない)&lt;/li&gt;
  &lt;li&gt;⭕ - 任意のタイミングあるいはリアルタイムに、見た目を「おおよそ」確認できる&lt;/li&gt;
  &lt;li&gt;❌ - (IDE提供会社側)異なるプラットフォームの「見た目」を再現しようとすると、実装が大変・面倒&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プレビューアを採用するのは、Visual Studio 20xx の XAML Previewer for Xamarin.Forms くらいですかね。GitHub や Qiita などに見られる「Markdown のリアルタイムプレビュー」も該当すると言えるかも知れません。&lt;/p&gt;

&lt;h2 id=&quot;hotreload&quot;&gt;HotReload&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;⭕ - (自力で)視認性の高いコードを記述できる(ツールに邪魔されない)&lt;/li&gt;
  &lt;li&gt;⭕ - 実際のアプリケーションを動かしながら、見た目の変更を「完全に」確認できる&lt;/li&gt;
  &lt;li&gt;❌ - (IDE提供会社側)アプリ側にIDEからの変更通知を受信するための「仕掛け」が必要&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HotReload は、最近では Flutter が名を上げていますね。React や Angular でも細かい方式の違いはあるのでしょうが、デベロッパー体験としては HotReload のような事ができます。Android Studio の「Instant Run」もここに分類することにしましょう。&lt;/p&gt;

&lt;h2 id=&quot;どれがいいの&quot;&gt;どれがいいの？&lt;/h2&gt;

&lt;p&gt;改めて個人の見解ですが、ここで言いたいのは&lt;br /&gt;
**「UIデザイナーやプレビューアはそれを提供する側の開発コストがとても高いが、その割にそれを利用する側の評価は低い（見た目が実際と&lt;少し&gt;違う、等）」**
と言うことです。[^2]&lt;/少し&gt;&lt;/p&gt;

&lt;p&gt;対して本物のアプリを動かしつつUIを変更できる HotReload は、&lt;br /&gt;
&lt;strong&gt;「(UIデザイナに比べて)提供側の開発コストは低く、利用する側の開発体験は高い」&lt;/strong&gt;&lt;br /&gt;
と思います。「デベロッパー目線では」 HotReload はとってもコスパが高いと思うんですね。&lt;/p&gt;

&lt;p&gt;Microsoft は、Visual Studio で Xamarin.Forms アプリの HotReload が可能になるはずだった 「 &lt;a href=&quot;https://github.com/MicrosoftDocs/xamarin-docs/issues/947#issuecomment-432973028&quot;&gt;Xamarin LiveReload の開発を停止し、プレビューアの機能を強化していく&lt;/a&gt; 」そうですが、私にはこれは悪手に見えます。&lt;br /&gt;
開発環境も実行環境も Windows だった WinForms/WPF に対して、異なるプラットフォーム上で動作するアプリケーションの見た目を Windows の IDE上で再現(プレビュー)する事は、相当な開発コストが必要と推測します。&lt;br /&gt;
それだけのコストをかけても「Windows 上で表示されるプレビュー」は所詮 &lt;strong&gt;ニセモノ&lt;/strong&gt; であり、その再現性に私は期待が持てないのです。GoogleMapsを埋め込んだユーザーコントロールを開発してる身としては「どう考えてもムリ」という結論になります。&lt;/p&gt;

&lt;p&gt;Xamarin LiveReload は Visual Studio for Macでいつ使えるようになるのかなー？と言う期待は、遂に実現されませんでした。&lt;/p&gt;

&lt;p&gt;もう一つ、 &lt;a href=&quot;https://docs.microsoft.com/ja-jp/xamarin/tools/live-player&quot;&gt;Xamarin Live Player&lt;/a&gt; というものがありました（もう過去形でよいと思ってるけど）。&lt;br /&gt;
これは実機に「開発中アプリを実行するためのアプリ」をインストールしておき、それが開発中アプリのコードを解釈＆実行することで HotReload が可能です。しかし &lt;a href=&quot;https://www.sys-cube.co.jp/blog/15002.html&quot;&gt;iOS版アプリがAppStoreから削除され、testflightでの公開もなくなり、今はAndroid版のみの提供となっているよう&lt;/a&gt; です。そして活発な開発は行われていないように見えます。&lt;/p&gt;

&lt;p&gt;Microsoft には「初心者にウケのよい機能にチカラを入れる」という SAGA があるように感じますが、それが徒にならないとよいですなと願います。（注力するのは良いんですが、それによって全体のDX(Developer Experience)を下げるのはよろしくない選択だと思います。）&lt;/p&gt;

&lt;h2 id=&quot;livexaml-なら-xamarinforms-で-hotreload-ができるんじゃぁぁあいッ&quot;&gt;LiveXAML なら Xamarin.Forms で HotReload ができるんじゃぁぁあいッ！！&lt;/h2&gt;

&lt;p&gt;よろしい、Visual Studio の標準機能としてそれが搭載されることは諦めましょう。&lt;br /&gt;
VS に頼らなくても、我々には素晴らしいツールを提供してくれるサードパーティーがいます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://www.livexaml.com/&quot;&gt;LiveXAML for Xamarin.Forms&lt;/a&gt;&lt;/strong&gt; は livexaml.com で販売・配布されている拡張ツールです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IDE(Visual Studio 201x、Visual Studio for Mac)のエクステンション&lt;/li&gt;
  &lt;li&gt;アプリに入れる nuget パッケージ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;から成っています。&lt;/p&gt;

&lt;p&gt;開発・提供者はちょっと辿りにくいのですけど、「ION OÜ」というエストニアの屋号が確認できました（が、規模はおそらく小さいでしょう）。他に &lt;a href=&quot;http://www.ammyui.com/&quot;&gt;ammyui&lt;/a&gt; という、「XAMLの代わりにJSONライクな定義でUIを記述できるツールキット」も開発しているようです。&lt;/p&gt;

&lt;h3 id=&quot;livexaml-のインストール方法&quot;&gt;LiveXAML のインストール方法&lt;/h3&gt;

&lt;p&gt;Visual Studio for Mac で使ってみます。Win の人は &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ionoy.XamarinFormsLive-18843&quot;&gt;INSTRUCTIONS&lt;/a&gt; を見てね。&lt;/p&gt;

&lt;h4 id=&quot;1-visual-studio-for-mac-に-livexaml-の-extension-を入れる&quot;&gt;1. Visual Studio for Mac に LiveXAML の Extension を入れる&lt;/h4&gt;

&lt;p&gt;Visual Studio for Mac を起動し、左上のアイコンから Extensions… を選択、Extension Manager の検索ボックスに “LiveXAML” と入力し、インストールします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/0c35f9b0-2b33-55c6-775a-6362b4576e1a.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;インストール後、Visual Studio を再起動したほうが良さそうです。&lt;/p&gt;

&lt;h4 id=&quot;2-アプリケーションのプロジェクトに-livexaml-の-nuget-パッケージを入れる&quot;&gt;2. アプリケーションのプロジェクトに LiveXAML の nuget パッケージを入れる&lt;/h4&gt;

&lt;p&gt;Xamarin.Forms の共通プロジェクト（.NET Standard） &lt;strong&gt;のみ&lt;/strong&gt; に、 LiveXAML nuget パッケージを入れます。&lt;br /&gt;
（間違えて Android プロジェクトにも入れたところ、ビルドエラーになりました）&lt;/p&gt;

&lt;p&gt;例として拙作 Xamarin.Forms.GoogleMaps のサンプルアプリソリューションを挙げると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;XFGoogleMapsSample&lt;/code&gt; プロジェクトのみに LiveXAML を入れます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/e07401f2-db44-6434-b718-c4016e79d8c1.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-動かしてみる&quot;&gt;3. 動かしてみる&lt;/h4&gt;

&lt;p&gt;Trial するためのステップはこれで終わりです。&lt;/p&gt;

&lt;h5 id=&quot;エミュレータで実行&quot;&gt;エミュレータで実行&lt;/h5&gt;

&lt;p&gt;試しに Android エミュレータでアプリを &lt;strong&gt;デバッグ実行&lt;/strong&gt; し、そのまま画面の &lt;code class=&quot;highlighter-rouge&quot;&gt;.xaml&lt;/code&gt; ファイルを Visual Studio で変更し、保存すると、数秒以内に実行中のアプリに適用されます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/110415b8-ed63-d922-f04f-43b6e9f7df77.gif&quot; alt=&quot;Untitled6.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;もちろん iOS でもおｋ。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/076bb2db-5113-ad04-dbdd-3cea88bf592f.gif&quot; alt=&quot;Untitled7.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;UWP に興味が無いのでまったく触れていないですが、LiveXAML は UWP にも対応しています。&lt;/p&gt;

&lt;h5 id=&quot;実機で実行&quot;&gt;実機で実行&lt;/h5&gt;

&lt;p&gt;Android, iOS ともに開発PCと「同じネットワークに接続されている」ならば、実機でも HotReload されます。&lt;/p&gt;

&lt;p&gt;iOS の方は、ビルド設定で Linker の動作 を 「Don’t Link」 に変更する必要があるかもしれません。既定で 「Don’t Link」 ならOKです。（Link All, Link Framework SDK Only では動作しません。）&lt;/p&gt;

&lt;h5 id=&quot;デバッグじゃなくても-hotreload&quot;&gt;デバッグじゃなくても HotReload&lt;/h5&gt;

&lt;p&gt;“Update even if not debugging” というオプションを ✔ すれば、デバッグ実行でなくても適用されるそうです(VS4M にその項目はなかったので VSforWinならあると思われ)。&lt;/p&gt;

&lt;p&gt;これにより、Rider などの外部エディタでの変更も適用できたり、複数の端末に適用させることもできるとのことです。前出の FAQ より。&lt;br /&gt;
うまく使うと、 &lt;strong&gt;Android アプリと iOS アプリを同時実行しながら、HotReload できる&lt;/strong&gt; んじゃないかな？(要確認)&lt;/p&gt;

&lt;p&gt;どうっすか。これですよ私が求めていた開発体験(DX: Developer Experience)は！&lt;/p&gt;

&lt;h3 id=&quot;livexaml-でできないこと&quot;&gt;LiveXAML でできないこと&lt;/h3&gt;

&lt;h4 id=&quot;xaml-ファイル以外の変更適用&quot;&gt;XAML ファイル以外の変更適用&lt;/h4&gt;

&lt;p&gt;“HotReload” されるのは &lt;code class=&quot;highlighter-rouge&quot;&gt;.xaml&lt;/code&gt; ファイルへの変更のみです。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;.cs&lt;/code&gt; ファイルを変更して保存しても何も起こらないし、&lt;code class=&quot;highlighter-rouge&quot;&gt;.cproj&lt;/code&gt; への変更も反映されません。&lt;br /&gt;
例えば &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Image Source=&quot;apple.jpg&quot; /&amp;gt;&lt;/code&gt; とXAMLに書かれた時に、 &lt;code class=&quot;highlighter-rouge&quot;&gt;apple.jpg&lt;/code&gt; をりんごからオレンジの画像に差し替えても、りんごのままです。&lt;/p&gt;

&lt;p&gt;あれ、あんまり「できない事」はなかったｗ 詳しくは https://www.livexaml.com/ の FAQ を見てください。&lt;/p&gt;

&lt;p&gt;ちなみに C# ソースコードの変更を HotReload する技術? も開発中で、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;LiveSharp - https://github.com/OYIon/LiveSharp&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というそうです。Windows + Visual Studio なら試せるらしいので、興味ある方はどうぞ。&lt;/p&gt;

&lt;h3 id=&quot;トラブルシューティング&quot;&gt;トラブルシューティング&lt;/h3&gt;

&lt;p&gt;今のところ、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VS4M に LiveXAML Extension をインストールしてすぐアプリ実行したが HotReload されない → VS4M を再起動したらなんか大丈夫になった&lt;/li&gt;
  &lt;li&gt;LiveXAML nuget パッケージをコアプロジェクト以外には入れる必要がないのに入れちゃった → ビルドエラーになった&lt;/li&gt;
  &lt;li&gt;iOS アプリで HotReload されない → Linker が Link Framework SDK Only になってた(Don’t Link にする必要がある)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に遭遇しました。いずれも VS4M の Application Output にログが出力されるので、それを手がかりに調べれば、なんやかんやで解決するでしょう。&lt;/p&gt;

&lt;h3 id=&quot;買うよね&quot;&gt;買うよね？&lt;/h3&gt;

&lt;p&gt;そんな LiveXAML、価格は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;$24 / 月&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;$240&lt;/strong&gt; / ∞&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です。年間240$ じゃないよ &lt;strong&gt;「無制限」&lt;/strong&gt; だよ。&lt;br /&gt;
即買いだよね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/4741eebd-a9c9-9904-f2ae-dd9363e730c0.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;はい買った。感覚的には Donation です。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;「世はまさに大HotReload時代」だけど Xamarin.Forms ではできるの？」&lt;br /&gt;
↓&lt;br /&gt;
&lt;strong&gt;「Visual Studio だけではムリ。でも LiveXAML という拡張機能を使うとできるよ！」&lt;/strong&gt;&lt;br /&gt;
↓&lt;br /&gt;
「なるほど、値段も &lt;strong&gt;$240 ポッキリだから、これは「その成果に敬意を表する寄付」だと思えば安いもの&lt;/strong&gt; だね！」&lt;br /&gt;
↓&lt;br /&gt;
「Exactly！ こうして Visual Studio に頼らない開発ツールが増えていくと、開発者の選択肢が増えて、まさに “Any Developer, Any App, Any Platform, &lt;strong&gt;Any Tool&lt;/strong&gt;” だね！」&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;個人としては趣味でも興味でもまだまだ全然Hotなんですよ、Xamarin「も」 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 25 Dec 2018 08:59:01 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2018/12/25/150f484e68924468a2c3/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/12/25/150f484e68924468a2c3/</guid>
        
        
        <category>Xamarin</category>
        
        <category>VisualStudio</category>
        
      </item>
    
      <item>
        <title>Azure Custom Vision を使って「ハムスターが起きているか？」を判定してみた</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ngk2018b.connpass.com/event/104965/&quot;&gt;NGK2018B 昼の部（LT大会） - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で発表した内容のフォローアップです。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;５分厳守なガチLTは久しぶりだったので、タイムキープには特に注意しました。1分余らせるつもりがちょうど良い感じでしたが、ちょっとテンパってしまいましたね。&lt;/p&gt;

&lt;p&gt;LT大会自体も、多種多様なネタを聞くことができてとっても参考になりましたね。&lt;br /&gt;
最近は特定のテクノロジー向けの勉強会・イベントしか参加してなかったので思わぬ発見ができてよかったです。&lt;/p&gt;

&lt;p&gt;当日の録画が&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=eAlJ-FK-2tw&amp;amp;list=PLscGe0lpp6WY0E0VA_aFgPyeCn2GuEXor&quot;&gt;NGK2018B オープニング &amp;amp; LT #1 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にあるので、年末年始のテレビがつまらないと思う人はどうぞ。たぶんそれよりもずっと面白いです。&lt;/p&gt;

&lt;p&gt;さて自分の発表は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/hamusutajian-chu-qi-wo1ri-dezuo-tutemita-number-ngk2018b&quot;&gt;ハムスター検出器を1日で作ってみた #NGK2018B - Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だったわけですが、かいつまんで言うと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ハムスター飼っている&lt;/li&gt;
  &lt;li&gt;ケージの様子をライブ配信している&lt;/li&gt;
  &lt;li&gt;ハムスターが起きているか寝ているかを判定したい&lt;/li&gt;
  &lt;li&gt;Azure Custom Vision でやってみた&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;というものです。普段ウケを狙う事はないのですが、笑っていただけたので良かったです。&lt;/p&gt;

&lt;h2 id=&quot;投入したデータについて&quot;&gt;投入したデータについて&lt;/h2&gt;

&lt;p&gt;約2000枚の画像にタグ付けをしたわけですが、「ハムスターはほとんど寝ている」ので、必然的に「寝ている画像」の方が多くなります。&lt;/p&gt;

&lt;p&gt;それをそのまま Custom Vision にぶっこんだら、Train の結果で Warning が出ました。&lt;br /&gt;
内容は「タグ毎のデータ量に偏りがあるから是正したほうが良いよ(意訳)」というものでした。&lt;/p&gt;

&lt;p&gt;その後機械学習のデータ準備について少し学んだら同じ情報が得られたので、Custom Vision は、その辺りのアドバイスもしてくれるのだなあ、親切！と感じました。&lt;/p&gt;

&lt;h2 id=&quot;performance-について&quot;&gt;Performance について&lt;/h2&gt;

&lt;p&gt;スライドにもあるように、タグ付けしたデータの一部を「検証用データ」としてとっておいて、学習後の Custom Vision に与えて Validation しようと思っていたのですが、 Performance というタブになんだか評価結果が出ているようでした。&lt;/p&gt;

&lt;p&gt;各タグについて Precision と Recall のパーセンテージが出ており、それぞれ&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Precision - 「起きてる」とタグ付けされた画像が、「起きてる」と判定された確率&lt;/li&gt;
  &lt;li&gt;Recall - 「起きてる」と判定された画像の内、「起きてる」とタグ付けされた画像の確率&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;であると、こちらも学習して理解しました。&lt;br /&gt;
そして、Custom Vision がこの数値を出しているということは、Custom Vision の中で検証のプロセスも行っていると判断しました。&lt;/p&gt;

&lt;h2 id=&quot;freetrial版について&quot;&gt;Free(Trial)版について&lt;/h2&gt;

&lt;p&gt;無償の Free 版では、以下の &lt;a href=&quot;https://azure.microsoft.com/en-us/pricing/details/cognitive-services/custom-vision-service/&quot;&gt;制約&lt;/a&gt; があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;2 Project まで&lt;/li&gt;
  &lt;li&gt;アップロード画像 5000 画像まで&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;複数のデータセットを用意して、同時に評価したい場合は 2 project だと足りません。&lt;br /&gt;
その場合は Azure の有償サブスクリプションに紐づけて利用することになります。&lt;/p&gt;

&lt;p&gt;今回は Standard(S0) という有償プランを使いましたが、数日利用していて現在までの利用料は「247円」でした。&lt;br /&gt;
アップロード、学習、判定の各トランザクションで課金され、額は $1 per 1,000 transactions とのことなので、判定APIが大量に利用されるようなサービスでは要注意になるのでしょう。&lt;/p&gt;

&lt;h2 id=&quot;判定結果の所感&quot;&gt;判定結果の所感&lt;/h2&gt;

&lt;p&gt;今回は、配信PCのスクリーンショットを教師データとして使用しました。これはアプリウィンドウのフレームやカメラ映像以外の部分も含まれたものですが、加工が面倒だったのでこのまま使用しました。&lt;br /&gt;
その状態でも Precision:94%, Recall:69% というのは実用に耐えられる数値ではないかと思います。&lt;/p&gt;

&lt;p&gt;ポイントとなる箇所のみに画像をトリミングしたところ、１００% に近い数値になったので、「簡単な加工をするだけでかなりの精度向上が見込める」ことも分かりました。&lt;/p&gt;

&lt;p&gt;趣味やお仕事で使うことも増えそうな、よいサービスだなと改めて思いました。&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Dec 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2018/12/25/45cd7ec04f906cba2f88/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/12/25/45cd7ec04f906cba2f88/</guid>
        
        
        <category>CognitiveServices</category>
        
        <category>Azure</category>
        
        <category>YouTube</category>
        
      </item>
    
      <item>
        <title>Xamarin.Forms の WebView で JavaScript 連携を行う(with iOS/Android共通化)</title>
        <description>&lt;h2 id=&quot;やりたい事&quot;&gt;やりたい事&lt;/h2&gt;
&lt;!--more--&gt;

&lt;p&gt;Xamarin.Forms 製アプリの WebView に表示した Webページから、ネイティブ(C#)で時間のかかる処理を行い、結果を JavaScript に通知したい。&lt;br /&gt;
JavaScript のコードは Android/iOS で共通にしたい。&lt;/p&gt;

&lt;p&gt;具体的には、次のような JavaScript コードの &lt;code class=&quot;highlighter-rouge&quot;&gt;heavyAdd(num)&lt;/code&gt; を実行した時に、ネイティブ側で処理を行い、結果を &lt;code class=&quot;highlighter-rouge&quot;&gt;onResult(res)&lt;/code&gt; で受信したい。&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nx&quot;&gt;MyCalc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MyCalc.onResult - '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;MyCalc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;heavyAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;できた&quot;&gt;できた！&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;前提 - Xamarin.Forms 3.4.x が必要&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;共通&quot;&gt;共通&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;sample.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ja&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      
      &lt;span class=&quot;nx&quot;&gt;MyCalc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onResult&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'MyCalc.onResult - '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

      &lt;span class=&quot;nx&quot;&gt;MyCalc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;heavyAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;98&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;WebView−JavaScript連携サンプル&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;onclick=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;addAsync();&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;計算実行&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/label&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ローカルPC にある &lt;code class=&quot;highlighter-rouge&quot;&gt;sample.html&lt;/code&gt; は、 Webサーバー(&lt;a href=&quot;http://rennnosukesann.hatenablog.com/entry/2018/03/19/233245&quot;&gt;npm serve とか&lt;/a&gt;)を立てて、 &lt;a href=&quot;https://qiita.com/mininobu/items/b45dbc70faedf30f484e&quot;&gt;ngrok&lt;/a&gt; を使って外部公開するのが便利ですね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MainPage.xaml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:WebViewSample&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WebViewSample.MainPage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackLayout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Vertical&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;WebView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;webView&quot;&lt;/span&gt; 
                 &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://xxxx.ngrok.io/sample.html&quot;&lt;/span&gt;
                 &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FillAndExpand&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackLayout&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;android側&quot;&gt;Android側&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Android の CustomWebViewRenderer.cs&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Java.Interop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Platform.Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[assembly: ExportRenderer(typeof(WebView), typeof(WebViewSample.Droid.CustomWebViewRenderer))]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WebViewSample.Droid&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomWebViewRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebViewRenderer&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CustomWebViewRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnElementChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ElementChangedEventArgs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnElementChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddJavascriptInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JavaScriptHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Control&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyCalc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;JavaScriptHandler&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lang&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Webkit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JavaScriptHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Webkit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WebView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Export&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Webkit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JavascriptInterface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;heavyAdd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// メインスレッドから呼ばないとエラー&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;LoadUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;javascript:MyCalc.onResult(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/usayuki/items/aebd4e3ab791b7b008ca&quot;&gt;[Android][Kotlin]JavaScriptと相互通信 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を参考に、ネイティブのやり方をカスタムレンダラーで。&lt;br /&gt;
Android の方はまだ単純で &lt;code class=&quot;highlighter-rouge&quot;&gt;AddJavascriptInterface()&lt;/code&gt; の第2引数がクラス名に、&lt;code class=&quot;highlighter-rouge&quot;&gt;JavascriptInterface&lt;/code&gt; 属性を付けたメソッドが JavaScript のメソッド名になる。&lt;br /&gt;
結果の通知は &lt;code class=&quot;highlighter-rouge&quot;&gt;this.webView.LoadUrl($&quot;javascript:MyCalc.onResult(xx);&lt;/code&gt; で。&lt;/p&gt;

&lt;h3 id=&quot;ios側&quot;&gt;iOS側&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;iOS の CustomWebViewRenderer.cs&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Threading.Tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Foundation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WebKit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Xamarin.Forms.Platform.iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[assembly: ExportRenderer(typeof(WebView), typeof(WebViewSample.iOS.CustomWebViewRenderer))]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;WebViewSample.iOS&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomWebViewRenderer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WkWebViewRenderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IWKScriptMessageHandler&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnElementChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VisualElementChangedEventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnElementChanged&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NativeView&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// JavaScript から呼び出すハンドラを追加。&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserContentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddScriptMessageHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyHeavyAdd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// JavaScript 側で MyCalc.heavyAdd(n) が呼ばれた時に window.webkit.messageHandlers.xxx を呼ぶようにする。&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;MyCalc = {};&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot;MyCalc.heavyAdd = function (num) { window.webkit.messageHandlers.MyHeavyAdd.postMessage(num); };&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserContentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddUserScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WKUserScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NSString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WKUserScriptInjectionTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AtDocumentStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IWKScriptMessageHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DidReceiveScriptMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WKUserContentController&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userContentController&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WKScriptMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;MyHeavyAdd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;// 時間のかかる処理&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Body&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;// 結果を通知&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NativeView&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WKWebView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;webView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EvaluateJavaScript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;MyCalc.onResult(&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;);&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/usayuki/items/6979d0d6f7d8f5b302ad&quot;&gt;[iOS][Swift]JavaScriptと相互通信 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を参考にカスタムレンダラーで実装。&lt;/p&gt;

&lt;p&gt;ポイント1。Xamarin.Forms 3.4から? WebView の実装が &lt;code class=&quot;highlighter-rouge&quot;&gt;WKWebView&lt;/code&gt; になった模様。それまでは(少なくとも Xamarin.Forms 3.1 では) UIWebView だった。&lt;br /&gt;
Xamarin.Forms 3.4 でないと &lt;a href=&quot;https://github.com/xamarin/Xamarin.Forms/blob/3.4.0/Xamarin.Forms.Platform.iOS/Renderers/WkWebViewRenderer.cs&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Xamarin.Forms.Platform.iOS.WkWebViewRenderer&lt;/code&gt;&lt;/a&gt; が存在しないため使えない。&lt;/p&gt;

&lt;p&gt;ポイント２。iOS で JavaScript からネイティブの処理を呼ぶには &lt;code class=&quot;highlighter-rouge&quot;&gt;window.webkit.messageHandlers.xxxx.postMessage()&lt;/code&gt; を使わなければならないが、これでは Android 側と共通化できないので、&lt;code class=&quot;highlighter-rouge&quot;&gt;AddUserScript&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;window.webkit.〜&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;MyCalc.heavyAdd&lt;/code&gt; にマップしている。&lt;/p&gt;

&lt;p&gt;ポイント３。JavaScript からの呼び出しに反応するのは &lt;code class=&quot;highlighter-rouge&quot;&gt;IWKScriptMessageHandler&lt;/code&gt; インターフェース。&lt;/p&gt;

&lt;h2 id=&quot;こんな感じ&quot;&gt;こんな感じ&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/488b5e50-3059-0897-0ea8-9d51b9592957.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;端的に言うと、Android と異なる iOS の JavaScript→ネイティブ呼び出しを、AddUserScript で同じAPIにラップしたよーというお話でした。&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Dec 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2018/12/18/2a8f14684b1210d75c1e/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/12/18/2a8f14684b1210d75c1e/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
        <category>C#</category>
        
        <category>JavaScript</category>
        
      </item>
    
      <item>
        <title>Azure Custom Vision に投入する学習用画像データを imgaug を使って水増ししてみた</title>
        <description>&lt;p&gt;Azure Custom Vision を使ったシステムを作っています。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/ja-jp/services/cognitive-services/custom-vision-service/&quot;&gt;Azure Custom Vision&lt;/a&gt; を使うには、1つのタグに5つ以上の画像ファイルが必要です。&lt;/p&gt;

&lt;p&gt;が、データ提供元から画像データが一つしかもらえなかったり、そもそも5ファイル程度では期待した精度が得られなかったりします。&lt;/p&gt;

&lt;p&gt;こういう時、機械学習の世界では、学習用のデータを水増し(augmentation)することがよくあるようです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/bohemian916/items/9630661cd5292240f8c7&quot;&gt;機械学習のデータセット画像枚数を増やす方法 - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://products.sint.co.jp/aisia/blog/vol1-7&quot;&gt;水増しと転移学習 (Vol.7)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;機械学習のフレームワーク(Cognitive toolkit を含む)には、データの水増し機能が入っているそうですが、今回は Custom Vision を使いたいだけなので、CNTK は使わず、画像の水増しを行うライブラリを使ってみました。&lt;/p&gt;

&lt;h2 id=&quot;画像の水増しライブラリをいくつか&quot;&gt;画像の水増しライブラリをいくつか&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/aleju/imgaug&quot;&gt;aleju/imgaug: Image augmentation for machine learning experiments.&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mdbloice/Augmentor&quot;&gt;mdbloice/Augmentor: Image augmentation library in Python for machine learning.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Python ばっかりやなー。C# や JavaScript 製のも探してみたのですが Popular なものは見つからず。&lt;br /&gt;
Python はハンズオンを一度経験しただけの状態ですが、トライしてみます。&lt;/p&gt;

&lt;p&gt;ツールは「imgaug」を使うことにしました。日本語の解説記事がありましたので。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.classmethod.jp/etc/imgaug-introduction/&quot;&gt;imgaugを使ってPythonで画像増幅を行う ｜ DevelopersIO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ついでに-docker-も使おう&quot;&gt;ついでに Docker も使おう&lt;/h2&gt;

&lt;p&gt;たしか Python って 2.x と 3.x がどちらも生きてるんだよねえ、(macOSだけど)環境構築面倒そう。&lt;br /&gt;
ということで Docker を使うことにしました。Docker で動くようにしておけば、ゆくゆくはまるっと FaaS 化できるよね、という期待もあります。&lt;/p&gt;

&lt;p&gt;Docker は version 18.09.0 が入っているのでこのままで。&lt;br /&gt;
まず Docker イメージを作るための &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; を記述します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dockerfile&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM python:3

RUN pip install imgaug
RUN pip install opencv-python
RUN pip install imageio
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;python:3 をベースに imgaug と処理に必要なライブラリ各種をインストールしておきます。&lt;/p&gt;

&lt;p&gt;そして &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; のあるディレクトリで&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt; imgaug
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を実行すると、 imgaug という名の Docker イメージが作成されます。(↓は &lt;code class=&quot;highlighter-rouge&quot;&gt;docker images&lt;/code&gt; で確認した様子)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
imgaug              latest              1fb215f98c9a        About an hour ago   1.41GB
python              3                   1e80caffd59e        3 weeks ago         923MB
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;imgaug-で画像を水増しするコードを書く&quot;&gt;imgaug で画像を水増しするコードを書く&lt;/h2&gt;

&lt;p&gt;次に imgaug で水増しを行う処理を Python で書きます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;work/&lt;/code&gt; ディレクトリを作って、その中に &lt;code class=&quot;highlighter-rouge&quot;&gt;run_aug.py&lt;/code&gt; を作成することにしましょうか。&lt;br /&gt;
あ、今のところは docker 関係なく。ホストコンピュータの方で作業します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;run_aug.py&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;imgaug&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ia&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;imgaug&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;augmenters&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iaa&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;imageio&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;glob&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os.path&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove_glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pathname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recursive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# 出力先ディレクトリをクリーン&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;remove_glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;glob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dir_in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'in: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imageio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;c&quot;&gt;# ノイズ&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 加工後画像をファイルに保存する&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aug_img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# /data_in/img.jpg -&amp;gt; img.jpg&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;splitext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# img.jpg -&amp;gt; (img, jpg)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;outpath&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir_out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'_'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'_'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;imageio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imwrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aug_img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'out: '&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# ノイズを入れる&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;noise&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# 画像に変換を適用する&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;augDropout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iaa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;aug_img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;augDropout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;augment_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;writeFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dir_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'noise'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aug_img&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__file__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 実行ファイルの場所&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/images_in'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'/images_out'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;これが C#er が初めて書いた Python のコードだｗ&lt;/p&gt;

&lt;p&gt;ええと、 &lt;code class=&quot;highlighter-rouge&quot;&gt;run_aug.py&lt;/code&gt; のあるディレクトリに &lt;code class=&quot;highlighter-rouge&quot;&gt;images_in/&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;images_out/&lt;/code&gt; というディレクトリを作り、入力画像を &lt;code class=&quot;highlighter-rouge&quot;&gt;images_in/&lt;/code&gt; に入れます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;image_in/&lt;/code&gt; 内のファイルを列挙して、入力ファイルにノイズを入れます。 &lt;code class=&quot;highlighter-rouge&quot;&gt;noise&lt;/code&gt; 関数に渡しているパラメータ &lt;code class=&quot;highlighter-rouge&quot;&gt;[0.3, 0.4, 0.5]&lt;/code&gt; はノイズの濃さを示しており、ノイズ薄い・中間・濃いの3つのファイルが &lt;code class=&quot;highlighter-rouge&quot;&gt;images_out/&lt;/code&gt; に出力されるという仕組みです。&lt;/p&gt;

&lt;h2 id=&quot;docker-で-run_augpy-を実行する&quot;&gt;Docker で &lt;code class=&quot;highlighter-rouge&quot;&gt;run_aug.py&lt;/code&gt; を実行する&lt;/h2&gt;

&lt;p&gt;Docker 内で、Python で &lt;code class=&quot;highlighter-rouge&quot;&gt;run_aug.py&lt;/code&gt; を実行します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;work/&lt;/code&gt; ディレクトリで、以下のコマンド一発です。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd work

docker run --rm -v $(pwd):/temp imgaug python /temp/work/run_aug.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;一応解説。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;docker run : docker コンテナを作って起動します&lt;/li&gt;
  &lt;li&gt;–rm : 実行が終わったら直ちにコンテナを削除します&lt;/li&gt;
  &lt;li&gt;-v : &lt;code class=&quot;highlighter-rouge&quot;&gt;$(pwd)&lt;/code&gt;=現在のディレクトリを docker 内の &lt;code class=&quot;highlighter-rouge&quot;&gt;/temp&lt;/code&gt; ディレクトリにマップします&lt;/li&gt;
  &lt;li&gt;imgaug : docker イメージ名です(先に作ったやつ)&lt;/li&gt;
  &lt;li&gt;python /temp/work/run_aug.py : docker 内で実行するコマンドです。Python で &lt;code class=&quot;highlighter-rouge&quot;&gt;run_aug.py&lt;/code&gt; を実行します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;完了すると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;images_out/&lt;/code&gt; ディレクトリに、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sample_noise_1.jpg
sample_noise_2.jpg
sample_noise_3.jpg
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;の水増し画像ファイル群が出力されます。&lt;/p&gt;

&lt;h2 id=&quot;完全版&quot;&gt;完全版&lt;/h2&gt;

&lt;p&gt;これの完全版を github に公開しています。&lt;br /&gt;
ノイズ以外に「一部欠落」「回転」「移動」「剪断(shear)」を行っています。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/imgaug_sample_with_docker&quot;&gt;amay077/imgaug_sample_with_docker: imgaug を使うサンプルプログラム（実行環境 docker 付き）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;完全版の実行結果&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://github.com/amay077/imgaug_sample_with_docker/raw/master/result.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;おわりに&quot;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;こうして水増しされた画像を、元画像とともに Custom Vision に投入して Train し、まずまず期待した検出が行えるようになりました。&lt;/p&gt;

&lt;p&gt;水増しの加工の種類は imgaug にもたくさん用意されており、今回試したものが最適とは思えませんが、とりあえず検証を繰り返すための 「たたき台」 としては使えると思っています。&lt;/p&gt;

&lt;p&gt;ひとつ疑問なのは、&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;「Custom Vision の Train の過程で、自動的にデータの水増し(augmentation)を行っているのではないか？」&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ということです。特に根拠はなく、「CNTKには、データの水増し機能が入っている」という情報から勝手に思っているだけなのですが。&lt;/p&gt;

&lt;p&gt;できれば機械学習そのものに対する学習はできるだけ避けてとおりたい（手が回らん）ので、簡単な手間で使用できる Custom Vision を始めとする各社の PaaS は、大変助かります。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Q:どのくらい勉強しなければならないのか？&lt;br /&gt;A:時間軸次第。２～３年先には機械学習もパターン化すると予想。その後にはアルゴリズムを選択する必用もなくなると思う。 &lt;a href=&quot;https://twitter.com/hashtag/roomH?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#roomH&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/decode16?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#decode16&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめいぱわーにおまかせろ! (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/735333613085020160?ref_src=twsrc%5Etfw&quot;&gt;2016年5月25日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;これ、2年前の de:code でスピーカーの方が話されていたことですが、だいぶその通りな世界になりつつあるなあという感じがします。&lt;/p&gt;
</description>
        <pubDate>Fri, 14 Dec 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2018/12/14/4c418310872e8659fe6a/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/12/14/4c418310872e8659fe6a/</guid>
        
        
        <category>Docker</category>
        
        <category>Python</category>
        
        <category>MachineLearning</category>
        
        <category>Azure</category>
        
      </item>
    
      <item>
        <title>Android/iOSアプリを Azure Pipelines から DeployGate に配信する</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/ja-jp/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt; でビルドした Android や iOS アプリを &lt;a href=&quot;https://deploygate.com/?locale=ja&quot;&gt;DeployGate&lt;/a&gt; に配信します。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;DeployGate はモバイルアプリをテスターやβ版ユーザーに配布するサービスです。&lt;br /&gt;
Microsoft 系のサービスだと App Center にアプリ配布機能があるのですが、DeployGate は日本のサービスで（クライアントアプリ含め）UI が日本語である点と、一つのアプリをグループごとに配信管理(会社のお偉いさんた達には Stable を、同僚グループには最新版を、とか)できるのが気に入っています。&lt;/p&gt;

&lt;h2 id=&quot;deploygate-のユーザー名と-apiキーの取得&quot;&gt;DeployGate のユーザー名と APIキーの取得&lt;/h2&gt;

&lt;p&gt;1つ目は、DeployGate でユーザーを作ったときのユーザー名を得ておきます。&lt;br /&gt;
2つ目は https://deploygate.com/settings にアクセスして「API key」に表示されてる値を得ます。&lt;/p&gt;

&lt;h2 id=&quot;azule-pipelines-にタスクを追加&quot;&gt;Azule Pipelines にタスクを追加&lt;/h2&gt;

&lt;p&gt;DeployGate 用のタスクは残念ながら無いので、Bash Script でやります。&lt;/p&gt;

&lt;h3 id=&quot;android-の場合&quot;&gt;Android の場合&lt;/h3&gt;

&lt;p&gt;Android の場合は、Bash のタスクを「Signing and aligning APK file(s)」の下に追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/9c3766b0-72c6-9259-30e6-fa01eaeff8f5.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;スクリプトは次のように記述します。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;token=＜DeployGateAPIキー＞&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file=@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;build.binariesdirectory&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(BuildConfiguration)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\＜&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;APKファイル名＞&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message=＜デプロイ時のメッセージ＞&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  https://deploygate.com/api/users/＜DeployGateユーザー名＞/apps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;＜DeployGateAPIキー＞ - 先に取得しておいた DeployGate の APIキー&lt;/li&gt;
  &lt;li&gt;＜DeployGateユーザー名＞ - 先に取得しておいた DeployGate の ユーザー名&lt;/li&gt;
  &lt;li&gt;＜APKファイル名＞ - ビルド・サインされた APK ファイル（com.mycompany.awesomeapp-Signed.apk など）&lt;/li&gt;
  &lt;li&gt;＜デプロイ時のメッセージ＞ - DeployGate へのこの配信に付与するメッセージ(最新のgitコミットログを代入できるとよいんだけど…)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;＜APKファイル名＞ は、初見では分からないと思うので、一度ビルドして Artifact に保存されたファイル一覧を確認するとよいと思います。くれぐれも「サイン済み」の「-Signed」が付いた apk ファイルを指定してください。&lt;/p&gt;

&lt;h3 id=&quot;ios-の場合&quot;&gt;iOS の場合&lt;/h3&gt;

&lt;p&gt;iOS の場合は、Bash のタスクを「Copy Files to: $(build.artifactstagingdirectory)」の下に追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/5ba3beaf-dc36-4891-fdbf-9f52a0d1d938.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;スクリプトは Android とほぼ同じように、次のように記述します。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;token=＜DeployGateAPIキー＞&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file=@&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;build.artifactstagingdirectory&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/＜ipaファイルへのパス＞&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message=＜デプロイ時のメッセージ＞&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  https://deploygate.com/api/users/＜DeployGateユーザー名＞/apps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;＜DeployGateAPIキー＞ - Android 側と同じ&lt;/li&gt;
  &lt;li&gt;＜DeployGateユーザー名＞ - Android 側と同じ&lt;/li&gt;
  &lt;li&gt;＜ipaファイルへのパス＞ - ビルドされた ipa ファイルへのパス（xxx/bin/iPhone/Release/AwesomeApp.ipa など）&lt;/li&gt;
  &lt;li&gt;＜デプロイ時のメッセージ＞ - Android 側と同じ&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;＜ipaファイルへのパス＞ も、一度ビルドして Artifact を見るのがよいと思います。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Azure Pipelines を使う人は DeployGate にあまり馴染みがないと感じるので紹介してみました。&lt;br /&gt;
これは Pipelines の Builds じゃなくて Releases の方でやるべきかな？わからん。&lt;/p&gt;

&lt;p&gt;signed-apk や ipa ファイルへのパスを示す環境変数があったら便利なんすけどねー、どやんすー。&lt;/p&gt;
</description>
        <pubDate>Tue, 11 Dec 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2018/12/11/1c1f55d09760fa57b448/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/12/11/1c1f55d09760fa57b448/</guid>
        
        
        <category>Android</category>
        
        <category>iOS</category>
        
        <category>Azure</category>
        
        <category>DeployGate</category>
        
      </item>
    
      <item>
        <title>Azure Pipelines で Xamarin.Android の AOT Compile を使う</title>
        <description>&lt;p&gt;Xamarin.Forms で簡単なアプリを作って、その Android 版を社内向けに配布しようとしたんですけど、 .apk のサイズが 60Mbyte超 もあって、「仕方ないよね…」と思いながら、 モバイル回線でそれをダウンロードさせるのかー、と思うと良心の呵責を感じてしまい、可能な限りで apk のサイズを縮小することを試みました。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;xamarinandroid-アプリのビルドオプションを調整して-apk-サイズを減らす&quot;&gt;Xamarin.Android アプリのビルドオプションを調整して apk サイズを減らす&lt;/h2&gt;

&lt;p&gt;apk サイズの削減については、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/conduits/items/cd7338329c3b7c22dc9c&quot;&gt;Xamarin.Android 起動速度改善の記録 (追記あり) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を参考にさせていただきました。当該記事は「起動時間」にフィーチャーしていますが、サイズ縮小についても十分に有用です。&lt;/p&gt;

&lt;p&gt;最終的に落ち着いたコンパイルオプションは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Android Build - Enable AOT&lt;/li&gt;
  &lt;li&gt;Linker - Link SDK assemblies only&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、これも上記記事と同じです(LLVM は使ってません)。&lt;br /&gt;
この結果 apk のサイズは 60Mbyte超 → 33Mbyte になりました。&lt;/p&gt;

&lt;p&gt;（上記に比べてさらに、「Linker - Link all assemblies」 とすれば 25Mbyte にまで削減できましたが、このアプリは起動せず、「リンクしたらマズそうなアセンブリ」を Ignore assemblies に追加していったら起動するようにはなったものの apk は 29Mbyte になったので、かけるコストに対して効果は薄そうだと判断してやめました。）&lt;/p&gt;

&lt;p&gt;ここまではアプリのビルドの話で、次からが本題です。&lt;/p&gt;

&lt;h2 id=&quot;azure-pipelines-で-xamarinformsandroid-アプリをビルドする&quot;&gt;Azure Pipelines で Xamarin.Forms(Android) アプリをビルドする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://azure.microsoft.com/ja-jp/services/devops/pipelines/&quot;&gt;Azure Pipelines&lt;/a&gt; は Azure DevOps というサービスに含まれるサブサービスの一つで、CI/CD の機能を提供します。&lt;/p&gt;

&lt;p&gt;Android, iOS, Linux, macOS, Windows 用のアプリをビルド・デプロイできます。&lt;br /&gt;
OSS向けならビルド時間は無制限、個人プライベート向けでも1800分/月&lt;sup id=&quot;fnref:a&quot;&gt;&lt;a href=&quot;#fn:a&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; まで無料で使うことができます。&lt;/p&gt;

&lt;p&gt;Azure Pipelines で Xamarin.Android 向けのプリセットを選択すると、ほぼそのままアプリのビルドが行える状態になります。このプリセットで使用されるビルドエージェントは “Hosted VS2017” で、つまり 「Visual Studio 2017 がインストールされた Windows マシン」 です。&lt;/p&gt;

&lt;p&gt;が、上記の 「Enable AOT」 を有効にしたプロジェクトで CI ビルドさせると、以下のエラーが出ます。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;XA5101: Missing Android NDK toolchains directory ‘\toolchains’. Please install the Android NDK.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;どうやら Android NDK がインストールされていない様子。 Agent の Pool information を見ても Android NDK は記載されていません。&lt;/p&gt;

&lt;p&gt;そこで &lt;a href=&quot;https://twitter.com/AzureDevOps&quot;&gt;公式Twitter&lt;/a&gt; に凸! すると、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Thanks for reaching out! We rely on Visual Studio to install the Android NDK. This thread with a similar scenario might come in handy: &lt;a href=&quot;https://t.co/rSqfEaoLhS&quot;&gt;https://t.co/rSqfEaoLhS&lt;/a&gt;.&lt;/p&gt;&amp;mdash; Azure DevOps (@AzureDevOps) &lt;a href=&quot;https://twitter.com/AzureDevOps/status/1068128192685375488?ref_src=twsrc%5Etfw&quot;&gt;2018年11月29日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;「Android NDK は Visual Studio が入れちゃんだわ、NDK は &lt;code class=&quot;highlighter-rouge&quot;&gt;C:\Microsoft\AndroidNDK64\android-ndk-r15c&lt;/code&gt; に入ってるよ(超意訳)。」とのこと。&lt;br /&gt;
これを手がかりにさらに調べると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/36940896/missing-android-ndk-toolchains-directory-toolchains-when-building-xamarin-and/47338287#47338287&quot;&gt;Missing Android NDK toolchains directory ‘\toolchains’ when building Xamarin.Android with hosted tfs build server - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;in the MSBuild Options, provide the following Additional Argument:&lt;/p&gt;

  &lt;p&gt;VS2017 Hosted agent: &lt;br /&gt;
/p:AndroidNdkDirectory=”C:\ProgramData\Microsoft\AndroidNDK64\android-ndk-r13b”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これだね。&lt;/p&gt;

&lt;p&gt;というわけでビルドタスクのオプションに、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/p:AndroidNdkDirectory=&quot;C:\Microsoft\AndroidNDK64\android-ndk-r15c&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;を追加します。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/1025aa90-0845-16c6-2578-a4db3949904d.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これで AOT を有効にした状態の Xamarin.Android プロジェクトがビルドできるようになりました。&lt;/p&gt;

&lt;p&gt;そういえば AOT はまだ Experimental ですね。&lt;br /&gt;
あと Enterprise Edition でしか使えないということだったような？ まあ見なかったことにしよう。&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:a&quot;&gt;
      &lt;p&gt;サイトには「並列ジョブ (1 か月あたり最大 1,800 分)」 とあるので、単一のジョブなら無制限なのかもしれません。 &lt;a href=&quot;#fnref:a&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Fri, 30 Nov 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay0777.net/blog/2018/11/30/694b6d5929c71bb00308/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/11/30/694b6d5929c71bb00308/</guid>
        
        
        <category>Xamarin</category>
        
        <category>Azure</category>
        
        <category>Android</category>
        
      </item>
    
      <item>
        <title>Xamarin Profiler と Android Profiler を併用して Xamarin Android アプリのメモリ使用量を測定する</title>
        <description>&lt;p&gt;Xamarin 製アプリのメモリのプロファイリングは、&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;.NET(mono ランタイム) が管理するオブジェクト&lt;/li&gt;
  &lt;li&gt;Java(Dalvik) が管理するオブジェクト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を意識する必要があります。&lt;/p&gt;

&lt;h2 id=&quot;使用するツール&quot;&gt;使用するツール&lt;/h2&gt;

&lt;p&gt;.NET(mono ランタイム) が管理するオブジェクトのメモリ測定には、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/ja-jp/xamarin/tools/profiler/?tabs=vsmac&quot;&gt;Xamarin Profiler - Xamarin ｜ Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使用します。これは Visual Studio と連携するアプリで、IDE から Run&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Start Profiling とすると起動できるものです。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Java(Dalvik) が管理するオブジェクトのメモリ測定には、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/studio/profile/android-profiler?hl=ja&quot;&gt;Android Profiler でアプリのパフォーマンスを測定する  ｜  Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使用します。こちらは Android Studio をインストールすれば一緒に入っています。&lt;/p&gt;

&lt;h2 id=&quot;試してみた&quot;&gt;試してみた&lt;/h2&gt;

&lt;h3 id=&quot;xamarin-profiler&quot;&gt;Xamarin Profiler&lt;/h3&gt;

&lt;p&gt;Xamarin Android で、画面に2つのボタンを配置し、それぞれ次のような処理を行うコードを書きます。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;[Activity(Label = &quot;LeakSample&quot;, MainLauncher = true, Icon = &quot;@mipmap/icon&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MemoryStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;netStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MemoryStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javaStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Set our view from the &quot;main&quot; layout resource&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;SetContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;FindViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myButton1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;netStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;FindViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myButton2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;javaStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;myButton1&lt;/code&gt; を押したときには、 .NET のクラスである &lt;code class=&quot;highlighter-rouge&quot;&gt;System.IO.MemoryStream&lt;/code&gt; にデータ追加します。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;myButton2&lt;/code&gt; を押したときには、 Java のクラスである &lt;code class=&quot;highlighter-rouge&quot;&gt;Java.IO.ByteArrayOutputStream&lt;/code&gt; にデータ追加します。&lt;/p&gt;

&lt;p&gt;こんなプログラムを Run &amp;gt; Start Profiling で起動してみます。&lt;br /&gt;
アプリが起動する前に Xamarin Profiler が起動します。Choose target は既に起動したい Android アプリが設定されているので、「割り当て」を選択して「Next」します。&lt;/p&gt;

&lt;p&gt;次の画面の「Enable automatic snapshots」をチェックすると自動的(一定間隔で)にメモリのスナップショットを記録しますがこれはお好みで。&lt;/p&gt;

&lt;p&gt;「プリファイリングの開始」を押すとアプリが起動します。&lt;br /&gt;
Xamarin Profiler の上部にある カメラアイコン を押すと任意のタイミングでメモリ状態を記録できます。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;myButton1&lt;/code&gt; を数回押してから カメラアイコン を押してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/83830c8c-486f-e9da-5a1b-89b11e96c88f.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上図のように、追加した byte データが記録されています。&lt;/p&gt;

&lt;p&gt;次に、&lt;code class=&quot;highlighter-rouge&quot;&gt;myButton2&lt;/code&gt; を数回押してから カメラアイコン を押してみましょう。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/a82fb1e1-f810-c511-ec10-260e941676eb.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今度は Dalvik 管轄のオブジェクトへデータを追加したので Xamarin Profiler ではそのクラスは観測できません。（ワーキングセットは増えてるのでそれは観測できる？）&lt;/p&gt;

&lt;h3 id=&quot;android-profiler-with-xamarinandroid-apps&quot;&gt;Android Profiler with Xamarin.Android apps&lt;/h3&gt;

&lt;p&gt;Dalvik が管理している領域のプロファイリングは Android Profiler を使います。&lt;br /&gt;
Xamarin であっても「それは Android/Java API をラップしただけ」の実体はネイティブ Android アプリなので、Android SDK のツールは使えるのです。&lt;/p&gt;

&lt;p&gt;Android Studio を起動して適当な Android Apps のプロジェクトを開くか作ります（これはダミーです）。&lt;br /&gt;
次に メニュー &amp;gt; View &amp;gt; Tool Windows &amp;gt; Profiler で下部に Profiler ペインが開きます。&lt;br /&gt;
SESSIONS の横の「＋」を押して、対象の端末 &amp;gt; Other processes &amp;gt; 対象のアプリID を選択すると、プロファイリングが始まります。&lt;/p&gt;

&lt;p&gt;この状態で、アプリの &lt;code class=&quot;highlighter-rouge&quot;&gt;myButton2&lt;/code&gt; を何度か押すと、下図のようになります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/ac764a06-0947-a4e1-b579-75cde686d392.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ボタンを押すたびにメモリ使用量が増えているのが確認できます。&lt;br /&gt;
（実は &lt;code class=&quot;highlighter-rouge&quot;&gt;myButton1&lt;/code&gt; を押すと、最初の1回はメモリ使用量が増えます。”.NET だけ” には留まらないなにか、があるのでしょうか、おそらく。）&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;このように Xamarin(.NET)側のプロファイリングには Xamarin Profiler が、Java/Android API使用部のプロファイリングには Android Profiler がそれぞれ使用でき、同時利用あるいは併用することで、 Xamarin Android アプリの計測ができます。&lt;/p&gt;

&lt;p&gt;これは Xamarin.Forms アプリでも同様です。その場合、Custom Renderer やライブラリの Android 依存な箇所の計測は Android Profiler に頼ることがでてくるでしょう。&lt;/p&gt;

&lt;p&gt;また、Xamarin Profiler は Xamarin.iOS アプリの計測もできます。というか Xamarin Profiler の Look&amp;amp;Feel は Xcode - Instruments にとても似ていますね。&lt;/p&gt;

&lt;p&gt;各種プロファイラ自体の使い方や機能については、私も全然把握できてないので、知見が溜まったらまた何か書きます。&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Oct 2018 09:59:01 -0500</pubDate>
        <link>https://blog.amay0777.net/blog/2018/10/29/d774613ccab4e7517201/</link>
        <guid isPermaLink="true">https://blog.amay0777.net/blog/2018/10/29/d774613ccab4e7517201/</guid>
        
        
        <category>Android</category>
        
        <category>.NET</category>
        
        <category>Xamarin</category>
        
      </item>
    
  </channel>
</rss>
