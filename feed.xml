<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>http://blog.amay077.net/</link>
    <atom:link href="http://blog.amay077.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 18 Sep 2017 20:19:53 +0900</pubDate>
    <lastBuildDate>Mon, 18 Sep 2017 20:19:53 +0900</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      <item>
        <title>iOSDC 2017 に参加してきました</title>
        <description>&lt;p&gt;iOSDC 2017 に参加してきましたよっと。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/joined_iosdc_2017_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://iosdc.jp/2017/&quot;&gt;iOSDC Japan 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ふだんは「クロスプラットフォーマーなら、Java も Swift もできなきゃダメだぜ☆」なんて言ってる割には、実は Swift で iOS アプリを書いたことはなくて、Android の勉強会にはちょいちょい参加してて DroidKaigi2017 では登壇もさせてもらったわけですが、iOS/Swift 系のコミュニティにはよく分かってませんでした。&lt;/p&gt;

&lt;p&gt;「外国語を学ぶことはその国の文化を学ぶこと」なんてよく言われますけど、プログラミング言語やプラットフォームも同じだと思っていて、iOS/Swift アプリ開発者さん達の文化というか空気を感じたくて参加しました。&lt;/p&gt;

&lt;h2 id=&quot;セッション&quot;&gt;セッション&lt;/h2&gt;

&lt;p&gt;こういうイベントって、50分セッションが多いと思うんですけど、iOSDC は 15分または30分で、いろいろな話を聞くことができました。&lt;br /&gt;
「もっと聞きたい！」と思うこともありましたがこのスタイルもいいなと思います。&lt;/p&gt;

&lt;p&gt;Swift や iOS SDK を題材にしたものが中心でありつつ、とは言えサーバーサイドのネタでは Firebase が登場することが多かったように見えました（自分が聞いたセッションがそうだっただけかも）。DroidKaigi よりもネタの多様性があったように見えました。&lt;/p&gt;

&lt;p&gt;数学ネタも多かったですね。&lt;br /&gt;
高校からほとんど「数学」をやってないので、式や用語の意味は分かりませんが、丁寧な解説やコードがあったので「何をしているのか」はわかりました。&lt;/p&gt;

&lt;p&gt;特に、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://iosdc.jp/2017/node/1445&quot;&gt;Swift で数学のススメ 〜 プログラミングと数学を同時に学べ ｜ iOSDC Japan 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;14:20 から「Swift で数学のススメ 〜 プログラミングと数学は同時に学べ」で発表します👍数学の難しさにどう立ち向かって行くか、エンジニアの視点からの提案です💪群・環・体から代数拡大まで15分で頑張る💨&lt;a href=&quot;https://t.co/1yfrRHF5OP&quot;&gt;https://t.co/1yfrRHF5OP&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/iOSDC?src=hash&quot;&gt;#iOSDC&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/b?src=hash&quot;&gt;#b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Taketo Sano (@taketo1024) &lt;a href=&quot;https://twitter.com/taketo1024/status/908919531157962753&quot;&gt;2017年9月16日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;がとてもよかった。&lt;/p&gt;

&lt;p&gt;なんというかスピーカーさんの情熱が発表に溢れていて&lt;/p&gt;

&lt;p&gt;「あーこの人は本当に数学のことが大好きなんだなあ」&lt;/p&gt;

&lt;p&gt;というのがひしひしと伝わってきました。&lt;br /&gt;
会場大学だったし、こんな教授の講義で自分が異性だったら惚れるレベル。&lt;br /&gt;
動画が公開されたら是非見て欲しいです。&lt;/p&gt;

&lt;p&gt;ベストスピーカー賞で４位か５位だったと思います。会場が広く聴講者も多い room A のセッションが上位を占めるなかで、votes per atendees ではトップだったんではないかと思います。&lt;/p&gt;

&lt;p&gt;他には、クロスプラットフォームのセッションや MVC や MVVM などのUIアプリ設計手法の話は iOSDC でも人気でした。Android では公式の Data Binding サポートや Archtecture Components での ViewModel サポートなどがあるので、iOS にもデファクトなライブラリが出てくれば、より一般化するのでしょうね。&lt;/p&gt;

&lt;h2 id=&quot;lt&quot;&gt;LT&lt;/h2&gt;

&lt;p&gt;やばい。&lt;br /&gt;
day2 も day3 もレベルが高すぎた。登壇者の方、通常セッションよりプレッシャーあったんではないかと思います(心中お察しします)。&lt;/p&gt;

&lt;p&gt;周りがみんなビールだらけで「みんなビール好きすぎだろ」と若干引き気味だったのですが、みなさんのトークが楽しすぎたので盛り上がれました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://csugjp.connpass.com/event/50930/&quot;&gt;今年3月の C# の勉強会&lt;/a&gt;で、bitflyer さんのブロックチェーンの発表を聞いた直後、興味持って ￥50,000 をチャージしたものの買い時を見失って放置してしまった、あの時買っておけばあるいは僕もｗ&lt;/p&gt;

&lt;h2 id=&quot;ゴージャス&quot;&gt;ゴージャス&lt;/h2&gt;

&lt;p&gt;個人スポンサー(1.5k yen)チケットを購入したわけだけど、そうでなくてもノベルティがとてもゴージャスでした、スポンサー企業さまに感謝！&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/iosdc?src=hash&quot;&gt;#iosdc&lt;/a&gt; のノベルティをベッドに広げてみたわけだけどゴージャス！（これ以外に個人スポンサー向けのTシャツとパーカーも） &lt;a href=&quot;https://t.co/SeJDOg1nWK&quot;&gt;pic.twitter.com/SeJDOg1nWK&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@バレデコ待ち (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/908683878126166016&quot;&gt;2017年9月15日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;個人スポンサー特典で頂けたパーカー含めてデザイン的にもイケてて、これでようやく Google I/O Tシャツを引退させられるし、パーカーもヘビロテすると思います（カミさんからは「おっさんがそのデザインはどうよ？」と言われたけど、負けないっ）。&lt;/p&gt;

&lt;h2 id=&quot;xamarin&quot;&gt;Xamarin&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;【最終結果発表】&lt;a href=&quot;https://twitter.com/hashtag/iosdc?src=hash&quot;&gt;#iosdc&lt;/a&gt; 参加者のみなさん、「何で開発していますか？」 &lt;a href=&quot;https://t.co/LSAUVIuKMn&quot;&gt;pic.twitter.com/LSAUVIuKMn&lt;/a&gt;&lt;/p&gt;&amp;mdash; CyberAgentDevelopers (@ca_developers) &lt;a href=&quot;https://twitter.com/ca_developers/status/909329406979481601&quot;&gt;2017年9月17日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;この場でこんだけ vote されてるのスゴくないすか？！&lt;/p&gt;

&lt;p&gt;なんか iOS な人たちは Web 系とのつながりが深くて、 X-Plat なら React の方を使ってると勝手に思い込んでました。&lt;/p&gt;

&lt;h2 id=&quot;カンファレンスアプリ&quot;&gt;カンファレンスアプリ&lt;/h2&gt;

&lt;p&gt;iOS のイベントだから、iOS版しか作らないのはわかってました。&lt;br /&gt;
普段使いがAndroidだから仕方ないなーと思いつつ、Webサイトのタイムテーブルが、BACKする度に初日に戻っちゃうから使いづらかったのでネイティブアプリは欲しかったですね。&lt;/p&gt;

&lt;p&gt;そんなときこそ X-Plat な Xamarin でしょ！！&lt;br /&gt;
とは自分は思っていなくて、今ならカンファレンス用のチャットボットを作ってみたい。タイムテーブルのような情報俯瞰は難しいけど、検索とかfavとか通知なら問題ないし、参加者との双方向コミュニケーションもやりやすいかもしれない（Twitterに比べて）。もちろんプラットフォーム問わないしね。&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next?&lt;/h2&gt;

&lt;p&gt;今回は懇親会は参加せず、そんなに他の人とコミュニケーション取れたわけではなかたけど、まあ焦らず（DroidKaigi も、初参加から初登壇まで３年かかってるしな）やっていこうと思います。&lt;/p&gt;

&lt;p&gt;知り合いが多いコミュニティに参加するのは心地よいけど、そこだけで満足してちゃもったいないと自分は思っていて、ましてや現在ではひとつのテクノロジーだけでプロダクトが “ビルド” できるわけでは無いのだから、自分も人見知りだけど、積極的に他のコミュニティにも参加して、その文化を学んでいきたいと思います。久しぶりに「知り合いがほぼ居ない場」に参加して、技術コミュニティに参加してみようと思ったきっかけとか、初心に戻れた気がします。&lt;/p&gt;

&lt;p&gt;最後に、僕も &lt;a href=&quot;https://www.youtube.com/watch?v=AC7C5CY1Meo&quot;&gt;ミサトさんじゃなくてマリューさん&lt;/a&gt; だな。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Sep 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/</guid>
        
        
        <category>iOS</category>
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Androidでアニメーションを連続で実行するのが面倒なのを Kotlin で便利にした話</title>
        <description>&lt;p&gt;Android で「浮いてるように見える」アニメーションを実装する機会がありまして。次の画像のようなものなんですが。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/concat_animations_with_kotlin_01.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このアニメーションは、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;2秒かけて上へ少し移動する&lt;/li&gt;
  &lt;li&gt;2秒かけて下へ少し移動する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;を「連続で」「繰り返し」実行させることで実現しています。&lt;br /&gt;
「連続で」とは、 1. のアニメーションが終わったら 2. のアニメーションを開始する、という意味です。&lt;/p&gt;

&lt;h2 id=&quot;java-android-では&quot;&gt;Java-Android では…&lt;/h2&gt;

&lt;p&gt;これを Android の View のアニメーションAPI で実現すると、普通にひどいコードになります。次がそれ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;// 2秒かけて上へ移動するアニメーション
final TranslateAnimation anim1 = new TranslateAnimation(
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF, -0.1f);
anim1.setDuration(2000);

// 2秒かけて下へ移動するアニメーション
final TranslateAnimation anim2 = new TranslateAnimation(
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF, -0.1f,
        Animation.RELATIVE_TO_SELF,  0.0f);
anim2.setDuration(2000);

anim1.setAnimationListener(new Animation.AnimationListener() {
    @Override
    public void onAnimationStart(Animation animation) { }

    @Override
    public void onAnimationEnd(Animation animation) {
        anim2.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) { }

            @Override
            public void onAnimationEnd(Animation animation) {
                // 3. 下へのアニメーションが終わったら、上へ移動するアニメーションをまた開始
                view.startAnimation(anim1);
            }

            @Override
            public void onAnimationRepeat(Animation animation) { }
        });

        // 2. 上へのアニメーションが終わったら、下へ移動するアニメーションを開始
        view.startAnimation(anim2);
    }

    @Override
    public void onAnimationRepeat(Animation animation) { }
});

// 1. 上へ移動するアニメーションを開始
view.startAnimation(anim1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コールバックのネストに、行いたい処理とコードの記述順が逆という二重苦、これはやってられません。&lt;/p&gt;

&lt;p&gt;これだけで Kotlin を使いたい案件です（Java でも Deferred が使えるライブラリ&lt;RxJava でも可=&quot;&quot;&gt;を使えばマシにはなります）。&lt;/RxJava&gt;&lt;/p&gt;

&lt;h2 id=&quot;これが-kotlin-だと&quot;&gt;これが Kotlin だと…&lt;/h2&gt;

&lt;p&gt;というわけで Kotlin でやってみました。&lt;/p&gt;

&lt;p&gt;まず、「アニメーションを実行して、アニメーションが終わったら次へ継続する関数」を作成します。&lt;br /&gt;
ここでは &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; の拡張関数として定義してみました。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;net.amay077.animsample&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.View&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.animation.Animation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlin.coroutines.experimental.suspendCoroutine&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimationAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspendCoroutine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAnimationListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnimationListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimationStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimationEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onAnimationRepeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;呼び出し側は次のような感じ。&lt;br /&gt;
コールバック地獄の Java に比べて天国かよここは…。&lt;br /&gt;
アニメーションはUIスレッドから呼び出す必要があるので &lt;code class=&quot;highlighter-rouge&quot;&gt;async() { }&lt;/code&gt; ではなく &lt;code class=&quot;highlighter-rouge&quot;&gt;launch(UI) { }&lt;/code&gt; を使う必要があるようです。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;button1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;anim1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TranslateAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anim1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;anim2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TranslateAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anim2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// メインスレッドから async するよ
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ずっとくりかえし
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimationAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. 2秒かけて上へ移動するアニメーションを実行
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimationAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. 2秒かけて下へ移動するアニメーションを実行
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kotlin をまともに使うのが初めてなのでまだ改善できるかも。。&lt;br /&gt;
よいコードがありましたらご指摘ください。&lt;/p&gt;

&lt;p&gt;※Kotlin の coroutine(async/await) は 2017年7月現在、正式リリースされていません(experimental 版です)。&lt;/p&gt;

&lt;p&gt;Kotlin での実装には、次のサイトを参考にさせていただきました&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/Kogarasi/items/4bd0a37763b057e9d796&quot;&gt;Android開発ではじめるKotlin - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/ke__kyukyun1828/items/c4c321650d888765140e&quot;&gt;Kotlin覚書-環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/k-kagurazaka@github/items/702c92bc3381af36db12&quot;&gt;Kotlin+Androidでasync/await - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37805860/how-to-instantiate-an-anonymous-class-that-implements-an-interface-in-kotlin&quot;&gt;How to instantiate an anonymous class that implements an interface in Kotlin - Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gildor/kotlin-coroutines-retrofit&quot;&gt;gildor/kotlin-coroutines-retrofit: Kotlin Coroutines await() extension for Retrofit Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ちなみに-c-でもできます&quot;&gt;ちなみに C# でもできます&lt;/h2&gt;

&lt;p&gt;C#（つまり Xamarin.Android）でも &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await(つまり Task)&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskCompletionSource&lt;/code&gt; を組み合わせて実現できます。&lt;/p&gt;

&lt;p&gt;C# にも拡張メソッドがあり、次のように定義することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public static class ViewAnimationExtensions
{
    public static Task&amp;lt;bool&amp;gt; StartAnimationAsync(this View view, Animation anim)
    {
        var source = new TaskCompletionSource&amp;lt;bool&amp;gt;();
        EventHandler&amp;lt;Animation.AnimationEndEventArgs&amp;gt; handler = null;

        handler = (sender, e) =&amp;gt;
        {
            anim.AnimationEnd -= handler; // 購読解除を忘れずに
            source.SetResult(true); // kotlin の continuation.resume(Unit) にあたるトコ
        };
        anim.AnimationEnd += handler; // イベントを購読

        view.StartAnimation(anim);
        return source.Task;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よびだし側はこう。&lt;br /&gt;
呼び出し時に &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; キーワードをつけ、それが含まれるメソッド(ここでは &lt;code class=&quot;highlighter-rouge&quot;&gt;OnCreate&lt;/code&gt;)に &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; キーワードをつけます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;protected async override void OnCreate(Bundle savedInstanceState)
{
    /* 省略 */

    while (true)
    {
        await button1.StartAnimationAsync(anim1);
        await button1.StartAnimationAsync(anim2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kotlin は同一プロジェクト内に Java と混ぜて使うことができるのがよいですね。&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Jul 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/24/concat_animations_with_kotlin/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/24/concat_animations_with_kotlin/</guid>
        
        
        <category>Kotlin</category>
        
        <category>Android</category>
        
        <category>Java</category>
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
      </item>
    
      <item>
        <title>Nintendo Switch Online アプリは Xamarin(Xamarin.Forms)製です</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.nintendo.co.jp/hardware/switch/onlineservice/&quot;&gt;ニンテンドースイッチのオンラインサービス&lt;/a&gt;用のアプリ「Nintendo Switch Online」が、なんと &lt;strong&gt;Xamarin 製&lt;/strong&gt; でした。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;きたな！ Nintendo Switch Online アプリ(Android/iOS) は Xamarin(Xamarin.Forms)製です！ &lt;a href=&quot;https://t.co/lJX5CBckgt&quot;&gt;pic.twitter.com/lJX5CBckgt&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@バレル待ち (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/887610194947067904&quot;&gt;2017年7月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Android アプリと iOS アプリの権利表記の画面から使用されているライブラリを整理してみました。使用されているライブラリを見るとアプリは Xamarin.Forms 製のようです。&lt;/p&gt;

&lt;h2 id=&quot;xamarin-とか-androidiosnet-とか関係なさそうなやつ&quot;&gt;Xamarin とか Android/iOS/.NET とか関係なさそうなやつ&lt;/h2&gt;

&lt;h3 id=&quot;echo-cancellation-program-by-nippon-telegraph-and-telecom-corp&quot;&gt;Echo Cancellation Program by Nippon Telegraph and Telecom Corp&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;NTT やん&lt;/li&gt;
  &lt;li&gt;ボイスチャットのエコーキャンセラっぽいですね&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;libsrtp-by-cisco-systems-inc&quot;&gt;libSRTP by Cisco Systems, Inc&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/cisco/libsrtp&lt;/li&gt;
  &lt;li&gt;Secure Realtime Transport Protocol とのこと、これもボイチャ関連ですかね&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;opus-by-xiphorg-skype-limited&quot;&gt;Opus by Xiph.Org, Skype Limited&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://opus-codec.org/&lt;/li&gt;
  &lt;li&gt;音声コーデックでした&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webrtc-audioprocessing-by-google-inc&quot;&gt;WebRTC AudioProcessing by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://webrtc.org/&lt;/li&gt;
  &lt;li&gt;WebRTC で音声関連ですねー&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breakpad-by-google-inc&quot;&gt;BreakPad by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/breakpad/breakpad/&lt;/li&gt;
  &lt;li&gt;クラッシュレポーティングシステムらしいです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;curl-by-deniel-stenberg&quot;&gt;Curl by Deniel Stenberg&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://ja.wikipedia.org/wiki/CURL&lt;/li&gt;
  &lt;li&gt;cURL のことですよね？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;libdisasm&quot;&gt;Libdisasm&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://bastard.sourceforge.net/libdisasm.html ？&lt;/li&gt;
  &lt;li&gt;ディスアセンブラ？よくわかりません&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gflags-by-google-inc&quot;&gt;gflags by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://gflags.github.io/gflags/&lt;/li&gt;
  &lt;li&gt;コマンドラインツール？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linux-syscall-support-by-google-inc&quot;&gt;Linux Syscall Support by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/linux-syscall-support/ ？&lt;/li&gt;
  &lt;li&gt;わかりません&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;musl-by-rich-felker&quot;&gt;musl by Rich Felker&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.musl-libc.org/&lt;/li&gt;
  &lt;li&gt;C++ 関連はわからんなー&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android-関連のやつ&quot;&gt;Android 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;lottie-by-airbnb&quot;&gt;Lottie by AirBnB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://airbnb.design/lottie/&lt;/li&gt;
  &lt;li&gt;アニメーションライブラリですね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;square-bindings&quot;&gt;square-bindings&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/mattleibow/square-bindings&lt;/li&gt;
  &lt;li&gt;Androidアプリ開発者の御用達、Square社のAndroid向けライブラリをXamarin.Androidから呼べるようにしたラッパーです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;okio&quot;&gt;Okio&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/square/okio&lt;/li&gt;
  &lt;li&gt;これも Square の。通信ライブラリですね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ios-関連のやつ&quot;&gt;iOS 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;lottie-by-airbnb-1&quot;&gt;Lottie by AirBnB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Android と同じ〜&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webptouch&quot;&gt;WebP.Touch&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/luberda-molinet/WebP.Touch&lt;/li&gt;
  &lt;li&gt;画像フォーマット「WebP」のデコーダです&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xamarinforms-関連のやつ&quot;&gt;Xamarin.Forms 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;xamarin-sdk&quot;&gt;Xamarin SDK&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.xamarin.com/&lt;/li&gt;
  &lt;li&gt;はい出ました&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugins-for-xamarin-by-james-montemagno--refractored-llc&quot;&gt;Plugins for Xamarin by James Montemagno / Refractored LLC&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/xamarin/XamarinComponents&lt;/li&gt;
  &lt;li&gt;Xamarin の機能を拡張するライブラリ群です&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;share-plugin-by-jakob-gurtl&quot;&gt;Share Plugin by Jakob Gurtl&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://guertl.me/post/136407883480/share-plugin-for-xamarin-and-windows&lt;/li&gt;
  &lt;li&gt;「他のアプリで開く」的な機能を提供するやつ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hockey-sdk&quot;&gt;Hockey SDK&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://hockeyapp.net/&lt;/li&gt;
  &lt;li&gt;クラッシュレポートとか配布自動化とかユーザーメトリクス収集とか（被ってるライブラリがあるけど）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;carouselviewformsplugin-by-alexrainman&quot;&gt;CarouselView.FormsPlugin by alexrainman&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/alexrainman/CarouselView&lt;/li&gt;
  &lt;li&gt;横にスワイプして画面切り替えるやつ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xamarin-forms-lab&quot;&gt;Xamarin Forms Lab&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/XLabs/Xamarin-Forms-Labs&lt;/li&gt;
  &lt;li&gt;Xamarin.Forms の機能を拡張するライブラリ（もうメンテ終了してて、作者は Xamarin に JOIN したけど）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;current-activity-plugin-by-james-montemagno&quot;&gt;Current Activity Plugin by James Montemagno&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/jamesmontemagno/CurrentActivityPlugin&lt;/li&gt;
  &lt;li&gt;Android 向けと思われるが…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ffimageloading-by-fabien-molinet&quot;&gt;FFImageLoading by Fabien Molinet&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/luberda-molinet/FFImageLoading&lt;/li&gt;
  &lt;li&gt;画像読み込みライブラリ。まあ Picasso や Glide みたいなやつですわ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;skiasharp&quot;&gt;SkiaSharp&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/mono/SkiaSharp&lt;/li&gt;
  &lt;li&gt;出ました、クロスプラットフォームの２Dグラフィックス描画ライブラリ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;net-関連のやつ&quot;&gt;.NET 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;modernhttpclient-by-paul-betts&quot;&gt;ModernHttpClient by Paul Betts&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/paulcbetts/ModernHttpClient&lt;/li&gt;
  &lt;li&gt;各プラットフォームの通信ライブラリと .NET の HttpClient の橋渡しをします&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jsonnet-by-james-newton-king&quot;&gt;Json.NET by James Newton-King&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.newtonsoft.com/json&lt;/li&gt;
  &lt;li&gt;いわずとしれた Json を扱うライブラリ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pclcrypto&quot;&gt;PCLCrypto&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/AArnott/PCLCrypto&lt;/li&gt;
  &lt;li&gt;暗号化ライブラリです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mathnet-numerics-by-mathnet&quot;&gt;Math.NET Numerics by Math.NET&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://numerics.mathdotnet.com/&lt;/li&gt;
  &lt;li&gt;Math というくらいなので数学系のライブラリなのでしょう&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pinvoke-by-andrew-arnott-and-more&quot;&gt;P/Invoke by Andrew Arnott and more&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/AArnott/pinvoke&lt;/li&gt;
  &lt;li&gt;Win32DLLを簡単に呼び出せるようにするライブラリっぽいですが、一体何のために？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;validation&quot;&gt;Validation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/aarnott/Validation&lt;/li&gt;
  &lt;li&gt;メソッドでバリデーションして例外投げるのを簡単にしてくれるっぽい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Xamarin の事例としては久しぶりのビッグネームじゃあないでしょうか、しかもワールドクラス(Microsoft がプレスリリースだせば良いのに)。&lt;/p&gt;

&lt;p&gt;Xamarin.Forms製のようなので、Windows 10 や macOS 向けのアプリも(Nintendo にやる気があれば)開発できる気がしますね！&lt;/p&gt;

&lt;p&gt;とはいえ推測ですが、WebRTCでボイスチャットみたいなコアな機能は C/C++ でやってるだろうし、ゲームの紹介的な画面は HTML だろうし、いろんな「クロスプラットフォームアプリ開発技法」を組み合わせて使っているのでしょうね。&lt;/p&gt;

&lt;p&gt;権利表記に &lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps&quot;&gt;自作ライブラリ&lt;/a&gt; が載るの、ワンチャンあるで！&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/19/nintendo_switch_online_is_made_by_xamarin_forms/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/19/nintendo_switch_online_is_made_by_xamarin_forms/</guid>
        
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Xamarin を使用したアプリ開発での、問題解決の方法</title>
        <description>&lt;p&gt;Xamarin はクロスプラットフォームアプリ開発ツールで、しかも「ネイティブAPI をラップするだけ」のタイプなので、トラブルの解決方法は、ネイティブアプリ開発の情報やノウハウの中にある場合が多いです。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/how_to_troubleshoots_about_xamarin_programming_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;私が Xamarin.Forms でアプリ開発をしていて、書いたコードが期待通り動作しない場合、以下のような手順で問題解決を試みていますよーというのを紹介します（環境面のトラブルではなく書いたコードの問題についてです）。&lt;/p&gt;

&lt;p&gt;ひとつ最初に言いたいのは、問題が発生したときにまず行うことは、 &lt;strong&gt;問題が発生する最小の環境を作り出す&lt;/strong&gt; ことです。修正のためにコードを書き換えたり、人に聞いたりするのはその後です。これは Xamarin に限らず、いやプログラミングに限らず、問題解決する際にはいつも心がけている事です。&lt;/p&gt;

&lt;h2 id=&quot;1-それはネイティブjava-android-や-swift-iosでも起こり得る事象か切り分ける&quot;&gt;1. それはネイティブ（Java-Android や Swift-iOS）でも起こり得る事象か切り分ける&lt;/h2&gt;

&lt;p&gt;まずは、直面している問題は Java での Android アプリ開発や Swift での iOS アプリ開発でも起こり得るかを考えてみましょう。とりあえず「Android + Java + あなたが直面している問題」をキーワードにググってみても良いかもしれません。&lt;/p&gt;

&lt;p&gt;画面のUIパーツの挙動、GPSなどセンサー類の使い方、通知や課金周りのトラブルなどは、ここに該当する場合が多いです。&lt;/p&gt;

&lt;p&gt;もっと大雑把に言うと、 Xamarin.Forms を使っている人は、何か問題が起こったら、Xamarin.Forms ではなく、Xamarin.Android や Xamarin.iOS で試しにアプリを作ってみて、同様の問題に直面するか切り分けてみてください(Java や Swift で再現コードを書くなら、それがベストです)。&lt;/p&gt;

&lt;p&gt;もしそれが Xamarin.Android や Xamarin.iOS でも起こる問題ならば、解決方法はネイティブ（Java-Android や Swift-iOS）アプリ開発の情報の中にあります。ネイティブアプリ開発に詳しい人に聞くのもよいでしょう（逆に Xamarin.Forms のソースコードを Java や Swift でのアプリ開発に詳しい人に見せても、お互いよい結果にはならないでしょう）。&lt;/p&gt;

&lt;h2 id=&quot;2-それは-xamarin固有の事象かnet全般で起こりえるか切り分ける&quot;&gt;2. それは Xamarin固有の事象か、.NET全般で起こりえるか切り分ける&lt;/h2&gt;

&lt;p&gt;ネイティブが原因である可能性を排除できたら、次は Xamarin 固有の事象かどうかを切り分けます。&lt;/p&gt;

&lt;p&gt;Xamarin 固有とは、言い換えればほとんど &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/&quot;&gt;Xamarin.Forms&lt;/a&gt; の機能に関する問題かどうかです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xamarin.Forms の画面レイアウト(ContentPage, MasterDetailPage, ContentView, …)&lt;/li&gt;
  &lt;li&gt;Xamarin.Forms の画面ナビゲーション(NavigationPage, PushAsync, PushModalAsync, …)&lt;/li&gt;
  &lt;li&gt;(Xamarin.Forms の)XAML&lt;/li&gt;
  &lt;li&gt;(Xamarin.Forms の)データバインディング&lt;/li&gt;
  &lt;li&gt;カスタムレンダラー&lt;/li&gt;
  &lt;li&gt;Effects, Behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などはここに該当するでしょう。&lt;/p&gt;

&lt;p&gt;解決方法を探るには Xamarin.Forms + あなたが直面している問題 をキーワードにググる（英語の方が見つかりやすい）、 &lt;a href=&quot;https://teratail.com/&quot;&gt;teratail&lt;/a&gt; や &lt;a href=&quot;https://www.facebook.com/groups/xm.jxug/&quot;&gt;JXUG の Facebook ページ&lt;/a&gt;に、 Xamarin.Forms のタグを付けて、聞いてみるのもよいです。&lt;/p&gt;

&lt;p&gt;ちなみに現在日本で発売されている Xamarin に関する書籍は、マイクロソフト公式である&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2vcXNGb&quot;&gt;プログラミングXamarin 上 Xamarin.FormsとC#によるクロスプラットフォームモバイルアプリ開発&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を筆頭に、ほとんどが Xamarin.Forms に関するものです。書籍から解決方法が得られるかも知れません。&lt;br /&gt;
日本で発売済、または発売予定の書籍一覧は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/amay077/items/38ee79b3e3e88cf751b9#%E6%9B%B8%E7%B1%8D&quot;&gt;Xamarin(ザマリン) とはなんぞや - 日本語情報について - 書籍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でも紹介しています。&lt;/p&gt;

&lt;p&gt;Xamarin.Forms 向けと誤解されやすいのですが &lt;a href=&quot;https://github.com/xamarin/XamarinComponents&quot;&gt;Plugins for Xamarin（Xamarin Plugins）&lt;/a&gt; と呼ばれるライブラリ群があります。&lt;br /&gt;
ここでトラブルに遭遇した場合、それは Xamarin固有 ですが Xamarin.Forms には依存しません。つまり 1. に戻って「Xamarin.Android、Xamarin.iOS で試してみる」ことが可能になります。さらにこれらはオープンソースなので、デバッグも可能です。ソースコードを追えば、Xamarin Plugins は各ネイティブのAPIを使った実装に対して、共通なインターフェースを与えているだけであることが分かると思います。&lt;/p&gt;

&lt;h2 id=&quot;3-net全般で起こりえる問題であればnet系の情報源から解決方法を探す&quot;&gt;3. .NET全般で起こりえる問題であれば、.NET系の情報源から解決方法を探す&lt;/h2&gt;

&lt;p&gt;ここまで来ると、「Android/iOSネイティブが原因ではない」「Xamarin固有の機能(≒Xamarin.Forms)が原因でもない」となっているはずです。&lt;/p&gt;

&lt;p&gt;ここであり得る問題は、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C# の言語機能に関すること&lt;/li&gt;
  &lt;li&gt;.NET Framework(や Mono)クラスライブラリの使い方や仕様に関すること&lt;/li&gt;
  &lt;li&gt;.NETプラットフォームを対象とした有償やOSSのライブラリに関すること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;くらいしか想定される原因がないと思います。&lt;/p&gt;

&lt;p&gt;1 は言語の知識を得れば解決すると思いますが、言語の最新バージョンが使用できるか否かに関わるトラブルはあり得ます。&lt;/p&gt;

&lt;p&gt;2 も、.NET Framework のクラスライブラリの使い方の（新しめの）情報を当たれば、単純な How to であれば解決します。&lt;/p&gt;

&lt;p&gt;ちょっと複雑な問題である場合もあります。&lt;br /&gt;
例えば 「.NET Framework のクラスを使用した通信処理が Android では正しく動作しない、使い方は正しいはずである。」という問題が起こった場合、次のように切り分けていく必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;そのコードは iOS でも動作するか？&lt;/li&gt;
  &lt;li&gt;そのコードは Windows(コンソールアプリ) でも動作するか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.NET Framework は、プラットフォームによって実装が異なるため、同じコードでも「あるプラットフォームだけ動作しない」可能性はあり得ます。そのような場合、動作させたい全てのプラットフォームで期待通り動作するコードに辿りつければよいですが、そうでない場合、プラットフォーム固有の回避（ワークアラウンド）コードを埋め込む必要があるかもしれません。&lt;/p&gt;

&lt;p&gt;AOT(Ahead Of Time)コンパイルを使用するiOS固有の事象として「iOSシミュレータでは動作するが、端末では動作しない」というものがあります。&lt;a href=&quot;https://developer.xamarin.com/guides/ios/advanced_topics/limitations/&quot;&gt;Limitations - Xamarin&lt;/a&gt; に引っかかってないか確認しましょう（Android でも端末による挙動の違いはありますが、主旨がズレるので割愛します）。&lt;/p&gt;

&lt;p&gt;3 は、有名どころだと &lt;a href=&quot;http://www.newtonsoft.com/json&quot;&gt;Json.NET&lt;/a&gt; のような、主に nuget で配布されているライブラリです。これらに関する問題であれば、発生している事象と、再現に必要な最小限の情報を突き止めて、 GitHub の issue や開発元へコンタクトを取るなどを行いましょう。ソースコードが公開されているので、大抵の場合、自分でデバッグして問題点を特定し、修正のパッチを投げることも可能です。&lt;/p&gt;

&lt;p&gt;中には（&lt;a href=&quot;https://github.com/PrismLibrary/Prism&quot;&gt;Prism.Forms&lt;/a&gt; のように）、Xamarin.Forms を対象としたライブラリもあります(Prism はその他のプラットフォームにも対応していますが)。そのような場合でも、まずは問題が Xamarin.Forms にあるのか Prism.Forms にあるのかを切り分けて、適切な質問をしましょう。&lt;/p&gt;

&lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;もう一度言います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;問題が発生する最小の環境を作り出し&lt;/strong&gt; てから、解決方法を探ったり、人に聞きましょう。&lt;/p&gt;

&lt;p&gt;【おまけ】&lt;br /&gt;
他のクロスプラットフォーム開発ツールに比べて Xamarin が秀でているのは 1. の&lt;br /&gt;
「ネイティブ（Java-Android や Swift-iOS）でも起こり得る事象かの切り分けが簡単」&lt;br /&gt;
なことです。なぜなら Xamarin は「ネイティブAPI をラップするだけ」だから。&lt;br /&gt;
ここで紹介したトラブルシューティングの手間が面倒だ(＝メリットよりデメリットの方が大きい)と感じるのであれば、Xamarin は使わない方がよいでしょう。&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jul 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/18/how_to_troubleshoots_about_xamarin_programming/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/18/how_to_troubleshoots_about_xamarin_programming/</guid>
        
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
        <category>.NET</category>
        
      </item>
    
      <item>
        <title>Bot Application のソースコードを GitHub で公開する時に秘匿情報を含めない方法</title>
        <description>&lt;p&gt;別に Bot Application に限った話ではないのですけどね。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Microsoft の Bot Framework を使った Bot Application の作成方法は、いくつかWebで公開されていますが、それらに沿って作成したソースコードを GitHub などの誰でも閲覧できるリポジトリで管理・公開すると、本来公開すべきでない以下の情報が含まれてしまいます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Bot Directory へ登録する際に発行される「Bot ID」, 「App ID」, 「App Password」&lt;/li&gt;
  &lt;li&gt;Azure へ発行する際の設定情報&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これらをソースコード管理に含めないようにする方法を紹介します。&lt;/p&gt;

&lt;h2 id=&quot;bot-id-app-id-app-password-をソースコード管理に含めないようにする&quot;&gt;「Bot ID」, 「App ID」, 「App Password」 をソースコード管理に含めないようにする&lt;/h2&gt;

&lt;p&gt;たとえば、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bluesky/2016/11/15/5-step-tutorial-smilescorebot-bot-framework-cognitive-services-ja/&quot;&gt;5ステップでズバリ！笑顔判定BOT を作成しよう by Microsoft Bot Framework and Cognitive Services – 青い空の向こうへ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、BotのIDやパスワードなどを、&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;app key=&quot;BotId&quot;&lt;/code&gt; などに設定するよう書かれています。&lt;br /&gt;
実際プロジェクト作成直後の &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; を見ても “YourBotID” などと書かれており、「ここに書くのが当然」感を醸し出しています。これがよくない！&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Web.config --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;appsettings&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- update these with your BotId, Microsoft App Id and your Microsoft App Password--&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BotId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;YourBotID&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppPassword&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appsettings&amp;gt;&lt;/span&gt;
: (略)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; 及び &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.Debug.config&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.Release.config&lt;/code&gt; は、 ASP.NET の Webアプリケーションに関する設定を記述するもので、ソースコード管理に含めるべき情報です。&lt;br /&gt;
&lt;strong&gt;ここにIDやパスワードを記述してはいけません&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ではどこに記述するかというと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://devadjust.exblog.jp/20400427/&quot;&gt;ASP.NET Web アプリで、APIキーなどの “秘密のキー” をどこに保存するべきか? : @jsakamoto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で紹介されている方法を使って、別のファイルに逃します。&lt;/p&gt;

&lt;p&gt;具体的には、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新たに &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; というファイル（ファイル名は何でもよい）をプロジェクトに追加し、秘匿情報を含む XML のブロックはそちらに記述する&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; に上記ファイルへの参照を記述する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;とします。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; などと同じディレクトリに追加し、ビルドアクションを「コンテンツ」とします。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/avoid_secrets_from_github_in_your_bot_application_project_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; の内容は以下です。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Web.local.config --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BotId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;＜あならのBOTID＞&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppId&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;＜あなたのMicrosoftAppId＞&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;MicrosoftAppPassword&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;＜あなたのMicrosoftAppPassword＞&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appSettings&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; に記述していた &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/code&gt; 要素を切り出してきた感じですね。&lt;/p&gt;

&lt;p&gt;そして、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; を次のように修正します。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Web.config --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;appSettings&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Web.local.config&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 秘匿でない設定情報があればここに書く --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/appSettings&amp;gt;&lt;/span&gt;
: (略)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appSettings file=&quot;Web.local.config&quot;&amp;gt;&lt;/code&gt; と記述することで、&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; の内容をここに注入できます。&lt;/p&gt;

&lt;p&gt;あとは &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; に追加するなどしてソースコード管理対象から除外します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; が存在しなくてもビルドや実行はできるようですが、初見の人には不親切なので、 &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; で補足説明をしておくのがよいでしょう。&lt;/p&gt;

&lt;h2 id=&quot;開発用とプロダクト用で-bot-id-app-id-app-password-を切り替える&quot;&gt;開発用とプロダクト用で 「Bot ID」, 「App ID」, 「App Password」 を切り替える&lt;/h2&gt;

&lt;p&gt;前の手順で設定したID、パスワードなどは「開発用」の情報です。&lt;br /&gt;
Azureに配置した本番環境では、別のID、パスワードを使用したいケースは普通にあります。&lt;br /&gt;
本番環境の設定はAzureポータルから行えます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/avoid_secrets_from_github_in_your_bot_application_project_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この図のように、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Azure ポータル（https://portal.azure.com/） で、配布した Bot Application（App Service） を開き、さらに「アプリケーション設定」を開きます&lt;/li&gt;
  &lt;li&gt;「アプリ設定」で、 本番用の「Bot ID」, 「App ID」, 「App Password」を追加します&lt;/li&gt;
  &lt;li&gt;最後に「保存」を押します&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ここで設定した内容は、配布した &lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; にある &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;appSettings&amp;gt;&lt;/code&gt; の内容を上書きします。&lt;/p&gt;

&lt;h2 id=&quot;azure-へ発行する際の設定情報をソースコード管理に含めないようにする&quot;&gt;Azure へ発行する際の設定情報をソースコード管理に含めないようにする&lt;/h2&gt;

&lt;p&gt;Visual Studio 2017 は、IDE から Azure への発行ができてとても便利なのですが、発行のための情報も保持してしまうので、その際の情報もソースコード管理に含めるべきではありません。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/avoid_secrets_from_github_in_your_bot_application_project_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;これらの情報はプロジェクトのディレクトリの &lt;code class=&quot;highlighter-rouge&quot;&gt;Properties\PublishProfiles&lt;/code&gt; というサブディレクトリに、 &lt;code class=&quot;highlighter-rouge&quot;&gt;*.pubxml&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;*.pubxml.user&lt;/code&gt; というファイル名で保存されるようなので、このディレクトリ毎、あるいは個別のファイルを &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; に追加すればよいです。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.config&lt;/code&gt; には秘匿情報を書かない&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Web.local.config&lt;/code&gt; を作って、そちらに書く、このファイルはソースコード管理しない&lt;/li&gt;
  &lt;li&gt;本番用のIDやパスワードはAzureポータルで設定する&lt;/li&gt;
  &lt;li&gt;Azureへ発行する際の設定情報もソースコード管理しない&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;結果、 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; に次の２行を追加するとよいです。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# .gitignore&lt;/span&gt;
＜省略＞

&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.local.config
PublishProfiles/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;手前味噌ですが、上記以外の &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; の設定は https://www.gitignore.io/ で “VisualStudio” と検索して生成されるものを使用すると便利です（上の2行が含まれているわけではありません）。&lt;/p&gt;
</description>
        <pubDate>Sat, 15 Jul 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/15/avoid_secrets_from_github_in_your_bot_application_project/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/15/avoid_secrets_from_github_in_your_bot_application_project/</guid>
        
        
        <category>BotFramework</category>
        
        <category>C#</category>
        
        <category>.NET</category>
        
        <category>ASP.NET</category>
        
        <category>VisualStudio</category>
        
      </item>
    
      <item>
        <title>Visual Studio for Mac で作ったプロジェクトを Visual Studio 2017 で実行する時気をつけること</title>
        <description>&lt;p&gt;小ネタです。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;Xamarin でのモバイルアプリ開発では、 Mac の方が（主に iOS 関連で）都合がよいことが多いので、Visual Studio for Mac を使っています。&lt;/p&gt;

&lt;p&gt;そんなわけなので新規ソリューション作成も Visual Studio for Mac（以前は Xamarin Studio） で行っているのですが、これらで作成したソリューションを Windows の Visual Studio 2017 で開いてビルドし、いざ実行しようと「デバッグの開始(F5)」を押しても、一向にアプリが起動しません。それどころかAndroidエミュレータも起動しません。&lt;/p&gt;

&lt;p&gt;こんなこと初めてだなー、と思っていろいろみていたら、ふとソリューションの構成マネージャーに、「配置」をいう項目が増えているのに気づきました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/solution_created_vs4mac_does_not_running_on_vs2017_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「キミ、いつからそこに居たの・・・」、完全にこれが犯人じゃん。&lt;br /&gt;
ということで、この「配置」にチェックを入れて、再度 F5 で実行すると、無事、エミュレータが起動してアプリが実行できました。&lt;/p&gt;

&lt;p&gt;ちなみに下は Visual Studio for Mac の構成マネージャー的な画面ですが、「配置」なんてないんですよね。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/solution_created_vs4mac_does_not_running_on_vs2017_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Win と Mac で同じ機能はまったく期待してない Visual Studio ですが、細かいところ（可能なところ）は統一してほしいなあと思います。&lt;/p&gt;
</description>
        <pubDate>Thu, 13 Jul 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/13/solution_created_vs4mac_does_not_running_on_vs2017/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/13/solution_created_vs4mac_does_not_running_on_vs2017/</guid>
        
        
        <category>Xamarin</category>
        
        <category>VisualStudio</category>
        
        <category>C#</category>
        
      </item>
    
      <item>
        <title>コンソールアプリからBot Frameworkを使ってBotからクライアントにメッセージを送る</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/Bot-Framework/index&quot;&gt;Microsoft の Bot Framework&lt;/a&gt; を使った Botアプリケーションの開発にハマっています（楽しい方の意味で）。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;自作botをazureにデプロイしてskypeで対話&quot;&gt;自作BotをAzureにデプロイしてSkypeで対話&lt;/h2&gt;

&lt;p&gt;まず、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/Shinji-Hashimoto/items/80515f26c5b07b71b600&quot;&gt;Visual Studio2017でBot Frameworkを試す - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blogs.msdn.microsoft.com/bluesky/2016/11/15/5-step-tutorial-smilescorebot-bot-framework-cognitive-services-ja/&quot;&gt;5ステップでズバリ！笑顔判定BOT を作成しよう by Microsoft Bot Framework and Cognitive Services – 青い空の向こうへ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dorapon2000.hatenablog.com/entry/2016/09/04/031821&quot;&gt;Microsoft Bot Frameworkを使ってSkypeボットを作る - dorapon2000’s diary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このあたりの情報を元に、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;簡単な Bot アプリをビルドして Botエミュレータで実行してみる&lt;/li&gt;
  &lt;li&gt;その Bot を Azure にデプロイする&lt;/li&gt;
  &lt;li&gt;Azure に配置した Bot を Skype と繋げる&lt;/li&gt;
  &lt;li&gt;自分の Skype アカウントと Bot で対話する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まで行うことができました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/my_first_bot_app_01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;コンソールアプリから-skype-のユーザークライアントへメッセージを送信する&quot;&gt;コンソールアプリから Skype のユーザー（クライアント）へメッセージを送信する&lt;/h2&gt;

&lt;p&gt;さて、私が本当にやりたいのは「定期的にBotからユーザーへメッセージを送る（時報とか）」ことです。&lt;br /&gt;
が、 Visual Studio の Bot Application のプロジェクトテンプレートでは?（あるいは「Botアプリケーション」では）、処理の起点は必ずユーザー(クライアント)からBotへのメッセージ送信をBotが受信するところから始まるようです（違ってたら教えてください）。&lt;/p&gt;

&lt;p&gt;Bot Framework の REST API には &lt;a href=&quot;https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-connector-send-and-receive-messages&quot;&gt;Send and receive messages&lt;/a&gt; もあるので、任意のタイミングでメッセージを送信することも可能なはず。&lt;/p&gt;

&lt;p&gt;いろいろ探していたら&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/a/39274159/3309589&quot;&gt;Starting a conversation with Microsoft bot builder and microsoft bot framework - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という情報を発見。おお、コンソールアプリからメッセージを送信できれば、これをcron的なものやAzure Functionsで定期的に実行させられそうです。&lt;/p&gt;

&lt;p&gt;コード例を元に悪戦苦闘した結果、下のようなコードでメッセージ送信ができました。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// Program.cs
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceUrl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;https://smba.trafficmanager.net/apis/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;APP_ID&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appPassword&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;APP_PASSWORD&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;MicrosoftAppCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;TrustServiceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ※これがないと認証エラーになる
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConnectorClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appPassword&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;botAccount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChannelAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;28:8734b597-b313-2457-bda6-d7c342245fea&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 送信元(Botの)ユーザー ※IDは適当だけどこんな感じの文字列だった
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAccount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ChannelAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;29:2WLwfakXxSbEze4gfeGxeS31nXfELePLX3deELoxHw&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 送信先ユーザー ※IDは適当だけどこんな感じの文字列だった
&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conversations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateDirectConversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;botAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;IMessageActivity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateMessageActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;From&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;botAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Recipient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conversation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConversationAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;こんにちわ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ja-Jp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;connector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Conversations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SendToConversation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以下、ポイント&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;コンソールアプリプロジェクトを作ったら、ターゲットフレームワークを .NET Framework 4.6 に上げる（４．５ だと Bot.Builder が入れられなかった）&lt;/li&gt;
  &lt;li&gt;Nugetパッケージマネージャから「Microsoft.Bot.Builder」を入れる（ここで入れたのは v3.8.0 です）&lt;/li&gt;
  &lt;li&gt;＜APP_ID＞、＜APP_PASSWORD＞は、Botを https://dev.botframework.com/ に登録する仮定で得られるやつ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MicrosoftAppCredentials.TrustServiceUrl(serviceUrl)&lt;/code&gt; をしないと、&lt;code class=&quot;highlighter-rouge&quot;&gt;CreateDirectConversation&lt;/code&gt; で認証(401)エラーになりました。 &lt;a href=&quot;https://codedump.io/share/43fLSEl1kzYX/1/bot-framework-unauthorized-when-creating-a-conversation&quot;&gt;Bot Framework Unauthorized when creating a conversation (C#) - Codedump.io&lt;/a&gt; が大変役に立ちました。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serviceUrl&lt;/code&gt; は、なんかよく分からんけどこれらしい&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;serviceUrl&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;botAccount&lt;/code&gt; のId、 &lt;code class=&quot;highlighter-rouge&quot;&gt;userAccount&lt;/code&gt; のIdは、&lt;a href=&quot;https://github.com/Microsoft/BotBuilder-Samples/tree/master/CSharp/core-GetConversationMembers&quot;&gt;BotBuilder-Samples/CSharp/core-GetConversationMembers&lt;/a&gt; も参考にして、Bot ApplicationのHelloWorldを改造して取得しました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;このプログラムを実行すると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;userAccount&lt;/code&gt; が示すSkypeユーザー(ここでは私)に「こんにちわ」のメッセージが送信されます、やった！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/my_first_bot_app_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今作りたいと思っているのは「タイムカード打刻BOT」で、月末に EXCEL に退勤時間を書くのが面倒なので、毎日、18:00 になったら、Botに「仕事おわった？」と聞いて欲しいのです。「はい」と回答すればその時刻を打刻、「いいえ」と答えたら１時間後にまた聞いてくる・・・、という感じで（弊社は Skype 常時起動させてるから Skype で試してるけど Bot Connector により Slack などの別ツールにも対応できるはず）。&lt;/p&gt;

&lt;p&gt;これを行うには、クライアント起点の対話でなく、BOT起点の対話が必要で、コンソールアプリからメッセージ送信することができたので、次はAzure Functionでやってみようかと思います。&lt;/p&gt;

&lt;p&gt;BOT開発、しばらく楽しめそうです。&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Jul 2017 17:40:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/07/08/sending_message_from_console_app_using_bot_framework/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/07/08/sending_message_from_console_app_using_bot_framework/</guid>
        
        
        <category>.NET</category>
        
        <category>BotFramework</category>
        
        <category>C#</category>
        
        <category>skype</category>
        
        <category>VisualStudio</category>
        
      </item>
    
      <item>
        <title>学生でもわかるXamarin勉強会で「Xamarin.Forms.GoogleMaps について」という話をしました</title>
        <description>&lt;p&gt;JXUG名古屋支部の勉強会で Xamarin Day してきました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jxug.connpass.com/event/57324/&quot;&gt;[なごや]学生でもわかるXamarin勉強会 - connpass&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;資料&quot;&gt;資料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/xamarin-dot-forms-dot-googlemaps-nituite&quot;&gt;Xamarin.Forms.GoogleMaps について // Speaker Deck&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;感想とか&quot;&gt;感想とか&lt;/h2&gt;

&lt;p&gt;ほぼほぼ Google Maps API/SDK の紹介でしたね。&lt;br /&gt;
とは言え、&lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps&quot;&gt;Xamarin.Forms.GoogleMaps&lt;/a&gt; については、リファレンス的なドキュメント作成をサボっているので、（なにかキッカケを作って）作成したいと思っています。&lt;/p&gt;

&lt;p&gt;Google Maps API の機能自体が、どこまで Android/iOS/.NET開発者に知られているかも分からないし、需要はあるのかもしれないですね。&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Jun 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/06/17/had_a_session_about_xamarin_forms_googlemaps_in_jxug_nagoya/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/06/17/had_a_session_about_xamarin_forms_googlemaps_in_jxug_nagoya/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>登壇</category>
        
      </item>
    
      <item>
        <title>macOS 初期セットアップ時にインストールするアプリ</title>
        <description>&lt;p&gt;Mac をクリーンインストールするときに入れるアプリ一覧。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;Chrome&lt;/li&gt;
  &lt;li&gt;Google IME&lt;/li&gt;
  &lt;li&gt;Xcode&lt;/li&gt;
  &lt;li&gt;Xcode command lie tools&lt;/li&gt;
  &lt;li&gt;Homebrew&lt;/li&gt;
  &lt;li&gt;VMware Fusion&lt;/li&gt;
  &lt;li&gt;Android Studio&lt;/li&gt;
  &lt;li&gt;Dropbox&lt;/li&gt;
  &lt;li&gt;Skype&lt;/li&gt;
  &lt;li&gt;Java8 - JDK&lt;/li&gt;
  &lt;li&gt;VSCode&lt;/li&gt;
  &lt;li&gt;anyenv&lt;/li&gt;
  &lt;li&gt;ndenv&lt;/li&gt;
  &lt;li&gt;rbenv&lt;/li&gt;
  &lt;li&gt;peco&lt;/li&gt;
  &lt;li&gt;adb-peco&lt;/li&gt;
  &lt;li&gt;Xamarin Studio&lt;/li&gt;
  &lt;li&gt;JetBrains Rider&lt;/li&gt;
  &lt;li&gt;JetBrains DataGrip&lt;/li&gt;
  &lt;li&gt;ClipMenu&lt;/li&gt;
  &lt;li&gt;FreeMemory&lt;/li&gt;
  &lt;li&gt;WinMacZipper&lt;/li&gt;
  &lt;li&gt;Skitch&lt;/li&gt;
  &lt;li&gt;.NET Core&lt;/li&gt;
  &lt;li&gt;ESET Security&lt;/li&gt;
  &lt;li&gt;SourceTree&lt;/li&gt;
  &lt;li&gt;ImageOptim&lt;/li&gt;
  &lt;li&gt;Pngyu&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;移行元があるときやること&quot;&gt;移行元があるときやること&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;.bash_profile の移行&lt;/li&gt;
  &lt;li&gt;DataGrip のDB接続設定の移行&lt;/li&gt;
  &lt;li&gt;VPN ルーティング設定の移行&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;参考&quot;&gt;参考&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://sig9.hatenablog.com/entry/2015/03/05/115736&quot;&gt;OS X での VPN 時に特定経路のみ、VPN にルーティングするには - らくがきちょう&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 09 May 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/05/09/first_install_apps_on_mac/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/05/09/first_install_apps_on_mac/</guid>
        
        
        <category>macOS</category>
        
      </item>
    
      <item>
        <title>JetBrains Rider で Xamarin.Android プロジェクトのデバッグが行えるようになりました</title>
        <description>&lt;p&gt;クロスプラットフォーム対応の.NET向けIDE、JetBrains Rider の EAP(Early Access Program) ver.20 で、ついに Xamarin.Android の「実行」がサポートされました（今までも「ビルドだけ」はできたのですが）。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.jetbrains.com/dotnet/2017/04/14/rider-eap-20-xamarin-android-node-js-net-core-improvements/&quot;&gt;Rider EAP 20: Xamarin Android, Node.js, .NET Core improvements, and more - .NET Tools Blog.NET Tools Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;たとえば &lt;a href=&quot;https://developer.xamarin.com/samples/&quot;&gt;Xamarin Samples&lt;/a&gt; の&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/samples/xamarin-forms/ButtonCode/&quot;&gt;ButtonCode - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を Rider で開いてビルド、デバッグ実行してみます。&lt;br /&gt;
これは Xamarin.Forms のソリューションですが、その中の Android プロジェクトは実行できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.amay077.net/assets/images/posts/rider_supports_xamarin_android_project_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;上図のように、エミュレータも起動でき、ブレークポイントを置いてのステップイン・ステップオーバーなども実行できます。&lt;br /&gt;
デバッグ画面のルック＆フィールは JetBrains 製品らしくなっており、Android Studio を使っている人にとっても馴染みがあります。&lt;/p&gt;

&lt;p&gt;また、Rider で Xamarin.Android プロジェクトを新規作成することも可能です。&lt;br /&gt;
が、Rider で作成したプロジェクトをXamarin Studioなどで開くとエラーになってしまいます。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;JetBrains Rider  Xamarin Android プロジェクト作成→Run→エミュ起動→アプリ実行、までできたけど、その .sln/csproj を Visual Studio for Mac で開くとエラー &lt;a href=&quot;https://t.co/u0HXb4dVSr&quot;&gt;pic.twitter.com/u0HXb4dVSr&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@超技術書典4/30 あ-12 (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/852912306056863744&quot;&gt;2017年4月14日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;こちらは今後の開発進行に伴い改善されていくでしょう。&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Apr 2017 23:59:00 +0900</pubDate>
        <link>http://blog.amay077.net/blog/2017/04/19/rider_supports_xamarin_android_project/</link>
        <guid isPermaLink="true">http://blog.amay077.net/blog/2017/04/19/rider_supports_xamarin_android_project/</guid>
        
        
        <category>Android</category>
        
        <category>Xamarin</category>
        
        <category>JetBrains</category>
        
        <category>Rider</category>
        
      </item>
    
  </channel>
</rss>
