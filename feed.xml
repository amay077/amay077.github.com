<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>https://blog.amay077.net/</link>
    <atom:link href="https://blog.amay077.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 19 Jun 2018 01:04:50 +0000</pubDate>
    <lastBuildDate>Tue, 19 Jun 2018 01:04:50 +0000</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>2017年冬から始める ReactiveProperty + Xamarin.Forms</title>
        <description>&lt;p&gt;つい最近まで PCL な Xamarin.Forms では、 ReactiveProperty の 2.x 系しか使えないと思っていたのですが、いろいろな方の協力で使える方法が分かったので示しておく。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;今から ReactiveProperty を（Xamarin で）使ってみたいぞ、という人向けのクイックスタートも兼ねていますです。&lt;/p&gt;

&lt;h2 id=&quot;1-ソリューションを作る&quot;&gt;1. ソリューションを作る&lt;/h2&gt;

&lt;p&gt;Visual Studio for Mac で行きます。&lt;/p&gt;

&lt;p&gt;新しいソリューションから、 アプリ - 空白フォームのアプリ を選んで、適当な名前で作成します。ここでは 「ReactivePropertySample」 としますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/8cfdeb53-c9d5-1134-b9d7-042a3a9f5536.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-pcl-のプロファイルを-44-に変える&quot;&gt;2. PCL のプロファイルを “44” に変える&lt;/h2&gt;

&lt;p&gt;ソリューションが作成できたら、３つあるプロジェクトの中のコアプロジェクト(.Droid や .iOS のついてないもの)を選択して右クリック → 「オプション」を開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/7d58f3ae-6641-a079-8fe1-08770a6c3bdd.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ダイアログから、「ビルド」 → 「全般」を選択して、Target Framework の 「.NET ポータブル」の横にある「変更」を押し、プロファイルを &lt;strong&gt;「PCL 4.6 - Profile44」&lt;/strong&gt; に変更して OK を押します。対応プラットフォームから Windows Phone のチェックが外れますが &lt;strong&gt;まったく問題ありません&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/62a20ef9-1a16-41f9-8c4d-7be50d4a3c31.png&quot; alt=&quot;snap1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-systemruntimeinteropservicesruntimeinformation-の-nuget-パッケージを追加する&quot;&gt;3. System.Runtime.InteropServices.RuntimeInformation の nuget パッケージを追加する&lt;/h2&gt;

&lt;p&gt;@yamachu さんが書かれた、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://teitoku-window.hatenablog.com/entry/2017/11/18/185501&quot;&gt;XamarinなどのPCLプロジェクトにSystem.Reactiveを導入しようとすると失敗することへの対策 - 窓を作っては壊していた人のブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の通りです。ReactiveProperty 3.x が依存している System.Reactive をインストールするには、まず &lt;br /&gt;
System.Runtime.InteropServices.RuntimeInformation を入れる必要があります。&lt;/p&gt;

&lt;p&gt;コアプロジェクトを選択して、 メニュー → プロジェクト → Nuget パッケージの追加 とし、右上検索ボックスに “System.Runtime.InteropServices.RuntimeInformation” をタイプして絞り込みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/8d61fc47-b069-a850-873b-824c8c1c2bf2.png&quot; alt=&quot;snap2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;見つかったら、右下の追加ボタンでインストールします。現在の最新バージョンは 4.3.0 です。&lt;/p&gt;

&lt;h2 id=&quot;4-systemreactive-の-nuget-パッケージを追加する&quot;&gt;4. System.Reactive の nuget パッケージを追加する&lt;/h2&gt;

&lt;p&gt;次に、ReactiveProperty 3.x が依存している System.Reactive をインストールします（いきなり ReactiveProperty を入れてもよいのかもだけど、まあ順番にやってみましょう）。&lt;/p&gt;

&lt;p&gt;方法は 3. と同じです。 nuget のダイアログボックスで System.Reactive とタイプして、結果から選択して追加します（雑になってきたｗ）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/52afd47b-5998-6ac3-90d8-c38c47fa6afe.png&quot; alt=&quot;snap3.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-reactiveproperty-の-nuget-パッケージを追加する&quot;&gt;5. ReactiveProperty の nuget パッケージを追加する&lt;/h2&gt;

&lt;p&gt;ついに ReactiveProperty のインストールです。 3. 4. と同じ方法で追加しましょう（雑）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/42902eb0-9f29-0e3b-e9b0-5d00d0ab7021.png&quot; alt=&quot;snap4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;バージョン 3.x 系をついにいれる事ができました。現在の最新stableは 3.6.0 です。&lt;/p&gt;

&lt;p&gt;できてしまえば簡単ですが、この方法に辿りつくまでに多くの労力と時間とご協力をいただきました。みなさまありがとうございました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;うーん，なんというか微妙なハックですけど，System.Runtime.InteropServices.RuntimeInformation 4.0.0(Reactive 3.1.1が依存しているバージョン)の依存にMicrosoft.NETCore.Platformsが含まれていて，そのせいでPCLのでの展開が出来ないんじゃないかなぁと睨んでいます．&lt;/p&gt;&amp;mdash; 留まり奈緒 (@y_chu5) &lt;a href=&quot;https://twitter.com/y_chu5/status/931805975878582274?ref_src=twsrc%5Etfw&quot;&gt;2017年11月18日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;PCL Profile111 が Windows Phone を含んでるならそのせいですね&lt;/p&gt;&amp;mdash; かずき@66.8kg (@okazuki) &lt;a href=&quot;https://twitter.com/okazuki/status/932919102351450112?ref_src=twsrc%5Etfw&quot;&gt;2017年11月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;reactiveproperty-を使ってみよう&quot;&gt;ReactiveProperty を使ってみよう&lt;/h2&gt;

&lt;p&gt;せっかくいれたのでちゃちゃっと使ってみましょう。&lt;br /&gt;
ぜんぶコアプロジェクトでやります。&lt;/p&gt;

&lt;h3 id=&quot;i-mainviewmodel-を作る&quot;&gt;I. MainViewModel を作る&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MainViewModel&lt;/code&gt; というクラスを作って、次のように書きます。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Reactive.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Reactive.Bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ReactivePropertySample&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainViewModel&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactiveProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToReactiveProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; という変更通知プロパティを ReactiveProperty を使ってつくります。&lt;br /&gt;
Reactive Extensions の機能を使って、「１秒おきに１ずつカウントアップ」していきます。&lt;/p&gt;

&lt;h3 id=&quot;ii-画面pageとバインドする&quot;&gt;II. 画面(Page)とバインドする&lt;/h3&gt;

&lt;p&gt;プロジェクトを作った時に &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactivePropertySamplePage.xaml&lt;/code&gt; という画面ができていると思うので、それを編集します。 XAML の編集だけでいきましょう。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:ReactivePropertySample&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ReactivePropertySample.ReactivePropertySamplePage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage.BindingContext&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;local:MainViewModel&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage.BindingContext&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Counter.Value}&quot;&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;HorizontalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ContentPage.BindingContext&amp;gt;&lt;/code&gt; で、 &lt;code class=&quot;highlighter-rouge&quot;&gt;MainViewModel&lt;/code&gt; をバインド対象としています。&lt;br /&gt;
そして、ラベルの Text に &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{Binding Counter.Value}&quot;&lt;/code&gt; と書くことで、 Counter 値をデータバインドしています。 &lt;strong&gt;.Value を付けるのを忘れずに！&lt;/strong&gt;（と言っても忘れるんだよ、分かる。みんなやってる。）&lt;/p&gt;

&lt;h3 id=&quot;iii-動かす&quot;&gt;III. 動かす&lt;/h3&gt;

&lt;p&gt;OK, これで完成です。 Android でも iOS でも動きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/0166bdbd-c0e0-4c6f-8289-49fec91335bf.gif&quot; alt=&quot;Untitled2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文字ちっさ！&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最新の環境で ReactiveProperty を使う方法を紹介しました。&lt;/p&gt;

&lt;p&gt;ReactiveProperty は、Reactive Extension のパワーを View とのデータバインディングにそのまま活用できる、現代においては必須のライブラリです。&lt;br /&gt;
もちろん、変更通知プロパティを手書きする手間をなくす目的で使うのもよいですね。&lt;/p&gt;

&lt;p&gt;「ReactiveProperty のここがすごい！」というのをもう少し、別記事で紹介していきたいと思います。&lt;/p&gt;

&lt;p&gt;ちなみに、コアプロジェクトが PCL でなく .NET Standard なら、もうちょっといろいろ楽…なハズ！それについては誰かが書いてくれることを望みます :pray:&lt;/p&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;これだけなのにインストールされたパッケージ群がえらいことになった。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/cf41f313-9ab7-2bd1-5736-f8551d701029.png&quot; alt=&quot;snap5.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Nov 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/11/22/getting_started_reactiveproperty_with_xamarin_forms_in_winter_2017/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/11/22/getting_started_reactiveproperty_with_xamarin_forms_in_winter_2017/</guid>
        
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
        <category>.NET</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Kotlin製のAndroidアプリを Visual Studio Mobile Center でビルドして DeployGate にアップロードする</title>
        <description>&lt;p&gt;タイトル長いｗ&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;vsmc-とは&quot;&gt;VSMC とは&lt;/h2&gt;

&lt;p&gt;Visual Studio Mobile Center(以下 VSMC) は Microsoft が提供している CI サービスです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codezine.jp/article/detail/10095&quot;&gt;iOS／Androidアプリの開発を支援する「Visual Studio Mobile Center （preview）」を使ってみよう (1/5)：CodeZine（コードジン）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あまり知られていないでしょうが、 Java/Kotlin で書かれた普通の Android アプリもビルドできます。（そしてもちろん Swift 製の iOS アプリも対応してます。あと React Native もな。）&lt;/p&gt;

&lt;p&gt;Kotlin/Java な Android Studio プロジェクトのレポジトリを VSMC に設定してやるだけでビルドまではできるのでなんにも難しいことはないです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.classmethod.jp/smartphone/visual-studio-mobile-center-ios-app-build/&quot;&gt;Visual Studio Mobile CenterでiOSアプリをビルドしてみた ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今日のメインは、VSMC でもようやくビルド後にスクリプトを実行させることができるようになったので、その紹介です。&lt;/p&gt;

&lt;h2 id=&quot;vsmc-がビルドスクリプトに対応した&quot;&gt;VSMC がビルドスクリプトに対応した&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/mobile-center/build/custom/scripts/&quot;&gt;Build Scripts ｜ Visual Studio Mobile Center ｜ Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これによると、プロジェクトのレポジトリに、特定のスクリプトファイルを入れておくと、ビルド後（やビルド前）に、そのスクリプトファイルを実行してくれる、というものです。&lt;/p&gt;

&lt;p&gt;現在は、３つのトリガに対応していて、それぞれ次に示すファイル名のスクリプトファイルをリポジトリのプロジェクトディレクトリにおいておきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Post-clone(クローン後) - &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-clone.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Pre-build(ビルド前) - &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-pre-build.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Post-build(ビルド後) - &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-build.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プロジェクトディレクトリとは、Android Studio プロジェクトの場合、プロジェクトの &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; がある場所、大抵は &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; ディレクトリになります（下図参照）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_01.png&quot; alt=&quot;01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;試しにビルドされた apk ファイルを DeployGate にアップロードする、というのをやってみます。&lt;br /&gt;
VSMC にもアプリの配信機能はありますが、社内で既に DeployGate を使っているし、DeployGate の方が専用アプリが用意されていてβテストサービスとしては勝っているので、今回例としました。&lt;/p&gt;

&lt;p&gt;まず、当然ながら DeployGate 側の準備が必要です。ユーザー登録をして、手動でビルドした apk を DeployGate にアップロードしておきます。&lt;/p&gt;

&lt;p&gt;そして、次のようなファイルを &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-build.sh&lt;/code&gt; というファイル名で &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; ディレクトリの中に入れておきます。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Upload to DeployGate&quot;&lt;/span&gt;

curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;token={deploygateのAPI key}&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file=@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MOBILECENTER_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/app-release.apk&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message=build by Visual Studio Mobile Center - #&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MOBILECENTER_BUILD_ID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  https://deploygate.com/api/users/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;deploygateのユーザーID&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/apps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{deploygateのAPI key}&lt;/code&gt; には、DeployGate のアカウント設定のページから API key の値を転記します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;{deploygateのユーザーID}&lt;/code&gt; には、DeployGate に作成したユーザーのユーザーID を転記します（正しければ上記のURLが存在するはず）。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;file=&lt;/code&gt; に記述した &lt;code class=&quot;highlighter-rouge&quot;&gt;app-release.apk&lt;/code&gt; は、ビルド構成（Build Variant）が release の場合です。デバッグの場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;app-debug.apk&lt;/code&gt; になるはずです（未確認）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-build.sh&lt;/code&gt; をコミット、プッシュして VSMC の Build Configulation を見ると「Build scripts」 の項目に &lt;strong&gt;Post-build&lt;/strong&gt; とチェックされ、正しく認識できていることがわかります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_02.png&quot; alt=&quot;02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;あとは、 apk への署名を忘れないようにしましょう。Sign builds を On にして、 keystore ファイルなどを指定します。&lt;br /&gt;
社内配布であればデバッグ時と同じいいやってことで、開発用PCに入っている(Mac なら &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.android/&lt;/code&gt; にある) &lt;code class=&quot;highlighter-rouge&quot;&gt;debug.keystore&lt;/code&gt; をアップロード、入力項目は次のとおりです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keystore password: android&lt;/li&gt;
  &lt;li&gt;Key alias: androiddebugkey&lt;/li&gt;
  &lt;li&gt;Key password: android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_03.png&quot; alt=&quot;03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;設定できたら、「Save &amp;amp; Build」 を押すと、ビルドが開始され、ビルドログを見るとスクリプトが実行されていることが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_04.png&quot; alt=&quot;04&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;これで勝つる&quot;&gt;これで勝つる？&lt;/h2&gt;

&lt;p&gt;よっしゃー！これでスクリプトさえ書けば Bitrise や CircleCI 並みになんでもできるぞー、と思いました。&lt;/p&gt;

&lt;p&gt;が、 &lt;strong&gt;スクリプトファイルをリポジトリに含める&lt;/strong&gt; のが作動条件なので、今回試したような 「DeployGate へのアップロード」というシナリオでは DeployGate の API key をリポジトリに含めることになってしまい、これは推奨されることではありません（公開リポジトリではご法度モノ）。&lt;/p&gt;

&lt;p&gt;なんという「Microsoft、分かってない」感。なんでこんな仕様にしたのでしょう。&lt;br /&gt;
VSMC はプライベートリポジトリ推奨なのでしょうか…。私はプライベートなアプリのビルドを、Bitrise の無料プランでぶん回していたらビルド時間制限の上限に達してしまったので VSMC に移行してきたのですが、そういうシナリオなのでしょうか。&lt;/p&gt;

&lt;p&gt;早いとこカスタムな Environment variables を作れるようにして欲しいところです。&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Oct 2017 13:30:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/10/18/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/10/18/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center/</guid>
        
        
        <category>Android</category>
        
        <category>DeployGate</category>
        
        <category>VisualStudio</category>
        
      </item>
    
      <item>
        <title>JetBrains OpenSource License を更新しました</title>
        <description>&lt;p&gt;２年目ありがとうございます。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/buy/opensource/&quot;&gt;JetBrains OpenSource License&lt;/a&gt; は、オープンソースソフトウェア開発者に、JetBrains の製品群のライセンスを提供してもらえるプログラムで、提供される製品は &lt;a href=&quot;https://www.jetbrains.com/store/&quot;&gt;All Products Pack&lt;/a&gt;、つまり次に挙げる全ての製品がOSS開発のために利用できます。価格にすると年間649ドル(/1ユーザー）相当になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IntelliJ IDEA Ultimate&lt;/li&gt;
  &lt;li&gt;ReSharper&lt;/li&gt;
  &lt;li&gt;ReSharper C++&lt;/li&gt;
  &lt;li&gt;dotTrace&lt;/li&gt;
  &lt;li&gt;dotMemory&lt;/li&gt;
  &lt;li&gt;dotCover&lt;/li&gt;
  &lt;li&gt;AppCode&lt;/li&gt;
  &lt;li&gt;CLion&lt;/li&gt;
  &lt;li&gt;PhpStorm&lt;/li&gt;
  &lt;li&gt;PyCharm&lt;/li&gt;
  &lt;li&gt;RubyMine&lt;/li&gt;
  &lt;li&gt;WebStorm&lt;/li&gt;
  &lt;li&gt;DataGrip&lt;/li&gt;
  &lt;li&gt;Rider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JetBrains OpenSource License に申請できる条件は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プロジェクトのリードまたはコアコミッターであること&lt;/li&gt;
  &lt;li&gt;プロジェクトの開発(生存)期間が３ヶ月以上であること&lt;/li&gt;
  &lt;li&gt;プロジェクトの開発がアクティブであること&lt;/li&gt;
  &lt;li&gt;企業や団体などからスポンサードされていないこと&lt;/li&gt;
  &lt;li&gt;プロジェクトがコマーシャルソフトウェアでないこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です(意訳)。&lt;/p&gt;

&lt;p&gt;私は Xamarin.Forms.GoogleMaps というオープンソースライブラリを開発しており、昨年(2016年)申請して無事、ライセンスが提供されました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2016/09/29/got-jetbrains-opensource-License/&quot;&gt;JetBrains の Open Source License をいただきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初に申請したときは、開発開始してから３ヶ月でした。偶然私の他にコミットしてくれてる人が数名居たので、「コミッターの数」を「3」として申請したら、3人分のライセンスをもらえました（そのライセンスはそれぞれコミッターの人に使ってもらっています）。&lt;/p&gt;

&lt;p&gt;このライセンスは1年間有効なものなので、1年毎に更新が必要です。今回更新(Update)の申請をして、無事に受理されまた1年間のライセンスを受領しました。&lt;/p&gt;

&lt;p&gt;ありがたいことに、この1年間でコミッターの数が15人ほどに増えてきたので、更新時に「コミッターの数」を「15」として申請したのですが、もらえたライセンスは変わらず「3」でした（汗）。まあコアコミッターと呼べる人は私以外にまだ居ないので妥当ではあります。&lt;/p&gt;

&lt;p&gt;ということで、OSS開発をしている人は JetBrains 全製品が使用できるライセンスをもらえるチャンスがありますので、応募してみるとよいと思います。&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Oct 2017 08:00:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/10/01/renuew_jetbrains_opensource_lisence_2017/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/10/01/renuew_jetbrains_opensource_lisence_2017/</guid>
        
        
        <category>opensource</category>
        
        <category>jetbrains</category>
        
      </item>
    
      <item>
        <title>Mapbox GL JS をデバッグするまで</title>
        <description>&lt;p&gt;オープンソースのベクトル地図ライブラリ Mapbox GL JS のデバッグがしたいので調べました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mapbox-なにそれ&quot;&gt;Mapbox なにそれ？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Google Maps JavaScript API みたいなもん&lt;/li&gt;
  &lt;li&gt;こういうの → &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/examples/&quot;&gt;Display a map / Mapbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;要は地図を表示・操作するためのオープンソース JavaScript ライブラリ&lt;/li&gt;
  &lt;li&gt;類似のライブラリとして OpenLayers, leaflet などがある&lt;/li&gt;
  &lt;li&gt;上記との違いは「ベクトルタイル」を「WebGL」で描画するものであるということ&lt;/li&gt;
  &lt;li&gt;“GL” とは WebGL を差しており、姉妹ライブラリとして Mapbox GL Native がある（こちらはモバイルやデスクトップの “ネイティブ” アプリ用であり、OpenGL を使用している）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、 Google Maps JavaScript API 以外の方法で、Google Maps のようなベクトル地図レンダリングをしたければ、Mapbox GL JS を使うのが現在の事実上唯一の方法である。&lt;/p&gt;

&lt;h2 id=&quot;何をしらべたいのあるいは何を調べてないの&quot;&gt;何をしらべたいの？（あるいは何を調べてないの？）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ライブラリの使い方は調べてない（ってか Google Maps とそんなに変わらないはず）&lt;/li&gt;
  &lt;li&gt;Mapbox GL JS の（非同期な）地図データ取得の仕組み&lt;/li&gt;
  &lt;li&gt;Mapbox GL JS の高速な描画の仕組み&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は、その足がかりとして、Mapbox GL JS のデバッグ環境を作ります。&lt;/p&gt;

&lt;h2 id=&quot;調べたわたしは&quot;&gt;調べたわたしは&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript 力はあんまりない&lt;/li&gt;
  &lt;li&gt;WebGL やったことない&lt;/li&gt;
  &lt;li&gt;OpenGL もない&lt;/li&gt;
  &lt;li&gt;Mapbox GL Native のソースを追ってみたが C++14 が分からずあきらめた&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大丈夫か・・・？&lt;/p&gt;

&lt;h2 id=&quot;デバッグ環境を作る&quot;&gt;デバッグ環境を作る&lt;/h2&gt;

&lt;h3 id=&quot;用意するものというか私の環境&quot;&gt;用意するもの(というか私の環境)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/mapbox/mapbox-gl-js のローカルクローン&lt;/li&gt;
  &lt;li&gt;macOS&lt;/li&gt;
  &lt;li&gt;Xcode（入ってた)&lt;/li&gt;
  &lt;li&gt;homebrew&lt;/li&gt;
  &lt;li&gt;yarn とかいうやつ（homebrew で入れる）&lt;/li&gt;
  &lt;li&gt;node.js(v4.0以上)&lt;/li&gt;
  &lt;li&gt;Visual Studio Code (デバッグするのに使う。VSCodeと略すかも)&lt;/li&gt;
  &lt;li&gt;Debugger for Chrome (Visual Studio Code の拡張機能)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すでに「yarn って何？」というレベルです・・・。&lt;/p&gt;

&lt;h3 id=&quot;デバッグ環境を作る手順1mapboxのセットアップ&quot;&gt;デバッグ環境を作る手順1(mapboxのセットアップ)&lt;/h3&gt;

&lt;p&gt;https://github.com/mapbox/mapbox-gl-js/blob/master/CONTRIBUTING.md に丁寧に書いてあることの写しだけど。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Xcode Command Line Tools を入れる(入ってた。けど一度 Xcode を起動て License に agree しないといけなかった）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt; で node をインストール（以前 anyenv/ndenv で入れてあったので余裕）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install yarn&lt;/code&gt; で yarn というやつを入れる&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd mapbox-gl-js&lt;/code&gt; でクローンしたリポジトリに移動して、 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; で何かをインストールする（何？）&lt;/li&gt;
  &lt;li&gt;https://www.mapbox.com/studio/account/tokens/ で、 Mapbox の API キーを生成する。Mapbox アカウントがなければ同じく作る&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mapbox/mapbox-gl-js/blob/master/CONTRIBUTING.md#serving-the-debug-page&quot;&gt;Serving the Debug Page&lt;/a&gt; にあるように &lt;code class=&quot;highlighter-rouge&quot;&gt;MAPBOX_ACCESS_TOKEN=pk.iEkc36fR… yarn run start-debug&lt;/code&gt; を実行する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;んでブラウザで http://localhost:9966/debug にアクセスすると、地図が表示されるはずである。&lt;/p&gt;

&lt;p&gt;この状態で、 Chrome のデベロッパーツールでデバッグできるけど、効率上げるために Visual Studio Code を使う。その手順が以下。&lt;/p&gt;

&lt;h3 id=&quot;デバッグ環境を作る手順2vscodeのセットアップ&quot;&gt;デバッグ環境を作る手順2(VSCodeのセットアップ)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ics.media/entry/11356&quot;&gt;Visual Studio Codeを使いこなせ！ Chromeと接続してJSをデバッグする方法 - ICS MEDIA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://github.com/Microsoft/vscode-chrome-debug#launch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を参考に。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;VSCode で mapbox-gl-js のフォルダを開く&lt;/li&gt;
  &lt;li&gt;メニュー → デバッグ → 構成の追加 とすると &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; が生成されるので、下記の &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; のように記述する&lt;/li&gt;
  &lt;li&gt;前述の &lt;code class=&quot;highlighter-rouge&quot;&gt;MAPBOX_ACCESS_TOKEN=pk.iEkc36fR… yarn run start-debug&lt;/code&gt; をしたまま、VSCode のメニュー → デバッグ → デバッグの開始（F5 でもおｋ）すると、新しいタブに地図が表示される。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;launch.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Launch Chrome against localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:9966/debug/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webRoot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/how_to_debugging_mapbox_gl_js_01.png&quot; alt=&quot;how_to_debugging_mapbox_gl_js_01.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;試しにデバッグしてみる&quot;&gt;試しにデバッグしてみる&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/render/draw_line.js&lt;/code&gt; の 14行目あたりにブレークポイントを置いてみる（F9 で）。F5 でデバッグ開始する。&lt;/p&gt;

&lt;p&gt;地図が表示される過程でブレークポイントで一時停止し、その箇所の「変数」「ウオッチ」「コールスタック」などが見られる。下図は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;drawLine&lt;/code&gt; 関数の &lt;code class=&quot;highlighter-rouge&quot;&gt;coords&lt;/code&gt; 変数の中身を表示しているところ。描画するラインの頂点が確認できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/how_to_debugging_mapbox_gl_js_02.png&quot; alt=&quot;how_to_debugging_mapbox_gl_js_02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、この &lt;code class=&quot;highlighter-rouge&quot;&gt;drawLine&lt;/code&gt; 関数をスキップ（すぐに &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;）すると、次図のようにラインが描画されない地図になる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/how_to_debugging_mapbox_gl_js_03.png&quot; alt=&quot;how_to_debugging_mapbox_gl_js_03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「デバッグするまで」としてはこんな感じで。&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Sep 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/09/21/how_to_debugging_mapbox_gl_js/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/09/21/how_to_debugging_mapbox_gl_js/</guid>
        
        
        <category>mapbox</category>
        
        <category>JavaScript</category>
        
        <category>geo</category>
        
      </item>
    
      <item>
        <title>iOSDC 2017 に参加してきました</title>
        <description>&lt;p&gt;iOSDC 2017 に参加してきましたよっと。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/joined_iosdc_2017_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://iosdc.jp/2017/&quot;&gt;iOSDC Japan 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ふだんは「クロスプラットフォーマーなら、Java も Swift もできなきゃダメだぜ☆」なんて言ってる割には、実は Swift で iOS アプリを書いたことはなくて、Android の勉強会にはちょいちょい参加してて DroidKaigi2017 では登壇もさせてもらったわけですが、iOS/Swift 系のコミュニティにはよく分かってませんでした。&lt;/p&gt;

&lt;p&gt;「外国語を学ぶことはその国の文化を学ぶこと」なんてよく言われますけど、プログラミング言語やプラットフォームも同じだと思っていて、iOS/Swift アプリ開発者さん達の文化というか空気を感じたくて参加しました。&lt;/p&gt;

&lt;h2 id=&quot;セッション&quot;&gt;セッション&lt;/h2&gt;

&lt;p&gt;こういうイベントって、50分セッションが多いと思うんですけど、iOSDC は 15分または30分で、いろいろな話を聞くことができました。&lt;br /&gt;
「もっと聞きたい！」と思うこともありましたがこのスタイルもいいなと思います。&lt;/p&gt;

&lt;p&gt;Swift や iOS SDK を題材にしたものが中心でありつつ、とは言えサーバーサイドのネタでは Firebase が登場することが多かったように見えました（自分が聞いたセッションがそうだっただけかも）。DroidKaigi よりもネタの多様性があったように見えました。&lt;/p&gt;

&lt;p&gt;数学ネタも多かったですね。&lt;br /&gt;
高校からほとんど「数学」をやってないので、式や用語の意味は分かりませんが、丁寧な解説やコードがあったので「何をしているのか」はわかりました。&lt;/p&gt;

&lt;p&gt;特に、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://iosdc.jp/2017/node/1445&quot;&gt;Swift で数学のススメ 〜 プログラミングと数学を同時に学べ ｜ iOSDC Japan 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;14:20 から「Swift で数学のススメ 〜 プログラミングと数学は同時に学べ」で発表します👍数学の難しさにどう立ち向かって行くか、エンジニアの視点からの提案です💪群・環・体から代数拡大まで15分で頑張る💨&lt;a href=&quot;https://t.co/1yfrRHF5OP&quot;&gt;https://t.co/1yfrRHF5OP&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/iOSDC?src=hash&quot;&gt;#iOSDC&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/b?src=hash&quot;&gt;#b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Taketo Sano (@taketo1024) &lt;a href=&quot;https://twitter.com/taketo1024/status/908919531157962753&quot;&gt;2017年9月16日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;がとてもよかった。&lt;/p&gt;

&lt;p&gt;なんというかスピーカーさんの情熱が発表に溢れていて&lt;/p&gt;

&lt;p&gt;「あーこの人は本当に数学のことが大好きなんだなあ」&lt;/p&gt;

&lt;p&gt;というのがひしひしと伝わってきました。&lt;br /&gt;
会場大学だったし、こんな教授の講義で自分が異性だったら惚れるレベル。&lt;br /&gt;
動画が公開されたら是非見て欲しいです。&lt;/p&gt;

&lt;p&gt;ベストスピーカー賞で４位か５位だったと思います。会場が広く聴講者も多い room A のセッションが上位を占めるなかで、votes per atendees ではトップだったんではないかと思います。&lt;/p&gt;

&lt;p&gt;他には、クロスプラットフォームのセッションや MVC や MVVM などのUIアプリ設計手法の話は iOSDC でも人気でした。Android では公式の Data Binding サポートや Archtecture Components での ViewModel サポートなどがあるので、iOS にもデファクトなライブラリが出てくれば、より一般化するのでしょうね。&lt;/p&gt;

&lt;h2 id=&quot;lt&quot;&gt;LT&lt;/h2&gt;

&lt;p&gt;やばい。&lt;br /&gt;
day2 も day3 もレベルが高すぎた。登壇者の方、通常セッションよりプレッシャーあったんではないかと思います(心中お察しします)。&lt;/p&gt;

&lt;p&gt;周りがみんなビールだらけで「みんなビール好きすぎだろ」と若干引き気味だったのですが、みなさんのトークが楽しすぎたので盛り上がれました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://csugjp.connpass.com/event/50930/&quot;&gt;今年3月の C# の勉強会&lt;/a&gt;で、bitflyer さんのブロックチェーンの発表を聞いた直後、興味持って ￥50,000 をチャージしたものの買い時を見失って放置してしまった、あの時買っておけばあるいは僕もｗ&lt;/p&gt;

&lt;h2 id=&quot;ゴージャス&quot;&gt;ゴージャス&lt;/h2&gt;

&lt;p&gt;個人スポンサー(1.5k yen)チケットを購入したわけだけど、そうでなくてもノベルティがとてもゴージャスでした、スポンサー企業さまに感謝！&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/iosdc?src=hash&quot;&gt;#iosdc&lt;/a&gt; のノベルティをベッドに広げてみたわけだけどゴージャス！（これ以外に個人スポンサー向けのTシャツとパーカーも） &lt;a href=&quot;https://t.co/SeJDOg1nWK&quot;&gt;pic.twitter.com/SeJDOg1nWK&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@バレデコ待ち (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/908683878126166016&quot;&gt;2017年9月15日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;個人スポンサー特典で頂けたパーカー含めてデザイン的にもイケてて、これでようやく Google I/O Tシャツを引退させられるし、パーカーもヘビロテすると思います（カミさんからは「おっさんがそのデザインはどうよ？」と言われたけど、負けないっ）。&lt;/p&gt;

&lt;h2 id=&quot;xamarin&quot;&gt;Xamarin&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;【最終結果発表】&lt;a href=&quot;https://twitter.com/hashtag/iosdc?src=hash&quot;&gt;#iosdc&lt;/a&gt; 参加者のみなさん、「何で開発していますか？」 &lt;a href=&quot;https://t.co/LSAUVIuKMn&quot;&gt;pic.twitter.com/LSAUVIuKMn&lt;/a&gt;&lt;/p&gt;&amp;mdash; CyberAgentDevelopers (@ca_developers) &lt;a href=&quot;https://twitter.com/ca_developers/status/909329406979481601&quot;&gt;2017年9月17日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;この場でこんだけ vote されてるのスゴくないすか？！&lt;/p&gt;

&lt;p&gt;なんか iOS な人たちは Web 系とのつながりが深くて、 X-Plat なら React の方を使ってると勝手に思い込んでました。&lt;/p&gt;

&lt;h2 id=&quot;カンファレンスアプリ&quot;&gt;カンファレンスアプリ&lt;/h2&gt;

&lt;p&gt;iOS のイベントだから、iOS版しか作らないのはわかってました。&lt;br /&gt;
普段使いがAndroidだから仕方ないなーと思いつつ、Webサイトのタイムテーブルが、BACKする度に初日に戻っちゃうから使いづらかったのでネイティブアプリは欲しかったですね。&lt;/p&gt;

&lt;p&gt;そんなときこそ X-Plat な Xamarin でしょ！！&lt;br /&gt;
とは自分は思っていなくて、今ならカンファレンス用のチャットボットを作ってみたい。タイムテーブルのような情報俯瞰は難しいけど、検索とかfavとか通知なら問題ないし、参加者との双方向コミュニケーションもやりやすいかもしれない（Twitterに比べて）。もちろんプラットフォーム問わないしね。&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next?&lt;/h2&gt;

&lt;p&gt;今回は懇親会は参加せず、そんなに他の人とコミュニケーション取れたわけではなかたけど、まあ焦らず（DroidKaigi も、初参加から初登壇まで３年かかってるしな）やっていこうと思います。&lt;/p&gt;

&lt;p&gt;知り合いが多いコミュニティに参加するのは心地よいけど、そこだけで満足してちゃもったいないと自分は思っていて、ましてや現在ではひとつのテクノロジーだけでプロダクトが “ビルド” できるわけでは無いのだから、自分も人見知りだけど、積極的に他のコミュニティにも参加して、その文化を学んでいきたいと思います。久しぶりに「知り合いがほぼ居ない場」に参加して、技術コミュニティに参加してみようと思ったきっかけとか、初心に戻れた気がします。&lt;/p&gt;

&lt;p&gt;最後に、僕も &lt;a href=&quot;https://www.youtube.com/watch?v=AC7C5CY1Meo&quot;&gt;ミサトさんじゃなくてマリューさん&lt;/a&gt; だな。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Sep 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/</guid>
        
        
        <category>iOS</category>
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Google Maps JavaScript API を使うときには必ず region の設定をしてくださいおねがいします</title>
        <description>&lt;p&gt;3年くらい前に&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/amay077/items/979dfc858a21c8bbb7a9&quot;&gt;Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という記事を書きました。&lt;/p&gt;

&lt;p&gt;これはGoogleマップにて、「竹島や北方領土などが政府方針と反する名称で表記されているケース」があることに対して、ならば「地理院地図」を使えばいいじゃん？という内容でした。&lt;/p&gt;

&lt;p&gt;その後、Googleマップ側でも対応がなされ、「ローカライズ」という機能を使うことで、「その国の法律に準拠した地図」にすることができるようになりました（これについても前述の記事の「2013.10.17 追記」に書きました）。&lt;/p&gt;

&lt;p&gt;このローカライズについて、もう一度書きます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;日本向けのWebサービスでGoogleマップを使う場合は、必ず「ローカライズ」の機能を使用してください&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;具体的には、 次の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/localization?hl=ja&quot;&gt;Google Maps JavaScript API / マップのローカライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google Maps JavaScript API の埋め込みスクリプトタグで、&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;amp;language=ja&amp;amp;region=JP&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように &lt;code class=&quot;highlighter-rouge&quot;&gt;region=JP&lt;/code&gt; を付けてください、これだけです。&lt;/p&gt;

&lt;h2 id=&quot;対応どうでしょう&quot;&gt;対応どうでしょう？&lt;/h2&gt;

&lt;p&gt;さて著名なWebサービスではちゃんと設定してくれてますよね？&lt;br /&gt;
※Google Maps のスクショを貼るのは規約で禁止されているのでボカしてます（これでクリアできているとも思いませんが）。&lt;/p&gt;

&lt;h3 id=&quot;期待される表記&quot;&gt;期待される表記&lt;/h3&gt;

&lt;p&gt;いわゆる「政府方針の通りの表記」のみがされている状態&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;楽天トラベル&quot;&gt;楽天トラベル&lt;/h3&gt;

&lt;p&gt;あぼーん&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;じゃらん&quot;&gt;じゃらん&lt;/h3&gt;

&lt;p&gt;ぐえぇぇ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ぐるなび&quot;&gt;ぐるなび&lt;/h3&gt;

&lt;p&gt;ぎゃあぁぁあ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;たべろぐ&quot;&gt;たべろぐ&lt;/h3&gt;

&lt;p&gt;お、おぅ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ぜ、全滅だと・・・・。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;お願いですからGoogleマップを使うときは「ローカライズ」をしてください。&lt;br /&gt;
私自身はそんなに気にしないのですが、へんなツイートみちゃったか&lt;a href=&quot;https://twitter.com/yamazogaikuzo/status/899396971433086976&quot;&gt;ら&lt;/a&gt;。こういうことに税金使われたい？&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Aug 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/08/21/should_set_region_of_googlemaps_javascript_api/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/08/21/should_set_region_of_googlemaps_javascript_api/</guid>
        
        
        <category>JavaScript</category>
        
        <category>GoogleMapsAPI</category>
        
      </item>
    
      <item>
        <title>Google Maps Android API の GoogleMap.getProjection はシングルトンじゃないから注意</title>
        <description>&lt;p&gt;Android で Google Maps を使用するときに使用する Google Maps Android API の話です。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/android-api/?hl=ja&quot;&gt;Google Maps Android API / Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この SDK の機能の一つに「地図座標（緯度経度）と画面座標の相互変換」というものがあります。&lt;br /&gt;
これを使うと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;画面中心の緯度経度を取得して、任意の外部APIを呼び出す（カーナビみたく中心位置の住所を検索するとか）&lt;/li&gt;
  &lt;li&gt;地図上のマーカーの位置に任意の View を吹き出しのように配置する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、これを行うには &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMap.getProjection()&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;Projection&lt;/code&gt; クラスのインスタンスを使用して、&lt;code class=&quot;highlighter-rouge&quot;&gt;fromScreenLocation&lt;/code&gt; または &lt;code class=&quot;highlighter-rouge&quot;&gt;toScreenLocation&lt;/code&gt; を呼び出します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/maps/Projection?hl=ja&quot;&gt;Projection  /  Google APIs for Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMap.getProjection()&lt;/code&gt; で取得できるインスタンス、シングルトンというか、いつ取得しても同じインスタンスな気がしませんか？ &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMap.getUiSettings()&lt;/code&gt; がそうであるように。 &lt;code class=&quot;highlighter-rouge&quot;&gt;map.getProjection().fromScreenLocation&lt;/code&gt;と書くのはダルいので地図の生成時に一度だけ取得して使いまわしたいと思いませんか？&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Projection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMapReady&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoogleMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 最初に取得して使い回せばいいよねー、そう思っていた時期が私にもありました・・・&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProjection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ところがこれが間違いです。&lt;/p&gt;

&lt;p&gt;ためしに「地図の位置が変わったら、画面の左上(0, 0)の緯度経度を得る」というのを書いてみます。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Projection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMapReady&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoogleMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 最初に取得して使い回せばいいよねー、そう思っていた時期が私にもありました・・・&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProjection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// カメラの移動が完了してアイドル状態になったときのイベント（RetroLambda使用） &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnCameraIdleListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 画面原点の緯度経度を得る&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LatLng&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latlng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromScreenLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lat:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, long:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;地図をスクロールさせると &lt;code class=&quot;highlighter-rouge&quot;&gt;setOnCameraIdleListener&lt;/code&gt; のハンドラが呼び出されますが、期待した結果が得られません。たぶんマイナスとかゼロに近い値になっていると思います。&lt;/p&gt;

&lt;p&gt;正しい結果を得るには、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map.setOnCameraIdleListener(() -&amp;gt; {
    // 画面原点の緯度経度を得る
    Projection prj = map.getProjection();
    LatLng latlng = prj.fromScreenLocation(new Point(0, 0));
    Log.d(&quot;TEST&quot;, &quot;lat:&quot; + latlng.latitude + &quot;, long:&quot; + latlng.longitude); 
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のように、「その時点での」 &lt;code class=&quot;highlighter-rouge&quot;&gt;Projection&lt;/code&gt; インスタンスを得る必要があります。&lt;/p&gt;

&lt;p&gt;さてではここで API Reference の説明を見てみましょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.html?hl=ja#getProjection()&quot;&gt;GoogleMap.getProjection / Google APIs for Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves. As this operation is expensive, you should get the projection only once per screen. Google Maps uses the Mercator projection to create its maps from geographic data and convert points on the map into geographic coordinates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;現在の投影のスナップショットを返します。カメラの移動で自動的に更新されません！！！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;しっかり書いてあったー！&lt;/p&gt;

&lt;p&gt;Projection とは投影法（メルカトル図法）を示すもの、その投影法（＝投影を行う公式）は不変なものだから取得の度にスナップショットが作られるとは思いませんでした。&lt;br /&gt;
この挙動に気づけなくて、３時間くらい悩みつづけました。&lt;/p&gt;

&lt;p&gt;悩んだら、固定概念を捨ててキホンを見直そうぜ、という教訓になりました。が敢えて言わせてもらえれば、 &lt;code class=&quot;highlighter-rouge&quot;&gt;getCurrentProjection()&lt;/code&gt; のようなメソッド名だったら、「最初に取得して使いまわす」という発想にはならなかったかも知れません。SDK作る身として、命名にも配慮したいと思いました。&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Jul 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/07/28/be_careful_because_googlemap_get_projection_is_not_singleton/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/07/28/be_careful_because_googlemap_get_projection_is_not_singleton/</guid>
        
        
        <category>Android</category>
        
        <category>GoogleMapsAPI</category>
        
        <category>Java</category>
        
      </item>
    
      <item>
        <title>Androidでアニメーションを連続で実行するのが面倒なのを Kotlin で便利にした話</title>
        <description>&lt;p&gt;Android で「浮いてるように見える」アニメーションを実装する機会がありまして。次の画像のようなものなんですが。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/concat_animations_with_kotlin_01.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;このアニメーションは、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;2秒かけて上へ少し移動する&lt;/li&gt;
  &lt;li&gt;2秒かけて下へ少し移動する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;を「連続で」「繰り返し」実行させることで実現しています。&lt;br /&gt;
「連続で」とは、 1. のアニメーションが終わったら 2. のアニメーションを開始する、という意味です。&lt;/p&gt;

&lt;h2 id=&quot;java-android-では&quot;&gt;Java-Android では…&lt;/h2&gt;

&lt;p&gt;これを Android の View のアニメーションAPI で実現すると、普通にひどいコードになります。次がそれ。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-Java&quot;&gt;// 2秒かけて上へ移動するアニメーション
final TranslateAnimation anim1 = new TranslateAnimation(
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF, -0.1f);
anim1.setDuration(2000);

// 2秒かけて下へ移動するアニメーション
final TranslateAnimation anim2 = new TranslateAnimation(
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF,  0.0f,
        Animation.RELATIVE_TO_SELF, -0.1f,
        Animation.RELATIVE_TO_SELF,  0.0f);
anim2.setDuration(2000);

anim1.setAnimationListener(new Animation.AnimationListener() {
    @Override
    public void onAnimationStart(Animation animation) { }

    @Override
    public void onAnimationEnd(Animation animation) {
        anim2.setAnimationListener(new Animation.AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) { }

            @Override
            public void onAnimationEnd(Animation animation) {
                // 3. 下へのアニメーションが終わったら、上へ移動するアニメーションをまた開始
                view.startAnimation(anim1);
            }

            @Override
            public void onAnimationRepeat(Animation animation) { }
        });

        // 2. 上へのアニメーションが終わったら、下へ移動するアニメーションを開始
        view.startAnimation(anim2);
    }

    @Override
    public void onAnimationRepeat(Animation animation) { }
});

// 1. 上へ移動するアニメーションを開始
view.startAnimation(anim1);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コールバックのネストに、行いたい処理とコードの記述順が逆という二重苦、これはやってられません。&lt;/p&gt;

&lt;p&gt;これだけで Kotlin を使いたい案件です（Java でも Deferred が使えるライブラリ&lt;RxJava でも可=&quot;&quot;&gt;を使えばマシにはなります）。&lt;/RxJava&gt;&lt;/p&gt;

&lt;h2 id=&quot;これが-kotlin-だと&quot;&gt;これが Kotlin だと…&lt;/h2&gt;

&lt;p&gt;というわけで Kotlin でやってみました。&lt;/p&gt;

&lt;p&gt;まず、「アニメーションを実行して、アニメーションが終わったら次へ継続する関数」を作成します。&lt;br /&gt;
ここでは &lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt; の拡張関数として定義してみました。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;net.amay077.animsample&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.View&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.animation.Animation&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlin.coroutines.experimental.suspendCoroutine&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;View&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimationAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspendCoroutine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setAnimationListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AnimationListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAnimationStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAnimationEnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onAnimationRepeat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;呼び出し側は次のような感じ。&lt;br /&gt;
コールバック地獄の Java に比べて天国かよここは…。&lt;br /&gt;
アニメーションはUIスレッドから呼び出す必要があるので &lt;code class=&quot;highlighter-rouge&quot;&gt;async() { }&lt;/code&gt; ではなく &lt;code class=&quot;highlighter-rouge&quot;&gt;launch(UI) { }&lt;/code&gt; を使う必要があるようです。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;button1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;anim1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TranslateAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anim1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;anim2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TranslateAnimation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0.5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RELATIVE_TO_SELF&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.0f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;anim2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// メインスレッドから async するよ&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ずっとくりかえし&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimationAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1. 2秒かけて上へ移動するアニメーションを実行&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;button1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startAnimationAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anim2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 2. 2秒かけて下へ移動するアニメーションを実行&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Kotlin をまともに使うのが初めてなのでまだ改善できるかも。。&lt;br /&gt;
よいコードがありましたらご指摘ください。&lt;/p&gt;

&lt;p&gt;※Kotlin の coroutine(async/await) は 2017年7月現在、正式リリースされていません(experimental 版です)。&lt;/p&gt;

&lt;p&gt;Kotlin での実装には、次のサイトを参考にさせていただきました&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/Kogarasi/items/4bd0a37763b057e9d796&quot;&gt;Android開発ではじめるKotlin - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/ke__kyukyun1828/items/c4c321650d888765140e&quot;&gt;Kotlin覚書-環境構築 - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/k-kagurazaka@github/items/702c92bc3381af36db12&quot;&gt;Kotlin+Androidでasync/await - Qiita&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/37805860/how-to-instantiate-an-anonymous-class-that-implements-an-interface-in-kotlin&quot;&gt;How to instantiate an anonymous class that implements an interface in Kotlin - Stack Overflow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gildor/kotlin-coroutines-retrofit&quot;&gt;gildor/kotlin-coroutines-retrofit: Kotlin Coroutines await() extension for Retrofit Call&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ちなみに-c-でもできます&quot;&gt;ちなみに C# でもできます&lt;/h2&gt;

&lt;p&gt;C#（つまり Xamarin.Android）でも &lt;code class=&quot;highlighter-rouge&quot;&gt;async/await(つまり Task)&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskCompletionSource&lt;/code&gt; を組み合わせて実現できます。&lt;/p&gt;

&lt;p&gt;C# にも拡張メソッドがあり、次のように定義することができます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;public static class ViewAnimationExtensions
{
    public static Task&amp;lt;bool&amp;gt; StartAnimationAsync(this View view, Animation anim)
    {
        var source = new TaskCompletionSource&amp;lt;bool&amp;gt;();
        EventHandler&amp;lt;Animation.AnimationEndEventArgs&amp;gt; handler = null;

        handler = (sender, e) =&amp;gt;
        {
            anim.AnimationEnd -= handler; // 購読解除を忘れずに
            source.SetResult(true); // kotlin の continuation.resume(Unit) にあたるトコ
        };
        anim.AnimationEnd += handler; // イベントを購読

        view.StartAnimation(anim);
        return source.Task;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;よびだし側はこう。&lt;br /&gt;
呼び出し時に &lt;code class=&quot;highlighter-rouge&quot;&gt;await&lt;/code&gt; キーワードをつけ、それが含まれるメソッド(ここでは &lt;code class=&quot;highlighter-rouge&quot;&gt;OnCreate&lt;/code&gt;)に &lt;code class=&quot;highlighter-rouge&quot;&gt;async&lt;/code&gt; キーワードをつけます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C#&quot;&gt;protected async override void OnCreate(Bundle savedInstanceState)
{
    /* 省略 */

    while (true)
    {
        await button1.StartAnimationAsync(anim1);
        await button1.StartAnimationAsync(anim2);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Kotlin は同一プロジェクト内に Java と混ぜて使うことができるのがよいですね。&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Jul 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/07/24/concat_animations_with_kotlin/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/07/24/concat_animations_with_kotlin/</guid>
        
        
        <category>Kotlin</category>
        
        <category>Android</category>
        
        <category>Java</category>
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
      </item>
    
      <item>
        <title>Nintendo Switch Online アプリは Xamarin(Xamarin.Forms)製です</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.nintendo.co.jp/hardware/switch/onlineservice/&quot;&gt;ニンテンドースイッチのオンラインサービス&lt;/a&gt;用のアプリ「Nintendo Switch Online」が、なんと &lt;strong&gt;Xamarin 製&lt;/strong&gt; でした。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;きたな！ Nintendo Switch Online アプリ(Android/iOS) は Xamarin(Xamarin.Forms)製です！ &lt;a href=&quot;https://t.co/lJX5CBckgt&quot;&gt;pic.twitter.com/lJX5CBckgt&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@バレル待ち (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/887610194947067904&quot;&gt;2017年7月19日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;Android アプリと iOS アプリの権利表記の画面から使用されているライブラリを整理してみました。使用されているライブラリを見るとアプリは Xamarin.Forms 製のようです。&lt;/p&gt;

&lt;h2 id=&quot;xamarin-とか-androidiosnet-とか関係なさそうなやつ&quot;&gt;Xamarin とか Android/iOS/.NET とか関係なさそうなやつ&lt;/h2&gt;

&lt;h3 id=&quot;echo-cancellation-program-by-nippon-telegraph-and-telecom-corp&quot;&gt;Echo Cancellation Program by Nippon Telegraph and Telecom Corp&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;NTT やん&lt;/li&gt;
  &lt;li&gt;ボイスチャットのエコーキャンセラっぽいですね&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;libsrtp-by-cisco-systems-inc&quot;&gt;libSRTP by Cisco Systems, Inc&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/cisco/libsrtp&lt;/li&gt;
  &lt;li&gt;Secure Realtime Transport Protocol とのこと、これもボイチャ関連ですかね&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;opus-by-xiphorg-skype-limited&quot;&gt;Opus by Xiph.Org, Skype Limited&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://opus-codec.org/&lt;/li&gt;
  &lt;li&gt;音声コーデックでした&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webrtc-audioprocessing-by-google-inc&quot;&gt;WebRTC AudioProcessing by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://webrtc.org/&lt;/li&gt;
  &lt;li&gt;WebRTC で音声関連ですねー&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;breakpad-by-google-inc&quot;&gt;BreakPad by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/breakpad/breakpad/&lt;/li&gt;
  &lt;li&gt;クラッシュレポーティングシステムらしいです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;curl-by-deniel-stenberg&quot;&gt;Curl by Deniel Stenberg&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://ja.wikipedia.org/wiki/CURL&lt;/li&gt;
  &lt;li&gt;cURL のことですよね？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;libdisasm&quot;&gt;Libdisasm&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://bastard.sourceforge.net/libdisasm.html ？&lt;/li&gt;
  &lt;li&gt;ディスアセンブラ？よくわかりません&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;gflags-by-google-inc&quot;&gt;gflags by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://gflags.github.io/gflags/&lt;/li&gt;
  &lt;li&gt;コマンドラインツール？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;linux-syscall-support-by-google-inc&quot;&gt;Linux Syscall Support by Google Inc&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://chromium.googlesource.com/linux-syscall-support/ ？&lt;/li&gt;
  &lt;li&gt;わかりません&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;musl-by-rich-felker&quot;&gt;musl by Rich Felker&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.musl-libc.org/&lt;/li&gt;
  &lt;li&gt;C++ 関連はわからんなー&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android-関連のやつ&quot;&gt;Android 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;lottie-by-airbnb&quot;&gt;Lottie by AirBnB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://airbnb.design/lottie/&lt;/li&gt;
  &lt;li&gt;アニメーションライブラリですね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;square-bindings&quot;&gt;square-bindings&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/mattleibow/square-bindings&lt;/li&gt;
  &lt;li&gt;Androidアプリ開発者の御用達、Square社のAndroid向けライブラリをXamarin.Androidから呼べるようにしたラッパーです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;okio&quot;&gt;Okio&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/square/okio&lt;/li&gt;
  &lt;li&gt;これも Square の。通信ライブラリですね。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ios-関連のやつ&quot;&gt;iOS 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;lottie-by-airbnb-1&quot;&gt;Lottie by AirBnB&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Android と同じ〜&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;webptouch&quot;&gt;WebP.Touch&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/luberda-molinet/WebP.Touch&lt;/li&gt;
  &lt;li&gt;画像フォーマット「WebP」のデコーダです&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;xamarinforms-関連のやつ&quot;&gt;Xamarin.Forms 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;xamarin-sdk&quot;&gt;Xamarin SDK&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.xamarin.com/&lt;/li&gt;
  &lt;li&gt;はい出ました&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugins-for-xamarin-by-james-montemagno--refractored-llc&quot;&gt;Plugins for Xamarin by James Montemagno / Refractored LLC&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/xamarin/XamarinComponents&lt;/li&gt;
  &lt;li&gt;Xamarin の機能を拡張するライブラリ群です&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;share-plugin-by-jakob-gurtl&quot;&gt;Share Plugin by Jakob Gurtl&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://guertl.me/post/136407883480/share-plugin-for-xamarin-and-windows&lt;/li&gt;
  &lt;li&gt;「他のアプリで開く」的な機能を提供するやつ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hockey-sdk&quot;&gt;Hockey SDK&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://hockeyapp.net/&lt;/li&gt;
  &lt;li&gt;クラッシュレポートとか配布自動化とかユーザーメトリクス収集とか（被ってるライブラリがあるけど）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;carouselviewformsplugin-by-alexrainman&quot;&gt;CarouselView.FormsPlugin by alexrainman&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/alexrainman/CarouselView&lt;/li&gt;
  &lt;li&gt;横にスワイプして画面切り替えるやつ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;xamarin-forms-lab&quot;&gt;Xamarin Forms Lab&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/XLabs/Xamarin-Forms-Labs&lt;/li&gt;
  &lt;li&gt;Xamarin.Forms の機能を拡張するライブラリ（もうメンテ終了してて、作者は Xamarin に JOIN したけど）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;current-activity-plugin-by-james-montemagno&quot;&gt;Current Activity Plugin by James Montemagno&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/jamesmontemagno/CurrentActivityPlugin&lt;/li&gt;
  &lt;li&gt;Android 向けと思われるが…&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ffimageloading-by-fabien-molinet&quot;&gt;FFImageLoading by Fabien Molinet&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/luberda-molinet/FFImageLoading&lt;/li&gt;
  &lt;li&gt;画像読み込みライブラリ。まあ Picasso や Glide みたいなやつですわ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;skiasharp&quot;&gt;SkiaSharp&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/mono/SkiaSharp&lt;/li&gt;
  &lt;li&gt;出ました、クロスプラットフォームの２Dグラフィックス描画ライブラリ&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;net-関連のやつ&quot;&gt;.NET 関連のやつ&lt;/h2&gt;

&lt;h3 id=&quot;modernhttpclient-by-paul-betts&quot;&gt;ModernHttpClient by Paul Betts&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/paulcbetts/ModernHttpClient&lt;/li&gt;
  &lt;li&gt;各プラットフォームの通信ライブラリと .NET の HttpClient の橋渡しをします&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jsonnet-by-james-newton-king&quot;&gt;Json.NET by James Newton-King&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.newtonsoft.com/json&lt;/li&gt;
  &lt;li&gt;いわずとしれた Json を扱うライブラリ&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pclcrypto&quot;&gt;PCLCrypto&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/AArnott/PCLCrypto&lt;/li&gt;
  &lt;li&gt;暗号化ライブラリです&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;mathnet-numerics-by-mathnet&quot;&gt;Math.NET Numerics by Math.NET&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://numerics.mathdotnet.com/&lt;/li&gt;
  &lt;li&gt;Math というくらいなので数学系のライブラリなのでしょう&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pinvoke-by-andrew-arnott-and-more&quot;&gt;P/Invoke by Andrew Arnott and more&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/AArnott/pinvoke&lt;/li&gt;
  &lt;li&gt;Win32DLLを簡単に呼び出せるようにするライブラリっぽいですが、一体何のために？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;validation&quot;&gt;Validation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/aarnott/Validation&lt;/li&gt;
  &lt;li&gt;メソッドでバリデーションして例外投げるのを簡単にしてくれるっぽい&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Xamarin の事例としては久しぶりのビッグネームじゃあないでしょうか、しかもワールドクラス(Microsoft がプレスリリースだせば良いのに)。&lt;/p&gt;

&lt;p&gt;Xamarin.Forms製のようなので、Windows 10 や macOS 向けのアプリも(Nintendo にやる気があれば)開発できる気がしますね！&lt;/p&gt;

&lt;p&gt;とはいえ推測ですが、WebRTCでボイスチャットみたいなコアな機能は C/C++ でやってるだろうし、ゲームの紹介的な画面は HTML だろうし、いろんな「クロスプラットフォームアプリ開発技法」を組み合わせて使っているのでしょうね。&lt;/p&gt;

&lt;p&gt;権利表記に &lt;a href=&quot;https://github.com/amay077/Xamarin.Forms.GoogleMaps&quot;&gt;自作ライブラリ&lt;/a&gt; が載るの、ワンチャンあるで！&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jul 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/07/19/nintendo_switch_online_is_made_by_xamarin_forms/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/07/19/nintendo_switch_online_is_made_by_xamarin_forms/</guid>
        
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Xamarin を使用したアプリ開発での、問題解決の方法</title>
        <description>&lt;p&gt;Xamarin はクロスプラットフォームアプリ開発ツールで、しかも「ネイティブAPI をラップするだけ」のタイプなので、トラブルの解決方法は、ネイティブアプリ開発の情報やノウハウの中にある場合が多いです。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/how_to_troubleshoots_about_xamarin_programming_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;私が Xamarin.Forms でアプリ開発をしていて、書いたコードが期待通り動作しない場合、以下のような手順で問題解決を試みていますよーというのを紹介します（環境面のトラブルではなく書いたコードの問題についてです）。&lt;/p&gt;

&lt;p&gt;ひとつ最初に言いたいのは、問題が発生したときにまず行うことは、 &lt;strong&gt;問題が発生する最小の環境を作り出す&lt;/strong&gt; ことです。修正のためにコードを書き換えたり、人に聞いたりするのはその後です。これは Xamarin に限らず、いやプログラミングに限らず、問題解決する際にはいつも心がけている事です。&lt;/p&gt;

&lt;h2 id=&quot;1-それはネイティブjava-android-や-swift-iosでも起こり得る事象か切り分ける&quot;&gt;1. それはネイティブ（Java-Android や Swift-iOS）でも起こり得る事象か切り分ける&lt;/h2&gt;

&lt;p&gt;まずは、直面している問題は Java での Android アプリ開発や Swift での iOS アプリ開発でも起こり得るかを考えてみましょう。とりあえず「Android + Java + あなたが直面している問題」をキーワードにググってみても良いかもしれません。&lt;/p&gt;

&lt;p&gt;画面のUIパーツの挙動、GPSなどセンサー類の使い方、通知や課金周りのトラブルなどは、ここに該当する場合が多いです。&lt;/p&gt;

&lt;p&gt;もっと大雑把に言うと、 Xamarin.Forms を使っている人は、何か問題が起こったら、Xamarin.Forms ではなく、Xamarin.Android や Xamarin.iOS で試しにアプリを作ってみて、同様の問題に直面するか切り分けてみてください(Java や Swift で再現コードを書くなら、それがベストです)。&lt;/p&gt;

&lt;p&gt;もしそれが Xamarin.Android や Xamarin.iOS でも起こる問題ならば、解決方法はネイティブ（Java-Android や Swift-iOS）アプリ開発の情報の中にあります。ネイティブアプリ開発に詳しい人に聞くのもよいでしょう（逆に Xamarin.Forms のソースコードを Java や Swift でのアプリ開発に詳しい人に見せても、お互いよい結果にはならないでしょう）。&lt;/p&gt;

&lt;h2 id=&quot;2-それは-xamarin固有の事象かnet全般で起こりえるか切り分ける&quot;&gt;2. それは Xamarin固有の事象か、.NET全般で起こりえるか切り分ける&lt;/h2&gt;

&lt;p&gt;ネイティブが原因である可能性を排除できたら、次は Xamarin 固有の事象かどうかを切り分けます。&lt;/p&gt;

&lt;p&gt;Xamarin 固有とは、言い換えればほとんど &lt;a href=&quot;https://developer.xamarin.com/guides/xamarin-forms/&quot;&gt;Xamarin.Forms&lt;/a&gt; の機能に関する問題かどうかです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xamarin.Forms の画面レイアウト(ContentPage, MasterDetailPage, ContentView, …)&lt;/li&gt;
  &lt;li&gt;Xamarin.Forms の画面ナビゲーション(NavigationPage, PushAsync, PushModalAsync, …)&lt;/li&gt;
  &lt;li&gt;(Xamarin.Forms の)XAML&lt;/li&gt;
  &lt;li&gt;(Xamarin.Forms の)データバインディング&lt;/li&gt;
  &lt;li&gt;カスタムレンダラー&lt;/li&gt;
  &lt;li&gt;Effects, Behavior&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などはここに該当するでしょう。&lt;/p&gt;

&lt;p&gt;解決方法を探るには Xamarin.Forms + あなたが直面している問題 をキーワードにググる（英語の方が見つかりやすい）、 &lt;a href=&quot;https://teratail.com/&quot;&gt;teratail&lt;/a&gt; や &lt;a href=&quot;https://www.facebook.com/groups/xm.jxug/&quot;&gt;JXUG の Facebook ページ&lt;/a&gt;に、 Xamarin.Forms のタグを付けて、聞いてみるのもよいです。&lt;/p&gt;

&lt;p&gt;ちなみに現在日本で発売されている Xamarin に関する書籍は、マイクロソフト公式である&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2vcXNGb&quot;&gt;プログラミングXamarin 上 Xamarin.FormsとC#によるクロスプラットフォームモバイルアプリ開発&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を筆頭に、ほとんどが Xamarin.Forms に関するものです。書籍から解決方法が得られるかも知れません。&lt;br /&gt;
日本で発売済、または発売予定の書籍一覧は&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/amay077/items/38ee79b3e3e88cf751b9#%E6%9B%B8%E7%B1%8D&quot;&gt;Xamarin(ザマリン) とはなんぞや - 日本語情報について - 書籍&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;でも紹介しています。&lt;/p&gt;

&lt;p&gt;Xamarin.Forms 向けと誤解されやすいのですが &lt;a href=&quot;https://github.com/xamarin/XamarinComponents&quot;&gt;Plugins for Xamarin（Xamarin Plugins）&lt;/a&gt; と呼ばれるライブラリ群があります。&lt;br /&gt;
ここでトラブルに遭遇した場合、それは Xamarin固有 ですが Xamarin.Forms には依存しません。つまり 1. に戻って「Xamarin.Android、Xamarin.iOS で試してみる」ことが可能になります。さらにこれらはオープンソースなので、デバッグも可能です。ソースコードを追えば、Xamarin Plugins は各ネイティブのAPIを使った実装に対して、共通なインターフェースを与えているだけであることが分かると思います。&lt;/p&gt;

&lt;h2 id=&quot;3-net全般で起こりえる問題であればnet系の情報源から解決方法を探す&quot;&gt;3. .NET全般で起こりえる問題であれば、.NET系の情報源から解決方法を探す&lt;/h2&gt;

&lt;p&gt;ここまで来ると、「Android/iOSネイティブが原因ではない」「Xamarin固有の機能(≒Xamarin.Forms)が原因でもない」となっているはずです。&lt;/p&gt;

&lt;p&gt;ここであり得る問題は、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;C# の言語機能に関すること&lt;/li&gt;
  &lt;li&gt;.NET Framework(や Mono)クラスライブラリの使い方や仕様に関すること&lt;/li&gt;
  &lt;li&gt;.NETプラットフォームを対象とした有償やOSSのライブラリに関すること&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;くらいしか想定される原因がないと思います。&lt;/p&gt;

&lt;p&gt;1 は言語の知識を得れば解決すると思いますが、言語の最新バージョンが使用できるか否かに関わるトラブルはあり得ます。&lt;/p&gt;

&lt;p&gt;2 も、.NET Framework のクラスライブラリの使い方の（新しめの）情報を当たれば、単純な How to であれば解決します。&lt;/p&gt;

&lt;p&gt;ちょっと複雑な問題である場合もあります。&lt;br /&gt;
例えば 「.NET Framework のクラスを使用した通信処理が Android では正しく動作しない、使い方は正しいはずである。」という問題が起こった場合、次のように切り分けていく必要があります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;そのコードは iOS でも動作するか？&lt;/li&gt;
  &lt;li&gt;そのコードは Windows(コンソールアプリ) でも動作するか？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;.NET Framework は、プラットフォームによって実装が異なるため、同じコードでも「あるプラットフォームだけ動作しない」可能性はあり得ます。そのような場合、動作させたい全てのプラットフォームで期待通り動作するコードに辿りつければよいですが、そうでない場合、プラットフォーム固有の回避（ワークアラウンド）コードを埋め込む必要があるかもしれません。&lt;/p&gt;

&lt;p&gt;AOT(Ahead Of Time)コンパイルを使用するiOS固有の事象として「iOSシミュレータでは動作するが、端末では動作しない」というものがあります。&lt;a href=&quot;https://developer.xamarin.com/guides/ios/advanced_topics/limitations/&quot;&gt;Limitations - Xamarin&lt;/a&gt; に引っかかってないか確認しましょう（Android でも端末による挙動の違いはありますが、主旨がズレるので割愛します）。&lt;/p&gt;

&lt;p&gt;3 は、有名どころだと &lt;a href=&quot;http://www.newtonsoft.com/json&quot;&gt;Json.NET&lt;/a&gt; のような、主に nuget で配布されているライブラリです。これらに関する問題であれば、発生している事象と、再現に必要な最小限の情報を突き止めて、 GitHub の issue や開発元へコンタクトを取るなどを行いましょう。ソースコードが公開されているので、大抵の場合、自分でデバッグして問題点を特定し、修正のパッチを投げることも可能です。&lt;/p&gt;

&lt;p&gt;中には（&lt;a href=&quot;https://github.com/PrismLibrary/Prism&quot;&gt;Prism.Forms&lt;/a&gt; のように）、Xamarin.Forms を対象としたライブラリもあります(Prism はその他のプラットフォームにも対応していますが)。そのような場合でも、まずは問題が Xamarin.Forms にあるのか Prism.Forms にあるのかを切り分けて、適切な質問をしましょう。&lt;/p&gt;

&lt;h1 id=&quot;まとめ&quot;&gt;まとめ&lt;/h1&gt;

&lt;p&gt;もう一度言います。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;問題が発生する最小の環境を作り出し&lt;/strong&gt; てから、解決方法を探ったり、人に聞きましょう。&lt;/p&gt;

&lt;p&gt;【おまけ】&lt;br /&gt;
他のクロスプラットフォーム開発ツールに比べて Xamarin が秀でているのは 1. の&lt;br /&gt;
「ネイティブ（Java-Android や Swift-iOS）でも起こり得る事象かの切り分けが簡単」&lt;br /&gt;
なことです。なぜなら Xamarin は「ネイティブAPI をラップするだけ」だから。&lt;br /&gt;
ここで紹介したトラブルシューティングの手間が面倒だ(＝メリットよりデメリットの方が大きい)と感じるのであれば、Xamarin は使わない方がよいでしょう。&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Jul 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/07/18/how_to_troubleshoots_about_xamarin_programming/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/07/18/how_to_troubleshoots_about_xamarin_programming/</guid>
        
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
        <category>.NET</category>
        
      </item>
    
  </channel>
</rss>
