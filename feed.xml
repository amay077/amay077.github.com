<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>https://blog.amay077.net/</link>
    <atom:link href="https://blog.amay077.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 28 Jan 2019 06:27:57 -0600</pubDate>
    <lastBuildDate>Mon, 28 Jan 2019 06:27:57 -0600</lastBuildDate>
    <generator>Jekyll v3.8.4</generator>
    
      <item>
        <title>MVP Renewal</title>
        <description>&lt;p&gt;まあそういうことです。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.amay077.net/blog/2016/10/02/become-microsoft-mvp-for-the-first-timme/&quot;&gt;初めて Microsoft MVP になりました！&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;更新のタイミング変更の影響で初受賞から２年近く経ってますね。&lt;/p&gt;

&lt;p&gt;固執するつもりはないけど、特典はいろいろ遊ぶのにありがたいし、&lt;br /&gt;
仕事でもこのレッテルがあるということで案件が取れる確度が上がったりするので、使えるものはつかっていこうと思います。&lt;/p&gt;

&lt;p&gt;グロサミは年に一回海外行きたいを叶えるちょうどよい機会だけど、有給を取り戻すのが大変。。。&lt;/p&gt;

&lt;p&gt;＜追記＞&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;This confusion between &amp;quot;open source, cross-platform, tech community&amp;quot; (e.g. .NET Foundation, &lt;a href=&quot;https://twitter.com/fsharporg?ref_src=twsrc%5Etfw&quot;&gt;@fsharporg&lt;/a&gt;, Go community, PSF, ...) and &amp;quot;product-related awards program&amp;quot; (MVP) is very profound.  We need both, and I respect both, but we shouldn&amp;#39;t confuse them.&lt;/p&gt;&amp;mdash; Don Syme (@dsyme) &lt;a href=&quot;https://twitter.com/dsyme/status/1014584414293151744?ref_src=twsrc%5Etfw&quot;&gt;2018年7月4日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;なツイートを見て。&lt;/p&gt;

&lt;p&gt;うんうん、 “product-related awards program” な意味でアピールはするけど、そうでない場合は特に表に出す意味もないかなーと思っています。&lt;br /&gt;
そういう意味ではこのブログにロゴ載せてるのもあまり意味はない、か。&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jul 2018 09:59:00 -0500</pubDate>
        <link>https://blog.amay077.net/blog/2018/07/02/renew_microsoft_most_valuable_professional_2018/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/07/02/renew_microsoft_most_valuable_professional_2018/</guid>
        
        
        <category>Microsoft</category>
        
        <category>MVP</category>
        
      </item>
    
      <item>
        <title>MV* の「つなぎ」に RxJava を使うのをやめたい</title>
        <description>&lt;p&gt;ここ数年、特にモバイルアプリ開発で流行ってるUIデザインパターンならなんでもですが、MVVM を例にすると、Usecase における Repository からの結果の受信、ViewModel における Usecase からの通知、あるいは View の変更の通知に RxJava の &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; を使用する例は多いと思います（かくいう自分もそう作ってきました）。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;ここ数年、特にモバイルアプリ開発で流行ってるUIデザインパターンならなんでもですが、MVVM を例にすると、Usecase における Repository からの結果の受信、ViewModel における Usecase からの通知、あるいは View の変更の通知に RxJava の &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; を使用する例は多いと思います（かくいう自分もそう作ってきました）。&lt;/p&gt;

&lt;p&gt;DroidKaigi 2018 のアプリもそうですね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/4d3d0c3a-879d-dd05-b9f1-3bee35ff3e97.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/blob/master/README.md#architecture&quot;&gt;via DroidKaigi 2018 official Android app&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;しかし最近、この「つなぎ」の役割に RxJava を使うのはやり過ぎでは？と思うようになっています。その理由を次に書きます。&lt;/p&gt;

&lt;h2 id=&quot;rxjava-を使うのをやめたい理由&quot;&gt;RxJava を使うのをやめたい理由&lt;/h2&gt;

&lt;h3 id=&quot;1-rx-はできることが多すぎる&quot;&gt;1. Rx は、できることが多すぎる&lt;/h3&gt;

&lt;p&gt;RxJava の学習コストが高いことは知られています。&lt;br /&gt;
つなぎの型が &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; であるだけで、多くの機能が使えてしまい、利用者(=開発者)を混乱させるでしょう。&lt;/p&gt;

&lt;p&gt;Rx の真髄は豊富な Operator を組合せて、ストリーミングデータをエレガントに扱うことなので、たた単に「pub して sub するだけ」ならオレの出番じゃねぇよ、なんですよね。&lt;/p&gt;

&lt;h3 id=&quot;2-依存モジュールは最小にすべきだ&quot;&gt;2. 依存モジュールは最小にすべきだ&lt;/h3&gt;

&lt;p&gt;「つなぎ」に &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; を使うことで、つながっている両者は RxJava に依存してしまいます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developers-jp.googleblog.com/2018/05/google-io-2018-whats-new-in-android.html&quot;&gt;Google I/O 2018 で発表された Android App Bundle&lt;/a&gt; では、機能をモジュール化して、モジュール毎の（オンデマンドな）動的配信が可能になります。&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;モジュール化するにあたり、各モジュールが依存するモジュールはできるだけ最小にすべきで、「つなぎ」の役割のためだけに決して小さくはない RxJava に依存することには疑問があります。&lt;/p&gt;

&lt;h3 id=&quot;3-java-に対する不安pure-kotlin-への期待&quot;&gt;3. Java に対する不安、Pure Kotlin への期待&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[OracleがJavaの著作権侵犯裁判でGoogleに勝利&lt;/td&gt;
          &lt;td&gt;TechCrunch Japan](https://jp.techcrunch.com/2018/03/28/2018-03-27-oracle-wins-appeal-against-google-in-copyright-case/)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の通り、今後の “疑似Java” の使用には幾ばくかの不安があります。&lt;/p&gt;

&lt;p&gt;一方で、もはや Android アプリ開発の標準言語となった Kotlin は、言語自体は JVM が必須ではありません。例えば &lt;a href=&quot;https://blog.jetbrains.com/jp/2017/11/29/828&quot;&gt;Kotlinマルチプラットフォームプロジェクト&lt;/a&gt; では、複数プラットフォームで使いまわせる「共有モジュール」は Kotlin の標準APIsのみを使って開発します。&lt;/p&gt;

&lt;p&gt;RxJava はその名の通り、Java向けのライブラリであり JVM に依存します。&lt;/p&gt;

&lt;p&gt;不安のあるJava成分を削除し、来るべきマルチプラットフォーム時代のためにモジュールを共通化しようと考えたら、JVM に依存している RxJava は足枷になるはずです（Pure Kotlin で書かれた Rx-Kotlin&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; には期待したいですがそれは別な話で）。&lt;/p&gt;

&lt;h2 id=&quot;とはいえ一番マッチしたのが-rxjava-だったんです&quot;&gt;とはいえ一番マッチしたのが RxJava だったんです&lt;/h2&gt;

&lt;p&gt;Java や Android の API にいわゆる Promise/Future や、ストリームを扱う共通インターフェースがなかったところに、「Rx(RxJava)なんか便利だぞ」って流行りだして、そのまま便利に使われちゃってる、というのが現状だと思います（自分も Android で Rx を使い始めたきっかけは Promise/Future の代わりでした）。&lt;/p&gt;

&lt;p&gt;それはそれでベストな選択だったわけで何も間違ってはいないです。&lt;br /&gt;
ただ今はもっとベストな選択があるんじゃないか？と。&lt;/p&gt;

&lt;h2 id=&quot;rxjava-を-kotlin-coroutines-に置き換えたら良いんじゃないかな&quot;&gt;RxJava を Kotlin Coroutines に置き換えたら良いんじゃないかな？&lt;/h2&gt;

&lt;p&gt;前述の通り Kotlin はもはや Android アプリ開発では必須ですし、もしかしたら私の知っている以上にサーバーサイドでも使われているのかも知れません。&lt;/p&gt;

&lt;p&gt;Kotlin には &lt;a href=&quot;https://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;Coroutines&lt;/a&gt; という、非同期に特化したAPIセットがあります。まだ experimental(実験段階)だけど、プロダクトにぶっこんでる人も多いのではないかと。&lt;/p&gt;

&lt;p&gt;そしてこの記事&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/pljp/items/f748125934fd3f880565&quot;&gt;Kotlinコルーチンによるリアクティブストリームのガイド (日本語訳) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;では、RxJava と Coroutines の対比が解説されているではありませんか。&lt;/p&gt;

&lt;p&gt;代表的なものにしぼって Rx → Coroutine の対応を挙げると、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1件だけ値を受信する &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&amp;lt;T&amp;gt;&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;Continuation&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;完了したかのみを受信する &lt;code class=&quot;highlighter-rouge&quot;&gt;Completable&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;Continuation&amp;lt;Unit&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;複数の値を通知する &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&amp;lt;T&amp;gt;&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;SendChannel&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;複数の値を受信する &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;T&amp;gt;/Flowable&amp;lt;T&amp;gt;&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;ReceiveChannel&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;処理を実行する疑似スレッド &lt;code class=&quot;highlighter-rouge&quot;&gt;Scheduler&lt;/code&gt; → &lt;code class=&quot;highlighter-rouge&quot;&gt;CoroutineContext&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となります。&lt;br /&gt;
このように置き換えれば RxJava への依存は切ることができそうです(ただし現在の Coroutines は JVM に依存してるみたいなので共通モジュールでは使えなさそう:cry:)。&lt;/p&gt;

&lt;h2 id=&quot;rxjava-は局所的に本当に必要な場所だけで使おう&quot;&gt;RxJava は局所的に、本当に必要な場所だけで使おう&lt;/h2&gt;

&lt;p&gt;RxJava が完全に不要になるかといえばそうでもなく、そのオペレータはやっぱり便利です。&lt;/p&gt;

&lt;p&gt;例えば、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;大量に流れてくるデータを「間引き」する &lt;code class=&quot;highlighter-rouge&quot;&gt;debounce&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/fc075d4e777f8c7a2816&quot;&gt;複数のストリームの「どれか」が変わったら通知&lt;/a&gt;する &lt;code class=&quot;highlighter-rouge&quot;&gt;combineLatest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とか。&lt;/p&gt;

&lt;p&gt;これら「RxJava でしかできない機能」が必要なら使うべきで、ただし「局所的に」するのがよいと思います。&lt;br /&gt;
DDD よく知らないけどカッコつけて言うなら「&lt;a href=&quot;https://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/chap3.html#CohesiveMechanisms&quot;&gt;Cohesive Mechanisms（凝集されたメカニズム）パターン&lt;/a&gt;」でしょうか、Rx は What じゃなくて How の領域なのでそこだけ分離する、と。&lt;/p&gt;

&lt;p&gt;幸い、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines/tree/master/reactive/kotlinx-coroutines-rx2&quot;&gt;kotlinx.coroutines/reactive/kotlinx-coroutines-rx2 at master · Kotlin/kotlinx.coroutines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を使うと、 RxJava2 と Kotlin Coroutines の相互変更ができるようです。つなぎは &lt;code class=&quot;highlighter-rouge&quot;&gt;Continuation&amp;lt;T&amp;gt;&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;ReceiveChannel&amp;lt;T&amp;gt;&lt;/code&gt; を使い、必要な箇所で &lt;code class=&quot;highlighter-rouge&quot;&gt;Single&amp;lt;T&amp;gt;&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;Flowable&amp;lt;T&amp;gt;&lt;/code&gt; に変換して使えばよさそうです。&lt;/p&gt;

&lt;h2 id=&quot;実際にやってみた&quot;&gt;実際にやってみた&lt;/h2&gt;

&lt;p&gt;冒頭の DroidKaigi 2018 のアプリから RxJava を追い出して、代わりに Kotlin Coroutine を使ってみました。はじめは「DroidKaigiApp から Rx 全部抜く！」の意気込みで取り掛かりましたが、意外と RxJava にガッツリ依存していたのであきらめ :sweat_smile: 、一つの画面だけやってみました。&lt;/p&gt;

&lt;p&gt;イメージ的にはこんな感じです。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/b3c7c75d-582b-55a7-696a-88be6a689dce.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;やってみたのはスタッフ一覧、NavDrawer → Staff で出てくる画面です。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/93a89096-60bd-7746-e169-7fbc613e2a77.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;この画面は &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffViewModel&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; を使ってスタッフ一覧データを読み、それを画面に表示させています。&lt;/p&gt;

&lt;h3 id=&quot;staffdatarepository-から-rxjava-を追い出す&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; から RxJava を追い出す&lt;/h3&gt;

&lt;p&gt;こちらの修正前のソースが以下です。見やすさ向上のため関係のない一部のコードは省いています。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StaffDataRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;schedulerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SchedulerProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StaffRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Completable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toCompletable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flowable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toFlowable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribeOn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;asset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalJsonParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadJsonFromAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;staff.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StaffJsonMapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapToStaffList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Timber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;emitter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;staff: Flowable&amp;lt;List&amp;lt;Staff&amp;gt;&amp;gt;&lt;/code&gt; が、読み出したスタッフリストを外部へ通知する Observable ですね。&lt;br /&gt;
そして &lt;code class=&quot;highlighter-rouge&quot;&gt;loadStaff()&lt;/code&gt; が、読み出しを非同期で実行するメソッドです(これ自体も戻り値が &lt;code class=&quot;highlighter-rouge&quot;&gt;Completable&lt;/code&gt; になっていますが、あまり関係ないので省略します)。&lt;/p&gt;

&lt;p&gt;ところで上記のコード、初見でも違和感があって、ちゃんと調べたら問題を2つほど見つけたのですが、どこかわかるでしょうか？ DroidKaigiApp の repo にプルリクを出してマージしてもらったので、気になる方はそちらを見てみてください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/pull/674&quot;&gt;fix: StaffDataRepository.staff getter returns new instance each calls by amay077 · Pull Request #674 · DroidKaigi/conference-app-2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さてここから RxJava をやめて代わりに Coroutine を使ってみたのが次です。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StaffDataRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;schedulerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SchedulerProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StaffRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConflatedBroadcastChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReceiveChannel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;openSubscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CommonPool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;asset&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LocalJsonParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadJsonFromAsset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@StaffDataRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;staff.json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StaffJsonMapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mapToStaffList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Timber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;まず &lt;code class=&quot;highlighter-rouge&quot;&gt;staff&lt;/code&gt; プロパティが &lt;code class=&quot;highlighter-rouge&quot;&gt;ReceiveChannel&amp;lt;List&amp;lt;Staff&amp;gt;&amp;gt;&lt;/code&gt; になりました。&lt;br /&gt;
そしてそれは &lt;code class=&quot;highlighter-rouge&quot;&gt;ConflatedBroadcastChannel&lt;/code&gt; である &lt;code class=&quot;highlighter-rouge&quot;&gt;sender&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;openSubscription()&lt;/code&gt; して得ています。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;sender : ConflatedBroadcastChannel&lt;/code&gt; は値を送信する側、&lt;code class=&quot;highlighter-rouge&quot;&gt;staff: ReceiveChannel&lt;/code&gt; は値を受信するためだけのインターフェースです。これは Rx の &lt;code class=&quot;highlighter-rouge&quot;&gt;Subject&amp;lt;T&amp;gt;&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; に似ていますね。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;loadStaff()&lt;/code&gt; は少し簡略化しました。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;launch(CommonPool) { }&lt;/code&gt; で非同期処理を開始し、Json を読み出した後、&lt;code class=&quot;highlighter-rouge&quot;&gt;sender.offer()&lt;/code&gt; でそれを送信します。&lt;br /&gt;
&lt;strong&gt;注目なのは、その次に &lt;code class=&quot;highlighter-rouge&quot;&gt;yield()&lt;/code&gt; を呼び出している点で、これにより非同期処理を開始したコルーチンに処理を戻します。&lt;code class=&quot;highlighter-rouge&quot;&gt;yield()&lt;/code&gt; を忘れると通知が受信できないので要注意です。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;staffviewmodel-から-rxjava-を追い出す&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StaffViewModel&lt;/code&gt; から RxJava を追い出す&lt;/h3&gt;

&lt;p&gt;次は ViewModel ですね。&lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; からスタッフリストを受信してそれを &lt;code class=&quot;highlighter-rouge&quot;&gt;LiveData&amp;lt;T&amp;gt;&lt;/code&gt; に変換します。LiveData はリストとデータバインドされているので一覧に表示される仕組みです。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StaffViewModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StaffRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;schedulerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SchedulerProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleObserver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;compositeDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeDisposable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;schedulerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@OnLifecycleEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ON_CREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribeBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defaultErrorHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compositeDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCleared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onCleared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compositeDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;staff: LiveData&amp;lt;&amp;gt;&lt;/code&gt; の宣言で &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffRepository.staff : Flowable&amp;lt;&amp;gt;&lt;/code&gt; を LiveData に変換しています、宣言だけで完結する、いいコードですね。&lt;/p&gt;

&lt;p&gt;あとは画面の表示時である &lt;code class=&quot;highlighter-rouge&quot;&gt;onCreate&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffRepository.loadStaff()&lt;/code&gt; を呼び出します。&lt;/p&gt;

&lt;p&gt;で、こちらも RxJava をやめて代わりに Coroutine を使ってみたのが次です。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;StaffViewModel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;@Inject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StaffRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;schedulerProvider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SchedulerProvider&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LifecycleObserver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;compositeDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeDisposable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CompositeDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;liveData&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MutableLiveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&amp;gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unconfined&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;liveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inProgress&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;staff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;consumeEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;liveData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;liveData&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;@OnLifecycleEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Lifecycle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ON_CREATE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loadStaff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCleared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onCleared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compositeDisposable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;staff: LiveData&amp;lt;&amp;gt;&lt;/code&gt; の定義が少し長くなってしまいましたが、これは &lt;code class=&quot;highlighter-rouge&quot;&gt;.toResult()&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;.toLiveData()&lt;/code&gt; の拡張関数に頼れなかったためです。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;launch(Unconfined) { }&lt;/code&gt; で、呼び出し元と同じスレッドで処理を開始し、&lt;code class=&quot;highlighter-rouge&quot;&gt;repository.staff.consumeEach { }&lt;/code&gt; で値を受信しつづけます。値を受信したら &lt;code class=&quot;highlighter-rouge&quot;&gt;liveData.postValue(it)&lt;/code&gt; で値をViewに通知します。&lt;/p&gt;

&lt;p&gt;この処理は &lt;code class=&quot;highlighter-rouge&quot;&gt;ReceiveChannel&amp;lt;T&amp;gt;.toLiveData()&lt;/code&gt; な拡張関数が欲しいですね。&lt;/p&gt;

&lt;p&gt;さて、これらの修正で &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffFragment&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffViewModel&lt;/code&gt; - &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; のラインでは RxJava を使わず Kotlin の Coroutine で完結させることができました。&lt;/p&gt;

&lt;p&gt;修正前後の完全な差分は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/amay077/conference-app-2018/commit/610d975c5642c95f304b9e3e64957d0241b31afe&quot;&gt;https://github.com/amay077/conference-app-2018/commit/610d975c5642c95f304b9e3e64957d0241b31afe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を見てください。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Channel を使うために kotlinx-coroutines-core を追加&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ConflatedBroadcastChannel&lt;/code&gt; でデータを送信するとき、エラーが発生したら &lt;code class=&quot;highlighter-rouge&quot;&gt;.close(throwable)&lt;/code&gt; を呼ぶ&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; クラスは &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffRepository&lt;/code&gt; インターフェースの実装なので、&lt;code class=&quot;highlighter-rouge&quot;&gt;StaffRepository&lt;/code&gt; も修正&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などをしています。&lt;/p&gt;

&lt;h2 id=&quot;疑問&quot;&gt;疑問&lt;/h2&gt;

&lt;p&gt;これでよいんだろか？と思う点、いくつもあります。&lt;/p&gt;

&lt;h3 id=&quot;senderoffer-の後-yield-を呼ぶしかないのか&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sender.offer()&lt;/code&gt; の後、 &lt;code class=&quot;highlighter-rouge&quot;&gt;yield()&lt;/code&gt; を呼ぶしかないのか&lt;/h3&gt;

&lt;p&gt;通知を受信するために &lt;code class=&quot;highlighter-rouge&quot;&gt;yield()&lt;/code&gt; が必須！とは言ったものの、絶対忘れそう…。&lt;br /&gt;
あと「スレッドを呼び出し元に戻す」ことで受信が可能になるという仕組みもなんだかハマりそうな予感。&lt;/p&gt;

&lt;h3 id=&quot;sendchannelopensubscription-したら誰がいつ-close-するの&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SendChannel.openSubscription()&lt;/code&gt; したら、誰が・いつ Close するの？&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SendChannel.openSubscription()&lt;/code&gt; で得られる &lt;code class=&quot;highlighter-rouge&quot;&gt;ReceiverChannel&lt;/code&gt; には &lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt; メソッドがあります。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; で Open したんだから、&lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; で Close すべき？ なら &lt;code class=&quot;highlighter-rouge&quot;&gt;StaffDataRepository&lt;/code&gt; は Disposable であるべき？&lt;/p&gt;

&lt;h3 id=&quot;coroutinecontext-の扱い&quot;&gt;CoroutineContext の扱い&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;launch(xxx) { }&lt;/code&gt; の xxx に与える CoroutineContext、Rx では Scheduler にあたるわけですが、これはアプリ全体で統一感を持たせて管理すべきでしょう。修正前のコードでは &lt;code class=&quot;highlighter-rouge&quot;&gt;SchedulerProvider&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;ui/computation/io&lt;/code&gt; などが用意されていました。同じようにアプリ UI/計算実行用/IO処理 など個別に CoroutineContext を用意して、&lt;code class=&quot;highlighter-rouge&quot;&gt;SchedulerProvider&lt;/code&gt; に持たせるとよいのかな、と思います。&lt;br /&gt;
すべて &lt;code class=&quot;highlighter-rouge&quot;&gt;CommonPool&lt;/code&gt; に頼るとどこかで衝突・デッドロックが発生しそうです。&lt;/p&gt;

&lt;h2 id=&quot;おわり&quot;&gt;おわり&lt;/h2&gt;

&lt;p&gt;とりあえずこんな感じで、次に Android アプリをスクラッチで開発するときには、つなぎに RxJava を使わない方向でやってみようかなーと思っています。&lt;/p&gt;

&lt;p&gt;識者のコメント、お待ちしております。 :bow_tone3:&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/red_fat_daruma/status/999100409787674624&quot;&gt;@red_fat_daruma さんによると&lt;/a&gt;、App Bundle はマルチモジュールとは違う性質を持つようです、ちょっとこの理由にはそぐわないのかもしれません。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://twitter.com/shiraj_i/status/999095832354803712&quot;&gt;@shiraj_i さんのいわれる&lt;/a&gt;通り、 &lt;a href=&quot;https://github.com/ReactiveX/RxKotlin&quot;&gt;RxKotlin&lt;/a&gt; というライブラリは既にあって、それは単なるRxJavaのKotlin向け拡張です。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 24 May 2018 09:59:00 -0500</pubDate>
        <link>https://blog.amay077.net/blog/2018/05/24/d4629f9d20ba36a1347e/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/05/24/d4629f9d20ba36a1347e/</guid>
        
        
        <category>Android</category>
        
        <category>Kotlin</category>
        
        <category>RxJava</category>
        
      </item>
    
      <item>
        <title>Xamarin.Android でアプリの言語を動的に切り替える</title>
        <description>&lt;p&gt;複数言語のリソースを用意しておいて、システムの言語を変えると、アプリで使用される言語リソースも変わるわけですが、システム設定に関係なく、アプリ内で言語選択をしたい。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;つまり、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/39705739/android-n-change-language-programmatically/40849142#40849142&quot;&gt;java - Android N change language programmatically - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これ。&lt;br /&gt;
Kotlin でもできたので、どうせならということで Xamarin.Android でもやってみました。&lt;/p&gt;

&lt;h2 id=&quot;できあがり&quot;&gt;できあがり&lt;/h2&gt;

&lt;p&gt;こんな感じの成果になります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/9a6e1a7b-0acd-85a6-eb2f-7f63dfc0a1b2.gif&quot; alt=&quot;Untitled.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法&quot;&gt;方法&lt;/h2&gt;

&lt;h3 id=&quot;1-多言語用のリソースファイルを用意する&quot;&gt;1. 多言語用のリソースファイルを用意する&lt;/h3&gt;

&lt;p&gt;Android の仕様に従って &lt;code class=&quot;highlighter-rouge&quot;&gt;values/&lt;/code&gt; や &lt;code class=&quot;highlighter-rouge&quot;&gt;values-ja-rJP/&lt;/code&gt; に &lt;code class=&quot;highlighter-rouge&quot;&gt;String.xml&lt;/code&gt; を用意します。&lt;br /&gt;
ファイルを追加した後で、Build Action が「AndroidResource」になっている事を確認してください。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;values/String.xml (英語ってかデフォルト):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ResourceTest&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;welcome&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;WELCOME&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to_japanese&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;To Japanese&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to_english&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;To English&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;values-ja-rJP/String.xml (日本語):&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;resources&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;app_name&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ResourceTest&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;welcome&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;ようこそ&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to_japanese&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;日本語にする&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;to_english&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;英語にする&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resources&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-mainactivity-を実装する&quot;&gt;2. MainActivity を実装する&lt;/h2&gt;

&lt;p&gt;とりあえずざっと。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MainActivity.cs:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Content.Res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Java.Util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ResourceTest&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ResourceTest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainLauncher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@mipmap/icon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AttachBaseContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSharedPreferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mypref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileCreationMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Private&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;locale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLocale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetAvailableLocales&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringComparison&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OrdinalIgnoreCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
                                  &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;baseContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Locale&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newLocale&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newContext&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ContextWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;baseContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateConfigurationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;


            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AttachBaseContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;SetContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;FindViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;textWelcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Resources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;welcome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSharedPreferences&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mypref&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileCreationMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Private&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;FindViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonToEnglish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PutString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;locale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;en_US&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;FindViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buttonToJapanese&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Edit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PutString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;locale&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ja_JP&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;editor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Commit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;nf&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MainActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Finish&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;StartActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;intent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;簡単に説明すると 「&lt;code class=&quot;highlighter-rouge&quot;&gt;AttachBaseContext()&lt;/code&gt; を override して、そこで任意の Locale に変えた &lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt; にすげ替え」ています。&lt;/p&gt;

&lt;p&gt;「任意の Locale」は、2つのボタンを押したときにそれぞれ &lt;code class=&quot;highlighter-rouge&quot;&gt;ja_JP&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;en_US&lt;/code&gt; を SharedPreference に保存しておき、Activity を再起動します。&lt;/p&gt;

&lt;p&gt;再起動直後に &lt;code class=&quot;highlighter-rouge&quot;&gt;AttachBaseContext()&lt;/code&gt; が呼ばれるので、そこで SharedPreference に記憶された Locale を読み出しています。&lt;/p&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;1st try では、SharedPref を使うのを面倒くさがって、&lt;code class=&quot;highlighter-rouge&quot;&gt;Application&lt;/code&gt; クラスに記憶させとく作戦でしたが、失敗しました。その原因は &lt;code class=&quot;highlighter-rouge&quot;&gt;AttachBaseContext()&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;OnCreate()&lt;/code&gt; よりも先に呼ばれ、さらに &lt;code class=&quot;highlighter-rouge&quot;&gt;AttachBaseContext()&lt;/code&gt; の時点では &lt;code class=&quot;highlighter-rouge&quot;&gt;Activity.Application&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt; になっているためでした。&lt;/p&gt;
</description>
        <pubDate>Mon, 21 May 2018 09:59:00 -0500</pubDate>
        <link>https://blog.amay077.net/blog/2018/05/21/02e4e7c082014d22d08a/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/05/21/02e4e7c082014d22d08a/</guid>
        
        
        <category>Android</category>
        
        <category>C#</category>
        
        <category>Xamarin</category>
        
      </item>
    
      <item>
        <title>新しい Google Maps Platform では APIキーなしの呼び出しはサポートされなくなります</title>
        <description>&lt;p&gt;Google Maps JavaScript API や Google Places API などを含む地図・位置情報関連API群が、 &lt;strong&gt;Google Maps Platform&lt;/strong&gt; として、2018年6月にアップデートされます。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Google MapsがそのAPIの構成と課金方式を抜本的に変えて単純化、月200ドルぶんまで無料&lt;/td&gt;
          &lt;td&gt;TechCrunch Japan](https://jp.techcrunch.com/2018/05/03/2018-05-02-google-revamps-its-google-maps-developer-platform/)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mapsplatform.googleblog.com/2018/05/introducing-google-maps-platform.html&quot;&gt;Google Maps Platform: Introducing Google Maps Platform&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この変更では、主に課金体系の単純化がクローズアップされていますが、他の影響点として、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.google.com/maps-platform/user-guide/&quot;&gt;User Guide ｜ Google Maps Platform ｜ Google Cloud&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;にしれっと次のような記述があります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This will go into effect on June 11th, and keyless access will no longer be supported. At that time, keyless calls to the Maps JavaScript API and Street View API will return low-resolution maps watermarked with “for development purposes only.” Keyless calls to any of the following APIs will return an error: Maps Static API (including Static Street View), Directions API, Distance Matrix API, Geocoding API, Geolocation API, Places API, Roads API, and Time Zone API.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;これによると、 &lt;strong&gt;APIキー無しの呼び出しは2018/6/11以降サポートされなくなります&lt;/strong&gt;。&lt;br /&gt;
具体的には、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;APIキーなしの Maps JavaScript API や Street View API は、 &lt;strong&gt;「低解像度」で「”開発用”と透かしの入った」 地図を返す&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;APIキーなしの Direction API, Places API(以下略)は、 &lt;strong&gt;エラーを返す&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;とのことです。&lt;br /&gt;
APIキーなしの利用は 2016年 からサポートされなくなる旨がアナウンスされていましたが、それが実効されるということです。&lt;/p&gt;

&lt;p&gt;古くからメンテが滞っているWebアプリや、「とりあえず使ってみた」系のTipsなどは、影響を受けることになると思われるので、自身のプロダクトやコンテンツを確認してみることをおすすめします。&lt;/p&gt;
</description>
        <pubDate>Mon, 07 May 2018 09:59:00 -0500</pubDate>
        <link>https://blog.amay077.net/blog/2018/05/07/333a5bbf4e5fa52512fb/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/05/07/333a5bbf4e5fa52512fb/</guid>
        
        
        <category>GoogleMapsAPI</category>
        
      </item>
    
      <item>
        <title>Xamarin.Android で音声ファイルを順次再生する方法</title>
        <description>&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://teratail.com/questions/119209&quot;&gt;C# - 複数の音声ファイルを、別スレッドで重複しないように順次再生する処理(119209)｜teratail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;の回答で書いたやつなんですが。&lt;/p&gt;

&lt;p&gt;メディアファイル「a.mp3」「b.mp3」「c.mp3」があり、 a の再生が終わったら b を再生…とする方法です(&lt;code class=&quot;highlighter-rouge&quot;&gt;MediaPlayer&lt;/code&gt; 使用)。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//using Android.App;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//using Android.Widget;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//using Android.OS;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//using Android.Media;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//using System.Threading.Tasks;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;SetContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FindViewById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myButton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sounds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trumpet1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trumpet2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PlayAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// 再生が終了したら true を、エラーだったら false を返す&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PlayAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rscId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compSource&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TaskCompletionSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rscId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Completion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;compSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SetResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;compSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MediaPlayer&lt;/code&gt; は、再生が完了すると &lt;code class=&quot;highlighter-rouge&quot;&gt;onCompletion&lt;/code&gt; を通知するので、それを受信して次の曲を再生開始すればよいのですが、普通に書くとコールバック地獄に陥るので、&lt;code class=&quot;highlighter-rouge&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; 化して、フラットに書けるようにします。&lt;/p&gt;

&lt;p&gt;このような、「非同期処理で完了がイベントやコールバックで通知されるやつ」を &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; な非同期メソッドに変換するために &lt;code class=&quot;highlighter-rouge&quot;&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt; を使う方法、は非常によく使うので覚えておくとよいと思います。過去にはダイアログボックスの表示について同様のテクニックで async/await 化する方法を書きました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/0a3fa3dfac7f29a2807d&quot;&gt;UIAlertController を async/await 対応させて便利に使う - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この &lt;code class=&quot;highlighter-rouge&quot;&gt;Task&amp;lt;T&amp;gt;&lt;/code&gt; を使ったテクニックは 「C# ならでは」 でしたが、Androidアプリ開発の公式言語である Kotlin でも同じようなことができます。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;nepula.net.soundsample&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.media.MediaPlayer&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.support.v7.app.AppCompatActivity&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Bundle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.android.synthetic.main.activity_main.*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.coroutines.experimental.launch&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlin.coroutines.experimental.suspendCoroutine&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AppCompatActivity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;activity_main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;sounds&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trumpet1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trumpet2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOnClickListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;launch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;sounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;playAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;playAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspendCoroutine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;mp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOnCompletionListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setOnErrorListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MediaPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnErrorListener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;onError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MediaPlayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;cont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;mp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TaskCompletionSource&amp;lt;T&amp;gt;&lt;/code&gt; の代わりに &lt;code class=&quot;highlighter-rouge&quot;&gt;Continuation&amp;lt;T&amp;gt;&lt;/code&gt; を使う感じで。&lt;br /&gt;
非同期処理でも、レスポンス(or エラー)が一発で終わるものは RxJava を使う必要はないので、上記のようなパターンもよく使いますね。&lt;/p&gt;
</description>
        <pubDate>Wed, 28 Mar 2018 09:59:00 -0500</pubDate>
        <link>https://blog.amay077.net/blog/2018/03/28/51c36e8ff65c90a7f43e/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/03/28/51c36e8ff65c90a7f43e/</guid>
        
        
        <category>Android</category>
        
        <category>C#</category>
        
        <category>Xamarin</category>
        
      </item>
    
      <item>
        <title>Xamarin.Android でシステムボリュームが変更されたことを検知する</title>
        <description>&lt;p&gt;teratail に投稿された質問への回答ですが、こちらにも貼っときます。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://teratail.com/questions/117267&quot;&gt;Android - Xamarin Android システムの音量のの値が変更されたことを知りたい．(117267)｜teratail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stackoverflow の回答にある Java-Android のコードを、 Xamarin.Android 用に少し「書き換え」ただけです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/6896746/is-there-a-broadcast-action-for-volume-changes/17398781#17398781&quot;&gt;android - Is there a broadcast action for volume changes? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// MainActivity.cs&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Widget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.OS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Android.Content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;VolumeSample&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Activity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Label&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;VolumeSample&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MainLauncher&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;@mipmap/icon&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainActivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activity&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnCreate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;c1&quot;&gt;// Set our view from the &quot;main&quot; layout resource&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;SetContentView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApplicationContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentResolver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;RegisterContentObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Provider&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Settings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentUri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VolumeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()));&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;VolumeObserver&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ContentObserver&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;VolumeObserver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Handler&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selfChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;OnChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selfChange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioManager&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AudioManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetSystemService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AudioService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;audioManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetStreamVolume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;MakeText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;s&quot;&gt;$&quot;Current System Vol: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;volume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
                           &lt;span class=&quot;n&quot;&gt;ToastLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Short&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BroadcastReceiver&lt;/code&gt; を使うことでも実現できるようですね。&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Mar 2018 09:59:00 -0500</pubDate>
        <link>https://blog.amay077.net/blog/2018/03/14/d8f35e94e2cb906d89aa/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/03/14/d8f35e94e2cb906d89aa/</guid>
        
        
        <category>Android</category>
        
        <category>C#</category>
        
        <category>Xamarin</category>
        
      </item>
    
      <item>
        <title>Xamarin と React Native と Flutter の違いを正しく理解しよう</title>
        <description>&lt;p&gt;DroidKaigi2018 でもセッションがあった Flutter がβ版になりました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://japan.cnet.com/article/35115358/&quot;&gt;グーグル、Android/iOS対応のUIフレームワーク「Flutter」ベータ版を公開 - CNET Japan&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これでまた、にわかにクロスプラットフォーム開発ツール(以下 “X-Plat Tool” と略)が盛り上がってる気がします。&lt;br /&gt;
Flutter が出たからと言って、Xamarin や React Native など、先行する様々な X-Plat Tools が死ぬわけでもなく、ただ選択肢が増えて嬉しいやら戸惑うやら、ということです。&lt;/p&gt;

&lt;p&gt;ここでは、Flutter と、先行する React Native、Xamarin を(独断を交えて)比較して、それらの違いを見てみたいと思います。&lt;/p&gt;

&lt;h2 id=&quot;共通化できるとされるプラットフォーム&quot;&gt;共通化できる(とされる)プラットフォーム&lt;/h2&gt;

&lt;p&gt;X-Plat Tool がどのプラットフォームまでカバーするかを比べてみます。ツールそのものに加え、フレームワークや言語自体も含めた広範な考えです。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Platform&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Xamarin/.NET&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ReactNative/JavaScript&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Flutter/Dart&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;iOS&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Android&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;デスクトップ(Windows)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;デスクトップ(Mac)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Web(フロントエンド)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Web(バックエンド)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;:thumbsup:&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;概ね、デスクトップアプリに対応するか、Webアプリに対応するかで選択肢が大きく変わります。&lt;/p&gt;

&lt;h2 id=&quot;開発者に提供される-api&quot;&gt;開発者に提供される API&lt;/h2&gt;

&lt;p&gt;X-Plat Tool が開発者にどんな「API セット」を提供するかを比べてみましょう。&lt;br /&gt;
ここでは２つに分類してみます。&lt;/p&gt;

&lt;h3 id=&quot;a-開発者はx-plat-tool-の-独自api-を利用する&quot;&gt;A. 開発者は、X-Plat Tool の 独自API を利用する&lt;/h3&gt;

&lt;p&gt;この方式の X-Plat Tool は、それ専用のAPIセットを開発者に提供します。&lt;br /&gt;
例えば Flutter では &lt;code class=&quot;highlighter-rouge&quot;&gt;Stack&lt;/code&gt; というレイアウトクラスを提供しますが、これは Android の &lt;code class=&quot;highlighter-rouge&quot;&gt;FrameLayout&lt;/code&gt; に近いものと考えられます。&lt;br /&gt;
あるいは JSX や XAML などの DSL(Domain Specific Language) を使用する場合もあります。React Native では画面のデザインは JSX(return で HTML っぽいタグを返すアレ) を使用します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:no_good: 新たに API を学習する必要がある（＝プラットフォーム固有のAPI知識が活かせない）&lt;/li&gt;
  &lt;li&gt;:no_good: プラットフォーム固有の機能を使用するには Kotlin や Swift などネイティブの開発言語をツールを使わなければならない(＝ &lt;strong&gt;APIの相互運用性が低い&lt;/strong&gt; )&lt;/li&gt;
  &lt;li&gt;:ok_woman: 複数のプラットフォームでコードを共通化できる(ｲﾏｻﾗﾅﾆｦｲｯﾃﾙﾝﾀﾞ)&lt;/li&gt;
  &lt;li&gt;:no_good: “共通API” と言いながら iOS でしか(Android でしか)動作しないかも知れない&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;b-開発者はプラットフォーム固有の-薄いラッパーapi-を利用する&quot;&gt;B. 開発者は、プラットフォーム固有の (薄いラッパー)API を利用する&lt;/h3&gt;

&lt;p&gt;こちらの方式は、プラットフォーム固有の API を、X-Plat Tool の言語でラップして提供します。Xamarin(Xamarin.Android)では、Android SDK の API が、ほとんどそのまま C# から呼び出せます。例えば Android SDK の &lt;code class=&quot;highlighter-rouge&quot;&gt;android.location.LocationManager&lt;/code&gt; は、 Xamarin では &lt;code class=&quot;highlighter-rouge&quot;&gt;Android.Locations.LocationManager&lt;/code&gt; として利用できます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:no_good: それ自体はコードの共通化にならない(言語の標準APIやフレームワークでしか共通化できない)&lt;/li&gt;
  &lt;li&gt;:ok_woman: プラットフォーム固有のAPIが X-Plat Tool の言語からダイレクトに呼び出せる(＝ &lt;strong&gt;APIの相互運用性が高い&lt;/strong&gt; )&lt;/li&gt;
  &lt;li&gt;:ok_woman: (上記であることから)開発やデバッグが一つの環境でシームレスに行える&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;できあがったアプリケーションのユーザーインターフェース&quot;&gt;できあがったアプリケーションのユーザーインターフェース&lt;/h2&gt;

&lt;p&gt;アプリのUIは、エンドユーザーの反応に最も影響するため、特に注意が必要です。&lt;br /&gt;
こちらも２つに分類しています。&lt;/p&gt;

&lt;h3 id=&quot;あ-ネイティブのuiパーツを利用する&quot;&gt;あ. ネイティブのUIパーツを利用する&lt;/h3&gt;

&lt;p&gt;この方式では、X-Plat Tool での UI定義は プラットフォーム固有の UIパーツ にマップされます。例えば React Native での &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;Text&amp;gt;&lt;/code&gt; タグは、Android では &lt;code class=&quot;highlighter-rouge&quot;&gt;TextView&lt;/code&gt; 、iOS では &lt;code class=&quot;highlighter-rouge&quot;&gt;UITextField&lt;/code&gt; が使用されます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:no_good: 複数のプラットフォームのUIパーツ群で、共通で存在する機能しか提供できない&lt;/li&gt;
  &lt;li&gt;:ok_woman: エンドユーザーにネイティブの「忠実な」UIを提供できる&lt;/li&gt;
  &lt;li&gt;:ok_woman: プラットフォーム固有OSSライブラリが比較的利用しやすい(基本的にはブリッジしてあげれば良い ＝ &lt;strong&gt;UIパーツの相互運用性が高い&lt;/strong&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;い-x-plat-tool-が自力でuiパーツを描画する&quot;&gt;い. X-Plat Tool が自力でUIパーツを描画する&lt;/h3&gt;

&lt;p&gt;こちらの方式は、ネイティブのUIパーツは使わず、X-Plat Tool が持つレンダリングエンジンを使用して自力でUIパーツを描画し、マウスやキーボードのイベントも自力でハンドリングして操作感を提供します。&lt;br /&gt;
（インターネット老人会の皆さまには「Adobe の Flash アプリだよ」とでも言えば伝わるかと思います。）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:no_good: ネイティブのUIパーツと見た目や操作感が微妙に異なる(かも知れない)&lt;/li&gt;
  &lt;li&gt;:no_good: ネイティブのUIに比べて動作がもっさりする(かも知れない)&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;:no_good: プラットフォーム固有OSSライブラリが比較的利用しにくい(独自レンダリングエンジンの影響を考慮する必要がある ＝ &lt;strong&gt;UIパーツの相互運用性が低い&lt;/strong&gt;)&lt;sup id=&quot;fnref:14&quot;&gt;&lt;a href=&quot;#fn:14&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;:ok_woman: 「スタイル」を切り替えるだけで画面の Look and Feel を変更できる&lt;/li&gt;
  &lt;li&gt;:ok_woman: 複数のプラットフォームに「完全に同一のUI」を提供できる&lt;sup id=&quot;fnref:10&quot;&gt;&lt;a href=&quot;#fn:10&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;比較表&quot;&gt;比較表&lt;/h2&gt;

&lt;p&gt;結局、言語もIDEも含めてモバイルネイティブアプリを主対象とした X-Plat Tools の比較表を作ってしまった。。。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Xamarin&lt;/li&gt;
  &lt;li&gt;React Native&lt;/li&gt;
  &lt;li&gt;Flutter&lt;/li&gt;
  &lt;li&gt;Titanium Mobile&lt;/li&gt;
  &lt;li&gt;RubyMotion&lt;/li&gt;
  &lt;li&gt;Qt&lt;/li&gt;
  &lt;li&gt;Delphi&lt;/li&gt;
  &lt;li&gt;Adobe AIR&lt;/li&gt;
  &lt;li&gt;NativeScript&lt;/li&gt;
  &lt;li&gt;RoboVM&lt;/li&gt;
  &lt;li&gt;Kotlin X-Plat(予想)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;※ゲームエンジンやWebViewを使用するタイプの X-Plat Tools は、今回の比較軸とは変わってくると思うので載せていません（が、実際にはもちろんこれらも選択肢に加えるべきです）。&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt; &lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Xamarin&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ReactNative&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Flutter&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Titanium Mobile&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RubyMotion&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Qt&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Delphi&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Adobe Air&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Native Script&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;RoboVM&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Kotlin X-Plat(予想)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(主な)提供者&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Microsoft&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Facebook&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Google&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Appcelerator&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Scratchwork&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Qt Company&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Embarcadero Technologies&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Adobe&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Progress Software&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Xamarinが買収後死亡&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JetBrains&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;開発言語&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C#&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JavaScript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Dart&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JavaScript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Ruby&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Object Pascal&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Action Script&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;JavaScript&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Java&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Kotlin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;(主な)開発環境&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Visual Studio&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;As you like&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;IntelliJ/VSCode&lt;sup id=&quot;fnref:12&quot;&gt;&lt;a href=&quot;#fn:12&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Titanium Studio&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;As you like&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;As you like&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;RAD Studio&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Flash Builder&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;As you like&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Eclipse&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;CLion&lt;sup id=&quot;fnref:13&quot;&gt;&lt;a href=&quot;#fn:13&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;対応Platform(言語含む)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Win, Mac, Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Web(Front), Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Web(Front), Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Web(Front), Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Win, Mac, Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Win, Mac&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Win, Mac&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Web(Front), Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Win, Mac, Web(Back)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;iOS, Android, Win, Mac, Web(Front), Web(Back)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;提供される API&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B.薄いラッパーAPI + A.独自API&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A.独自API&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A.独自API&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A.独自API&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B.薄いラッパーAPI&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A.独自API&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A.独自API + B.薄いラッパーAPI&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A.独自API&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A.独自API + B.薄いラッパーAPI&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B.薄いラッパーAPI&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;B.薄いラッパーAPI&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;UIの提供方式&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;い.独自&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ？&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;13&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;い.独自+あ.ネイティブ&lt;sup id=&quot;fnref:11&quot;&gt;&lt;a href=&quot;#fn:11&quot; class=&quot;footnote&quot;&gt;14&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;い.独自&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;あ.ネイティブ&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;月並みなまとめですが、クロスプラットフォーム開発ツールを選択するには、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ターゲットにするプラットフォーム&lt;/li&gt;
  &lt;li&gt;提供者の規模、サポート、継続性&lt;/li&gt;
  &lt;li&gt;開発言語や開発ツール vs チームメンバのスキルセット(あるいは習得容易性)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を評価し、さらに開発するアプリの性質に応じて、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;X-Plat Tool の標準機能で行えない機能がどのくらいあるか？&lt;/li&gt;
  &lt;li&gt;X-Plat Tool の標準機能で行えない機能をどのように補完するか？(共通側で実装するか、ネイティブ側で実装するか、etc)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を検討することになると思います。&lt;br /&gt;
(もちろん X-Plat Tool を「採用しない」という選択肢も含めて。&lt;br /&gt;
あるいは Cordova のようなWebViewベースのX-Plat開発ツールもあれば、Unityのようなゲームエンジン系のX-Plat開発ツールも場合によっては候補になり得ます。)&lt;/p&gt;

&lt;p&gt;例えば Flutter は美麗なアプリを迅速に開発できる、と謳われていますが、個人的には Webアプリプラットフォームの &lt;a href=&quot;https://kintone.cybozu.co.jp/jp/&quot;&gt;kintone&lt;/a&gt; をイメージさせます（筆者は kintone について、Flutter と同じく『美麗なWebアプリを迅速に開発できるツール』と(主観で)認識しています。対して Xamarin や React Native は Salesforce や SharePoint のように「なんでもできるが作るのはやや大変である」と相対的に思います）。&lt;br /&gt;
また Flutter について、「標準UIだけでなく凝ったUIも容易に実現できる」との&lt;a href=&quot;https://qiita.com/amay077/items/dff88e7ce6868615a9bb#comment-797c261e89cf45e10103&quot;&gt;ご意見をいただきました&lt;/a&gt;。&lt;br /&gt;
さらに、 React Native も、「Webの技術(CSSやAnimated API)でカスタムUIを用意に実現できる」との&lt;a href=&quot;https://twitter.com/Nkzn/status/1024488206916415488&quot;&gt;ツイートがあります&lt;/a&gt;。 &lt;br /&gt;
この記事は推測も多く含んでいるので、事実は、経験者・識者の方の情報を信じるのが一番です。&lt;/p&gt;

&lt;p&gt;Kotlin Multi platform にはとても期待しています。うまく進化して流行ってくれれば、(現状での)モダンな言語で、プラットフォーム全方位な開発が実現できるんじゃないかなあ、と。&lt;/p&gt;

&lt;p&gt;単純な比較表には現れない得意・不得意点もあるはずなので、日頃からアンテナ高く、できればたくさんつまみ食いしておきたいですね。&lt;/p&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://konifar.hatenablog.com/entry/2018/02/11/081031&quot;&gt;DroidKaigi2018で発表したFlutterアプリの話のスライド補足 - Konifar’s WIP&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://note.mu/najeira/n/n8924408dd07b&quot;&gt;Android / iOS アプリの開発にクロスプラットフォームの Flutter を実戦投入した｜najeira｜note&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;React Native Androidはなぜ動くのか -  &lt;a href=&quot;http://blog.nkzn.info/entry/2018/02/09/230647&quot;&gt;DroidKaigi 2018で喋ってきました+α - ナカザンドットネット&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://img.en25.com/Web/Embarcadero/%7B4cb125b3-1fd8-45eb-a0be-8beffb7702a6%7D_dcamp33-T4.pdf&quot;&gt;Delphiならここまでできる︕iOS / Androidネイティブアプリ構築術&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://speakerdeck.com/amay077/xamarin-dot-android-teshi-merukurosuhuratutohuomumohairuahurikai-fa-number-droidkaigi-number-droidkaigi1&quot;&gt;Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/tdtsh/titanium-2016&quot;&gt;Titanium 最近の動向 (2016年)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/45b1ad4b9c5d3a03cf9c&quot;&gt;Xamarin 使いが Kotlin のマルチプラットフォーム対応コードを読んだ感想 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;Titanium Mobile はこれが多かったという印象が深く心に刻まれています。。。 &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;Flutter や DelphiXE(の FireMonkey) では GPU を利用した高速なレンダリングが可能になっているとのことです。 &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:14&quot;&gt;
      &lt;p&gt;https://twitter.com/najeira/status/969106318098223104 によると、現行の Flutter では実質行えない模様です。 &lt;a href=&quot;#fnref:14&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:10&quot;&gt;
      &lt;p&gt;https://twitter.com/najeira/status/968774727022948352 を見て、同じ理由で昔 Flash AIR を使ったのを思い出しました。 &lt;a href=&quot;#fnref:10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;Appcelerator は Axway に買収され、現在は小会社となっています。 &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;Embarcadero Technologies は IDERA に買収され、現在は小会社となっています。 &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;https://github.com/robovm にリポジトリはある模様。 &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:12&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://flutter.io/get-started/editor/&quot;&gt;Get Started: Configure Editor - Flutter&lt;/a&gt; では  IntelliJ と VS Code が紹介されています。 &lt;a href=&quot;#fnref:12&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:13&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native - Kotlin Programming Language&lt;/a&gt; &lt;a href=&quot;#fnref:13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;Xamarin.Android, Xamarin.iOS などは 「B」、Xamarin.Forms というフレームワークは 「A」 に該当します。 &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://img.en25.com/Web/Embarcadero/%7B4cb125b3-1fd8-45eb-a0be-8beffb7702a6%7D_dcamp33-T4.pdf&quot;&gt;Delphiならここまでできる︕ iOS / Androidネイティブアプリ構築術&lt;/a&gt; 参照。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://docs.nativescript.org/angular/tutorial/ng-chapter-6&quot;&gt;NativeScript Documentation Chapter 6—Accessing Native APIs&lt;/a&gt; 参照。 &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://blog.qt.io/jp/2011/02/24/alien-widgets-on-mac/&quot;&gt;エイリアンウィジェット&lt;/a&gt; と呼ばれるネイティブに依存しないViewも存在する模様。 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:11&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://qiita.com/amay077/items/dff88e7ce6868615a9bb#comment-b01b9a057c67dc9dfa0f&quot;&gt;コメント&lt;/a&gt; より。指定によりネイティブに描画させることもできるとのことです。 &lt;a href=&quot;#fnref:11&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 01 Mar 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay077.net/blog/2018/03/01/dff88e7ce6868615a9bb/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/03/01/dff88e7ce6868615a9bb/</guid>
        
        
        <category>Kotlin</category>
        
        <category>Xamarin</category>
        
        <category>reactnative</category>
        
        <category>Flutter</category>
        
      </item>
    
      <item>
        <title>DroidKaigi 2018 Apps のバグを爆速で直した話</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://droidkaigi.jp/2018/&quot;&gt;DroidKaigi 2018&lt;/a&gt;、2日間おつかれさまでした＆ありがとうございました。&lt;br /&gt;
その感想は末尾に。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;ここでは、初日の午前に&lt;/p&gt;

&lt;p&gt;「DroidKaigiアプリからフィードバック送信するとぐるぐるが消えない」&lt;/p&gt;

&lt;p&gt;という不具合を修正した話をします（アプリリーダーの @takahirom さんから「爆速で修正してくれて─」と言っていただいたのでタイトル盛ってます）。&lt;/p&gt;

&lt;h2 id=&quot;不具合の症状を確認&quot;&gt;不具合の症状を確認&lt;/h2&gt;

&lt;p&gt;最初のセッションが終わったあとで TL から、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;「DroidKaigiアプリからフィードバック送信するとぐるぐるが消えない」&lt;/li&gt;
  &lt;li&gt;「BACKで戻ってやり直そうとすると、送信済みになっている」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;といったツイートが見られました。&lt;br /&gt;
はじめは「すぐに直されるだろう」と思いつつ、アプリには軽微な修正でコントリビュートしていたこともあり、ソースは既に取得済みだったので、「ちょっと見てみるか」と軽い気持ちで Android Studio を立ち上げました。&lt;/p&gt;

&lt;h2 id=&quot;どこから調べるか&quot;&gt;どこから調べるか&lt;/h2&gt;

&lt;p&gt;アプリが &lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/blob/master/README.md#architecture&quot;&gt;MVVM(AAC の VM) パターンを採用している&lt;/a&gt; ことは知っており、不具合は View(DataBinding) か ViewModel か それ以外(Model)  のどこかで発生していることは間違いないわけです。&lt;/p&gt;

&lt;p&gt;上記の症状「ぐるぐるは消えないが、送信はされているようだ」から想像するに、「View(DataBinding) で、 何らかの原因で ぐるぐる(ProgressBar) に &lt;code class=&quot;highlighter-rouge&quot;&gt;visible = false&lt;/code&gt; ができていないのかな？」 と思い、まずそのソースを見てみました（ロジックの方から調査していくと、大抵はそちらの方が複雑なので、苦労して不具合を調べまくった後で DataBinding の簡単なミスであることが発覚すると精神が殺られます）。&lt;/p&gt;

&lt;h2 id=&quot;viewdatabindingを調べる&quot;&gt;View(DataBinding)を調べる&lt;/h2&gt;

&lt;p&gt;ぐるぐるの visible を変えているのは &lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/blob/22fefe8e4afcba0d77cc879c6a9816ccda89e86d/app/src/main/java/io/github/droidkaigi/confsched2018/presentation/sessions/feedback/SessionsFeedbackFragment.kt#L93&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionsFeedbackFragment.kt&lt;/code&gt;&lt;/a&gt; の次の箇所です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-kotlin:SessionsFeedbackFragment.kt&quot;&gt;sessionsFeedbackViewModel.isLoading.observeNonNull(this, {
    binding.progress.setVisible(it)
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;うん、これだけのコードで &lt;code class=&quot;highlighter-rouge&quot;&gt;it&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; の時だけ動作しない、なんてありえない。&lt;br /&gt;
ここはシロだ、と判断しました。(&lt;code class=&quot;highlighter-rouge&quot;&gt;setVisible()&lt;/code&gt; はこのアプリでの拡張関数なので、一応そちらも見つつ)&lt;/p&gt;

&lt;h2 id=&quot;viewmodel-を調べる&quot;&gt;ViewModel を調べる&lt;/h2&gt;

&lt;p&gt;では次に ViewModel、 &lt;code class=&quot;highlighter-rouge&quot;&gt;sessionsFeedbackViewModel.isLoading&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; にならないのではないか？ を疑います。&lt;/p&gt;

&lt;p&gt;それは &lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/blob/22fefe8e4afcba0d77cc879c6a9816ccda89e86d/app/src/main/java/io/github/droidkaigi/confsched2018/presentation/sessions/feedback/SessionsFeedbackViewModel.kt#L70-L71&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SessionsFeedbackViewModel.kt&lt;/code&gt;&lt;/a&gt; の次の箇所です。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-kotlin:SessionsFeedbackViewModel.kt&quot;&gt;fun submit(session: Session.SpeechSession, sessionFeedback: SessionFeedback) {
    repository.submitSessionFeedback(session, sessionFeedback)
            .doOnSubscribe { 
                isLoading.value = true 
            }.doOnDispose { 
                isLoading.value = false 
            }.doOnComplete {
                alertMessage.value = Alert(Alert.Type.Toast, R.string.submit_success)
            }
            .doOnError { alertMessage.value = Alert(Alert.Type.Toast, R.string.submit_failure) }
            .subscribeBy(onError = defaultErrorHandler())
            .addTo(compositeDisposable)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;repository.submitSessionFeedback()&lt;/code&gt; は RxJava の Observable です（正確には Completable）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnSubScribe&lt;/code&gt;(購読開始時) に &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; を、&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt;(購読終了？時)に &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; を設定しているので、なんだか問題なさそうです。&lt;/p&gt;

&lt;p&gt;ということをツイートしてみると、 @MoyuruAizawa さんから、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;これってdoFinally案件じゃない？ &lt;a href=&quot;https://t.co/RnGoOWWaKv&quot;&gt;https://t.co/RnGoOWWaKv&lt;/a&gt;&lt;/p&gt;&amp;mdash; Moyuru (@MoyuruAizawa) &lt;a href=&quot;https://twitter.com/MoyuruAizawa/status/961427139168841728?ref_src=twsrc%5Etfw&quot;&gt;2018年2月8日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;というコメントがもらえました。ほうほう 「&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt; じゃなくて &lt;code class=&quot;highlighter-rouge&quot;&gt;doFinally&lt;/code&gt; なのか！」と思いつつ、ここで初めてデバッグに取り掛かります。 &lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading.value = false&lt;/code&gt; の行にブレークポイントを置いて実行したら止まらないはずだ、と。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnSubscribe&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt; にブレークポイントを張って実行してみると、 &lt;code class=&quot;highlighter-rouge&quot;&gt;doOnSubscribe&lt;/code&gt; では止まるけど &lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt; では止まりません。&lt;br /&gt;
次に、 &lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;doFinally&lt;/code&gt; に変えて再度チャレンジしてみると、状況は変わらず &lt;code class=&quot;highlighter-rouge&quot;&gt;doFinally&lt;/code&gt; でも止まりません。&lt;/p&gt;

&lt;p&gt;ならば &lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt; でも &lt;code class=&quot;highlighter-rouge&quot;&gt;doFinally&lt;/code&gt; でもない何かならうまくいくのか？と考えるより、 「submitSessionFeedback() の返値が、 &lt;strong&gt;ちゃんと Observable しているか？&lt;/strong&gt; 」 を調べるのが先です。&lt;/p&gt;

&lt;h3 id=&quot;おまけ-デバッグしやすくする&quot;&gt;おまけ: デバッグしやすくする&lt;/h3&gt;

&lt;p&gt;フィードバック画面の「送信」ボタンは、一度処理が成功したとみなされると disable になってしまいます。その情報は端末内に保持している(ユーザー認証のないアプリだからそれしかない)ので、アプリのデータを消すとまた押せるようになりますが、それも面倒なので &lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/blob/22fefe8e4afcba0d77cc879c6a9816ccda89e86d/app/src/main/res/layout/fragment_sessions_feedback.xml#L271&quot;&gt;ボタンの enable/disable を切り替えている箇所&lt;/a&gt; を一時的に削除しました。これも DataBinding を使っていると知っていれば箇所はだいたいわかります。&lt;/p&gt;

&lt;h3 id=&quot;もうひとつ気づいた事-livedata-と-uiスレッド&quot;&gt;もうひとつ気づいた事: LiveData と UIスレッド&lt;/h3&gt;

&lt;p&gt;RxJava 関連の処理の他に、もう一つ気づいたことがありました。それは &lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading&lt;/code&gt; は &lt;code class=&quot;highlighter-rouge&quot;&gt;MutableLiveData&amp;lt;Boolean&amp;gt;&lt;/code&gt; なのですが、 &lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading.value = false&lt;/code&gt; と、 value プロパティを使用していることです。&lt;/p&gt;

&lt;p&gt;どういうことかと言うと、 &lt;strong&gt;「MutableLiveData.setValue() は、UIスレッドから呼び出さないと例外を発生させる」&lt;/strong&gt; ということです。&lt;/p&gt;

&lt;p&gt;これは、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/6e1c94305420a41ff7ed#setvalue-%E3%81%AFui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%A7%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%95%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%91%E3%81%AA%E3%81%84postvalue-%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86&quot;&gt;LiveData について勘違いしていたことをいくつか - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;に書いたとおり、 @kkagurazaka さんから教わっていたことで知っていたことです。&lt;br /&gt;
加えて RxJava は非同期処理を行うライブラリであり、処理開始(&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnSubscribe&lt;/code&gt;)はUIスレッドでも、終了時(&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt;)にUIスレッドである保証はありません。&lt;/p&gt;

&lt;p&gt;ちょっと怪しげなので &lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading.value = false&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading.postValue(false)&lt;/code&gt; に直しました。&lt;/p&gt;

&lt;h2 id=&quot;modelrepository-を調べる&quot;&gt;Model(Repository) を調べる&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;repository.submitSessionFeedback()&lt;/code&gt; をデバッグのステップインで掘っていくと、 &lt;code class=&quot;highlighter-rouge&quot;&gt;SessionDataRepository.kt&lt;/code&gt; の &lt;code class=&quot;highlighter-rouge&quot;&gt;saveSessionFeedback()&lt;/code&gt; までは到達していることが確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-kotlin:SessionDataRepository.kt&quot;&gt;@CheckResult override fun saveSessionFeedback(sessionFeedback: SessionFeedback): Completable =
        Completable.create { sessionDatabase.saveSessionFeedback(sessionFeedback) }
                .subscribeOn(schedulerProvider.io())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この処理をしばらく眺めていて、「！！ッ」と問題に気づきました。&lt;/p&gt;

&lt;p&gt;それは、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saveSessionFeedback&lt;/code&gt; は Completable を返す&lt;/li&gt;
  &lt;li&gt;Completable は Observable である&lt;/li&gt;
  &lt;li&gt;Observable は、それの “終了” を示すために &lt;code class=&quot;highlighter-rouge&quot;&gt;onComplete()&lt;/code&gt; を呼び出さなければならない（またはエラーを示す &lt;code class=&quot;highlighter-rouge&quot;&gt;onError()&lt;/code&gt; を呼び出さなければならない）&lt;/li&gt;
  &lt;li&gt;しかしこのコードは &lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onComplete()&lt;/code&gt; を呼び出していない&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;これだ！！！&lt;/p&gt;&amp;mdash; takahirom (@new_runnable) &lt;a href=&quot;https://twitter.com/new_runnable/status/961432446863486976?ref_src=twsrc%5Etfw&quot;&gt;2018年2月8日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;ということで確信の同意も得られ、実際に修正していきます。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-kotlin:SessionDataRepository.kt&quot;&gt;@CheckResult override fun saveSessionFeedback(sessionFeedback: SessionFeedback): Completable =
        Completable.create { emitter -&amp;gt;
            sessionDatabase.saveSessionFeedback(sessionFeedback)
            emitter.onComplete()
        }.subscribeOn(schedulerProvider.io())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで。「Observable を返すのに onComplete または onError を呼ばない」というのは RxJava プログラミングのあるあるなミスなのですが、Kotlin では引数一つの匿名関数は &lt;code class=&quot;highlighter-rouge&quot;&gt;{ }&lt;/code&gt; と書けてしまう(明示的に引数を宣言しなくてもよい)ので、忘れる可能性が高くなっているのかも知れませんね。&lt;/p&gt;

&lt;p&gt;その後、 @yanzm さんから、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;この場合だと fromAction() の方がよいかもです。どっちでもこの場合挙動は同じですけど。&lt;/p&gt;&amp;mdash; Yuki Anzai (@yanzm) &lt;a href=&quot;https://twitter.com/yanzm/status/962134194943025152?ref_src=twsrc%5Etfw&quot;&gt;2018年2月10日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;という意見もいただきました。なるほど &lt;code class=&quot;highlighter-rouge&quot;&gt;Completable.fromAction()&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Completable.fromCallable()&lt;/code&gt; は、自動的に &lt;code class=&quot;highlighter-rouge&quot;&gt;onComplete()&lt;/code&gt; を呼び出してくれるのですね。&lt;/p&gt;

&lt;p&gt;上記の修正は、&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-kotlin:SessionDataRepository.kt&quot;&gt;@CheckResult override fun saveSessionFeedback(sessionFeedback: SessionFeedback): Completable =
        Completable.fromAction { sessionDatabase.saveSessionFeedback(sessionFeedback) }
        .subscribeOn(schedulerProvider.io())
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いた方がよりスッキリします。&lt;code class=&quot;highlighter-rouge&quot;&gt;.create()&lt;/code&gt; を使っている箇所は、代替メソッドを検討してみた方がよいでしょう(Lint で検出してもよいのかも)。&lt;/p&gt;

&lt;h2 id=&quot;修正点まとめ&quot;&gt;修正点まとめ&lt;/h2&gt;

&lt;p&gt;以上の修正をまとめると、&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;doOnDispose&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;doFinally&lt;/code&gt; に&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading.value = false&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;isLoading.postValue(false)&lt;/code&gt; に&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;saveSessionFeedback()&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;onComplete()&lt;/code&gt; を呼ぶように&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;の3点です。&lt;br /&gt;
すべての修正を含んだ状態で試して、問題が解消されていることが確認できました。&lt;br /&gt;
本来なら、 1. と 2. の修正が本当に必要かを確認してからコミットするべきなのですが、今回は時間がなかった（ランチの時間に突入していた）ので、このまま PR を送りました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/DroidKaigi/conference-app-2018/pull/653&quot;&gt;Fix dismiss loading progress when feedback submitted by amay077 · Pull Request #653 · DroidKaigi/conference-app-2018&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さっそくマージしてもらいアプリも更新され、&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;アプリ更新して、フィードバックを送信してみました。&lt;br /&gt;グルグル表示後、送信しましたというトーストが表示されました。挙動に問題は有りません。修正ありがとうございます。&lt;br /&gt;Android7.1.1 ZenFone4 Max&lt;/p&gt;&amp;mdash; ニースト@中ウサギ工房（仮） (@MiddleSizeRabbi) &lt;a href=&quot;https://twitter.com/MiddleSizeRabbi/status/961595405220769795?ref_src=twsrc%5Etfw&quot;&gt;2018年2月8日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;問題なさそうだったので 「Yesッッ!!!」 と喜びました。&lt;br /&gt;
ソースを見始めたのが AM11:20頃、PR を送ったのが 12:00、約40分間の出来事でした。&lt;/p&gt;

&lt;p&gt;スタッフや登壇者のみなさんは本業で忙しかっただろうし、会場はセッションを聴くのに集中していた人が多かったと思うので、そういう状況でなければどなたかがもっと爆速で修正されていたと思います。&lt;/p&gt;

&lt;p&gt;とはいえ、今回予定外の3つ目のPRが役に立てて嬉しかったです。ちょっとツイートするとすぐに反応がもらえ、一人で考えるよりも効率的だったと思います。&lt;/p&gt;

&lt;h2 id=&quot;droidkaigi-2018-に参加して&quot;&gt;DroidKaigi 2018 に参加して&lt;/h2&gt;

&lt;p&gt;なんだかんだで皆勤賞してました。&lt;br /&gt;
今年も、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;今までできないと思っていたことができると分かったこと&lt;/li&gt;
  &lt;li&gt;明日から使ってみたいと思ったこと&lt;/li&gt;
  &lt;li&gt;明日からはムリだけど、半年後使いそうなこと&lt;/li&gt;
  &lt;li&gt;今のところ予定はないけど、知っておいて損はないと思えること&lt;/li&gt;
  &lt;li&gt;自分が知っている事でも、他の参加者の人は知らない(またはウケる)んだなーということ&lt;/li&gt;
  &lt;li&gt;ID でしか交流のなかった方々にごあいさつできたこと(地方エンジニアにとっては貴重)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などなど、価値のある体験ができました、本当にありがとうございました。&lt;br /&gt;
今年は CFP 採択されず割引価格で気楽にオーディエンスできましたが、次回は登壇返り咲きを目指そうと思います:muscle_tone2:&lt;/p&gt;
</description>
        <pubDate>Wed, 14 Feb 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay077.net/blog/2018/02/14/68ee7c8937507e6c6785/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/02/14/68ee7c8937507e6c6785/</guid>
        
        
        <category>Android</category>
        
        <category>Kotlin</category>
        
        <category>RxJava</category>
        
      </item>
    
      <item>
        <title>RxProperty で最初にボタンを押すまでバリデーションしない方法</title>
        <description>&lt;p&gt;こちらの件です。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;雑にかいた&lt;br /&gt;すでに議論され尽くされてる感はあるので他の人の考えも聞いてみたいです&lt;br /&gt;&lt;br /&gt;フォームバリデーションと送信ボタンの状態の最適解 - Konifar&amp;#39;s ZATSU &lt;a href=&quot;https://t.co/YvPhkM05gg&quot;&gt;https://t.co/YvPhkM05gg&lt;/a&gt;&lt;/p&gt;&amp;mdash; こにふぁー (@konifar) &lt;a href=&quot;https://twitter.com/konifar/status/957806094713217024?ref_src=twsrc%5Etfw&quot;&gt;2018年1月29日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;私見&quot;&gt;私見&lt;/h2&gt;

&lt;p&gt;自分がよく関わっている業務アプリの世界では、UIパーツの非活性(disabled)はあまり好まれません（度々 Reject されます）。その一番の理由は、「なぜボタンが押せないのかが分からない」ことです（利用ユーザーがIT機器に疎い人が多いのでそれだけでパニクることも）。ならばその理由を画面上のどこかに表示してやろうと策を練るよりも、単純に「エラーがあったら DialogBox でその理由と対処方法を表示させたろう」という方法が、実装コストが最も低く、業務アプリ利用者にもわかりやすい、というのが経験・感覚的にあります。&lt;/p&gt;

&lt;p&gt;しかしそれではあまりにもモダンでないとも感じるので、個人的には、次点として採用したいのは↓の手法です。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;最初の１回は間違いがあってもとりあえず送信ボタンを押させてあげて、その後はリアルタイムチェックを有効にする派 / “フォームバリデーションと送信ボタンの状態の最適解 - Konifar&amp;#39;s ZATSU” &lt;a href=&quot;https://t.co/yWaszGdAkH&quot;&gt;https://t.co/yWaszGdAkH&lt;/a&gt;&lt;/p&gt;&amp;mdash; なかざん＠ジャバスクリプトニュービー (@Nkzn) &lt;a href=&quot;https://twitter.com/Nkzn/status/958138755298111488?ref_src=twsrc%5Etfw&quot;&gt;2018年1月30日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;実際にやってみた&quot;&gt;実際にやってみた&lt;/h2&gt;

&lt;p&gt;実際にそれを実装してみました、 &lt;a href=&quot;https://github.com/k-kagurazaka/rx-property-android&quot;&gt;RxProperty&lt;/a&gt; を使って。&lt;br /&gt;
最近ちょうどフォームバリデーションのサンプルを実装した例↓&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/fc075d4e777f8c7a2816&quot;&gt;RxProperty でイケてる入力フォームをもっとスッキリ実装する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;があるので、これをカスタマイズしてみます。&lt;/p&gt;

&lt;h2 id=&quot;できあがり&quot;&gt;できあがり&lt;/h2&gt;

&lt;p&gt;こんな感じのものを作ります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/a770dd8c-9fc8-f1f4-b220-156e1ff4d1f2.gif&quot; alt=&quot;Untitled.gif&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;修正箇所&quot;&gt;修正箇所&lt;/h2&gt;

&lt;p&gt;RxProperty は、ViewModel が公開するプロパティとして利用するものですが、それに Validator を持たせることができます。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValidator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ニックネームは2文字以上にしてください&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のようにプロパティの定義と共に設定すれば、画面表示直後からValidatorは作動しますが、ボタンが押されるまではバリデーションしないのであれば、設定のタイミングを遅らせるだけです。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nickNameValidator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ニックネームは2文字以上にしてください&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;isFirstExecute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/** 登録ボタンを押したとき */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;register&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;canRegistration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toRxCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 最初にボタンが押されたときに、Validator を設定する(フラグを使っているのがなんかダサい)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isFirstExecute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;isFirstExecute&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValidator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nickNameValidator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;canExecute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;@subscribe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;_toast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;postValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;RegistrationCompleteActivity へ移動するよ&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;完全な修正差分はこちら → https://github.com/amay077/RxPropertyFormSample/commit/b743a4b187f7c05a1847637c2bfc4371a47a4ab3?diff=split&lt;/li&gt;
  &lt;li&gt;修正したサンプルのコードはこちら → https://github.com/amay077/RxPropertyFormSample/tree/20180131_skip_valid_on_first_time&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ちなみに&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setValidator&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ニックネームは2文字以上にしてください&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;とする(&lt;code class=&quot;highlighter-rouge&quot;&gt;setValidator&lt;/code&gt; の第2引数を &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; にする)と、画面表示直後の初回のバリデーションを行わない、すなわち、「最初から登録ボタンは押せるが、リアルタイムにバリデーションも行う」ようにもできます。&lt;/p&gt;

&lt;p&gt;RxProperty に限らないんですけど、プロパティ／バリデータ／活性非活性判定・変更処理が適切に分離されていれば、それらの組み合わせを変えるだけなのでいかようにでもできますね。急な仕様変更にも割と容易に対応できるということで。&lt;/p&gt;
</description>
        <pubDate>Wed, 31 Jan 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay077.net/blog/2018/01/31/04925765982893eeab7f/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/01/31/04925765982893eeab7f/</guid>
        
        
        <category>Android</category>
        
        <category>Kotlin</category>
        
        <category>RxJava</category>
        
      </item>
    
      <item>
        <title>自ディレクトリ以下から bin, obj ディレクトリを全て削除するスクリプト</title>
        <description>&lt;p&gt;おそらく3億人の .NET プログラマが書いたであろうスクリプト、 PowerShell で書いてみました。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-powershell:clean.ps1&quot;&gt;$dirs = Get-ChildItem -Recurse * | ? { $_.PSIsContainer} | % { $_.FullName} `
 | grep -e bin$ -e obj$ 

foreach ($dir in $dirs) {
    # echo $dir
    rm -rf $dir
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mac-でも動くぞ&quot;&gt;Mac でも動くぞ!&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-macos-and-linux?view=powershell-5.1&quot;&gt;PowerShell Core&lt;/a&gt; を入れると、 macOS でも動きます。 Visual Studio for Mac と併せてどうぞ(Linux でも動くはｚ)。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-sh:&quot;&gt;#!/bin/sh

cd `dirname $0`
pwsh clean.ps1 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;※実は、 Xamarin.Android のビルド出力には &lt;code class=&quot;highlighter-rouge&quot;&gt;obj/Release/android/bin&lt;/code&gt; みたいなのが含まれることがあるので、完全に &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;bin&lt;/code&gt; を抹消するには &lt;code class=&quot;highlighter-rouge&quot;&gt;clean.ps1&lt;/code&gt; を2回実行します。&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Jan 2018 08:59:00 -0600</pubDate>
        <link>https://blog.amay077.net/blog/2018/01/30/ab48993f50c8239b62a6/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2018/01/30/ab48993f50c8239b62a6/</guid>
        
        
        <category>.NET</category>
        
        <category>PowerShell</category>
        
        <category>VisualStudio</category>
        
      </item>
    
  </channel>
</rss>
