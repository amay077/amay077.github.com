<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Experiments Never Fail</title>
    <description>Try and try again
</description>
    <link>https://blog.amay077.net/</link>
    <atom:link href="https://blog.amay077.net/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 23 Jun 2018 07:44:24 +0000</pubDate>
    <lastBuildDate>Sat, 23 Jun 2018 07:44:24 +0000</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>Xamarin を使えば iPhone 端末が要らない、ワケがない</title>
        <description>&lt;p&gt;今年も Advent Calendar 1番手、よろしくおねがいします。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;さて、Windows + Visual Studio 2017 を使った iOS アプリの開発でも、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/cross-platform/windows/ios-simulator/&quot;&gt;Remoted iOS Simulator&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.xamarin.com/live&quot;&gt;Xamarin Live Player&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;などの登場で、「おっ、これなら iPhone 端末なしで（Mac なしで) iOS アプリ開発できるんじゃね？」 という風説がチラホラ聞かれます。&lt;/p&gt;

&lt;p&gt;私は「んなことはない」と考えているのですが、実際どの辺が「ほら iPhone 実機必要でしょ？」なのかを検証してみようと思います。&lt;/p&gt;

&lt;p&gt;そして、 &lt;strong&gt;iPhone 実機が必要だということは Mac も必要だということになりますからね。Mac がないとアプリをビルドして実機に転送できないので。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;今回は、 「iPhone 実機は必須」 → 「iPhone 実機がないと困ったことが起きる可能性がある」 → 「iPhone 実機でしか発生しないトラブルがある」 という観点で、「iPhone 実機でしか発生しないトラブル」は本当に実在するのかを調査しましょう。&lt;/p&gt;

&lt;h2 id=&quot;xamarinios-アプリの動作の仕組み&quot;&gt;Xamarin.iOS アプリの動作の仕組み&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.buildinsider.net/mobile/insidexamarin/05&quot;&gt;Xamarin.iOSの仕組みとアプリケーションの構成 - Build Insider&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Xamarin.iOS のアプリ開発について、最初に知っておくべきことは、 &lt;strong&gt;「iPhone 実機向けと、iOS シミュレータ向けで、配布されるアプリケーションはまったく違う」&lt;/strong&gt; ということです。&lt;/p&gt;

&lt;p&gt;iPhone 実機向けのビルドでは、 AOT(Ahead-Of-Time) コンパイラによって、 &lt;strong&gt;事前に&lt;/strong&gt; プログラムをマシン語に変換されたものを配布します。Apple の制約で iOS 端末上では、動的なプログラムの実行が許可されていないためです。&lt;/p&gt;

&lt;p&gt;一方、 iOS シミュレータ向けのビルドでは、AOT ではなく JIT でアプリが動作します。なので AOT で生じる特有の「制約」が iOS シミュレータでは適用されないのです。&lt;/p&gt;

&lt;p&gt;しょせん、simulation は “ニセモノ、まがい物”、本物とは違うのです。&lt;br /&gt;
普通の思考なら、この時点で 「あっ、iPhone 実機要るわ」 となります、はい終了ー。&lt;/p&gt;

&lt;h2 id=&quot;xamarinios---aot-の制約を体験してみる&quot;&gt;Xamarin.iOS - AOT の制約を体験してみる&lt;/h2&gt;

&lt;p&gt;これで終わってもアレなので、もうちょっと突っ込んでみましょう。&lt;br /&gt;
じゃあ AOT で生じる特有の「制約」って具体的には何よ？ということで、それを体験してみましょう。&lt;/p&gt;

&lt;p&gt;AOT での制限事項は次に書いてあります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/ios/advanced_topics/limitations/&quot;&gt;Limitations - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ここに書いてある制限事項をトレースしてみましょう。&lt;/p&gt;

&lt;h3 id=&quot;generic-subclasses-of-nsobjects-are-limited--実機だけで発生するかquestion&quot;&gt;Generic Subclasses of NSObjects are limited → 実機だけで発生するか？=:question:&lt;/h3&gt;

&lt;p&gt;えーと、「&lt;code class=&quot;highlighter-rouge&quot;&gt;NSObjects&lt;/code&gt; を基底クラスにして Generic クラスを作るのには制限がある」と書いてありますかね。&lt;br /&gt;
ん？ 続いて “While generic subclasses of NSObjects are possible, there are a few limitations. “ とあるので、なんかできるようになったっぽいです。わずかな制約はまだあるので油断は禁物、とも。&lt;/p&gt;

&lt;p&gt;試しにここに書いてある &lt;code class=&quot;highlighter-rouge&quot;&gt;class Foo&amp;lt;T&amp;gt; : UIView { }&lt;/code&gt; というクラスを作って使ってみたのですが、実機でも特に問題なかったです。でも few limitations を確認してないので “実機だけで発生するか？” の評価は :question: で。&lt;/p&gt;

&lt;h3 id=&quot;pinvokes-in-generic-types---実機だけで発生するかx&quot;&gt;P/Invokes in Generic Types - 実機だけで発生するか？=:x:&lt;/h3&gt;

&lt;p&gt;「Generic なクラス内で &lt;code class=&quot;highlighter-rouge&quot;&gt;P/Invoke&lt;/code&gt; は使えない」と書いてありますね。&lt;/p&gt;

&lt;p&gt;Xamarin.iOS プロジェクトで、&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DllImport&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getpid&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;というクラスを定義すると、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The DllImport attribute cannot be applied to a method that is generic or contained in a generic type. (CS7042)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;というエラーがビルド時に出て進めません。これはシミュレータ向けでも実機向けでも同じです。また PCL プロジェクトでは &lt;code class=&quot;highlighter-rouge&quot;&gt;DllImport&lt;/code&gt; 自体が使用できません。&lt;/p&gt;

&lt;p&gt;よって、この件について「実機だけで発生するか？」の問いには “No” の回答、:x: です。&lt;/p&gt;

&lt;h3 id=&quot;propertysetinfo-on-a-nullable-type-is-not-supported---評価できず&quot;&gt;Property.SetInfo on a Nullable Type is not supported - 評価できず&lt;/h3&gt;

&lt;p&gt;Nullable Type どころか、Xamarin.iOS どころか、Xamarin.Android でも、普通のオブジェクトに対しても &lt;code class=&quot;highlighter-rouge&quot;&gt;Property.SetInfo&lt;/code&gt; を機能させることができませんでしたー。ちょっと時間切れで割愛。&lt;/p&gt;

&lt;h3 id=&quot;value-types-as-dictionary-keys---実機だけで発生するか-question&quot;&gt;Value types as Dictionary Keys - 実機だけで発生するか？= :question:&lt;/h3&gt;

&lt;p&gt;「値型を &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt; のキーにすると実機でクラッシュする」と書いてあるように見えます、ほうほう。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ValueType&lt;/code&gt; から直接派生させる方法を知らないので、次のような struct を作って &lt;code class=&quot;highlighter-rouge&quot;&gt;Dictionary&lt;/code&gt; のキーに突っ込んでみました。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyKey&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;[Register(&quot;AppDelegate&quot;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppDelegate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Xamarin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Forms&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Platform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FormsApplicationDelegate&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dic&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bbb&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ccc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ContainsKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyKey&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;b&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;＜以下省略＞&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;特にクラッシュはしないですね、シミュレータでも実機でも。&lt;br /&gt;
しかしこんな簡単なケースだったらもっと大事になってる気がするし、この症状の再現方法に不安があるので :question: で。&lt;/p&gt;

&lt;p&gt;**2017/12/01 PM 追記 **&lt;/p&gt;

&lt;p&gt;この制限、もうないそうですｗ&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;Dictionaryの制約はもう無いってさ &lt;a href=&quot;https://t.co/XSSsRAwUBo&quot;&gt;pic.twitter.com/XSSsRAwUBo&lt;/a&gt;&lt;/p&gt;&amp;mdash; Atsushi Eno (@atsushieno) &lt;a href=&quot;https://twitter.com/atsushieno/status/936421845527646208?ref_src=twsrc%5Etfw&quot;&gt;2017年12月1日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;no-dynamic-code-generation&quot;&gt;No Dynamic Code Generation&lt;/h2&gt;

&lt;p&gt;本題っぽくなってきました。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Reflection.Emit&lt;/code&gt; とか動的言語ランタイム(DLR)、Remoting は動きませんよー、と書いてあります。Remoting は調査してませんのであしからず。&lt;/p&gt;

&lt;h3 id=&quot;refrectionemit---実機だけで発生するか-x&quot;&gt;Refrection.Emit - 実機だけで発生するか？= :x:&lt;/h3&gt;

&lt;p&gt;実は使ったことないので、精鋭が書いたネットのコピペを元にやってみたんですが、どうも必要なクラスやメンバが Xamarin.iOS では公開されてない（あるいは実装されてない）っぽくて、シミュレータでも実機でも動作しませんでした。&lt;/p&gt;

&lt;h3 id=&quot;dynamic-型---実機だけで発生するか-x&quot;&gt;dynamic 型 - 実機だけで発生するか？= :x:&lt;/h3&gt;

&lt;p&gt;DLR が提供する代表的な機能である &lt;code class=&quot;highlighter-rouge&quot;&gt;dynamic&lt;/code&gt; 型はどうでしょう？&lt;/p&gt;

&lt;p&gt;DLR を使用するには &lt;code class=&quot;highlighter-rouge&quot;&gt;Microsoft.CSharp&lt;/code&gt; を nuget や参照の追加で Xamarin.iOS プロジェクトに追加する必要があります。&lt;/p&gt;

&lt;p&gt;その上で、次のような(&lt;a href=&quot;http://ufcpp.net/study/csharp/sp4_dynamic.html&quot;&gt;“C# でぐぐれ！”の人のサイトからの&lt;/a&gt;)コードを実行してみました。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;dynamic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FinishedLaunching&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIApplication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSDictionary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Drawing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;999&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

    &lt;span class=&quot;err&quot;&gt;＜以下省略＞&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;このコードも、シミュレータでは当然動作しますが、なんと実機で動作します。どうなっとるんじゃい。&lt;br /&gt;
というわけでこれも :x:&lt;/p&gt;

&lt;p&gt;これについては、2014年にリリースされた Mono 3.2.7 で、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[New in Mono 3.2.7&lt;/td&gt;
          &lt;td&gt;Mono](http://www.mono-project.com/docs/about-mono/releases/3.2.7/)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;System.Core now has an interpreter for LINQ expressions and dynamic statements that can be used by FullAOT runtimes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;と書かれているので、それの恩恵かなと推測されます。&lt;br /&gt;
また、最近でも、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;[Mono’s New .NET Interpreter&lt;/td&gt;
          &lt;td&gt;Mono](http://www.mono-project.com/news/2017/11/13/mono-interpreter/)&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という話題があり、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Reflection.Emit&lt;/code&gt; もイケちゃうかもみたいな記述もあります。この辺りが好きな方は是非「&lt;a href=&quot;https://qiita.com/advent-calendar/2017/aot&quot;&gt;AOT技術 Advent Calendar 2017&lt;/a&gt;」へ投稿をお願いします。 :pray:&lt;/p&gt;

&lt;h3 id=&quot;reverse-callbacks&quot;&gt;Reverse Callbacks&lt;/h3&gt;

&lt;p&gt;よくわからないので、割愛 :bow:&lt;/p&gt;

&lt;h2 id=&quot;ここまでのまとめ&quot;&gt;ここまでのまとめ&lt;/h2&gt;

&lt;p&gt;さて &lt;a href=&quot;https://developer.xamarin.com/guides/ios/advanced_topics/limitations/&quot;&gt;Limitations - Xamarin&lt;/a&gt; を辿ってきましたが、明確に 「iPhone実機でのみ動作しないという制限」 は確認できませんでした。&lt;/p&gt;

&lt;p&gt;しかし、制限そのものが確認できなかったり、細かい制約はあるので、安心して「実機のみ動作しないことはない」とは言い切れません。&lt;/p&gt;

&lt;h2 id=&quot;リンカーのお仕事---みなさんがaot-のせいと普段言ってるのはたぶんこっち&quot;&gt;リンカーのお仕事 - みなさんが「AOT のせい」と普段言ってるのはたぶんこっち&lt;/h2&gt;

&lt;p&gt;とは言え、iPhone 実機でのみ動作しないコードに遭遇するという体験は確かにあります。&lt;/p&gt;

&lt;p&gt;例えば次のコード&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;typeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;System.Net.WebClient, System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Activator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;CreateInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Debug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WriteLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;GetType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AssemblyQualifiedName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;厳密名で指定してるから長いけど、要は「型を示す文字列からインスタンスを生成する」という処理。できる限り実装を外部から注入できるようにするとどこかで使うやつですね。&lt;/p&gt;

&lt;p&gt;このコード、iOSシミュレータでは動作しますが、iPhone 実機では動作しません（&lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; が &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;、つまりそんな型はない、と言われます）。&lt;/p&gt;

&lt;p&gt;.NETフレームワークのクラスのひとつである「System.Net.WebClient」は確かに存在しているはずなのに、「ない」と言われる、なぜか？&lt;br /&gt;
そこで気にすべき存在が「リンカー」です。&lt;/p&gt;

&lt;h3 id=&quot;xamarinios-におけるリンカーとはなにか&quot;&gt;「Xamarin.iOS におけるリンカー」とはなにか？&lt;/h3&gt;

&lt;p&gt;リンカー(linker)とは、ソースコードを最終的に実行可能プログラムにするまでに登場するツールの一つですが、その辺のはなしは「compiler, linker」などとググればたくさん出てくるのでそちらで。&lt;/p&gt;

&lt;p&gt;Xamarin.iOS の文脈での「リンカー」のお仕事は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;アプリケーションには不要な（=使用されないと判断した)クラスやメンバーを削除すること&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;だと思っておけばよいでしょう。 Android だと ProGuard、.NET だと DotFuscator などの「難読化ツール」が持つ副次的な機能に「&lt;a href=&quot;https://www.agtech.co.jp/products/preemptive/dotfuscator/featuresinfo.html#fet05&quot;&gt;不要コードの除去&lt;/a&gt;」がありますが、それと同じようなものだと理解できます。&lt;/p&gt;

&lt;p&gt;つまり、先のコードに出てきた &lt;code class=&quot;highlighter-rouge&quot;&gt;System.Net.WebClient&lt;/code&gt; は、静的なソースコード解析によって「不要だと判断されて」削除されてしまいました。文字列の中に記述されているとはリンカーは知る由もありません。&lt;/p&gt;

&lt;p&gt;では、なぜ iOSシミュレータでは動作するのでしょう？&lt;br /&gt;
とここで Xamarin.iOS プロジェクトの設定を見てみましょう。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;実機向けビルドの設定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/7e56bf75-0b66-7987-0376-f8b0757d3f4a.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;iOSシミュレータ向けビルドの設定&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/c6b363ef-dcfb-2eeb-8e30-849c48381915.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;はい、このように&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;実機向けの場合は「フレームワークSDKのみをリンクする」&lt;/li&gt;
  &lt;li&gt;シミュレータ向けの場合は「リンクしない」&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;となっていました。つまりシミュレータ向けのアプリは「不要なコードを削除する処理が行われていない」ということになり、すべてのクラスが使用できていました。&lt;/p&gt;

&lt;p&gt;逆に言えば、 &lt;strong&gt;シミュレータ向けのビルド設定を「フレームワークSDKのみをリンクする」にすれば、実機と同じように上記コードは動作しなくなります&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;シミュレータでは AOT は使用されないのに、実機と同じ症状を発生させられるのだから、これは 「AOT のせい」ではないことがわかります。&lt;/p&gt;

&lt;p&gt;おそらく一般的に「AOT のせいで iOS 実機で動作しない」と言われている事象のほとんどは「実はリンカーのせい」だと思われます。&lt;/p&gt;

&lt;p&gt;例えばこれ↓とか&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/amay077/items/3a6f50cede3425fc9f3f&quot;&gt;Xamarin.iOS の AOT に気をつけろ！Rx の FromEventPattern を使うときの注意点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;書いたのオマエかよw&lt;/p&gt;

&lt;p&gt;なので、このトラブルは、iOSシミュレータ向けのビルド設定を「リンクする」に変更することで発見可能です。あれ、ここでも iPhone 実機必要なくなっちゃった。:sweat_smile:&lt;/p&gt;

&lt;p&gt;（実機向けのビルド設定を「リンクしない」にしても同様に動作しますが、配布する &lt;code class=&quot;highlighter-rouge&quot;&gt;.ipa&lt;/code&gt; にデータサイズが巨大になってしまうので現実解ではないです。）&lt;/p&gt;

&lt;h3 id=&quot;リンカーに消されないようにするには&quot;&gt;リンカーに消されないようにするには？&lt;/h3&gt;

&lt;p&gt;次の３つの方法があります。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;どこか1箇所でいいから、型を明示的にソースコード中に書く&lt;/li&gt;
  &lt;li&gt;消されたくないクラスに &lt;code class=&quot;highlighter-rouge&quot;&gt;Preserve&lt;/code&gt; 属性を付ける&lt;/li&gt;
  &lt;li&gt;ビルド設定で「除外するアセンブリ」を指定する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;1 が一番よく行う方法です。アプリの static コンストラクタに&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AppDelegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dummy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Net&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;WebClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;などと書いておくだけでOKです。デメリットは、使用する実装クラスが予めわかっている必要があること、インスタンス生成のコストが発生することです。&lt;/p&gt;

&lt;p&gt;ライブラリでも、「とりあえずアプリ起動時に &lt;code class=&quot;highlighter-rouge&quot;&gt;MyLib.Init()&lt;/code&gt; を呼べ」みたいなものがありますが、それもリンカー対策のために必須としていると思ってもよいでしょう。&lt;/p&gt;

&lt;p&gt;2 はライブラリ開発者側の話で、これは、消されるとまずいぞとわかっているクラスやメンバに &lt;code class=&quot;highlighter-rouge&quot;&gt;[Preserve]&lt;/code&gt; という属性を付けておくと、リンカーさんは、それがついているクラスを無視してくれるというものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/ios/advanced_topics/linker/#Preserving_Code&quot;&gt;Preserving Code ｜ Linking on iOS - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デメリットは、ライブラリ開発者しか使えないということです。ライブラリ使用者つまりアプリ開発者は、問題が発生したライブラリに対して、この方法は適用できません。&lt;/p&gt;

&lt;p&gt;3 はビルド設定で、リンカーの対象外にするアセンブリを指定する、というものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.xamarin.com/guides/ios/advanced_topics/linker/#Skipping_Assemblies&quot;&gt;Skipping Assemblies ｜ Linking on iOS - Xamarin&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;デメリットというか、どこに何を設定すれば機能するのか分からないんですよね、IDEでは。。。&lt;/p&gt;

&lt;h2 id=&quot;さいごのまとめ&quot;&gt;さいごのまとめ&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;AOT の制限 -&amp;gt; 実機でのみ再現する事象は確認できなかった(未確認な制限あり)&lt;/li&gt;
  &lt;li&gt;リンカーによるトラブル -&amp;gt; iOSシミュレータでもビルド設定を「リンクする」に変えれば未然に防げる&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あれ？ iOSシミュレータだけでも結構イケる？？？&lt;/p&gt;

&lt;p&gt;ままま、まあシミュレータは所詮シミュレータなんで！いつも実機で開発してないと、いざデプロイするときに絶対問題起こるんで！！:cold_sweat::sweat_drops:&lt;/p&gt;

&lt;p&gt;しかし会社の方針？とかでiPhone実機が提供されず、シミュレータしか使えない環境の人は、せめてビルド設定だけは変えておきましょう。&lt;/p&gt;

&lt;p&gt;ただし「Xamarin Live Playerだけ使えばOK」その考えはダメ。なぜならこれは「あなたのコードを、iOS アプリっぽい画面にインタラクティブに表示させるアプリ」だからです。&lt;/p&gt;

&lt;h3 id=&quot;そこで-visual-studio-app-center-ですよですか&quot;&gt;そこで Visual Studio App Center ですよ（ですか？）&lt;/h3&gt;

&lt;p&gt;Visual Studio Mobile Center から名称変更して正式リリースとなった &lt;a href=&quot;https://azure.microsoft.com/ja-jp/services/app-center/&quot;&gt;Visual Studio App Center&lt;/a&gt; は、 &lt;a href=&quot;https://www.xamarin.com/test-cloud&quot;&gt;Xamarin Test cloud&lt;/a&gt; のサブセット？を内包しており、雲の向こう側にある「実際の端末」を使ってテストができます。継続的に実機でテストが実施できるとしたら、それはとても恵まれた環境でしょう。けど、開発時に常時使うもんじゃないよね。&lt;/p&gt;
</description>
        <pubDate>Fri, 01 Dec 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/12/01/6a6d5855b3d0c46de126/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/12/01/6a6d5855b3d0c46de126/</guid>
        
        
        <category>C#</category>
        
        <category>iOS</category>
        
        <category>Xamarin</category>
        
      </item>
    
      <item>
        <title>RxJava の combineLatest のコード例</title>
        <description>&lt;p&gt;RxJava の combineLatest、overload がたくさんあって一発で書けた試しがないので、うまく書けた例を置いておきます。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; と &lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt; のいずれかの &lt;code class=&quot;highlighter-rouge&quot;&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; が変化したときに、 “name - 歳:age” な文字列を push するというものです。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PublishSubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 型引数指定と BiFunction は省略できないみたい&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combineLatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BiFunction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$n - 歳:${a}&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;combineLatest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;onNext - ${it}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// RxKotlin を導入すると型推論が効くとコメントで教えてもらいました&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observables&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combineLatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;$n - 歳:${a}&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;combineLatest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;onNext - ${it}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Observable&amp;lt;T&amp;gt; を配列で渡せるけど、第2引数の combiner が Any な配列になっちゃう&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;combineLatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;n&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;$n - age:${a}&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;combineLatest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;onNext - ${it}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;saito&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;onNext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yoshida&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Thu, 30 Nov 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/11/30/b04427aeab4f10ec24f6/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/11/30/b04427aeab4f10ec24f6/</guid>
        
        
        <category>Android</category>
        
        <category>Kotlin</category>
        
        <category>RxJava</category>
        
      </item>
    
      <item>
        <title>C# + ReactiveProperty vs Kotlin + RxProperty : Command 編</title>
        <description>&lt;p&gt;ボタンを押したら、数値が１ずつ加算されていく、というやつの ViewModel 側&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;c--reactiveproperty-の場合&quot;&gt;C# + ReactiveProperty の場合&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; がラベルにバインドする数値、 &lt;code class=&quot;highlighter-rouge&quot;&gt;Increment&lt;/code&gt; がボタンにバインドするコマンド。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainViewModel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactiveProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactiveProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactiveCommand&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Increment コマンドは、 Counter が 10 未満の間、使用可能&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToReactiveCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Increment コマンドが実行されたら Counter を +1 してく&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Increment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;kotlin--rxproperty-の場合&quot;&gt;Kotlin + RxProperty の場合&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;counter&lt;/code&gt; がラベルにバインドする数値、 &lt;code class=&quot;highlighter-rouge&quot;&gt;increment&lt;/code&gt; がボタンにバインドするコマンド。&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Increment コマンドは、 Counter が 10 未満の間、使用可能&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;increment&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RxCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Increment コマンドが実行されたら Counter を +1 してく&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;counter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C# は言語の仕様？で、読み取り専用プロパティの定義のなかで他のプロパティを参照できない。のでコンストラクタに書く。&lt;/p&gt;

&lt;p&gt;Kotlin はその辺のしがらみが少ないので、思った通りに書ける感じ。&lt;br /&gt;
さらに &lt;code class=&quot;highlighter-rouge&quot;&gt;.apply&lt;/code&gt; 関数で Command の subscribe 処理も定義できるので、結果コンストラクタに書くことがなくなりました、スッキリ。&lt;/p&gt;

&lt;p&gt;Android + Kotlin な人は、 RxProperty もっと使っていきましょー&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://qiita.com/k-kagurazaka@github/items/3fc1fc19ea608cac9913&quot;&gt;RxPropertyでRxJavaとAndroid Data Bindingを連携する - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;コードの短さだと Kotlin だし、この C# の &lt;code class=&quot;highlighter-rouge&quot;&gt;MainViewModel.cs&lt;/code&gt; は、Xamarin(Android, iOS, Mac) や Windows など全部共通実装でいけちゃう。&lt;/p&gt;

&lt;p&gt;どちらも良い。&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Nov 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/11/28/37e1032f2a8f30138284/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/11/28/37e1032f2a8f30138284/</guid>
        
        
        <category>Android</category>
        
        <category>C#</category>
        
        <category>iOS</category>
        
        <category>Kotlin</category>
        
      </item>
    
      <item>
        <title>2017年冬から始める ReactiveProperty + Xamarin.Forms</title>
        <description>&lt;p&gt;つい最近まで PCL な Xamarin.Forms では、 ReactiveProperty の 2.x 系しか使えないと思っていたのですが、いろいろな方の協力で使える方法が分かったので示しておく。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;今から ReactiveProperty を（Xamarin で）使ってみたいぞ、という人向けのクイックスタートも兼ねております。&lt;/p&gt;

&lt;h2 id=&quot;1-ソリューションを作る&quot;&gt;1. ソリューションを作る&lt;/h2&gt;

&lt;p&gt;Visual Studio for Mac で行きます。&lt;/p&gt;

&lt;p&gt;新しいソリューションから、 アプリ - 空白フォームのアプリ を選んで、適当な名前で作成します。ここでは 「ReactivePropertySample」 としますね。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/8cfdeb53-c9d5-1134-b9d7-042a3a9f5536.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-pcl-のプロファイルを-44-に変える&quot;&gt;2. PCL のプロファイルを “44” に変える&lt;/h2&gt;

&lt;p&gt;ソリューションが作成できたら、３つあるプロジェクトの中のコアプロジェクト(.Droid や .iOS のついてないもの)を選択して右クリック → 「オプション」を開きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/7d58f3ae-6641-a079-8fe1-08770a6c3bdd.png&quot; alt=&quot;image.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ダイアログから、「ビルド」 → 「全般」を選択して、Target Framework の 「.NET ポータブル」の横にある「変更」を押し、プロファイルを &lt;strong&gt;「PCL 4.6 - Profile44」&lt;/strong&gt; に変更して OK を押します。対応プラットフォームから Windows Phone のチェックが外れますが &lt;strong&gt;まったく問題ありません&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/62a20ef9-1a16-41f9-8c4d-7be50d4a3c31.png&quot; alt=&quot;snap1.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-systemruntimeinteropservicesruntimeinformation-の-nuget-パッケージを追加する&quot;&gt;3. System.Runtime.InteropServices.RuntimeInformation の nuget パッケージを追加する&lt;/h2&gt;

&lt;p&gt;@yamachu さんが書かれた、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://teitoku-window.hatenablog.com/entry/2017/11/18/185501&quot;&gt;XamarinなどのPCLプロジェクトにSystem.Reactiveを導入しようとすると失敗することへの対策 - 窓を作っては壊していた人のブログ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;の通りです。ReactiveProperty 3.x が依存している System.Reactive をインストールするには、まず &lt;br /&gt;
System.Runtime.InteropServices.RuntimeInformation を入れる必要があります。&lt;/p&gt;

&lt;p&gt;コアプロジェクトを選択して、 メニュー → プロジェクト → Nuget パッケージの追加 とし、右上検索ボックスに “System.Runtime.InteropServices.RuntimeInformation” をタイプして絞り込みます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/8d61fc47-b069-a850-873b-824c8c1c2bf2.png&quot; alt=&quot;snap2.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;見つかったら、右下の追加ボタンでインストールします。現在の最新バージョンは 4.3.0 です。&lt;/p&gt;

&lt;h2 id=&quot;4-systemreactive-の-nuget-パッケージを追加する&quot;&gt;4. System.Reactive の nuget パッケージを追加する&lt;/h2&gt;

&lt;p&gt;次に、ReactiveProperty 3.x が依存している System.Reactive をインストールします（いきなり ReactiveProperty を入れてもよいのかもだけど、まあ順番にやってみましょう）。&lt;/p&gt;

&lt;p&gt;方法は 3. と同じです。 nuget のダイアログボックスで System.Reactive とタイプして、結果から選択して追加します（雑になってきたｗ）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/52afd47b-5998-6ac3-90d8-c38c47fa6afe.png&quot; alt=&quot;snap3.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-reactiveproperty-の-nuget-パッケージを追加する&quot;&gt;5. ReactiveProperty の nuget パッケージを追加する&lt;/h2&gt;

&lt;p&gt;ついに ReactiveProperty のインストールです。 3. 4. と同じ方法で追加しましょう（雑）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/42902eb0-9f29-0e3b-e9b0-5d00d0ab7021.png&quot; alt=&quot;snap4.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;バージョン 3.x 系をついにいれる事ができました。現在の最新stableは 3.6.0 です。&lt;/p&gt;

&lt;p&gt;できてしまえば簡単ですが、この方法に辿りつくまでに多くの労力と時間とご協力をいただきました。みなさまありがとうございました。&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;うーん，なんというか微妙なハックですけど，System.Runtime.InteropServices.RuntimeInformation 4.0.0(Reactive 3.1.1が依存しているバージョン)の依存にMicrosoft.NETCore.Platformsが含まれていて，そのせいでPCLのでの展開が出来ないんじゃないかなぁと睨んでいます．&lt;/p&gt;&amp;mdash; 留まり奈緒 (@y_chu5) &lt;a href=&quot;https://twitter.com/y_chu5/status/931805975878582274?ref_src=twsrc%5Etfw&quot;&gt;2017年11月18日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;PCL Profile111 が Windows Phone を含んでるならそのせいですね&lt;/p&gt;&amp;mdash; かずき@66.8kg (@okazuki) &lt;a href=&quot;https://twitter.com/okazuki/status/932919102351450112?ref_src=twsrc%5Etfw&quot;&gt;2017年11月21日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;reactiveproperty-を使ってみよう&quot;&gt;ReactiveProperty を使ってみよう&lt;/h2&gt;

&lt;p&gt;せっかくいれたのでちゃちゃっと使ってみましょう。&lt;br /&gt;
ぜんぶコアプロジェクトでやります。&lt;/p&gt;

&lt;h3 id=&quot;i-mainviewmodel-を作る&quot;&gt;I. MainViewModel を作る&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MainViewModel&lt;/code&gt; というクラスを作って、次のように書きます。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;System.Reactive.Linq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Reactive.Bindings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ReactivePropertySample&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MainViewModel&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReactiveProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MainViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Counter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TimeSpan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToReactiveProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Counter&lt;/code&gt; という変更通知プロパティを ReactiveProperty を使ってつくります。&lt;br /&gt;
Reactive Extensions の機能を使って、「１秒おきに１ずつカウントアップ」していきます。&lt;/p&gt;

&lt;h3 id=&quot;ii-画面pageとバインドする&quot;&gt;II. 画面(Page)とバインドする&lt;/h3&gt;

&lt;p&gt;プロジェクトを作った時に &lt;code class=&quot;highlighter-rouge&quot;&gt;ReactivePropertySamplePage.xaml&lt;/code&gt; という画面ができていると思うので、それを編集します。 XAML の編集だけでいきましょう。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://xamarin.com/schemas/2014/forms&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2009/xaml&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:ReactivePropertySample&quot;&lt;/span&gt; 
    &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ReactivePropertySample.ReactivePropertySamplePage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPage.BindingContext&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;local:MainViewModel&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage.BindingContext&amp;gt;&lt;/span&gt;
    
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Text=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{Binding Counter.Value}&quot;&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;VerticalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; 
        &lt;span class=&quot;na&quot;&gt;HorizontalOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ContentPage&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;ContentPage.BindingContext&amp;gt;&lt;/code&gt; で、 &lt;code class=&quot;highlighter-rouge&quot;&gt;MainViewModel&lt;/code&gt; をバインド対象としています。&lt;br /&gt;
そして、ラベルの Text に &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;{Binding Counter.Value}&quot;&lt;/code&gt; と書くことで、 Counter 値をデータバインドしています。 &lt;strong&gt;.Value を付けるのを忘れずに！&lt;/strong&gt;（と言っても忘れるんだよ、分かる。みんなやってる。）&lt;/p&gt;

&lt;h3 id=&quot;iii-動かす&quot;&gt;III. 動かす&lt;/h3&gt;

&lt;p&gt;OK, これで完成です。 Android でも iOS でも動きます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/0166bdbd-c0e0-4c6f-8289-49fec91335bf.gif&quot; alt=&quot;Untitled2.gif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;文字ちっさ！&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;最新の環境で ReactiveProperty を使う方法を紹介しました。&lt;/p&gt;

&lt;p&gt;ReactiveProperty は、Reactive Extension のパワーを View とのデータバインディングにそのまま活用できる、現代においては必須のライブラリです。&lt;br /&gt;
もちろん、変更通知プロパティを手書きする手間をなくす目的で使うのもよいですね。&lt;/p&gt;

&lt;p&gt;「ReactiveProperty のここがすごい！」というのをもう少し、別記事で紹介していきたいと思います。&lt;/p&gt;

&lt;p&gt;ちなみに、コアプロジェクトが PCL でなく .NET Standard なら、もうちょっといろいろ楽…なハズ！それについては誰かが書いてくれることを望みます :pray:&lt;/p&gt;

&lt;h2 id=&quot;おまけ&quot;&gt;おまけ&lt;/h2&gt;

&lt;p&gt;これだけなのにインストールされたパッケージ群がえらいことになった。。。。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://qiita-image-store.s3.amazonaws.com/0/8227/cf41f313-9ab7-2bd1-5736-f8551d701029.png&quot; alt=&quot;snap5.png&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 22 Nov 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/11/22/getting_started_reactiveproperty_with_xamarin_forms_in_winter_2017/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/11/22/getting_started_reactiveproperty_with_xamarin_forms_in_winter_2017/</guid>
        
        
        <category>Xamarin</category>
        
        <category>C#</category>
        
        <category>.NET</category>
        
        <category>Android</category>
        
        <category>iOS</category>
        
      </item>
    
      <item>
        <title>Kotlin製のAndroidアプリを Visual Studio Mobile Center でビルドして DeployGate にアップロードする</title>
        <description>&lt;p&gt;タイトル長いｗ&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;vsmc-とは&quot;&gt;VSMC とは&lt;/h2&gt;

&lt;p&gt;Visual Studio Mobile Center(以下 VSMC) は Microsoft が提供している CI サービスです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://codezine.jp/article/detail/10095&quot;&gt;iOS／Androidアプリの開発を支援する「Visual Studio Mobile Center （preview）」を使ってみよう (1/5)：CodeZine（コードジン）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あまり知られていないでしょうが、 Java/Kotlin で書かれた普通の Android アプリもビルドできます。（そしてもちろん Swift 製の iOS アプリも対応してます。あと React Native もな。）&lt;/p&gt;

&lt;p&gt;Kotlin/Java な Android Studio プロジェクトのレポジトリを VSMC に設定してやるだけでビルドまではできるのでなんにも難しいことはないです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://dev.classmethod.jp/smartphone/visual-studio-mobile-center-ios-app-build/&quot;&gt;Visual Studio Mobile CenterでiOSアプリをビルドしてみた ｜ Developers.IO&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今日のメインは、VSMC でもようやくビルド後にスクリプトを実行させることができるようになったので、その紹介です。&lt;/p&gt;

&lt;h2 id=&quot;vsmc-がビルドスクリプトに対応した&quot;&gt;VSMC がビルドスクリプトに対応した&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/mobile-center/build/custom/scripts/&quot;&gt;Build Scripts ｜ Visual Studio Mobile Center ｜ Microsoft Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;これによると、プロジェクトのレポジトリに、特定のスクリプトファイルを入れておくと、ビルド後（やビルド前）に、そのスクリプトファイルを実行してくれる、というものです。&lt;/p&gt;

&lt;p&gt;現在は、３つのトリガに対応していて、それぞれ次に示すファイル名のスクリプトファイルをリポジトリのプロジェクトディレクトリにおいておきます。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Post-clone(クローン後) - &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-clone.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Pre-build(ビルド前) - &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-pre-build.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Post-build(ビルド後) - &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-build.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;プロジェクトディレクトリとは、Android Studio プロジェクトの場合、プロジェクトの &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; がある場所、大抵は &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; ディレクトリになります（下図参照）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_01.png&quot; alt=&quot;01&quot; /&gt;&lt;/p&gt;

&lt;p&gt;試しにビルドされた apk ファイルを DeployGate にアップロードする、というのをやってみます。&lt;br /&gt;
VSMC にもアプリの配信機能はありますが、社内で既に DeployGate を使っているし、DeployGate の方が専用アプリが用意されていてβテストサービスとしては勝っているので、今回例としました。&lt;/p&gt;

&lt;p&gt;まず、当然ながら DeployGate 側の準備が必要です。ユーザー登録をして、手動でビルドした apk を DeployGate にアップロードしておきます。&lt;/p&gt;

&lt;p&gt;そして、次のようなファイルを &lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-build.sh&lt;/code&gt; というファイル名で &lt;code class=&quot;highlighter-rouge&quot;&gt;app&lt;/code&gt; ディレクトリの中に入れておきます。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Upload to DeployGate&quot;&lt;/span&gt;

curl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;token={deploygateのAPI key}&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file=@&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MOBILECENTER_OUTPUT_DIRECTORY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/app-release.apk&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;-F&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;message=build by Visual Studio Mobile Center - #&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MOBILECENTER_BUILD_ID&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  https://deploygate.com/api/users/&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;deploygateのユーザーID&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;/apps
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;{deploygateのAPI key}&lt;/code&gt; には、DeployGate のアカウント設定のページから API key の値を転記します。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;{deploygateのユーザーID}&lt;/code&gt; には、DeployGate に作成したユーザーのユーザーID を転記します（正しければ上記のURLが存在するはず）。&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;file=&lt;/code&gt; に記述した &lt;code class=&quot;highlighter-rouge&quot;&gt;app-release.apk&lt;/code&gt; は、ビルド構成（Build Variant）が release の場合です。デバッグの場合は &lt;code class=&quot;highlighter-rouge&quot;&gt;app-debug.apk&lt;/code&gt; になるはずです（未確認）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mobile-center-post-build.sh&lt;/code&gt; をコミット、プッシュして VSMC の Build Configulation を見ると「Build scripts」 の項目に &lt;strong&gt;Post-build&lt;/strong&gt; とチェックされ、正しく認識できていることがわかります。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_02.png&quot; alt=&quot;02&quot; /&gt;&lt;/p&gt;

&lt;p&gt;あとは、 apk への署名を忘れないようにしましょう。Sign builds を On にして、 keystore ファイルなどを指定します。&lt;br /&gt;
社内配布であればデバッグ時と同じいいやってことで、開発用PCに入っている(Mac なら &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.android/&lt;/code&gt; にある) &lt;code class=&quot;highlighter-rouge&quot;&gt;debug.keystore&lt;/code&gt; をアップロード、入力項目は次のとおりです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Keystore password: android&lt;/li&gt;
  &lt;li&gt;Key alias: androiddebugkey&lt;/li&gt;
  &lt;li&gt;Key password: android&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_03.png&quot; alt=&quot;03&quot; /&gt;&lt;/p&gt;

&lt;p&gt;設定できたら、「Save &amp;amp; Build」 を押すと、ビルドが開始され、ビルドログを見るとスクリプトが実行されていることが確認できます。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_04.png&quot; alt=&quot;04&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;これで勝つる&quot;&gt;これで勝つる？&lt;/h2&gt;

&lt;p&gt;よっしゃー！これでスクリプトさえ書けば Bitrise や CircleCI 並みになんでもできるぞー、と思いました。&lt;/p&gt;

&lt;p&gt;が、 &lt;strong&gt;スクリプトファイルをリポジトリに含める&lt;/strong&gt; のが作動条件なので、今回試したような 「DeployGate へのアップロード」というシナリオでは DeployGate の API key をリポジトリに含めることになってしまい、これは推奨されることではありません（公開リポジトリではご法度モノ）。&lt;/p&gt;

&lt;p&gt;なんという「Microsoft、分かってない」感。なんでこんな仕様にしたのでしょう。&lt;br /&gt;
VSMC はプライベートリポジトリ推奨なのでしょうか…。私はプライベートなアプリのビルドを、Bitrise の無料プランでぶん回していたらビルド時間制限の上限に達してしまったので VSMC に移行してきたのですが、そういうシナリオなのでしょうか。&lt;/p&gt;

&lt;p&gt;早いとこカスタムな Environment variables を作れるようにして欲しいところです。&lt;/p&gt;
</description>
        <pubDate>Wed, 18 Oct 2017 13:30:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/10/18/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/10/18/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center/</guid>
        
        
        <category>Android</category>
        
        <category>DeployGate</category>
        
        <category>VisualStudio</category>
        
      </item>
    
      <item>
        <title>JetBrains OpenSource License を更新しました</title>
        <description>&lt;p&gt;２年目ありがとうございます。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/buy/opensource/&quot;&gt;JetBrains OpenSource License&lt;/a&gt; は、オープンソースソフトウェア開発者に、JetBrains の製品群のライセンスを提供してもらえるプログラムで、提供される製品は &lt;a href=&quot;https://www.jetbrains.com/store/&quot;&gt;All Products Pack&lt;/a&gt;、つまり次に挙げる全ての製品がOSS開発のために利用できます。価格にすると年間649ドル(/1ユーザー）相当になります。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IntelliJ IDEA Ultimate&lt;/li&gt;
  &lt;li&gt;ReSharper&lt;/li&gt;
  &lt;li&gt;ReSharper C++&lt;/li&gt;
  &lt;li&gt;dotTrace&lt;/li&gt;
  &lt;li&gt;dotMemory&lt;/li&gt;
  &lt;li&gt;dotCover&lt;/li&gt;
  &lt;li&gt;AppCode&lt;/li&gt;
  &lt;li&gt;CLion&lt;/li&gt;
  &lt;li&gt;PhpStorm&lt;/li&gt;
  &lt;li&gt;PyCharm&lt;/li&gt;
  &lt;li&gt;RubyMine&lt;/li&gt;
  &lt;li&gt;WebStorm&lt;/li&gt;
  &lt;li&gt;DataGrip&lt;/li&gt;
  &lt;li&gt;Rider&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;JetBrains OpenSource License に申請できる条件は、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;プロジェクトのリードまたはコアコミッターであること&lt;/li&gt;
  &lt;li&gt;プロジェクトの開発(生存)期間が３ヶ月以上であること&lt;/li&gt;
  &lt;li&gt;プロジェクトの開発がアクティブであること&lt;/li&gt;
  &lt;li&gt;企業や団体などからスポンサードされていないこと&lt;/li&gt;
  &lt;li&gt;プロジェクトがコマーシャルソフトウェアでないこと&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;です(意訳)。&lt;/p&gt;

&lt;p&gt;私は Xamarin.Forms.GoogleMaps というオープンソースライブラリを開発しており、昨年(2016年)申請して無事、ライセンスが提供されました。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;/blog/2016/09/29/got-jetbrains-opensource-License/&quot;&gt;JetBrains の Open Source License をいただきました&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最初に申請したときは、開発開始してから３ヶ月でした。偶然私の他にコミットしてくれてる人が数名居たので、「コミッターの数」を「3」として申請したら、3人分のライセンスをもらえました（そのライセンスはそれぞれコミッターの人に使ってもらっています）。&lt;/p&gt;

&lt;p&gt;このライセンスは1年間有効なものなので、1年毎に更新が必要です。今回更新(Update)の申請をして、無事に受理されまた1年間のライセンスを受領しました。&lt;/p&gt;

&lt;p&gt;ありがたいことに、この1年間でコミッターの数が15人ほどに増えてきたので、更新時に「コミッターの数」を「15」として申請したのですが、もらえたライセンスは変わらず「3」でした（汗）。まあコアコミッターと呼べる人は私以外にまだ居ないので妥当ではあります。&lt;/p&gt;

&lt;p&gt;ということで、OSS開発をしている人は JetBrains 全製品が使用できるライセンスをもらえるチャンスがありますので、応募してみるとよいと思います。&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Oct 2017 08:00:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/10/01/renuew_jetbrains_opensource_lisence_2017/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/10/01/renuew_jetbrains_opensource_lisence_2017/</guid>
        
        
        <category>opensource</category>
        
        <category>jetbrains</category>
        
      </item>
    
      <item>
        <title>Mapbox GL JS をデバッグするまで</title>
        <description>&lt;p&gt;オープンソースのベクトル地図ライブラリ Mapbox GL JS のデバッグがしたいので調べました。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;mapbox-なにそれ&quot;&gt;Mapbox なにそれ？&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Google Maps JavaScript API みたいなもん&lt;/li&gt;
  &lt;li&gt;こういうの → &lt;a href=&quot;https://www.mapbox.com/mapbox-gl-js/examples/&quot;&gt;Display a map / Mapbox&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;要は地図を表示・操作するためのオープンソース JavaScript ライブラリ&lt;/li&gt;
  &lt;li&gt;類似のライブラリとして OpenLayers, leaflet などがある&lt;/li&gt;
  &lt;li&gt;上記との違いは「ベクトルタイル」を「WebGL」で描画するものであるということ&lt;/li&gt;
  &lt;li&gt;“GL” とは WebGL を差しており、姉妹ライブラリとして Mapbox GL Native がある（こちらはモバイルやデスクトップの “ネイティブ” アプリ用であり、OpenGL を使用している）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;つまり、 Google Maps JavaScript API 以外の方法で、Google Maps のようなベクトル地図レンダリングをしたければ、Mapbox GL JS を使うのが現在の事実上唯一の方法である。&lt;/p&gt;

&lt;h2 id=&quot;何をしらべたいのあるいは何を調べてないの&quot;&gt;何をしらべたいの？（あるいは何を調べてないの？）&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;ライブラリの使い方は調べてない（ってか Google Maps とそんなに変わらないはず）&lt;/li&gt;
  &lt;li&gt;Mapbox GL JS の（非同期な）地図データ取得の仕組み&lt;/li&gt;
  &lt;li&gt;Mapbox GL JS の高速な描画の仕組み&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は、その足がかりとして、Mapbox GL JS のデバッグ環境を作ります。&lt;/p&gt;

&lt;h2 id=&quot;調べたわたしは&quot;&gt;調べたわたしは&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;JavaScript 力はあんまりない&lt;/li&gt;
  &lt;li&gt;WebGL やったことない&lt;/li&gt;
  &lt;li&gt;OpenGL もない&lt;/li&gt;
  &lt;li&gt;Mapbox GL Native のソースを追ってみたが C++14 が分からずあきらめた&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;大丈夫か・・・？&lt;/p&gt;

&lt;h2 id=&quot;デバッグ環境を作る&quot;&gt;デバッグ環境を作る&lt;/h2&gt;

&lt;h3 id=&quot;用意するものというか私の環境&quot;&gt;用意するもの(というか私の環境)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;https://github.com/mapbox/mapbox-gl-js のローカルクローン&lt;/li&gt;
  &lt;li&gt;macOS&lt;/li&gt;
  &lt;li&gt;Xcode（入ってた)&lt;/li&gt;
  &lt;li&gt;homebrew&lt;/li&gt;
  &lt;li&gt;yarn とかいうやつ（homebrew で入れる）&lt;/li&gt;
  &lt;li&gt;node.js(v4.0以上)&lt;/li&gt;
  &lt;li&gt;Visual Studio Code (デバッグするのに使う。VSCodeと略すかも)&lt;/li&gt;
  &lt;li&gt;Debugger for Chrome (Visual Studio Code の拡張機能)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;すでに「yarn って何？」というレベルです・・・。&lt;/p&gt;

&lt;h3 id=&quot;デバッグ環境を作る手順1mapboxのセットアップ&quot;&gt;デバッグ環境を作る手順1(mapboxのセットアップ)&lt;/h3&gt;

&lt;p&gt;https://github.com/mapbox/mapbox-gl-js/blob/master/CONTRIBUTING.md に丁寧に書いてあることの写しだけど。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Xcode Command Line Tools を入れる(入ってた。けど一度 Xcode を起動て License に agree しないといけなかった）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install node&lt;/code&gt; で node をインストール（以前 anyenv/ndenv で入れてあったので余裕）&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;brew install yarn&lt;/code&gt; で yarn というやつを入れる&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd mapbox-gl-js&lt;/code&gt; でクローンしたリポジトリに移動して、 &lt;code class=&quot;highlighter-rouge&quot;&gt;yarn install&lt;/code&gt; で何かをインストールする（何？）&lt;/li&gt;
  &lt;li&gt;https://www.mapbox.com/studio/account/tokens/ で、 Mapbox の API キーを生成する。Mapbox アカウントがなければ同じく作る&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mapbox/mapbox-gl-js/blob/master/CONTRIBUTING.md#serving-the-debug-page&quot;&gt;Serving the Debug Page&lt;/a&gt; にあるように &lt;code class=&quot;highlighter-rouge&quot;&gt;MAPBOX_ACCESS_TOKEN=pk.iEkc36fR… yarn run start-debug&lt;/code&gt; を実行する&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;んでブラウザで http://localhost:9966/debug にアクセスすると、地図が表示されるはずである。&lt;/p&gt;

&lt;p&gt;この状態で、 Chrome のデベロッパーツールでデバッグできるけど、効率上げるために Visual Studio Code を使う。その手順が以下。&lt;/p&gt;

&lt;h3 id=&quot;デバッグ環境を作る手順2vscodeのセットアップ&quot;&gt;デバッグ環境を作る手順2(VSCodeのセットアップ)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ics.media/entry/11356&quot;&gt;Visual Studio Codeを使いこなせ！ Chromeと接続してJSをデバッグする方法 - ICS MEDIA&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;https://github.com/Microsoft/vscode-chrome-debug#launch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を参考に。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;VSCode で mapbox-gl-js のフォルダを開く&lt;/li&gt;
  &lt;li&gt;メニュー → デバッグ → 構成の追加 とすると &lt;code class=&quot;highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; が生成されるので、下記の &lt;code class=&quot;highlighter-rouge&quot;&gt;launch.json&lt;/code&gt; のように記述する&lt;/li&gt;
  &lt;li&gt;前述の &lt;code class=&quot;highlighter-rouge&quot;&gt;MAPBOX_ACCESS_TOKEN=pk.iEkc36fR… yarn run start-debug&lt;/code&gt; をしたまま、VSCode のメニュー → デバッグ → デバッグの開始（F5 でもおｋ）すると、新しいタブに地図が表示される。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;//&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;launch.json&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Launch Chrome against localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:9966/debug/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;webRoot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/how_to_debugging_mapbox_gl_js_01.png&quot; alt=&quot;how_to_debugging_mapbox_gl_js_01.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;試しにデバッグしてみる&quot;&gt;試しにデバッグしてみる&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;src/render/draw_line.js&lt;/code&gt; の 14行目あたりにブレークポイントを置いてみる（F9 で）。F5 でデバッグ開始する。&lt;/p&gt;

&lt;p&gt;地図が表示される過程でブレークポイントで一時停止し、その箇所の「変数」「ウオッチ」「コールスタック」などが見られる。下図は、 &lt;code class=&quot;highlighter-rouge&quot;&gt;drawLine&lt;/code&gt; 関数の &lt;code class=&quot;highlighter-rouge&quot;&gt;coords&lt;/code&gt; 変数の中身を表示しているところ。描画するラインの頂点が確認できる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/how_to_debugging_mapbox_gl_js_02.png&quot; alt=&quot;how_to_debugging_mapbox_gl_js_02.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ちなみに、この &lt;code class=&quot;highlighter-rouge&quot;&gt;drawLine&lt;/code&gt; 関数をスキップ（すぐに &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;）すると、次図のようにラインが描画されない地図になる。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/how_to_debugging_mapbox_gl_js_03.png&quot; alt=&quot;how_to_debugging_mapbox_gl_js_03.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;「デバッグするまで」としてはこんな感じで。&lt;/p&gt;
</description>
        <pubDate>Thu, 21 Sep 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/09/21/how_to_debugging_mapbox_gl_js/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/09/21/how_to_debugging_mapbox_gl_js/</guid>
        
        
        <category>mapbox</category>
        
        <category>JavaScript</category>
        
        <category>geo</category>
        
      </item>
    
      <item>
        <title>iOSDC 2017 に参加してきました</title>
        <description>&lt;p&gt;iOSDC 2017 に参加してきましたよっと。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/joined_iosdc_2017_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://iosdc.jp/2017/&quot;&gt;iOSDC Japan 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ふだんは「クロスプラットフォーマーなら、Java も Swift もできなきゃダメだぜ☆」なんて言ってる割には、実は Swift で iOS アプリを書いたことはなくて、Android の勉強会にはちょいちょい参加してて DroidKaigi2017 では登壇もさせてもらったわけですが、iOS/Swift 系のコミュニティにはよく分かってませんでした。&lt;/p&gt;

&lt;p&gt;「外国語を学ぶことはその国の文化を学ぶこと」なんてよく言われますけど、プログラミング言語やプラットフォームも同じだと思っていて、iOS/Swift アプリ開発者さん達の文化というか空気を感じたくて参加しました。&lt;/p&gt;

&lt;h2 id=&quot;セッション&quot;&gt;セッション&lt;/h2&gt;

&lt;p&gt;こういうイベントって、50分セッションが多いと思うんですけど、iOSDC は 15分または30分で、いろいろな話を聞くことができました。&lt;br /&gt;
「もっと聞きたい！」と思うこともありましたがこのスタイルもいいなと思います。&lt;/p&gt;

&lt;p&gt;Swift や iOS SDK を題材にしたものが中心でありつつ、とは言えサーバーサイドのネタでは Firebase が登場することが多かったように見えました（自分が聞いたセッションがそうだっただけかも）。DroidKaigi よりもネタの多様性があったように見えました。&lt;/p&gt;

&lt;p&gt;数学ネタも多かったですね。&lt;br /&gt;
高校からほとんど「数学」をやってないので、式や用語の意味は分かりませんが、丁寧な解説やコードがあったので「何をしているのか」はわかりました。&lt;/p&gt;

&lt;p&gt;特に、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://iosdc.jp/2017/node/1445&quot;&gt;Swift で数学のススメ 〜 プログラミングと数学を同時に学べ ｜ iOSDC Japan 2017&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;14:20 から「Swift で数学のススメ 〜 プログラミングと数学は同時に学べ」で発表します👍数学の難しさにどう立ち向かって行くか、エンジニアの視点からの提案です💪群・環・体から代数拡大まで15分で頑張る💨&lt;a href=&quot;https://t.co/1yfrRHF5OP&quot;&gt;https://t.co/1yfrRHF5OP&lt;/a&gt;&lt;a href=&quot;https://twitter.com/hashtag/iOSDC?src=hash&quot;&gt;#iOSDC&lt;/a&gt; &lt;a href=&quot;https://twitter.com/hashtag/b?src=hash&quot;&gt;#b&lt;/a&gt;&lt;/p&gt;&amp;mdash; Taketo Sano (@taketo1024) &lt;a href=&quot;https://twitter.com/taketo1024/status/908919531157962753&quot;&gt;2017年9月16日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;がとてもよかった。&lt;/p&gt;

&lt;p&gt;なんというかスピーカーさんの情熱が発表に溢れていて&lt;/p&gt;

&lt;p&gt;「あーこの人は本当に数学のことが大好きなんだなあ」&lt;/p&gt;

&lt;p&gt;というのがひしひしと伝わってきました。&lt;br /&gt;
会場大学だったし、こんな教授の講義で自分が異性だったら惚れるレベル。&lt;br /&gt;
動画が公開されたら是非見て欲しいです。&lt;/p&gt;

&lt;p&gt;ベストスピーカー賞で４位か５位だったと思います。会場が広く聴講者も多い room A のセッションが上位を占めるなかで、votes per atendees ではトップだったんではないかと思います。&lt;/p&gt;

&lt;p&gt;他には、クロスプラットフォームのセッションや MVC や MVVM などのUIアプリ設計手法の話は iOSDC でも人気でした。Android では公式の Data Binding サポートや Archtecture Components での ViewModel サポートなどがあるので、iOS にもデファクトなライブラリが出てくれば、より一般化するのでしょうね。&lt;/p&gt;

&lt;h2 id=&quot;lt&quot;&gt;LT&lt;/h2&gt;

&lt;p&gt;やばい。&lt;br /&gt;
day2 も day3 もレベルが高すぎた。登壇者の方、通常セッションよりプレッシャーあったんではないかと思います(心中お察しします)。&lt;/p&gt;

&lt;p&gt;周りがみんなビールだらけで「みんなビール好きすぎだろ」と若干引き気味だったのですが、みなさんのトークが楽しすぎたので盛り上がれました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://csugjp.connpass.com/event/50930/&quot;&gt;今年3月の C# の勉強会&lt;/a&gt;で、bitflyer さんのブロックチェーンの発表を聞いた直後、興味持って ￥50,000 をチャージしたものの買い時を見失って放置してしまった、あの時買っておけばあるいは僕もｗ&lt;/p&gt;

&lt;h2 id=&quot;ゴージャス&quot;&gt;ゴージャス&lt;/h2&gt;

&lt;p&gt;個人スポンサー(1.5k yen)チケットを購入したわけだけど、そうでなくてもノベルティがとてもゴージャスでした、スポンサー企業さまに感謝！&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://twitter.com/hashtag/iosdc?src=hash&quot;&gt;#iosdc&lt;/a&gt; のノベルティをベッドに広げてみたわけだけどゴージャス！（これ以外に個人スポンサー向けのTシャツとパーカーも） &lt;a href=&quot;https://t.co/SeJDOg1nWK&quot;&gt;pic.twitter.com/SeJDOg1nWK&lt;/a&gt;&lt;/p&gt;&amp;mdash; あめい@バレデコ待ち (@amay077) &lt;a href=&quot;https://twitter.com/amay077/status/908683878126166016&quot;&gt;2017年9月15日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;個人スポンサー特典で頂けたパーカー含めてデザイン的にもイケてて、これでようやく Google I/O Tシャツを引退させられるし、パーカーもヘビロテすると思います（カミさんからは「おっさんがそのデザインはどうよ？」と言われたけど、負けないっ）。&lt;/p&gt;

&lt;h2 id=&quot;xamarin&quot;&gt;Xamarin&lt;/h2&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;ja&quot;&gt;&lt;p lang=&quot;ja&quot; dir=&quot;ltr&quot;&gt;【最終結果発表】&lt;a href=&quot;https://twitter.com/hashtag/iosdc?src=hash&quot;&gt;#iosdc&lt;/a&gt; 参加者のみなさん、「何で開発していますか？」 &lt;a href=&quot;https://t.co/LSAUVIuKMn&quot;&gt;pic.twitter.com/LSAUVIuKMn&lt;/a&gt;&lt;/p&gt;&amp;mdash; CyberAgentDevelopers (@ca_developers) &lt;a href=&quot;https://twitter.com/ca_developers/status/909329406979481601&quot;&gt;2017年9月17日&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;この場でこんだけ vote されてるのスゴくないすか？！&lt;/p&gt;

&lt;p&gt;なんか iOS な人たちは Web 系とのつながりが深くて、 X-Plat なら React の方を使ってると勝手に思い込んでました。&lt;/p&gt;

&lt;h2 id=&quot;カンファレンスアプリ&quot;&gt;カンファレンスアプリ&lt;/h2&gt;

&lt;p&gt;iOS のイベントだから、iOS版しか作らないのはわかってました。&lt;br /&gt;
普段使いがAndroidだから仕方ないなーと思いつつ、Webサイトのタイムテーブルが、BACKする度に初日に戻っちゃうから使いづらかったのでネイティブアプリは欲しかったですね。&lt;/p&gt;

&lt;p&gt;そんなときこそ X-Plat な Xamarin でしょ！！&lt;br /&gt;
とは自分は思っていなくて、今ならカンファレンス用のチャットボットを作ってみたい。タイムテーブルのような情報俯瞰は難しいけど、検索とかfavとか通知なら問題ないし、参加者との双方向コミュニケーションもやりやすいかもしれない（Twitterに比べて）。もちろんプラットフォーム問わないしね。&lt;/p&gt;

&lt;h2 id=&quot;next&quot;&gt;Next?&lt;/h2&gt;

&lt;p&gt;今回は懇親会は参加せず、そんなに他の人とコミュニケーション取れたわけではなかたけど、まあ焦らず（DroidKaigi も、初参加から初登壇まで３年かかってるしな）やっていこうと思います。&lt;/p&gt;

&lt;p&gt;知り合いが多いコミュニティに参加するのは心地よいけど、そこだけで満足してちゃもったいないと自分は思っていて、ましてや現在ではひとつのテクノロジーだけでプロダクトが “ビルド” できるわけでは無いのだから、自分も人見知りだけど、積極的に他のコミュニティにも参加して、その文化を学んでいきたいと思います。久しぶりに「知り合いがほぼ居ない場」に参加して、技術コミュニティに参加してみようと思ったきっかけとか、初心に戻れた気がします。&lt;/p&gt;

&lt;p&gt;最後に、僕も &lt;a href=&quot;https://www.youtube.com/watch?v=AC7C5CY1Meo&quot;&gt;ミサトさんじゃなくてマリューさん&lt;/a&gt; だな。&lt;/p&gt;
</description>
        <pubDate>Sun, 17 Sep 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/</guid>
        
        
        <category>iOS</category>
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Google Maps JavaScript API を使うときには必ず region の設定をしてくださいおねがいします</title>
        <description>&lt;p&gt;3年くらい前に&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://qiita.com/amay077/items/979dfc858a21c8bbb7a9&quot;&gt;Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;という記事を書きました。&lt;/p&gt;

&lt;p&gt;これはGoogleマップにて、「竹島や北方領土などが政府方針と反する名称で表記されているケース」があることに対して、ならば「地理院地図」を使えばいいじゃん？という内容でした。&lt;/p&gt;

&lt;p&gt;その後、Googleマップ側でも対応がなされ、「ローカライズ」という機能を使うことで、「その国の法律に準拠した地図」にすることができるようになりました（これについても前述の記事の「2013.10.17 追記」に書きました）。&lt;/p&gt;

&lt;p&gt;このローカライズについて、もう一度書きます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;日本向けのWebサービスでGoogleマップを使う場合は、必ず「ローカライズ」の機能を使用してください&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;具体的には、 次の通りです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/javascript/localization?hl=ja&quot;&gt;Google Maps JavaScript API / マップのローカライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Google Maps JavaScript API の埋め込みスクリプトタグで、&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;amp;language=ja&amp;amp;region=JP&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;のように &lt;code class=&quot;highlighter-rouge&quot;&gt;region=JP&lt;/code&gt; を付けてください、これだけです。&lt;/p&gt;

&lt;h2 id=&quot;対応どうでしょう&quot;&gt;対応どうでしょう？&lt;/h2&gt;

&lt;p&gt;さて著名なWebサービスではちゃんと設定してくれてますよね？&lt;br /&gt;
※Google Maps のスクショを貼るのは規約で禁止されているのでボカしてます（これでクリアできているとも思いませんが）。&lt;/p&gt;

&lt;h3 id=&quot;期待される表記&quot;&gt;期待される表記&lt;/h3&gt;

&lt;p&gt;いわゆる「政府方針の通りの表記」のみがされている状態&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;楽天トラベル&quot;&gt;楽天トラベル&lt;/h3&gt;

&lt;p&gt;あぼーん&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_02.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;じゃらん&quot;&gt;じゃらん&lt;/h3&gt;

&lt;p&gt;ぐえぇぇ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_03.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;ぐるなび&quot;&gt;ぐるなび&lt;/h3&gt;

&lt;p&gt;ぎゃあぁぁあ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_04.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;たべろぐ&quot;&gt;たべろぐ&lt;/h3&gt;

&lt;p&gt;お、おぅ&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/should_set_region_jp_to_googlemaps_05.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;ぜ、全滅だと・・・・。&lt;/p&gt;

&lt;h2 id=&quot;まとめ&quot;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;お願いですからGoogleマップを使うときは「ローカライズ」をしてください。&lt;br /&gt;
私自身はそんなに気にしないのですが、へんなツイートみちゃったか&lt;a href=&quot;https://twitter.com/yamazogaikuzo/status/899396971433086976&quot;&gt;ら&lt;/a&gt;。こういうことに税金使われたい？&lt;/p&gt;
</description>
        <pubDate>Mon, 21 Aug 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/08/21/should_set_region_of_googlemaps_javascript_api/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/08/21/should_set_region_of_googlemaps_javascript_api/</guid>
        
        
        <category>JavaScript</category>
        
        <category>GoogleMapsAPI</category>
        
      </item>
    
      <item>
        <title>Google Maps Android API の GoogleMap.getProjection はシングルトンじゃないから注意</title>
        <description>&lt;p&gt;Android で Google Maps を使用するときに使用する Google Maps Android API の話です。&lt;br /&gt;
&lt;!--more--&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/android-api/?hl=ja&quot;&gt;Google Maps Android API / Google Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この SDK の機能の一つに「地図座標（緯度経度）と画面座標の相互変換」というものがあります。&lt;br /&gt;
これを使うと、&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;画面中心の緯度経度を取得して、任意の外部APIを呼び出す（カーナビみたく中心位置の住所を検索するとか）&lt;/li&gt;
  &lt;li&gt;地図上のマーカーの位置に任意の View を吹き出しのように配置する&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;で、これを行うには &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMap.getProjection()&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;Projection&lt;/code&gt; クラスのインスタンスを使用して、&lt;code class=&quot;highlighter-rouge&quot;&gt;fromScreenLocation&lt;/code&gt; または &lt;code class=&quot;highlighter-rouge&quot;&gt;toScreenLocation&lt;/code&gt; を呼び出します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/maps/Projection?hl=ja&quot;&gt;Projection  /  Google APIs for Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;この &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMap.getProjection()&lt;/code&gt; で取得できるインスタンス、シングルトンというか、いつ取得しても同じインスタンスな気がしませんか？ &lt;code class=&quot;highlighter-rouge&quot;&gt;GoogleMap.getUiSettings()&lt;/code&gt; がそうであるように。 &lt;code class=&quot;highlighter-rouge&quot;&gt;map.getProjection().fromScreenLocation&lt;/code&gt;と書くのはダルいので地図の生成時に一度だけ取得して使いまわしたいと思いませんか？&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Projection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMapReady&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoogleMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 最初に取得して使い回せばいいよねー、そう思っていた時期が私にもありました・・・&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProjection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ところがこれが間違いです。&lt;/p&gt;

&lt;p&gt;ためしに「地図の位置が変わったら、画面の左上(0, 0)の緯度経度を得る」というのを書いてみます。&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Projection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMapReady&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GoogleMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 最初に取得して使い回せばいいよねー、そう思っていた時期が私にもありました・・・&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProjection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// カメラの移動が完了してアイドル状態になったときのイベント（RetroLambda使用） &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setOnCameraIdleListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 画面原点の緯度経度を得る&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;LatLng&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latlng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_proj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromScreenLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Point&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TEST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lat:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;latitude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;, long:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latlng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
    &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;地図をスクロールさせると &lt;code class=&quot;highlighter-rouge&quot;&gt;setOnCameraIdleListener&lt;/code&gt; のハンドラが呼び出されますが、期待した結果が得られません。たぶんマイナスとかゼロに近い値になっていると思います。&lt;/p&gt;

&lt;p&gt;正しい結果を得るには、&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;map.setOnCameraIdleListener(() -&amp;gt; {
    // 画面原点の緯度経度を得る
    Projection prj = map.getProjection();
    LatLng latlng = prj.fromScreenLocation(new Point(0, 0));
    Log.d(&quot;TEST&quot;, &quot;lat:&quot; + latlng.latitude + &quot;, long:&quot; + latlng.longitude); 
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;のように、「その時点での」 &lt;code class=&quot;highlighter-rouge&quot;&gt;Projection&lt;/code&gt; インスタンスを得る必要があります。&lt;/p&gt;

&lt;p&gt;さてではここで API Reference の説明を見てみましょう。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.html?hl=ja#getProjection()&quot;&gt;GoogleMap.getProjection / Google APIs for Android&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves. As this operation is expensive, you should get the projection only once per screen. Google Maps uses the Mercator projection to create its maps from geographic data and convert points on the map into geographic coordinates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;現在の投影のスナップショットを返します。カメラの移動で自動的に更新されません！！！&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;しっかり書いてあったー！&lt;/p&gt;

&lt;p&gt;Projection とは投影法（メルカトル図法）を示すもの、その投影法（＝投影を行う公式）は不変なものだから取得の度にスナップショットが作られるとは思いませんでした。&lt;br /&gt;
この挙動に気づけなくて、３時間くらい悩みつづけました。&lt;/p&gt;

&lt;p&gt;悩んだら、固定概念を捨ててキホンを見直そうぜ、という教訓になりました。が敢えて言わせてもらえれば、 &lt;code class=&quot;highlighter-rouge&quot;&gt;getCurrentProjection()&lt;/code&gt; のようなメソッド名だったら、「最初に取得して使いまわす」という発想にはならなかったかも知れません。SDK作る身として、命名にも配慮したいと思いました。&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Jul 2017 14:59:00 +0000</pubDate>
        <link>https://blog.amay077.net/blog/2017/07/28/be_careful_because_googlemap_get_projection_is_not_singleton/</link>
        <guid isPermaLink="true">https://blog.amay077.net/blog/2017/07/28/be_careful_because_googlemap_get_projection_is_not_singleton/</guid>
        
        
        <category>Android</category>
        
        <category>GoogleMapsAPI</category>
        
        <category>Java</category>
        
      </item>
    
  </channel>
</rss>
