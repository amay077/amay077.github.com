{
  "version": "https://jsonfeed.org/version/1",
  "title": "Experiments Never Fail",
  "home_page_url": "https://blog.amay077.net/",
  "feed_url": "https://blog.amay077.net/feed/feed.json",
  "description": "Try and try again",
  "author": {
    "name": "amay077",
    "url": "https://blog.amay077.net/about/"
  },
  "items": [{
      "id": "https://blog.amay077.net/posts/2021-01-12-moved_to_eleventy/",
      "url": "https://blog.amay077.net/posts/2021-01-12-moved_to_eleventy/",
      "title": "Jekyll から Eleventy に移行した",
      "content_html": "<p>以前から Jekyll はビルド時間が長い上に Ruby でよくわからんという課題があり、ローカル実行環境もうまく動かせなくなってしまったのもあって思い切って別の Static Site Generator に移行した。<br>\nJavaScript/node 製で、既存のコンテンツを活かせそうなものとして Eleventy(11ty) を選択した。</p>\n<p>以下、行ったこと。</p>\n<h2 id=\"1.-url-%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7%E7%B6%AD%E6%8C%81\">1. URL の互換性維持 <a class=\"direct-link\" href=\"#1.-url-%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7%E7%B6%AD%E6%8C%81\">#</a></h2>\n<p>ブログの各記事が <code>&lt;domain&gt;/blog/2019/11/21/toggle_vs_check/</code> というURLだったのでそれを維持するように、各postの YAML Front Matter には以下のように記述した。</p>\n<pre><code>permalink: &quot;/blog/2021/01/12//index.html&quot;\n</code></pre>\n<p><code>page_name</code> には、ファイル名の日付以降(ex.<code>toggle_vs_check</code>)を設定。<br>\nこれらを行う移行用スクリプトを作って実行した。</p>\n<h2 id=\"tag-%E3%81%AE%E7%89%B9%E6%AE%8A%E6%96%87%E5%AD%97%E5%AF%BE%E5%BF%9C\">Tag の特殊文字対応 <a class=\"direct-link\" href=\"#tag-%E3%81%AE%E7%89%B9%E6%AE%8A%E6%96%87%E5%AD%97%E5%AF%BE%E5%BF%9C\">#</a></h2>\n<p>[C#] や [F#] などの <code>#</code> が netlify ではファイル名として許可されておらずデプロイでエラーに。<br>\nそれぞれ C# → Csharp, F# → Fsharp というような置換を行うように改造した。</p>\n<p>また、Tag は大文字小文字を中途半端に区別(コンテンツとしては区別するが、URLとしては区別しない)して、期待した結果にならなかったので、ここも改造(＋CSSでCAPITALIZEをやめた)。</p>\n<h2 id=\"%E3%83%96%E3%83%AD%E3%82%B0%E8%A8%98%E4%BA%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E6%97%A5%E4%BB%98%E3%81%A8-tag-%E7%BE%A4%E3%82%92%E8%BF%BD%E5%8A%A0\">ブログ記事ページに日付と Tag 群を追加 <a class=\"direct-link\" href=\"#%E3%83%96%E3%83%AD%E3%82%B0%E8%A8%98%E4%BA%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E6%97%A5%E4%BB%98%E3%81%A8-tag-%E7%BE%A4%E3%82%92%E8%BF%BD%E5%8A%A0\">#</a></h2>\n<h2 id=\"google-analytics-%E5%B0%8E%E5%85%A5\">Google Analytics 導入 <a class=\"direct-link\" href=\"#google-analytics-%E5%B0%8E%E5%85%A5\">#</a></h2>\n<h2 id=\"todo\">TODO <a class=\"direct-link\" href=\"#todo\">#</a></h2>\n<ul>\n<li>Discus の復活</li>\n<li>portfolio の復活</li>\n<li>tag の大文字小文字整理</li>\n<li>Edit on GitHub の復活</li>\n<li>Share by twitter などの復活</li>\n</ul>\n",
      "date_published": "2021-01-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2020/12/31/year_end/",
      "url": "https://blog.amay077.net/blog/2020/12/31/year_end/",
      "title": "ふりかえり2020",
      "content_html": "<p>お仕事では2019年あたりから Web フロントエンド開発がメインになってきて、個人の関心もそちらに移ってしまった。<br>\n今年も専ら TypeScript + Angular で Web アプリを作るのがほとんど。</p>\n<!--more-->\n<p>プライベートでは、<a href=\"https://github.com/code4nagoya/covid19\">code4nagoya/covid19: 愛知県 新型コロナウイルス感染症対策サイト</a> へのコントリビュートをたくさん行った。vue.js とか python、画像認識など得るものが多かった。</p>\n<p>フロントエンドもバックエンドもコードを書いているけど、トータルでは TypeScript が 90% くらいを占めたと思う。<br>\n今年は C# や Kotlin を書いた記憶が無い・・・。</p>\n<h1 id=\"%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E9%96%A2%E9%80%A3\">プログラミング関連 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E9%96%A2%E9%80%A3\">#</a></h1>\n<h2 id=\"typescript\">TypeScript <a class=\"direct-link\" href=\"#typescript\">#</a></h2>\n<p>まだ Java や C# の延長線上な書き方しかできていないなあ、と感じる。<br>\nclass ではなく type をもっと使いこなしたいけど、ガチガチに型プログラミングを学びたい欲求も今のところはないかなー。</p>\n<h2 id=\"angular\">Angular <a class=\"direct-link\" href=\"#angular\">#</a></h2>\n<p>こちらも作りながら知識を深めている感じ。<br>\n基礎を身につけてない感があるので、ちょっとアカンかなとは思っているけど、ギョームシステムを作る上ではそこまで苦労してないのもあり。<br>\nAndulgar は息をするように RxJS が出てくるけど、これについては <a href=\"http://Rx.NET\">Rx.NET</a> や RxJava の経験が活きてる。</p>\n<h2 id=\"vue.js\">Vue.js <a class=\"direct-link\" href=\"#vue.js\">#</a></h2>\n<p>これは <a href=\"https://github.com/code4nagoya/covid19\">code4nagoya/covid19: 愛知県 新型コロナウイルス感染症対策サイト</a> へのコントリビュートで初めて触った。<br>\nまだ「在るものを触る」くらいしかできないけど、TypeScript 対応にしたり、Vue がどんなものかはなんとなく理解した。</p>\n<h2 id=\"chart.js\">Chart.js <a class=\"direct-link\" href=\"#chart.js\">#</a></h2>\n<p>COVID-19 サイトで使われているので、コントリビュートを通して詳しくなってしまった。仕事でも使う機会が発生したし。便利っすね。</p>\n<h2 id=\"webpack\">webpack <a class=\"direct-link\" href=\"#webpack\">#</a></h2>\n<p>まだなんにも理解してない。<br>\n理解してないけど、「デプロイしたら動かん」→ 「はいね webpack ね。」というトラブルシューティングはできつつある。</p>\n<h2 id=\"npm\">npm <a class=\"direct-link\" href=\"#npm\">#</a></h2>\n<p>社内に npm レジストリを立てて、社内用ライブラリはそちらへデプロイするようにした。<br>\n初めは Azure DevOps を使っていたけど、今は verdaccio を使っている（verdaccio を立てたのは自分では無いけど）。<br>\n<code>.npmrc</code> への認証情報の書き方などの知識は得た。</p>\n<h2 id=\"python\">Python <a class=\"direct-link\" href=\"#python\">#</a></h2>\n<p>COVID-19 サイトのデータ収集は <a href=\"https://github.com/code4nagoya/covid19-aichi-tools\">Python のスクリプト</a> が GitHub Actions によって定期実行されている。<br>\nデータソース(まあ、愛知県ホームページ)の仕様がほいほい変わるし、Webサイトの要件も変わるので、Python スクリプトの修正の必要になったため、手を付けた。<br>\nPython では BeautifulSoup というライブラリでデータ処理を包括的に行えるようで、「なるほど便利」という印象をもった。</p>\n<h2 id=\"%E7%94%BB%E5%83%8F%E8%AA%8D%E8%AD%98%EF%BC%88%E7%94%BB%E5%83%8F%E3%81%8B%E3%82%89%E3%81%AE%E6%96%87%E5%AD%97%E6%8A%BD%E5%87%BA%EF%BC%89\">画像認識（画像からの文字抽出） <a class=\"direct-link\" href=\"#%E7%94%BB%E5%83%8F%E8%AA%8D%E8%AD%98%EF%BC%88%E7%94%BB%E5%83%8F%E3%81%8B%E3%82%89%E3%81%AE%E6%96%87%E5%AD%97%E6%8A%BD%E5%87%BA%EF%BC%89\">#</a></h2>\n<p>こちらも COVID-19 サイトから。<br>\nとあるデータが画像でしか提供されておらず、仕方なく画像からテキストを抽出して JSON に変換する処理を組んだ。<br>\n初めは他の WebAPI を呼び出す形で検討していたのだけど、Python の pytesseract というライブラリで概ね要件を満たせる事を教えてもらい、それを使っている。ライブラリの使い方の然りだが、画像認識のために必要な前処理(クロップ、白黒化とか)や検証の重要性を学んだ。</p>\n<h2 id=\"mapbox%2C-turf.js\">Mapbox, turf.js <a class=\"direct-link\" href=\"#mapbox%2C-turf.js\">#</a></h2>\n<p>自分はもともと Geospatial なシステム開発に特化していた人間なので、久しぶりに地図関連の技術が必要になって学習している。<br>\nturf.js は「昔悩みまくってアルゴリズム実装したなー」というのがなんでもできて感動するし、MapboxV2 のプロプラ化は本当に残念。<br>\nアドベントカレンダーは・・・ちびちび埋めます。</p>\n<h1 id=\"%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E9%96%A2%E9%80%A3\">プラットフォーム関連 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E9%96%A2%E9%80%A3\">#</a></h1>\n<h2 id=\"github-actions\">GitHub Actions <a class=\"direct-link\" href=\"#github-actions\">#</a></h2>\n<p>COVID-19 サイトの定時データ抽出や、Pull Request のマージ時にビルド＆デプロイを実行するなど。<br>\n仕事では GitHub を使ってないので GitHub Actions も使う機会が無かったが、GitHub の機能を簡単に呼び出せるのはよいなと思った（PR の送信など）。</p>\n<h2 id=\"netlify%2C-jamstack\">Netlify, Jamstack <a class=\"direct-link\" href=\"#netlify%2C-jamstack\">#</a></h2>\n<p>COVID-19 サイトって、静的コンテンツのみで構成されていて、ビルドの度にコンテンツも含めた形でデプロイされているのですよね。<br>\nこれは Jamstack の一部かもしれないけど、「サイト自体は全て静的であり、データが変わったらその度にサイト自体をビルド＆デプロイし直す」って概念を初めて知ったので、結構な驚きでした。データ更新が頻繁では無いケースでは業務システムでも採用できるなと思いました。</p>\n<p>あとは Netlify というか、Deploy preview という機能にも衝撃を受けた。<br>\nプルリクエスト毎に、ステージング環境がデプロイされて、実際に試すことができるという体験が素晴らしい。<br>\nこれも静的コンテンツが全てだからやりやすい（動的コンテンツに依存していると DB や API 側も PR 毎のステージング環境を用意することは難しい）のかなと感じた。</p>\n<h2 id=\"line-bot%2C-line-%E3%83%9F%E3%83%8B%E3%82%A2%E3%83%97%E3%83%AA(liff)\">LINE BOT, LINE ミニアプリ(LIFF) <a class=\"direct-link\" href=\"#line-bot%2C-line-%E3%83%9F%E3%83%8B%E3%82%A2%E3%83%97%E3%83%AA(liff)\">#</a></h2>\n<p>LINE 上で○○するシステムを開発する案件があって。<br>\nその際に「すべて BOT でやるのつらいなー、Web アプリに飛ばすか」と想定したところにしったのが LINE ミニアプリ。<br>\nLINE上で動作するWebアプリのことで、既にサービスとして提供されているミニアプリもあった。<br>\n「LINEポケオ」はその一つで、弁当などのテイクアウトを予約・支払いできるサービスだ。<br>\n注文や支払いはLINEミニアプリで行えるし、通知はLINEメッセージが飛んでくるので、モバイルアプリをインストールする必要が無い。<br>\nモバイルアプリの欠点(インストールの壁、通知や決済実装の面倒さ)をうまくカバーできて、今後も活かせそうなプラットフォームと認識した。</p>\n<h1 id=\"aws-%E9%96%A2%E9%80%A3\">AWS 関連 <a class=\"direct-link\" href=\"#aws-%E9%96%A2%E9%80%A3\">#</a></h1>\n<h2 id=\"cloudformation\">CloudFormation <a class=\"direct-link\" href=\"#cloudformation\">#</a></h2>\n<p>仕事では、Lambda + API Gateway + S3 という組み合わせが多くて。<br>\nそして弊社は小さめの業務Webシステムをたくさん開発するので、環境構築が面倒で。<br>\nで CloudFormation(CFn)を勉強して、スクリプトで環境をデプロイできるようにした。<br>\nこれはこれである程度役に立っているが、弊社の構成もバージョンアップして変化し続けているので、それへの追従が課題。</p>\n<h2 id=\"aws-amplify\">AWS Amplify <a class=\"direct-link\" href=\"#aws-amplify\">#</a></h2>\n<p>上記のような弊社の案件スタイルは AWS Amplify とマッチするんじゃないかなあと思って調べて、実際マッチすると思うけど、活用まで至ってない。<br>\nAmplify CLI で、S3に代わる static site hosting 環境と API は構築できると思うので、後は弊社用に調整したら、もっと手間が省けそうだ。2021年のネタのひとつ。</p>\n<h1 id=\"azure-%E9%96%A2%E9%80%A3\">Azure 関連 <a class=\"direct-link\" href=\"#azure-%E9%96%A2%E9%80%A3\">#</a></h1>\n<h2 id=\"bot-app\">BOT App <a class=\"direct-link\" href=\"#bot-app\">#</a></h2>\n<p>Microsoft Bot Framework v4(node.js) で BOT を開発して、Azure Bot App へデプロイ、LINE と接続して公開、を経験した。<br>\nMicrosoft Bot Framework と Azure は無関係な(AWS にデプロイしてもよい)はずで、そのあたりの理解が課題。<br>\nBot Framework v2 以来だったが、活きた過去の経験は体感 30% くらいだった。</p>\n<h2 id=\"luis\">LUIS <a class=\"direct-link\" href=\"#luis\">#</a></h2>\n<p>こちらも2年ぶりくらいに使用。<br>\nなんか Azure の一部になってみたいで、設定で苦労した。</p>\n<h2 id=\"azure-database-for-postgresql\">Azure Database for PostgreSQL <a class=\"direct-link\" href=\"#azure-database-for-postgresql\">#</a></h2>\n<p>これのおかげで SQL Server を使わずに済んだ。<br>\n「フレキシブル サーバー」ってやつを使うと、開発用DBのコストを下げられそうなので、次回があったら使いたい。</p>\n<h1 id=\"%E5%83%8D%E3%81%8D%E6%96%B9%E6%94%B9%E9%9D%A9%EF%BC%9F\">働き方改革？ <a class=\"direct-link\" href=\"#%E5%83%8D%E3%81%8D%E6%96%B9%E6%94%B9%E9%9D%A9%EF%BC%9F\">#</a></h1>\n<p>元々フルリモートだったので、COVID-19 禍でも働き方についてはまったく変化なく。<br>\nいや、年に2～3回は客先に対面打合せに行っていたのが、今年はゼロになりWeb打合せになったのは小さな変化かな。</p>\n<p>2021年も大きな情勢の変化はなさそうなので、自分の興味に忠実に過ごしたいと思います。</p>\n",
      "date_published": "2020-12-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2020/03/12/cddd1bbd158ea4e79647/",
      "url": "https://blog.amay077.net/blog/2020/03/12/cddd1bbd158ea4e79647/",
      "title": "Vue+Nuxt+TypeScript のプロジェクトを VSCode でデバッグ可能にする",
      "content_html": "<p>vue 初心者です。<br>\nAngular のマネをしたら、なんだかできたのでメモしておきます。</p>\n<!--more-->\n<p>vue のプロジェクトは <a href=\"https://github.com/tokyo-metropolitan-gov/covid19\">tokyo-metropolitan-gov/covid19</a> から派生した <a href=\"https://github.com/code4nagoya/covid19\">code4nagoya/covid19: 愛知県 新型コロナウイルス感染症対策サイト</a> を使います。</p>\n<p>VSCode の拡張機能は、</p>\n<ul>\n<li>Vetur</li>\n<li>Debugger for Chrome</li>\n</ul>\n<p>を入れています。</p>\n<h2 id=\"1.-sourcemap-%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B\">1. SourceMap を有効にする <a class=\"direct-link\" href=\"#1.-sourcemap-%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B\">#</a></h2>\n<p><code>nuxt.config.ts</code> に sourceMap を有効にする設定を記述します。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">  ＜省略＞<br>  googleAnalytics<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    id<span class=\"token operator\">:</span> <span class=\"token string\">'xxx'</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  build<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">//// 追加ここから</span><br>    <span class=\"token function\">extend</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> isClient <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isClient<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        config<span class=\"token punctuation\">.</span>devtool <span class=\"token operator\">=</span> <span class=\"token string\">'source-map'</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token comment\">//// 追加ここまで</span><br>    postcss<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>      plugins<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token function\">autoprefixer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> grid<span class=\"token operator\">:</span> <span class=\"token string\">'autoplace'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token function\">purgecss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>          content<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>  ＜省略＞</code></pre>\n<h2 id=\"2.-vscode-%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">2. VSCode のタスクを追加する <a class=\"direct-link\" href=\"#2.-vscode-%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p><code>.vscode/tasks.json</code> に、デバッグを開始するためのタスクを追加します。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>    <span class=\"token punctuation\">{</span><br>      <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn-dev\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"isBackground\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn dev\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token property\">\"owner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"custom\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"pattern\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>          <span class=\"token property\">\"regexp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^$\"</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>          <span class=\"token property\">\"activeOnStart\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>          <span class=\"token property\">\"beginsPattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn run.*\"</span><span class=\"token punctuation\">,</span><br>          <span class=\"token property\">\"endsPattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".*Waiting for file changes.*\"</span><br>        <span class=\"token punctuation\">}</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>yarn dev</code> でローカルサーバーを起動、Webアプリが配置されますが、それをバックグラウンドで行うタスクです。<br>\n<code>yarn dev</code> コマンドは、その開始時に <code>yarn run</code> という文字列が出力されるので、それをタスクの開始を示す <code>beginsPattern</code> に指定します。<br>\n同じく、<code>yarn dev</code> でローカルサーバーの準備ができたときに <code>Waiting for file changes</code> という文字が出力されるので、それを &quot;endsPattern&quot; に指定しておきます。<br>\nつまり <code>Waiting for file changes</code> が来たら、このタスクは終了となります。</p>\n<h2 id=\"3.-vscode-%E3%81%AE%E8%B5%B7%E5%8B%95%E8%A8%AD%E5%AE%9A%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">3. VSCode の起動設定を追加する <a class=\"direct-link\" href=\"#3.-vscode-%E3%81%AE%E8%B5%B7%E5%8B%95%E8%A8%AD%E5%AE%9A%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p><code>.vscode/launch.json</code> に、デバッグを開始する設定を記述します。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>    <span class=\"token punctuation\">{</span><br>      <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Launch Chrome\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:3000\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"webRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"yarn-dev\"</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Chrome を起動して <a href=\"http://localhost:3000\">http://localhost:3000</a> を開くというコマンドですが、<code>&quot;preLaunchTask&quot;: &quot;yarn-dev&quot;</code> とすることで、バックグラウンドで <code>yarn dev</code> の準備ができたらブラウザを起動する、という挙動になります。</p>\n<h2 id=\"4.-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">4. デバッグ実行してみる <a class=\"direct-link\" href=\"#4.-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>例えば <code>pages/about.vue</code> のタイトルを返す行あたりにブレークポイントを張って、<br>\nF5 キーまたはメニュー -&gt; Debug -&gt; Start Debugging を実行します。</p>\n<p>しばらく待つとブラウザでページが表示されるので、「当サイトについて」を押すと、ブレークポイントで停まります。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/437d0d5e-b570-3eb5-4994-72772628f708.png\" alt=\"image.png\"></p>\n<p>（なぜか仕掛けた行で止まってくれないこともあるけど、大目に見よう）</p>\n<p>vue.js は何もわからないので、もっと良いやり方があったら教えて下さい。</p>\n<p>今回の修正差分は</p>\n<ul>\n<li><a href=\"https://github.com/amay077/covid19-1/commit/eb717611210af1477e0b2b90c72d805b7c56e009\">https://github.com/amay077/covid19-1/commit/eb717611210af1477e0b2b90c72d805b7c56e009</a></li>\n</ul>\n<p>です。</p>\n<h2 id=\"%E7%89%A9%E8%B6%B3%E3%82%8A%E3%81%AA%E3%81%84%E3%81%A8%E3%81%93%E3%82%8D\">物足りないところ <a class=\"direct-link\" href=\"#%E7%89%A9%E8%B6%B3%E3%82%8A%E3%81%AA%E3%81%84%E3%81%A8%E3%81%93%E3%82%8D\">#</a></h2>\n<p>F5 でデバッグ開始できるようになりましたが、Shift + F5（あるいはメニュー -&gt; Debug -&gt; Stop Debugging）すると、ブラウザは閉じますが、バックグラウンドで動いているローカルサーバーは停止しません。ファイル監視モードで常駐しているので放置でも問題ないですが、ちょっと気持ち悪いです。停止させるには Terminal で Ctrl+c しなければなりません。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/62e1eb656fbd730b3dd1\">Angular + VSCode でデバッグ開始したときに ng serve する - Qiita</a></li>\n<li><a href=\"https://github.com/microsoft/vscode-recipes/blob/master/vuejs-cli/README.md\">vscode-recipes/README.md at master · microsoft/vscode-recipes</a></li>\n<li><a href=\"https://codeburst.io/debugging-nuxt-js-with-visual-studio-code-724920140b8f\">Debugging Nuxt.js with Visual Studio Code - codeburst</a>  ※情報古いな</li>\n</ul>\n",
      "date_published": "2020-03-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2020/03/05/81bbb556b9d6063370fb/",
      "url": "https://blog.amay077.net/blog/2020/03/05/81bbb556b9d6063370fb/",
      "title": "Serverless Framework で AWS Lambda と API Gateway をデプロイする",
      "content_html": "<p><a href=\"https://serverless.connpass.com/event/165352/\">Serverless Meetup Tokyo #16 （オンライン開催）</a> を拝見していて、ちょうど今、AWS への各種リソースのデプロイの自動化が課題だったので、よい機会と思い Serverless Framework を使ってみた。<br>\n尚、Serlverless Framwork については知っていたが、offline-start しか使ったことがなかった程度の人間です。</p>\n<!--more-->\n<h2 id=\"%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\">やったこと <a class=\"direct-link\" href=\"#%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\">#</a></h2>\n<p>弊社では Webシステムを、</p>\n<ul>\n<li>フロントエンド: SPA(Angular)</li>\n<li>バックエンド:\n<ul>\n<li>REST っぽいAPI: Lambda + API Gateway</li>\n<li>DB: PostgreSQL 他</li>\n</ul>\n</li>\n</ul>\n<p>で組むことが増えてきていて、プロジェクトの取っ掛かり時の環境構築を手動でやっているのがダルくなってきた。<br>\n今回は、「REST っぽいAPI: Lambda + API Gateway」のところを Serverless Framework で自動化してみた。</p>\n<h2 id=\"%E6%89%8B%E9%A0%86\">手順 <a class=\"direct-link\" href=\"#%E6%89%8B%E9%A0%86\">#</a></h2>\n<h3 id=\"1.-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E7%94%A8-iam-%E3%81%AE%E4%BD%9C%E6%88%90\">1. 環境構築用 IAM の作成 <a class=\"direct-link\" href=\"#1.-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%E7%94%A8-iam-%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>IAM コンソールで「serverless_deployment」という名前で作成。以下のポリシーをアタッチした。</p>\n<ul>\n<li>AWSLambdaFullAccess</li>\n<li>AmazonS3FullAccess</li>\n<li>AmazonAPIGatewayAdministrator</li>\n<li>AWSCloudFormationFullAccess</li>\n</ul>\n<p>さらに、以下のようなインラインポリシーを追加した。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"Version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2012-10-17\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"Statement\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"Sid\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"VisualEditor0\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"Effect\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Allow\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"Action\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>                <span class=\"token string\">\"iam:DeleteRolePolicy\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token string\">\"iam:CreateRole\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token string\">\"iam:DeleteRole\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token string\">\"iam:PutRolePolicy\"</span><br>            <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"Resource\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"*\"</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>IAMFullAccess はさすがにヤバいかなと思い必要な権限だけ抽出したものだが、たぶん他の xxxFullAccess も必要なものだけにした方がよいだろう。</p>\n<p>作成した IAM のアクセスキーなどを自PCの <code>~/.aws/credentials</code> に追加した。ちなみに環境は Windows 10 内の WSL(Ubuntu)。</p>\n<p><strong>.aws/credentials</strong></p>\n<pre><code>[serverless-deployment]\naws_access_key_id = AKIAxxxxx\naws_secret_access_key = 49s9xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n</code></pre>\n<h3 id=\"2.-%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">2. ツールのインストール <a class=\"direct-link\" href=\"#2.-%E3%83%84%E3%83%BC%E3%83%AB%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h3>\n<p>awscli は現在最新の v2 をインストール</p>\n<ul>\n<li><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-linux.html#cliv2-linux-install\">Installing the AWS CLI version 2 on Linux - AWS Command Line Interface</a></li>\n</ul>\n<p>node は 12.14.1</p>\n<ul>\n<li><a href=\"https://nodejs.org/ja/\">Node.js</a></li>\n</ul>\n<p>そして Serverless Framework をインストールする。</p>\n<ul>\n<li><a href=\"https://serverless.com/\">Serverless - The Serverless Application Framework powered by AWS Lambda, API Gateway, and more</a></li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> serverless -g<br><br><span class=\"token builtin class-name\">source</span> ~/.bash_profile<br>serverless --version<br><br><span class=\"token operator\">></span> Framework Core: <span class=\"token number\">1.65</span>.0<br><span class=\"token operator\">></span> Plugin: <span class=\"token number\">3.4</span>.1<br><span class=\"token operator\">></span> SDK: <span class=\"token number\">2.3</span>.0<br><span class=\"token operator\">></span> Components: <span class=\"token number\">2.22</span>.3</code></pre>\n<p>global じゃなくてもいいけど、パス通すのが面倒なので。</p>\n<h2 id=\"3.-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%8B%E3%82%89%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">3. テンプレートからプロジェクトの作成 <a class=\"direct-link\" href=\"#3.-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%8B%E3%82%89%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">serverless create --template aws-nodejs</code></pre>\n<p>で、nodejs のテンプレートから Serverless Framework のプロジェクトを作成。</p>\n<p>また、<code>npm init</code> で適当に <code>package.json</code> を作って、</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save-dev serverless-plugin-custom-binary</code></pre>\n<p>を実行しておく。これは後に必要になるプラグイン。</p>\n<p><code>ls</code> すると以下のようなファイルとディレクトリがある。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">handler.js  node_modules  package-lock.json  package.json  serverless.yml</code></pre>\n<h3 id=\"4.-serverless.yml-%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B\">4. serverless.yml を編集する <a class=\"direct-link\" href=\"#4.-serverless.yml-%E3%82%92%E7%B7%A8%E9%9B%86%E3%81%99%E3%82%8B\">#</a></h3>\n<p><code>serverless.yml</code> を開いて次のように編集する（これだと最早テンプレートの意味ないが）。</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">service</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>awesome<span class=\"token punctuation\">-</span>service<br><br><span class=\"token key atrule\">plugins</span><span class=\"token punctuation\">:</span><br>  <span class=\"token punctuation\">-</span> serverless<span class=\"token punctuation\">-</span>plugin<span class=\"token punctuation\">-</span>custom<span class=\"token punctuation\">-</span>binary<br><br><span class=\"token key atrule\">custom</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">apiGateway</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">binaryMediaTypes</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> image/jpeg<br><br><span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> aws<br>  <span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> nodejs12.x<br>  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>opt<span class=\"token punctuation\">:</span>stage<span class=\"token punctuation\">,</span> <span class=\"token string\">'dev'</span><span class=\"token punctuation\">}</span><br>  <span class=\"token key atrule\">region</span><span class=\"token punctuation\">:</span> ap<span class=\"token punctuation\">-</span>northeast<span class=\"token punctuation\">-</span><span class=\"token number\">1</span><br>  <span class=\"token key atrule\">apiName</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span><br><br><span class=\"token key atrule\">functions</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">api</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">handler</span><span class=\"token punctuation\">:</span>  handler.hello<br>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> $<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>service<span class=\"token punctuation\">}</span><span class=\"token punctuation\">-</span>api<span class=\"token punctuation\">-</span>$<span class=\"token punctuation\">{</span>self<span class=\"token punctuation\">:</span>provider.stage<span class=\"token punctuation\">}</span><br>    <span class=\"token key atrule\">events</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">http</span><span class=\"token punctuation\">:</span><br>          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> /<span class=\"token punctuation\">{</span>proxy+<span class=\"token punctuation\">}</span><br>          <span class=\"token key atrule\">method</span><span class=\"token punctuation\">:</span> get<br>          <span class=\"token key atrule\">integration</span><span class=\"token punctuation\">:</span> lambda</code></pre>\n<p>まず <code>service: my-awesome-service</code>、これが AWS に作成されるリソース名の元になるのでちゃんと考えて命名しよう。重複したらどうなちゃうのかは不明。 <a href=\"https://qiita.com/ybiquitous/items/75288bacb596a82a2805\"><strong>kebab-case</strong></a> を採用しておくと良いと思われる。例えばサービス名で S3 Bucket を作りたいとき、Bucket 名は CamelCase(大文字) を許可してないため。</p>\n<p>次に Plugins と binaryMediaTypes。これを行うために先に serverless-plugin-custom-binary をインストールしておいた。</p>\n<p>provider-apiName。これは API Gateway の名前なんだけど、これをしない場合 <code>&lt;stage名&gt;-&lt;service名&gt;</code> になる。Lambda とかは <code>&lt;service名&gt;-&lt;stage名&gt;</code> となり逆で気持ち悪いので、他の同じになるように直している。</p>\n<p>stage: ${opt:stage, 'dev'}。単純に <code>stage: dev</code> とするだけだと、 <code>--stage prod</code> を引数で指定された値が <code>${self:provider.stage}</code> に代入されないので注意。</p>\n<p>functions-api。Labmda に <code>&lt;service名&gt;-&lt;stage名&gt;-api</code> という名前の関数が作成される。&quot;api&quot; は任意の名称で ok。</p>\n<p>functions-api-name。既定だと <code>&lt;service名&gt;-&lt;stage名&gt;-api</code> になるが、<code>&lt;service名&gt;-api-&lt;stage名&gt;</code>にしたい(stage名は最後尾に統一したい) ので <code>name: ${self:service}-api-${self:provider.stage}</code> とした。</p>\n<p>handler:  handler.hello。 <code>handles.js</code> の hello 関数を呼び出すの意。</p>\n<p>path: /{proxy+}。呼び出し URL のパス部分を全てスルーする。<code>https://hoge.net/dev/fuga/piyo/gege</code> とか。</p>\n<p>integration: lambda。既定で ON ぽいので要らないかも。</p>\n<h3 id=\"5.-aws-%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B\">5. AWS にデプロイする <a class=\"direct-link\" href=\"#5.-aws-%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B\">#</a></h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">serverless deploy --aws-profile serverless-deployment</code></pre>\n<p>を実行する。<code>--aws-profile serverless-deployment</code> で AWSプロファイルを指定している事に注意。</p>\n<pre><code>Serverless: Packaging service...\nServerless: Excluding development dependencies...\nServerless: Creating Stack...\nServerless: Checking Stack create progress...\n........\nServerless: Stack create finished...\nServerless: Uploading CloudFormation file to S3...\nServerless: Uploading artifacts...\nServerless: Uploading service MyAwesomeService.zip file to S3 (1.13 KB)...\nServerless: Validating template...\nServerless: Updating Stack...\nServerless: Checking Stack update progress...\n...............................\nServerless: Stack update finished...\nService Information\nservice: MyAwesomeService\nstage: dev\nregion: ap-northeast-1\nstack: MyAwesomeService-dev\nresources: 11\napi keys:\n  None\nendpoints:\n  GET - https://xxxx.execute-api.ap-northeast-1.amazonaws.com/dev/{proxy+}\nfunctions:\n  api: MyAwesomeService-dev-api\nlayers:\n  None\nServerless: Run the &quot;serverless&quot; command to setup monitoring, troubleshooting and testing.\n</code></pre>\n<p>なんやかんや実行されてデプロイされたみたい。</p>\n<h3 id=\"6.-%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%95%E3%82%8C%E3%81%9F%E3%81%8B%E7%A2%BA%E8%AA%8D\">6. デプロイされたか確認 <a class=\"direct-link\" href=\"#6.-%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%95%E3%82%8C%E3%81%9F%E3%81%8B%E7%A2%BA%E8%AA%8D\">#</a></h3>\n<h4 id=\"api-gateway\">API Gateway <a class=\"direct-link\" href=\"#api-gateway\">#</a></h4>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/061865db-2644-945c-bd22-30aa39746845.png\" alt=\"image.png\"></p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/320b3303-657a-4d0c-c3f8-59ea5d572482.png\" alt=\"image.png\"></p>\n<h4 id=\"lambda\">Lambda <a class=\"direct-link\" href=\"#lambda\">#</a></h4>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/d0a87c53-babc-05d6-bda4-74f38ae4fa01.png\" alt=\"image.png\"></p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e3827772-e025-a0d3-545a-cca87071cfba.png\" alt=\"image.png\"></p>\n<p>cURL で呼び出してみる。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"> <span class=\"token function\">curl</span> https://xxxx.execute-api.ap-northeast-1.amazonaws.com/dev/aaa/bbb/ccc</code></pre>\n<pre><code>{&quot;statusCode&quot;:200,&quot;body&quot;:&quot;{\\n  \\&quot;message\\&quot;: \\&quot;Go Serverless v1.0! Your function executed successfully!\\&quot;...\n</code></pre>\n<p>うまくいったみたい。</p>\n<h3 id=\"7.-%E5%BE%8C%E7%89%87%E4%BB%98%E3%81%91%EF%BC%88%E5%89%8A%E9%99%A4%EF%BC%89\">7. 後片付け（削除） <a class=\"direct-link\" href=\"#7.-%E5%BE%8C%E7%89%87%E4%BB%98%E3%81%91%EF%BC%88%E5%89%8A%E9%99%A4%EF%BC%89\">#</a></h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">serverless remove --aws-profile serverless-deployment</code></pre>\n<p>ですべてのリソースがキレイさっぱり消えます。これはこれで怖いので IAM の権限で制限したほうが良さそう。</p>\n<h2 id=\"%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\">トラブルシューティング <a class=\"direct-link\" href=\"#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\">#</a></h2>\n<h3 id=\"q%3A-%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%8C%E5%85%A8%E7%84%B6%E7%B5%82%E3%82%8F%E3%82%89%E3%81%AA%E3%81%84\">Q: デプロイが全然終わらない <a class=\"direct-link\" href=\"#q%3A-%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%8C%E5%85%A8%E7%84%B6%E7%B5%82%E3%82%8F%E3%82%89%E3%81%AA%E3%81%84\">#</a></h3>\n<p>A: Console から CloudFormation の該当スタックを削除してリトライ</p>\n<h3 id=\"q%3A-sls-deploy-%E3%82%84-remove-%E3%81%8C%E3%80%8Cs3-%E3%81%AE%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%8C%E7%84%A1%E3%81%84%E3%80%8D%E3%81%A8%E3%81%8B%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8B\">Q: sls deploy や remove が「S3 のバケットが無い」とかでエラーになる <a class=\"direct-link\" href=\"#q%3A-sls-deploy-%E3%82%84-remove-%E3%81%8C%E3%80%8Cs3-%E3%81%AE%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%8C%E7%84%A1%E3%81%84%E3%80%8D%E3%81%A8%E3%81%8B%E3%81%A7%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8B\">#</a></h3>\n<p>A: 該当バケット(<code>my-awesome-service-veri-serverlessdeploymentbucke-rzr9e2jjdrlv</code> のようなごちゃごちゃしたやつ) を手動作成するか、Console から CloudFormation の該当スタックを削除してリトライ</p>\n<h2 id=\"%E4%BB%8A%E5%BE%8C%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\">今後やりたいこと <a class=\"direct-link\" href=\"#%E4%BB%8A%E5%BE%8C%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\">#</a></h2>\n<ul>\n<li>Lambda へ VPC の設定</li>\n<li>Lambda タイムアウト値の設定</li>\n<li>スクリプトでビルドとか Webpack した結果を Serverless でデプロイ</li>\n<li>S3 Bucket の作成</li>\n<li>S3 に SPA をデプロイ</li>\n<li>リソース権限周りをもっと深堀り</li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://serverless.com/framework/docs/providers/aws/guide/intro/\">Serverless Framework - AWS Lambda Guide - Introduction</a></li>\n<li><a href=\"https://serverless.com/framework/docs/providers/aws/guide/variables/\">Serverless Variables</a></li>\n<li><a href=\"https://qiita.com/makoll/items/5f330b2469e310474c4e\">Serverless FlameworkでAPI Gatewayのバイナリメディアタイプを設定する方法 - Qiita</a></li>\n<li><a href=\"https://qiita.com/maaaashin324/items/9e5d3f02fca94989e9f6\">Serverless Framework で API Gateway &amp; Lambda を構築する - Qiita</a></li>\n<li><a href=\"https://qiita.com/wara_be/items/f3ec38e5be6bdea7c79d\">Serverlessで任意のディレクトリ配下に、関数毎にディレクトリを切ってソースを配置する with webpack building - Qiita</a></li>\n<li><a href=\"https://qiita.com/aical/items/c498c5a69b66b1ea7c3d\">一時的にPATHを追加する（Linux） - Qiita</a></li>\n<li><a href=\"http://hkou.hatenablog.com/entry/2018/05/07/213412\">ServerlessFrameworkでS3の静的サイトのホスティングをする - マコーの日記</a></li>\n</ul>\n",
      "date_published": "2020-03-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2020/02/24/386da362df3ecc0157e2/",
      "url": "https://blog.amay077.net/blog/2020/02/24/386da362df3ecc0157e2/",
      "title": "MapBox GL JS でラベル付きマーカー",
      "content_html": "<p>MapBox GL のサンプルにカスタムマーカーがあるので、それを参考に「ラベル付きのマーカー」を実現してみた。</p>\n<!--more-->\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/6332001c-8d5c-f095-235e-672f1ccf4bd7.png\" alt=\"image.png\"></p>\n<p>動作するサンプルはこちら。</p>\n<ul>\n<li><a href=\"https://jsfiddle.net/amay077/vn3741o6/15/\">MapBox GL JS Marker with label / JSFiddle - Code Playground</a></li>\n</ul>\n<h2 id=\"%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">ソースコード <a class=\"direct-link\" href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p><strong>index.html</strong></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>utf-8<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>viewport<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>initial-scale=1,maximum-scale=1,user-scalable=no<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://fonts.googleapis.com/css?family=Open+Sans<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://api.tiles.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>https://api.tiles.mapbox.com/mapbox-gl-js/v1.8.0/mapbox-gl.css<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>stylesheet<span class=\"token punctuation\">'</span></span> <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>screen<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><br>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>map<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>marker<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>marker-container<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>marker-title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>marker-icon<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://img.icons8.com/ios-filled/40/0000FF/marker.png<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./index.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>index.css</strong></p>\n<pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">#map</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">.marker-container</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex<span class=\"token punctuation\">;</span> <br>  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> column<span class=\"token punctuation\">;</span> <br>  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span> <br>  <span class=\"token property\">cursor</span><span class=\"token punctuation\">:</span> pointer<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">.marker-title</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">text-overflow</span><span class=\"token punctuation\">:</span> ellipsis<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">white-space</span><span class=\"token punctuation\">:</span> nowrap<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">.marker-icon</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 30px<span class=\"token punctuation\">;</span> <br>  <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span> <br>  <span class=\"token property\">background-size</span><span class=\"token punctuation\">:</span> cover<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">.mapboxgl-popup</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token selector\">.mapboxgl-popup-content</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span><br>  <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Open Sans'</span><span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>index.js</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> geojson <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>  type<span class=\"token operator\">:</span> <span class=\"token string\">'FeatureCollection'</span><span class=\"token punctuation\">,</span><br>  features<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><br>    type<span class=\"token operator\">:</span> <span class=\"token string\">'Feature'</span><span class=\"token punctuation\">,</span><br>    geometry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    type<span class=\"token operator\">:</span> <span class=\"token string\">'Point'</span><span class=\"token punctuation\">,</span><br>      coordinates<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">77.032</span><span class=\"token punctuation\">,</span> <span class=\"token number\">38.913</span><span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>      title<span class=\"token operator\">:</span> <span class=\"token string\">'Mapbox'</span><span class=\"token punctuation\">,</span><br>      description<span class=\"token operator\">:</span> <span class=\"token string\">'Washington, D.C.'</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token punctuation\">{</span><br>    type<span class=\"token operator\">:</span> <span class=\"token string\">'Feature'</span><span class=\"token punctuation\">,</span><br>    geometry<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>      type<span class=\"token operator\">:</span> <span class=\"token string\">'Point'</span><span class=\"token punctuation\">,</span><br>      coordinates<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">122.414</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37.776</span><span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    properties<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>      title<span class=\"token operator\">:</span> <span class=\"token string\">'Mapbox'</span><span class=\"token punctuation\">,</span><br>      description<span class=\"token operator\">:</span> <span class=\"token string\">'San Francisco, California'</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mapboxgl<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  container<span class=\"token operator\">:</span> <span class=\"token string\">'map'</span><span class=\"token punctuation\">,</span><br>  center<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">96</span><span class=\"token punctuation\">,</span> <span class=\"token number\">37.8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  zoom<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span><br>  style<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"sources\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token string\">\"OSM\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"raster\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"tiles\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'http://a.tile.openstreetmap.org/{z}/{x}/{y}.png'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"tileSize\"</span><span class=\"token operator\">:</span> <span class=\"token number\">256</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"layers\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><br>      <span class=\"token string\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OSM\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"raster\"</span><span class=\"token punctuation\">,</span><br>      <span class=\"token string\">\"source\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"OSM\"</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>geojson<span class=\"token punctuation\">.</span>features<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">marker</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br><br>  <span class=\"token comment\">// Create element for marker from template</span><br>  <span class=\"token keyword\">const</span> template <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'marker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> clone <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">importNode</span><span class=\"token punctuation\">(</span>template<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> el <span class=\"token operator\">=</span> clone<span class=\"token punctuation\">.</span>firstElementChild<span class=\"token punctuation\">;</span><br>  <br>  clone<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> marker<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>description<span class=\"token punctuation\">;</span><br>  <br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">mapboxgl<span class=\"token punctuation\">.</span>Marker</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> anchor<span class=\"token operator\">:</span> <span class=\"token string\">'bottom'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">setLngLat</span><span class=\"token punctuation\">(</span>marker<span class=\"token punctuation\">.</span>geometry<span class=\"token punctuation\">.</span>coordinates<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">setPopup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">mapboxgl<span class=\"token punctuation\">.</span>Popup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> offset<span class=\"token operator\">:</span> <span class=\"token number\">60</span><span class=\"token punctuation\">,</span> anchor<span class=\"token operator\">:</span> <span class=\"token string\">'bottom'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// add popups</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">setHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h3>'</span> <span class=\"token operator\">+</span> marker<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>title <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/h3>&lt;p>'</span> <span class=\"token operator\">+</span> marker<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>description <span class=\"token operator\">+</span> <span class=\"token string\">'&lt;/p>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ol>\n<li>マーカーとして使用する HTML 要素を <code>template</code> タグで用意しておきます。</li>\n<li>マーカーごとに <code>template</code> から要素を生成(<code>importNode</code> で複製しないと同じ要素が使い回されるので注意)してラベルを設定、その要素から MapBox の Marker を生成します。</li>\n</ol>\n<p>※地図を OpenStreetMaps にしているのは、MapBox の地図を表示するには AccessToken を設定する必要があるためです。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://docs.mapbox.com/help/tutorials/custom-markers-gl-js/\">Add custom markers in Mapbox GL JS | Help | Mapbox</a></li>\n<li><a href=\"http://hinoshita.hatenadiary.com/entry/2018/07/31/163225\">mapbox-gl.jsでOSMを表示 - hinosita's diary</a></li>\n</ul>\n",
      "date_published": "2020-02-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2020/02/15/d090838479eab90f4abb/",
      "url": "https://blog.amay077.net/blog/2020/02/15/d090838479eab90f4abb/",
      "title": "Debugger for Chrome の launch で Google  アカウントでのログインができなくなった件",
      "content_html": "<p>Firebase Auth を使った Web アプリを VSCode にて開発中、昨年(2019年)末からだと思うのですけど、Google アカウントでのログインができなくなったことに気づきました。</p>\n<!--more-->\n<p>あ、これを書いてる時点の Chrome バージョンは 80.0.3987.106（Official Build） （64 ビット）で、OS は Windows 10 Pro で依然として再現しています。</p>\n<p>Web アプリ開発で、VSCode に <a href=\"https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome\">Debugger for Chrome</a> を追加して  <code>launch.json</code> に次のように記述する方法はよく知られています。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>      <span class=\"token punctuation\">{</span><br>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Debug with Chrome\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:4200\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"webRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>が、これで起動される Chrome では、Google アカウントでのログインができず、次のようなエラーになってしまいます。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/0a705bb3-7981-a565-37e4-5ddc7b0d1b0c.png\" alt=\"image.png\"></p>\n<p>なぜこれが発生するのかは私は完全に理解していませんが、起動された Chrome がセキュリティ要件を満たさないものと推測されます。（同じ時期に、Google アカウントを利用したゲームにログインできなくなった、というような話題を主に海外で発見しました。）</p>\n<h2 id=\"%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\">解決方法 <a class=\"direct-link\" href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\">#</a></h2>\n<p>ということをツイートしたら、有用な情報を頂きました。ありがとうございます。</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">ん、私はなんか出来てますね。<br>Debugger用にprofileを分けてるからっていうのもあるかもしれません。<br>&quot;webRoot&quot;: &quot;${workspaceFolder}&quot;,<br>&quot;sourceMaps&quot;: true,<br>&quot;userDataDir&quot;: &quot;${workspaceRoot}/.vscode/chrome&quot;,<br>こんな感じで、プロファイルを.vscode以下に作るようにしてます。</p>&mdash; ちゅうこ (@y_chu5) <a href=\"https://twitter.com/y_chu5/status/1228329982021095427?ref_src=twsrc%5Etfw\">February 14, 2020</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>さらに調べたところ、  <code>launch.json</code> に次のように <code>userDataDir</code> を追記することで解決できました。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>      <span class=\"token punctuation\">{</span><br>        <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Debug with Chrome\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:4200\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"webRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token property\">\"userDataDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span> <br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>&quot;userDataDir&quot;: &quot;&quot;</code> と空文字を指定すると、起動する Chrome がいつものユーザー、いつものプロファイルになり、Google アカウントでのログインも行えるようになりました。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e0a3c886-482d-0577-5209-00892e5d4746.png\" alt=\"image.png\"></p>\n<p>注意点は、この指定で起動される Chrome は、普段使いの Chrome が既に起動済の場合は、そのプロセスを流用する、ということです。</p>\n<p>そのため、</p>\n<ul>\n<li>開発中のアプリが死ぬと普段使いのタブも道連れに死ぬ</li>\n<li>普段使いの Chrome もデバッグ用のポートを開けておかないとデバッグできない</li>\n</ul>\n<p>という注意点があります。</p>\n<p>普段使う Chrome のショートカットに引数を追加しておきます（最初から付いてたっけ？）。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8ee7f851-730b-e6d6-a792-7e35792891fc.png\" alt=\"image.png\"></p>\n<pre><code>&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot; --profile-directory=Default --remote-debugging-port=9222\n</code></pre>\n<h2 id=\"%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\">その他の解決方法 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\">#</a></h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/ja-jp/microsoft-edge/visual-studio-code/debugger-for-edge\">Debugger for Edge (Chromium)</a> を使う</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=firefox-devtools.vscode-firefox-debug\">Debugger for Firefox</a> を使う</li>\n<li>launch ではなく <a href=\"https://github.com/Microsoft/vscode-chrome-debug#attach\"><strong>attach</strong></a> を使う</li>\n</ul>\n<p>Debugger for Edge でも問題を解決することができました。<br>\nDebugger for Firefox は未確認で「たぶん解決できるだろう」という程度です。<br>\n<strong>attach</strong> は launch より面倒な感じがして試してません、みんな常用してるのでしょうか。。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/microsoft/vscode-chrome-debug/blob/master/README.md\">vscode-chrome-debug/README.md at master · microsoft/vscode-chrome-debug</a></li>\n<li><a href=\"http://chrome.half-moon.org/43.htm\">起動オプション - Google Chrome まとめWiki</a></li>\n<li><a href=\"https://ics.media/entry/11356/\">Visual Studio CodeでのJSのデバッグ方法（2018年版） - ICS MEDIA</a></li>\n</ul>\n",
      "date_published": "2020-02-15T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2020/02/01/2c4d2234b7f8b0e11f4b/",
      "url": "https://blog.amay077.net/blog/2020/02/01/2c4d2234b7f8b0e11f4b/",
      "title": "先輩に捧げる全国の飛び地リストを作る（市区町村編）",
      "content_html": "<p>先輩が「飛び地を訪れる」のが趣味[^1] とのことなので、全国の飛び地を調べてみました。<br>\n「飛び地のまとめサイト」なんかも既にありますが、せっかく国土地理院さんが協力されているので、ここでは国土地理院が提供する地図データを使って飛び地を抽出してみましょう。</p>\n<!--more-->\n<p>結果だけ見たい人は <a href=\"https://github.com/amay077/japan_tobichi/tree/master/out\"><strong>ココ</strong></a> の適当なファイルをクリックしてみてください。ファイル名の連番は <a href=\"http://nlftp.mlit.go.jp/ksj/gml/codelist/PrefCd.html\">都道府県コード</a> です。</p>\n<p>[^1]: テレビで先輩が訪れていた地域は厳密?には飛び地でなく「細長く入り組んだ境界」でしたが、<a href=\"https://comic-fuz.com/series/1856\">FUZ</a> で観たらちゃんと「飛び地」でしたね。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%9C%B0%E5%9B%B3%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%99%E3%82%8B%E8%A1%8C%E6%94%BF%E5%8C%BA%E7%94%BB\">使用する地図データと対象とする行政区画 <a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E5%9C%B0%E5%9B%B3%E3%83%87%E3%83%BC%E3%82%BF%E3%81%A8%E5%AF%BE%E8%B1%A1%E3%81%A8%E3%81%99%E3%82%8B%E8%A1%8C%E6%94%BF%E5%8C%BA%E7%94%BB\">#</a></h2>\n<p>国土地理院が提供する「地球地図日本」の「行政界」データを使います。</p>\n<ul>\n<li><a href=\"https://www.gsi.go.jp/kankyochiri/gm_jpn.html\">地球地図日本｜国土地理院</a></li>\n</ul>\n<p>このデータに含まれる行政界は「市区町村」なのでそれを対象とします（町丁目レベルの細かい飛び地は対応できません）。<br>\nまた、データの精度は高くないので、市区町村レベルでは微小とされる細かな飛び地は拾えないものと思います。</p>\n<ol>\n<li>この地球地図日本のサイトから、「第2.2版ベクタ（2016年公開）／全レイヤ」のファイルをダウンロードして解凍します。</li>\n<li>解凍してできたファイル群の内、<code>polbnda_jpn.shp</code>, <code>polbnda_jpn.shx</code>, <code>polbnda_jpn.dbf</code>, <code>polbnda_jpn.prj</code> の 4つ のファイルをZIP圧縮して、ファイル名を <code>polbnda_jpn.zip</code> とします（polbnda_jpn.xxx が「行政界」のポリゴンデータ(Polygon Boundary Japan の略と思われる)なので、他のは不要です）。</li>\n</ol>\n<p>この <code>polbnda_jpn.zip</code> というファイル、 <a href=\"https://mapshaper.org/\">https://mapshaper.org/</a> というサイトを開いて、ドラッグ＆ドロップすると、その内容が見られます。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/c27be93d-74f7-77d9-6f1b-73cc67246373.png\" alt=\"image.png\"></p>\n<h2 id=\"mapshaper-%E3%81%A7%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%82%92%E7%A2%BA%E8%AA%8D\">MapShaper で飛び地を確認 <a class=\"direct-link\" href=\"#mapshaper-%E3%81%A7%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%82%92%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>このデータが本当に使用に耐えられるものか、引き続き MapShaper で確認してみましょう。</p>\n<p>例えば「千葉県船橋市」。この市は大きな「本体ポリゴン」の他に、3つ の「サブポリゴン」を持っています。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">本体ポリゴン</th>\n<th align=\"center\">サブポリゴン</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8beadd40-0219-eb7b-badc-1b9b23b0af53.png\" style=\"max-width:100%;\"></td>\n<td align=\"center\"><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8b9dde48-5275-85b0-8db5-fb2d88730b86.png\" style=\"max-width:100%;\"></td>\n</tr>\n</tbody>\n</table>\n<p>左上に表示される属性情報を見てみると次のような特徴がありそうです。</p>\n<ul>\n<li>nam: 都道府県名</li>\n<li>laa: 市区町村名</li>\n<li>adm_code: 市区町村コード</li>\n<li>pop: 人口(ただしサブポリゴンの場合は、<code>-89999999</code> が入る</li>\n</ul>\n<p>以上を踏まえると、</p>\n<ul>\n<li>本体ポリゴン: <code>pop</code> の値が 0以上</li>\n<li>サブポリゴン: <code>pop</code> の値が 0未満</li>\n</ul>\n<p>という雑な条件で判定できそうです。</p>\n<p>尚、このデータの詳細な仕様は、<a href=\"https://github.com/globalmaps/specifications/blob/master/README.md\">Global Map Specifications</a> に置いてある PDF で確認できます。</p>\n<p><code>pop</code> については、</p>\n<blockquote>\n<p>-99999999 Unknown<br>\n-89999999 *1 Attributed in the main polygon</p>\n</blockquote>\n<p>と書かれているのでまあよいでしょう。</p>\n<h2 id=\"%E3%80%8C%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%80%8D%E3%81%AE%E5%AE%9A%E7%BE%A9\">「飛び地」の定義 <a class=\"direct-link\" href=\"#%E3%80%8C%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%80%8D%E3%81%AE%E5%AE%9A%E7%BE%A9\">#</a></h2>\n<p>さて、本体ポリゴンとサブポリゴン群を識別することができましたが、ところで「飛び地」とは何でしょう？<br>\n幾何学形状だけを見れば、陸地続きの離れた地域も、「島」も飛び地とみなせます。<br>\nまた、他の行政界領域に空いた「穴」のみを飛び地とみなしたい人も居るかもですね。</p>\n<p>ここでは、先輩が訪れやすいように、「島」は除外して「陸地続きの離れた地域」を「飛び地」とすることにします。<br>\n<s>上の船橋市の例では南にある「島」のサブポリゴンは飛び地とみなしません。</s></p>\n<p>処理に不具合があったので、「サブポリゴンと隣接するサブポリゴン」は飛び地とする事にしました。たぶん島の多い地域ではカウントが増えます。</p>\n<p>データの下調べは十分に行えたので、このデータを使って飛び地を抽出するプログラムを作成します。</p>\n<h2 id=\"%E5%BF%85%E8%A6%81%E3%81%AA%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9\">必要な環境など <a class=\"direct-link\" href=\"#%E5%BF%85%E8%A6%81%E3%81%AA%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9\">#</a></h2>\n<h3 id=\"%E7%92%B0%E5%A2%83\">環境 <a class=\"direct-link\" href=\"#%E7%92%B0%E5%A2%83\">#</a></h3>\n<ul>\n<li><a href=\"https://nodejs.org/ja/\">node.js</a>: v12.14.1 以上</li>\n<li><a href=\"https://www.typescriptlang.org/\">TypeScript</a>: v3.7.3</li>\n</ul>\n<p>TypeScript/JavaScript を使うので Windows でも macOS でも Linux でも OK なはずです。</p>\n<h3 id=\"%E4%B8%BB%E3%81%AA%E4%BD%BF%E7%94%A8%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">主な使用ライブラリ <a class=\"direct-link\" href=\"#%E4%B8%BB%E3%81%AA%E4%BD%BF%E7%94%A8%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">#</a></h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/shpjs\">shpjs</a>: Shapefile(準備した <code>polbnda_jpn.zip</code>) を読み込んで GeoJson 形式に変換する JavaScript ライブラリ</li>\n<li><a href=\"https://www.npmjs.com/package/@turf/turf\">turfjs</a>: 地理空間データの接合判定とか距離計算とかいろいろできちゃうすごい JavaScript ライブラリ</li>\n</ul>\n<p>これらがあれば8割くらいは出来たも同然です。</p>\n<h2 id=\"%E5%AE%9F%E8%A3%85\">実装 <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A3%85\">#</a></h2>\n<p>そしてできたものがこちらになります。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/japan_tobichi\">amay077/japan_tobichi: 国土地理院の地球地図日本データから飛び地を抽出するツール</a></li>\n</ul>\n<h3 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h3>\n<ol>\n<li><a href=\"https://www.gsi.go.jp/kankyochiri/gm_jpn.html\">地球地図日本データ</a> 第2.2版ベクタ（2016年公開）の「全レイヤ」をダウンロードする</li>\n<li>ファイルを解凍して <code>polbnda_jpn.*</code> だけを圧縮して <code>polbnda_jpn.zip</code> とする</li>\n<li>このリポジトリを Clone する</li>\n<li><code>polbnda_jpn.zip</code> を <code>tool/assets</code> ディレクトリに置く</li>\n<li><code>tool</code> ディレクトリで <code>npm ci</code> を行う</li>\n<li><code>npm run exec</code> を行う</li>\n<li>・・・しばらく待つ</li>\n<li><code>../out</code> ディレクトリに <code>*.geojson</code> ファイルが出力される</li>\n</ol>\n<h2 id=\"%E5%AE%9F%E8%A3%85%E3%81%AE%E7%B0%A1%E5%8D%98%E3%81%AA%E8%A7%A3%E8%AA%AC\">実装の簡単な解説 <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A3%85%E3%81%AE%E7%B0%A1%E5%8D%98%E3%81%AA%E8%A7%A3%E8%AA%AC\">#</a></h2>\n<p>すべて <code>src/tobichi-extractor.ts</code> で行っています。</p>\n<h3 id=\"1.-shapefile-%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\">1. Shapefile の読み込み <a class=\"direct-link\" href=\"#1.-shapefile-%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF\">#</a></h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// import * as shp from 'shpjs';</span><br><br><span class=\"token comment\">// Shapefile を読み込み</span><br><span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span>Path<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'../assets/polbnda_jpn.zip'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> geoJson <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">shp</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> sourceFeatures<span class=\"token operator\">:</span> Feature<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> geoJson<span class=\"token punctuation\">.</span>features</code></pre>\n<p><code>shpjs</code> を使って <code>polbnda_jpn.zip</code> を読み込みます。ファイルパスを直接指定できなかったので、自力でバイナリとして読んでそのデータを渡します。</p>\n<p>読み込まれた <code>geoJson</code> は GeoJson 形式の FeatureCollection です。</p>\n<h3 id=\"2.-%E6%9C%AC%E4%BD%93%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%A8%E3%82%B5%E3%83%96%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%AE%E8%AD%98%E5%88%A5\">2. 本体ポリゴンとサブポリゴンの識別 <a class=\"direct-link\" href=\"#2.-%E6%9C%AC%E4%BD%93%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%A8%E3%82%B5%E3%83%96%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%AE%E8%AD%98%E5%88%A5\">#</a></h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> sourceFeatures<span class=\"token operator\">:</span> Feature<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> geoJson<span class=\"token punctuation\">.</span>features<br>  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>pop <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">99999999</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// UNKNOWN は除外</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    f<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>_no <span class=\"token operator\">=</span> index<span class=\"token punctuation\">;</span> <br>    <span class=\"token keyword\">return</span> f<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> mainFeatures <span class=\"token operator\">=</span> sourceFeatures<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>pop <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> subFeatures <span class=\"token operator\">=</span> sourceFeatures<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>f <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>pop <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>pop</code> が <code>UNKNOWN</code> なデータを除外し、Feature を識別できるように <code>_no</code> に採番しておきます。</p>\n<p>「2. 本体ポリゴンとサブポリゴンの識別」で定義したように、<code>pop</code> 値で本体かサブを判定して、それぞれ別々のリストにしておきます。</p>\n<h3 id=\"3.-%E3%82%B5%E3%83%96%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E7%BE%A4%E3%81%8B%E3%82%89%E3%80%8C%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%80%8D%E3%81%A8%E3%81%BF%E3%81%AA%E3%81%99%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%AE%E3%81%BF%E3%82%92%E6%8A%BD%E5%87%BA\">3. サブポリゴン群から「飛び地」とみなすポリゴンのみを抽出 <a class=\"direct-link\" href=\"#3.-%E3%82%B5%E3%83%96%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E7%BE%A4%E3%81%8B%E3%82%89%E3%80%8C%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%80%8D%E3%81%A8%E3%81%BF%E3%81%AA%E3%81%99%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%AE%E3%81%BF%E3%82%92%E6%8A%BD%E5%87%BA\">#</a></h3>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// import * as turf from '@turf/turf';</span><br><br><span class=\"token keyword\">const</span> tobichiSubFeatures <span class=\"token operator\">=</span> subFeatures<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>subF <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">return</span> sourceFeatures<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>outerF <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 自分は除外</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>outerF<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>_no <span class=\"token operator\">===</span> subF<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>_no<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>turf<span class=\"token punctuation\">.</span><span class=\"token function\">booleanDisjoint</span><span class=\"token punctuation\">(</span>outerF<span class=\"token punctuation\">,</span> subF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><s>本体ポリゴン群と「接している」サブポリゴンは「飛び地」とみなしています。</s><br>\n他のポリゴン群と「接している」サブポリゴンは「飛び地」とみなしています。</p>\n<p>「接している」の判定は <a href=\"http://turfjs.org/docs/#booleanDisjoint\"><code>turf.booleanDisjoint</code></a> を使います。これは「図形と図形が離れているか？」を調べる関数ですが、これが <code>false</code> であれば「接している」とみなせます(他によい関数があるかも知れません)。</p>\n<p><s>また、本体ポリゴン群のみ判定に使っているのは、冒頭で表示した千葉県船橋市の南の島のような、「他のサブポリゴンに接している島」を除外するためです。</s><br>\n↑この条件は、青森県中泊町のように本州の端っこでサブポリゴンにしか接していないサブポリゴンが意図せず除外されてしまうのでやめました。</p>\n<p>本体ポリゴンがサブポリゴンを内包している(本体ポリゴンの一部が他市区町村の飛び地である)場合、<code>turf.disjoint</code> が <code>true</code> を返すのかは未検証ですなぜなら、このような場合、本体ポリゴンには「穴」が適切に空いているためです[^2]。<code>turf.disjoint</code> は穴も適切に判定しているようです。</p>\n<p>[^2]: GeoJson の Polygon は「外周」「穴(群)」の座標群を持つ事ができ、外周は座標が時計回り、「穴(群)」は反時計周りとなっています。</p>\n<p>そしてこの「総当りの」二重ループはとても遅いですが、我慢できる範囲なので今は最適化はしません。</p>\n<p>ここで得られた <code>tobichiSubFeatures</code> が、全国市区町村の「飛び地」のリストです。<br>\nあとはこれを本体ポリゴンと組にして GeoJson ファイルに出力するのが、後続の処理ですが、ここでは説明を割愛します。</p>\n<h2 id=\"%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%82%92%E5%9C%B0%E5%9B%B3%E3%81%A7%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">飛び地を地図で見てみよう <a class=\"direct-link\" href=\"#%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%82%92%E5%9C%B0%E5%9B%B3%E3%81%A7%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">#</a></h2>\n<p>処理を実行した結果の <code>.geojson</code> ファイル群は、<code>tool</code> と同じレベルの <code>out</code> というディレクトリに出力されます。</p>\n<ul>\n<li><code>tobichi_00_all.geojson</code> … すべての飛び地とその本体ポリゴンが格納された GeoJson ファイル</li>\n<li><code>tobichi_{nn}.geojson</code> … 都道府県ごとの飛び地とその本体ポリゴンが格納された GeoJson ファイル</li>\n</ul>\n<p>このファイルを地図上に表示する方法を 2つ 紹介します。</p>\n<h3 id=\"github-%E3%81%A7%E8%A6%8B%E3%82%8B\">GitHub で見る <a class=\"direct-link\" href=\"#github-%E3%81%A7%E8%A6%8B%E3%82%8B\">#</a></h3>\n<p>GitHub は <code>.geojson</code> ファイルを自動的に Mapbox の地図に描画してくれます。</p>\n<p>私が出力してコミットしておいた <a href=\"https://github.com/amay077/japan_tobichi/tree/master/out\">https://github.com/amay077/japan_tobichi/tree/master/out</a> の任意のファイルをクリックすると、それぞれ地図上に表示ができます。</p>\n<p>下図は千葉県の <code>tobichi_12.geojson</code> の船橋市付近を表示してみた例です。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/599bdfbf-4cee-08b7-1a9c-6e765e3f3996.png\" alt=\"image.png\"></p>\n<h3 id=\"%E5%9C%B0%E7%90%86%E9%99%A2%E5%9C%B0%E5%9B%B3%E3%81%A7%E8%A6%8B%E3%82%8B\">地理院地図で見る <a class=\"direct-link\" href=\"#%E5%9C%B0%E7%90%86%E9%99%A2%E5%9C%B0%E5%9B%B3%E3%81%A7%E8%A6%8B%E3%82%8B\">#</a></h3>\n<p>最後まで国土地理院さんにお世話になりましょう。<br>\n国土地理院が提供する「地理院地図」というサービスがあります。</p>\n<ul>\n<li><a href=\"https://maps.gsi.go.jp/\">地理院地図｜国土地理院</a></li>\n</ul>\n<p>ブラウザで上記URLを開いて、ローカルの任意の <code>tobichi_xx.geojson</code> ファイルを、表示されている地図へドラッグ＆ドロップします。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8161e20e-f3b5-1814-11da-199dbb75626f.png\" alt=\"image.png\"></p>\n<p>すると上図のように <code>geojson</code> ファイルが地図に描画されます。<br>\n<code>tobichi_00_all.geojson</code> は少し負荷が高いので、都道府県毎のファイルの方が快適です。<br>\nこちらも飛び地ポリゴンと本体ポリゴンが描画され、同じ市区町村は同じ色になります。</p>\n<p>複数の <code>.geojson</code> ファイルをドロップして表示できるし、右上の「機能」→ ツール → 作図・ファイル で、表示の ON/OFF や図形やスタイルの変更もできます。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/15b32384-db02-f733-8ae7-101a2cf119af.png\" alt=\"image.png\"></p>\n<p>背景地図がごちゃごちゃして見づらいならば、右上の「情報」→ ベースマップ で、「白地図」や「淡色地図」を選んでもよいし、ベースマップを選んでから、グレースケールON や 透過率を設定することもできます。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e1ef798a-6533-a870-0699-8eab41d32b32.png\" alt=\"image.png\"></p>\n<p>衛星(航空)写真や、先輩と同じように国土地理院の地図が見たい人は、地理院地図を使うのがオススメです。</p>\n<h2 id=\"statistics\">Statistics <a class=\"direct-link\" href=\"#statistics\">#</a></h2>\n<p>抽出したデータをいろいろ集計してみました。</p>\n<p>お断り：地図データの精度により、飛び地の数や面積、距離など、実際とは異なりますので予めご了承ください。</p>\n<p>飛び地ポリゴンの判定処理を変更したのと件数に本体ポリゴンが含まれていたので再集計しました。</p>\n<h3 id=\"%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%81%AE%E6%95%B0\">飛び地の数 <a class=\"direct-link\" href=\"#%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%81%AE%E6%95%B0\">#</a></h3>\n<p>まず、全国市区町村レベルでの飛び地の総数は <strong>144</strong> 箇所でした。</p>\n<p>都道府県毎で、最も飛び地を多く持つのは、</p>\n<ol>\n<li>27: 大阪府(11箇所)</li>\n<li>46: 鹿児島県(10箇所)</li>\n<li>06: 山形県(9箇所)</li>\n<li>12: 千葉件(9箇所)</li>\n</ol>\n<p>でした。</p>\n<p>再集計したら大阪府が1位になってしまった。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/f7580cd2-49a2-ce36-2222-d4a55cc9f07d.png\" alt=\"image.png\"></p>\n<p>関西国際空港って、３つに割れとったんかい！</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/883c15d0-d47f-577f-3c2a-ea30d60c948b.png\" alt=\"image.png\"></p>\n<p>3位の山形県を地理院地図で見てみましょう。一見するとそう飛び地が多くは見えませんが。。。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8dd99652-63e1-169a-d928-93ca211db38e.png\" alt=\"image.png\"></p>\n<p>拡大してみると・・・</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/b9996916-7a00-e9fb-74de-edeccd879459.png\" alt=\"image.png\"></p>\n<p>山形県大江町、なかなか闇の深そうな飛び地をしておられます。写真で見ると田畑っぽいですね。。。<br>\nちなみに市区町村毎の飛び地数でも山形県大江町が1位(6つ)でした。</p>\n<p>一方、飛び地がひとつも無い都道府県が 10 ありました。領地争いの少ない、平和な土地だったのでしょうか。。</p>\n<ol>\n<li>03: 岩手県</li>\n<li>22: 静岡県</li>\n<li>25: 滋賀県</li>\n<li>29: 奈良県</li>\n<li>31: 鳥取県</li>\n<li>38: 愛媛県</li>\n<li>40: 福岡県</li>\n<li>41: 佐賀県</li>\n<li>44: 大分県</li>\n<li>45: 宮崎県</li>\n</ol>\n<p>東京都もお台場などが飛び地扱いになりますね。練馬区の例の場所は精度上拾えませんが。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/6cd78b1c-e87c-a66c-d418-0d49ffc171ad.png\" alt=\"image.png\"></p>\n<h3 id=\"%E9%9D%A2%E7%A9%8D%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%84%EF%BC%8F%E5%B0%8F%E3%81%95%E3%81%84%E9%A3%9B%E3%81%B3%E5%9C%B0\">面積の大きい／小さい飛び地 <a class=\"direct-link\" href=\"#%E9%9D%A2%E7%A9%8D%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%84%EF%BC%8F%E5%B0%8F%E3%81%95%E3%81%84%E9%A3%9B%E3%81%B3%E5%9C%B0\">#</a></h3>\n<p>次に、「面積が最も小さい」飛び地は、宮城県仙台市 の飛び地で <strong>2,833㎡</strong> でした。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/f7ad7fa3-597e-b7ed-b84f-f8592f84d8c3.png\" alt=\"image.png\"></p>\n<p>これは小っさ！ちなみに地理院地図では距離や面積の計測もできますよ。</p>\n<p>反対に「面積が最も大きな」飛び地は、やはり北海道、 北海道日高町 で、面積は <strong>564,806,056㎡</strong> でした。ケタ違い。<br>\n尚、このランキングは上位3位を北海道が独占しました。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/b6e8bff3-dfc6-b69c-31ac-f1d510bb48bf.png\" alt=\"image.png\"></p>\n<p>地図で見ると本体よりデカいんじゃないかと思えます。お隣の伊達市の飛び地もそうですね。</p>\n<p>という事で次は「飛び地の方が本体よりデカい市区町村」を調べてみました。</p>\n<p><strong>7件</strong> もありました。</p>\n<ol>\n<li>01233:北海道伊達市 - 本:175,055,053㎡ &lt; 飛:274,726,478㎡</li>\n<li>01601:北海道日高町 - 本:429,338,399㎡ &lt; 飛:564,806,056㎡</li>\n<li>10203:群馬県桐生市 - 本:137,068,936㎡ &lt; 飛:138,857,m922㎡</li>\n<li>20385:長野県南箕輪村 - 本:20,433,376㎡ &lt; 飛:20,503,493㎡</li>\n<li>21202:岐阜県大垣市 - 本:79,689,605㎡ &lt; 飛:123,817,042㎡</li>\n<li>27362:大阪府田尻町 - 本:2,479,536㎡ &lt; 飛:3,343,210㎡</li>\n<li>43212:熊本県上天草市 - 本:29,751,514㎡ &lt; 飛:80,488,305㎡</li>\n</ol>\n<p>北海道の２つはやはりとして、熊本県上天草市は本体小さスギィ！</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/2dedd6b0-de5f-ca20-5e03-e41ad46e2062.png\" alt=\"image.png\"></p>\n<p>地図で見ると、むしろ <strong>本体が島</strong> なのですね。</p>\n<p>当初は、「都道府県ポリゴン群で一番面積が広いのが本体」などと思案していたので、これはよい発見でした、今後に活きます。</p>\n<h3 id=\"%E6%9C%AC%E4%BD%93%E3%81%8B%E3%82%89%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%81%BE%E3%81%A7%E3%81%AE%E8%B7%9D%E9%9B%A2\">本体から飛び地までの距離 <a class=\"direct-link\" href=\"#%E6%9C%AC%E4%BD%93%E3%81%8B%E3%82%89%E9%A3%9B%E3%81%B3%E5%9C%B0%E3%81%BE%E3%81%A7%E3%81%AE%E8%B7%9D%E9%9B%A2\">#</a></h3>\n<p>最後に、「本体と飛び地の距離」を調べてみました。</p>\n<p>まず、距離の遠いランキング。</p>\n<ol>\n<li>01601:北海道日高町 - 16km [^4]</li>\n<li>01206:北海道釧路市 - 12km</li>\n<li>34211:広島県大竹市 - 11km</li>\n</ol>\n<p>[^4]: <a href=\"https://cocolococo.jp/27311\">日本一離れた飛び地「北海道沙流郡日高町」 | ココロココ 地方と都市をつなぐ・つたえる</a></p>\n<p>北海道勢が安定のワン・ツー。<br>\n3位の 広島県大竹市 を見てみましょう。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e16f18e3-2756-1db6-3aa2-e31fe9c6af26.png\" alt=\"image.png\"></p>\n<p>「甲島」という島が、大竹市と岩国市で分け合う形になってますね。どうしてこうなった。</p>\n<p>ちなみに距離の算出は「頂点 vs 頂点」で行ってます。嘘、<a href=\"http://turfjs.org/docs/#nearestPointOnLine\"><code>turf.nearestPointOnLine</code></a> で行っており飛び地側は「線上の点」です。</p>\n<p>逆に、距離の近いランキング。</p>\n<ol>\n<li>08546:茨城県境町 - 0km</li>\n<li>11100:埼玉県さいたま市 - 0km</li>\n<li>14100:神奈川県横浜市 - 0.027km</li>\n</ol>\n<p>おい 0km ってｗｗ<br>\nプログラムのバグかと思いましたが一応見てみます。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/eb6cec48-e164-6832-0c43-49f9431eb050.png\" alt=\"image.png\"></p>\n<p>んーなるほど！これはデータの精度のせいで、実際には離れていますね。ベースマップを見ると分かります。「境町飛地」とも書いてあるし。</p>\n<p>つかこの飛び地、すごい豪邸に見えるのだけど、「ポツンと豪邸」じゃない？</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/0c2a0f0a-8f7a-002c-a3e7-035eb91e442c.png\" alt=\"image.png\"></p>\n<h3 id=\"%E3%81%8A%E3%81%BE%E3%81%91%EF%BC%91\">おまけ１ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91%EF%BC%91\">#</a></h3>\n<p>広島県広島市に穴が空いてるのに、この穴は隣の市の飛び地じゃないの？</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/3b772c64-6562-efbb-8f37-a4299c90ac7f.png\" alt=\"image.png\"></p>\n<p>と思ったら、<a href=\"https://www.town.fuchu.hiroshima.jp/\">広島県安芸郡府中町</a> はこの <strong>穴でしかない</strong> のですね。四面楚歌じゃん。</p>\n<h3 id=\"%E3%81%8A%E3%81%BE%E3%81%91%EF%BC%92\">おまけ２ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91%EF%BC%92\">#</a></h3>\n<p>山梨県の富士山付近に、小さな飛び地があります。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/499fc56e-fdd8-786f-bdb7-a18a72dfd328.png\" alt=\"image.png\"></p>\n<p>富士河口湖町の飛び地のようです。富士山へ向かう道の途中にも見えます。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/8b3bfaad-85a0-bd65-5b7f-732edf2d1972.png\" alt=\"image.png\"></p>\n<p>拡大してみると、「小室浅間神社（おむろせんげんじんじゃ）」という神社があるようです。</p>\n<p>この神社だけが富士河口湖町なのか？と思いましたが、<a href=\"http://www.fgo.jp/~yabusame/\">神社のホームページ</a>を見ると 富士吉田市 と書いてあるし、飛び地とは関係ないのかも知れません、謎です。。。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>国土地理院の地図データを使って、プログラムで「飛び地」を抽出してみました。</p>\n<p>飛び地の発生理由はさまざまですが、大きな要因の一つは「平成の大合併」と呼ばれる 2005年頃 の市区町村合併ラッシュです。</p>\n<p>その前後の様子が↓の資料で確認できます。</p>\n<ul>\n<li><a href=\"https://www.gsi.go.jp/KOKUJYOHO/gappei_index.htm\">全国都道府県別・市町村合併新旧一覧図(平成15年以降)｜国土地理院</a></li>\n</ul>\n<p>飛び地となっている地域と併せて、この資料を見てみるとなかなか面白いです。</p>\n<p>今回は市区町村レベルで行いましたが、もっと詳細な地図データを使えば、町丁目界での抽出も可能かなと思います。ただしデータ量がバクハツするので線形に処理している箇所で空間インデックスを使うなどの工夫が必要です。</p>\n<h3 id=\"%E3%82%88%E3%82%8A%E8%A9%B3%E7%B4%B0%E3%81%AA%E5%A2%83%E7%95%8C%E3%83%87%E3%83%BC%E3%82%BF\">より詳細な境界データ <a class=\"direct-link\" href=\"#%E3%82%88%E3%82%8A%E8%A9%B3%E7%B4%B0%E3%81%AA%E5%A2%83%E7%95%8C%E3%83%87%E3%83%BC%E3%82%BF\">#</a></h3>\n<h4 id=\"%E5%9B%BD%E5%9C%9F%E6%95%B0%E5%80%A4%E6%83%85%E5%A0%B1\">国土数値情報 <a class=\"direct-link\" href=\"#%E5%9B%BD%E5%9C%9F%E6%95%B0%E5%80%A4%E6%83%85%E5%A0%B1\">#</a></h4>\n<p>詳細なデータとしては、国土地理院も所属する国土交通省が <a href=\"http://nlftp.mlit.go.jp/ksj/gml/datalist/KsjTmplt-N03-v2_3.html\">国土数値情報 行政区域データ</a> というデータを提供しています。</p>\n<h4 id=\"%E5%9B%BD%E5%9C%9F%E5%9C%B0%E7%90%86%E9%99%A2%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%AB%EF%BC%9F\">国土地理院ベクトルタイル？ <a class=\"direct-link\" href=\"#%E5%9B%BD%E5%9C%9F%E5%9C%B0%E7%90%86%E9%99%A2%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%AB%EF%BC%9F\">#</a></h4>\n<p>あるいは、地理院地図のベクトル地図版およびベクトルタイルデータが配信実験中です。</p>\n<ul>\n<li><a href=\"https://maps.gsi.go.jp/development/vt.html\">地理院地図｜ベクトルタイルとその提供実験について</a></li>\n</ul>\n<p>詳細な行政界のベクトルタイルが配信されたなら、そこから町丁目界のポリゴンを取得することが可能になるかも知れません。<a href=\"%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB%E3%82%BF%E3%82%A4%E3%83%AB%E3%81%A8%E3%81%AF%E8%A8%80%E3%81%88%E5%88%86%E6%9E%90%E7%94%A8%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%8F%E3%80%8C%E8%A1%A8%E7%A4%BA%E7%94%A8%E3%80%8D%E3%81%A8%E6%80%9D%E3%82%8F%E3%82%8C%E3%82%8B%E3%81%9F%E3%82%81%E3%80%81%E9%9D%A2(%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3)%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AF%E6%8F%90%E4%BE%9B%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%81%8B%E3%82%82%E7%9F%A5%E3%82%8C%E3%81%BE%E3%81%9B%E3%82%93%E3%80%82\">^3</a></p>\n<h4 id=\"%E7%B5%B1%E8%A8%88gis%E3%81%AE%E5%A2%83%E7%95%8C%E3%83%87%E3%83%BC%E3%82%BF\">統計GISの境界データ <a class=\"direct-link\" href=\"#%E7%B5%B1%E8%A8%88gis%E3%81%AE%E5%A2%83%E7%95%8C%E3%83%87%E3%83%BC%E3%82%BF\">#</a></h4>\n<p><a href=\"https://www.e-stat.go.jp/gis/statmap-search?page=1&amp;type=2&amp;aggregateUnitForBoundary=A&amp;toukeiCode=00200521&amp;toukeiYear=2015&amp;serveyId=A002005212015&amp;coordsys=1&amp;format=shape\">統計GISデータダウンロード | 政府統計の総合窓口</a> では、かなり精度の高いの町丁目界のポリゴンデータがダウンロードできるようです。こちらも国土地理院の提供で、細かな飛び地を拾える可能性があります。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/e987c4e9-0330-f3a0-2026-2e979824df62.png\" alt=\"image.png\"></p>\n<p>また、同じデータが <a href=\"https://niaesvic.dc.affrc.go.jp/dataset/h27-census-polygon\">H27国勢調査（小地域）境界データ - データセット - NIAES VIC</a> で <strong>GeoJSON 変換済</strong> で提供されています。<a href=\"https://twitter.com/wata909/status/1222777564558548992\">情報ありがとうございます！</a></p>\n<p>私は、実際に街歩きをするよりも、このようなデータをこねくり回す方が好きなので、この方面からお手伝いできたらよいなと思います。</p>\n<h2 id=\"%E3%83%90%E3%82%B0%E3%81%A3%E3%81%A6%E3%81%9F%E2%86%92%E7%9B%B4%E3%81%97%E3%81%9F\">バグってた→直した <a class=\"direct-link\" href=\"#%E3%83%90%E3%82%B0%E3%81%A3%E3%81%A6%E3%81%9F%E2%86%92%E7%9B%B4%E3%81%97%E3%81%9F\">#</a></h2>\n<h3 id=\"%E9%9D%92%E6%A3%AE%E7%9C%8C%E4%B8%AD%E6%B3%8A%E7%94%BA\">青森県中泊町 <a class=\"direct-link\" href=\"#%E9%9D%92%E6%A3%AE%E7%9C%8C%E4%B8%AD%E6%B3%8A%E7%94%BA\">#</a></h3>\n<p><a href=\"https://github.com/amay077/japan_tobichi/blob/4bcc49778d0e9c0f2c9e815663aee40e003f74fc/out/tobichi_02.geojson\">青森県</a> 中泊町は飛び地のはずですよね。。。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/60459310-6cca-54bf-dba9-8276f7ef7b7b.png\" alt=\"image.png\"></p>\n<p>飛び地判定ロジックを直したので正しく <a href=\"https://github.com/amay077/japan_tobichi/blob/e0279eab4ee787bdad6509441b29ee46be87d1bd/out/tobichi_02.geojson\">拾えました</a>。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/8227/2a3c63af-2b29-913d-418b-41ef13f9c09f.png\" alt=\"image.png\"></p>\n",
      "date_published": "2020-02-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2020/01/24/c19ab5304176326d584a/",
      "url": "https://blog.amay077.net/blog/2020/01/24/c19ab5304176326d584a/",
      "title": "CLI のテンプレートプロジェクト by node and TypeScript",
      "content_html": "<p>node で CLI(Command Line Interface) を開発する機会が数回あって、せっかくなのでテンプレートプロジェクトとしてまとめてみた。</p>\n<!--more-->\n<h2 id=\"%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">テンプレートプロジェクト <a class=\"direct-link\" href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/amay077/node-cli-sample\">amay077/node-cli-sample: Sample npm project for development your CLI</a></li>\n</ul>\n<h3 id=\"%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A2%E3%83%8E\">必要なモノ <a class=\"direct-link\" href=\"#%E5%BF%85%E8%A6%81%E3%81%AA%E3%83%A2%E3%83%8E\">#</a></h3>\n<ul>\n<li>nodejs: v11.13.0+</li>\n<li>typescript: v3.7.3+</li>\n</ul>\n<h3 id=\"%E8%A9%A6%E3%81%97%E6%96%B9\">試し方 <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E6%96%B9\">#</a></h3>\n<ol>\n<li>上記のリポジトリを Clone する</li>\n<li>リポジトリのディレクトリに cd して <code>npm ci</code> する</li>\n<li><code>npm run build</code> する</li>\n<li><code>npm link</code> する</li>\n<li><code>source ~/.bash_profile</code> を行うかまたはターミナルを再起動する</li>\n</ol>\n<p>これでどのディレクトリでも <code>my-great</code> コマンドが使用できるようになる。</p>\n<h4 id=\"%E4%BE%8B\">例 <a class=\"direct-link\" href=\"#%E4%BE%8B\">#</a></h4>\n<pre><code>$ my-great hello -f Echizen -s Ooka -a 42\n\nHello Echizen Ooka.\nYou're 42 years old.\n</code></pre>\n<pre><code>$ my-great something wrong param\n\nCommand Line Interface for My great service\n\n  Sample for CLI.\n\nCommands\n\n  my-great hello -f &lt;first_name&gt; -s &lt;second_name&gt;   Say Hello.\n  my-great version                                  Show version.\n</code></pre>\n<h3 id=\"%E3%82%A2%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">アンインストール <a class=\"direct-link\" href=\"#%E3%82%A2%E3%83%B3%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h3>\n<pre><code>npm uninstall -g @amay/my-great-cli\n</code></pre>\n<h2 id=\"%E8%A6%81%E7%82%B9\">要点 <a class=\"direct-link\" href=\"#%E8%A6%81%E7%82%B9\">#</a></h2>\n<h3 id=\"%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E5%BC%95%E6%95%B0%E3%81%AE%E8%A7%A3%E6%9E%90%E3%81%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E3%81%AE%E8%A1%A8%E7%A4%BA\">コマンドライン引数の解析と使用方法の表示 <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%A9%E3%82%A4%E3%83%B3%E5%BC%95%E6%95%B0%E3%81%AE%E8%A7%A3%E6%9E%90%E3%81%A8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E3%81%AE%E8%A1%A8%E7%A4%BA\">#</a></h3>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/command-line-args\">command-line-args - npm</a></li>\n<li><a href=\"https://www.npmjs.com/package/command-line-usage\">command-line-usage - npm</a></li>\n</ul>\n<p><a href=\"https://www.npmjs.com/package/yargs\">yargs</a> とかいろいろあったけど、自分的に使いやすかったのでこれを選択。</p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E6%A7%8B%E6%88%90\">プログラム構成 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E6%A7%8B%E6%88%90\">#</a></h2>\n<pre><code>my-great hello -f &lt;first_name&gt; -s &lt;second_name&gt;   Say Hello.\nmy-great version                                  Show version.\n</code></pre>\n<p>のように、第一引数を「コマンド」とし、第2引数以降をそのコマンド専用の引数群としたかったので、<code>index.ts</code> で第一引数のみを parse して取得し、コマンド毎に <code>command-xxxx.ts</code> へ委譲している。</p>\n<p>command-line-args では <code>commandLineArgs(this.paramDef, { partial: true })</code> と <code>partial:true</code> を設定すると、引数定義(<code>paramDef</code>) に存在しない引数があっても無視する。</p>\n<h3 id=\"cli-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%90%8D\">cli コマンド名 <a class=\"direct-link\" href=\"#cli-%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E5%90%8D\">#</a></h3>\n<p>cliコマンド名 <code>my-great</code> は <code>package.json</code> の <code>bin:</code> で指定している。</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"@amay/my-great-cli\"</span><span class=\"token punctuation\">,</span><br>＜省略＞<br>  <span class=\"token property\">\"bin\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"my-great\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"build/index.js\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>＜省略＞</code></pre>\n<p>ビルドされた <code>./build/index.js</code> を指すように設定している。<br>\nちなみに npm run 経由で node を実行する場合は、引数の前に <code>--</code> を付ける（例: <code>node ./build/index.js -- version</code>）。</p>\n<h3 id=\"%E5%BF%85%E9%A0%88%E5%BC%95%E6%95%B0%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF\">必須引数のチェック <a class=\"direct-link\" href=\"#%E5%BF%85%E9%A0%88%E5%BC%95%E6%95%B0%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF\">#</a></h3>\n<p>command-line-args では <a href=\"https://github.com/75lb/command-line-args/wiki/Validation\">引数の必須チェックを自力で行わなければならない</a> ようなので、定義体の <code>paramDef</code> に <code>require: boolean</code> を追加し、パースした実際の引数である <code>XxxxConfig</code> に <code>require = true</code> な項目が含まれているかをチェックするようにした。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// Valid require params</span><br><span class=\"token keyword\">const</span> requiresNotSetted <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>paramDef<br>  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token keyword\">require</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> cfg<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">--</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requiresNotSetted<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Param: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>requiresNotSetted<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> is required.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">------------------------------------</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usage<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>optionList <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>paramDef<span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">const</span> usg <span class=\"token operator\">=</span> <span class=\"token function\">commandLineUsage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>usage<span class=\"token punctuation\">)</span><br>  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>usg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <br>  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"kebab-case-vs-camelcase-vs-snake_case\">kebab-case VS camelCase VS  snake_case <a class=\"direct-link\" href=\"#kebab-case-vs-camelcase-vs-snake_case\">#</a></h3>\n<p>コマンドの引数は kebab-case がデファクトスタンダードの模様。<br>\ncommand-line-args では <code>commandLineArgs(this.paramDef, { camelCase: true })</code> とすると、<code>--first-name</code> に渡された引数を、<code>firstName</code> 変数に格納してくれる。</p>\n<p>が、前述の必須引数のチェックが(定義体と実体の変数名が異なるため)正しく機能しなくなるので妥協案として snake_case の <code>--first_name</code> を採用している。</p>\n<h3 id=\"%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF\">コマンドを追加するには <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF\">#</a></h3>\n<ol>\n<li><code>index.ts</code> の <code>CommandType</code> に <code>xxxx</code> を増やす</li>\n<li><code>command-xxx.ts</code>(<code>CommandXxxx</code> クラス) を作る</li>\n<li><code>index.ts</code> の <code>commandMap</code> に追加する</li>\n<li><code>mainUsage</code> になんか書く</li>\n</ol>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://qiita.com/toshi-toma/items/ea76b8894e7771d47e10\">Node.jsでのCLIの作り方と便利なライブラリまとめ - Qiita</a></li>\n<li><a href=\"https://qiita.com/qrusadorz/items/db042f65be95f34d6271\">npm runでコマンドライン引数を渡す方法 - Qiita</a></li>\n</ul>\n",
      "date_published": "2020-01-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2019/11/21/toggle_vs_check/",
      "url": "https://blog.amay077.net/blog/2019/11/21/toggle_vs_check/",
      "title": "トグルスイッチとチェックボックスの違い",
      "content_html": "<p><a href=\"https://uxmilk.jp/83368\">トグルスイッチの誤用をやめよう | UX MILK</a> を読んでの私見です。</p>\n<!--more-->\n<h2 id=\"%E6%96%87%E8%84%88%E4%B8%8A%E3%81%AE%E7%8A%B6%E6%85%8B-vs-%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%8A%B6%E6%85%8B\">文脈上の状態 vs システムの状態 <a class=\"direct-link\" href=\"#%E6%96%87%E8%84%88%E4%B8%8A%E3%81%AE%E7%8A%B6%E6%85%8B-vs-%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E3%81%AE%E7%8A%B6%E6%85%8B\">#</a></h2>\n<blockquote>\n<p>トグルスイッチはシステムの状態を管理し、トグルボタンは文脈上の状態を管理します。</p>\n</blockquote>\n<p>最初の例はちょっと賛同しかねた。<br>\n「状態」の適用範囲で、スクショにある <code>UISegmentedControl</code> か <code>UISwitch</code> を使い分ける、というのは、それが成されている事例があっても気づけない気がする。</p>\n<blockquote>\n<p>ユーザーはスイッチをオンにするとすぐに効果が現れると期待します。</p>\n</blockquote>\n<p>これは賛同する。<br>\n私は、「スイッチ」とは、家の壁にある <a href=\"https://www.monotaro.com/p/4105/7816/?utm_medium=cpc&amp;utm_source=Adwords&amp;utm_campaign=246-833-4061_6515858576&amp;utm_content=86698184788&amp;utm_term=_380604181365_1o3_pla-799401264920&amp;gclid=Cj0KCQiAiNnuBRD3ARIsAM8KmltAvZoTFj-Uwyy3x0KxSs2Pl-qTNgyJE2RfW4qMMouS7XSx2CHszdEaAjZZEALw_wcB\">こういうの</a> をイメージしている。</p>\n<p><img src=\"/img/posts/20191121a.png\" alt=\"\"></p>\n<p>このスイッチは「押すとすぐに電気が付いたり消えたりする」事を期待する。<br>\nなので、スイッチを「状態を表現する」為だけに使われていると違和感を覚える。</p>\n<p>少し前に <a href=\"https://github.com/amay077/XamMaterialTodo\">Xamarin.Forms を使って TODO アプリを作ってみた</a> のだけど、当時の Xamarin.Forms には「チェックボックス」が無くて、まあいいやと思って「スイッチ」を使って、「タスクが完了したか」を示したのだが、アプリを実際に動かしてみると違和感ありまくりだった。</p>\n<p><img src=\"/img/posts/20191121b.png\" alt=\"\"></p>\n<p>結局画像を使ってチェックボックスの ON/OFF を表現した(尚、現在の Xamarin.Forms には <code>CheckBox</code> がある)。</p>\n<p>GMail とか、アイテムが一覧表示される画面でアイテムを一つまたは複数選択するとき、それが「スイッチ」ではなく「チェック」であるというのは、現実世界に置き換えても自然な表現だと思う。</p>\n<h2 id=\"0%E3%81%8B1%E3%81%AE%E9%81%B8%E6%8A%9E-vs-%E5%AF%BE%E7%AB%8B%E3%81%99%E3%82%8B%E9%81%B8%E6%8A%9E\">0か1の選択 vs 対立する選択 <a class=\"direct-link\" href=\"#0%E3%81%8B1%E3%81%AE%E9%81%B8%E6%8A%9E-vs-%E5%AF%BE%E7%AB%8B%E3%81%99%E3%82%8B%E9%81%B8%E6%8A%9E\">#</a></h2>\n<blockquote>\n<p>スイッチは０か１の選択のためのもので、対立する選択のためのものではありません。</p>\n</blockquote>\n<p>これは分かりやすいです、同意。</p>\n<h2 id=\"%E7%8A%B6%E6%85%8B-vs-%E8%A1%8C%E5%8B%95\">状態 vs 行動 <a class=\"direct-link\" href=\"#%E7%8A%B6%E6%85%8B-vs-%E8%A1%8C%E5%8B%95\">#</a></h2>\n<blockquote>\n<p>トグルスイッチをダウンロード用のボタンに使っています</p>\n</blockquote>\n<p>そりゃ NG でしょ、同意。</p>\n<h2 id=\"%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E4%BD%BF%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%EF%BC%93%E3%81%A4%E3%81%AE%E6%9D%A1%E4%BB%B6\">スイッチを使うための３つの条件 <a class=\"direct-link\" href=\"#%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%82%92%E4%BD%BF%E3%81%86%E3%81%9F%E3%82%81%E3%81%AE%EF%BC%93%E3%81%A4%E3%81%AE%E6%9D%A1%E4%BB%B6\">#</a></h2>\n<p>まとめ。</p>\n<blockquote>\n<ol>\n<li>利用環境ではなくシステムの状態のトグルに使っている</li>\n<li>対立的選択肢ではなくバイナリ選択肢を示している</li>\n<li>行動を起こすのではなく、状態を有効化している</li>\n</ol>\n</blockquote>\n<p>1 はよく分からん。<br>\n2 と 3 は同意。</p>\n<p>特に 3 の「行動を起こすのではなく、状態を有効化している」はミソだと思っていて、スイッチの操作が「何らかのアクションを起こす」のではなく「状態が変わる」という点。スイッチを ON にすると「電気を付ける」のではなく「部屋が明るくなる」という感覚か。<br>\n「同じじゃん」と思われるかもだけど、ちょっとした捉え方の違いが重要な気がした。</p>\n<h2 id=\"%E3%81%8A%E3%81%BE%E3%81%91%3A-%E3%80%8C%E7%8A%B6%E6%85%8B%E3%82%92%E5%A4%89%E3%81%88%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E3%81%91%E3%81%A9%E5%A4%89%E3%82%8F%E3%82%89%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%80%8D%E3%81%AF%E3%81%82%E3%82%8A%E3%81%8B%EF%BC%9F\">おまけ: 「状態を変えようとしたけど変わらなかったスイッチ」はありか？ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91%3A-%E3%80%8C%E7%8A%B6%E6%85%8B%E3%82%92%E5%A4%89%E3%81%88%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%9F%E3%81%91%E3%81%A9%E5%A4%89%E3%82%8F%E3%82%89%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%B9%E3%82%A4%E3%83%83%E3%83%81%E3%80%8D%E3%81%AF%E3%81%82%E3%82%8A%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>この記事を読んでいて気づいたことがあったんだけど、</p>\n<ol>\n<li>スイッチを操作するとすぐに状態の変化が起こる</li>\n<li>それは「状態を変化させるためにデータを変更する」事になる</li>\n<li>では「データの変更ができない」事があるかもしれない(端末のストレージにアクセスできなかったり、通信不良でクラウド上のデータに書き込みできなかったり)</li>\n</ol>\n<p>結果として、「スイッチを ON にしたが、データの書き込みに失敗して、数秒後に OFF に戻った」という挙動になっちゃったりするのだけど、これはアリか無しか。</p>\n<p>現実世界では、冒頭に示したパッチンスイッチなら「無し」だけど、 <a href=\"https://www.yodobashi.com/product/100000001000361665/?gad1=&amp;gad2=g&amp;gad3=&amp;gad4=56278881131&amp;gad5=3442618118066054801&amp;gad6=1o7&amp;gclid=Cj0KCQiAiNnuBRD3ARIsAM8KmlsgMbm36dHBhGJRD4reOPu2BbwsZeEZQc-Ln1mU5kYCJKO7zqIRmV4aAhkZEALw_wcB&amp;xfr=pla\">こういう</a> LED で ON/OFF 表現するスイッチなら「アリ」かもしれない（余談だけど私は LED の緑と赤どっちが ON か迷うことが多々あるのでよい UX ではないと思う）。</p>\n<p>たぶん「データの更新に失敗する可能性は普通にある」ならそれは「アクション」と捉えボタンにする。<br>\n「失敗する可能性が極めて少ない、あるいは無視できる」ならばスイッチでよいのかな、とここでは考えておこう。</p>\n",
      "date_published": "2019-11-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2019/03/27/901a04254cd71fa1a957/",
      "url": "https://blog.amay077.net/blog/2019/03/27/901a04254cd71fa1a957/",
      "title": "シェルスクリプトで日本時間のYYYYMMDDを返す",
      "content_html": "<p>実行環境に依存せずに、任意のタイムゾーンでの「今日の YYYYMMDD」を取得したい。</p>\n<!--more-->\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># 1. 今日の UNIX時刻(=UTCでの経過時間(秒)) を取得</span><br><span class=\"token assign-left variable\">unix_today</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> +<span class=\"token string\">'%s'</span><span class=\"token variable\">)</span></span><br><br><span class=\"token comment\"># 2. タイムゾーンをズラす(+9:00 を秒に変換している)</span><br><span class=\"token assign-left variable\">unix_today</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$((</span>unix_today<span class=\"token operator\">+</span><span class=\"token number\">32400</span><span class=\"token variable\">))</span></span><br><br><span class=\"token comment\"># 3. YYYYMMDD に変換</span><br><span class=\"token assign-left variable\">jst_ymd_today</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">date</span> <span class=\"token string\">'+%Y%m%d'</span> --date <span class=\"token string\">\"@<span class=\"token variable\">$unix_today</span>\"</span><span class=\"token variable\">)</span></span><br><br><span class=\"token comment\"># 出力</span><br><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$jst_ymd_today</span></code></pre>\n<h2 id=\"%E5%87%BA%E5%8A%9B\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B\">#</a></h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">20190327</span></code></pre>\n<p>もっと短くかけないもんですかねえ。</p>\n<h2 id=\"%E8%BF%BD%E8%A8%98\">追記 <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98\">#</a></h2>\n<p>コメントで教えてもらいました。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># JST で今日の YYYYMMDD を得る</span><br><span class=\"token assign-left variable\">jst_ymd_today</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token assign-left variable\">TZ</span><span class=\"token operator\">=</span>UTC-9 <span class=\"token function\">date</span> <span class=\"token string\">'+%Y%m%d'</span><span class=\"token variable\">)</span></span><br><br><span class=\"token comment\"># 出力</span><br><span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$jst_ymd_today</span></code></pre>\n",
      "date_published": "2019-03-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2019/03/27/0955097fe1d210b1b655/",
      "url": "https://blog.amay077.net/blog/2019/03/27/0955097fe1d210b1b655/",
      "title": "Docker で AngularアプリをビルドしてAWS S3へデプロイする",
      "content_html": "<h2 id=\"%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E4%BA%8B\">やりたい事 <a class=\"direct-link\" href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E4%BA%8B\">#</a></h2>\n<ol>\n<li>git repo からソースを clone する（複数の repo を clone する必要がある)</li>\n<li>それは Angular のアプリなので、 <code>ng --prod build</code> する</li>\n<li>ビルドされたアプリのファイル群を aws cli を使って S3 にアップロードする</li>\n</ol>\n<!--more-->\n<h2 id=\"dockerfile\">Dockerfile <a class=\"direct-link\" href=\"#dockerfile\">#</a></h2>\n<p><a href=\"https://qiita.com/ABCompany1/items/c92ac5087519c103f056\">AWS CLIをDocker環境で実行する</a> で紹介されていた Dockerfile に、 node と Angular をインストールするスクリプトを追加したものです。</p>\n<pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> python<span class=\"token punctuation\">:</span>3.6<br><br><span class=\"token keyword\">ARG</span> pip_installer=<span class=\"token string\">\"https://bootstrap.pypa.io/get-pip.py\"</span><br><span class=\"token keyword\">ARG</span> awscli_version=<span class=\"token string\">\"1.16.76\"</span><br><br><span class=\"token comment\"># Install awscli</span><br><span class=\"token keyword\">RUN</span> pip install awscli==$<span class=\"token punctuation\">{</span>awscli_version<span class=\"token punctuation\">}</span><br><br><span class=\"token comment\"># Install sam</span><br><span class=\"token keyword\">RUN</span> pip install <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>user <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>upgrade aws<span class=\"token punctuation\">-</span>sam<span class=\"token punctuation\">-</span>cli<br><span class=\"token keyword\">RUN</span> mkdir /data<br><span class=\"token keyword\">RUN</span> chmod <span class=\"token punctuation\">-</span>x /data<br><br><span class=\"token comment\"># Install nodejs</span><br><span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get update <br><span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get install curl software<span class=\"token punctuation\">-</span>properties<span class=\"token punctuation\">-</span>common <span class=\"token punctuation\">-</span>y<br><span class=\"token keyword\">RUN</span> curl <span class=\"token punctuation\">-</span>sL https<span class=\"token punctuation\">:</span>//deb.nodesource.com/setup_10.x <span class=\"token punctuation\">|</span> bash <span class=\"token punctuation\">-</span><br><span class=\"token keyword\">RUN</span> apt<span class=\"token punctuation\">-</span>get install nodejs<br><br><span class=\"token comment\"># Install angular</span><br><span class=\"token keyword\">RUN</span> npm install <span class=\"token punctuation\">-</span>g @angular/cli@7.3.6<br><br><span class=\"token keyword\">ENV</span> PATH $PATH<span class=\"token punctuation\">:</span>/root/.local/bin</code></pre>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\">実行スクリプト <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\">#</a></h2>\n<p>次に Docker 内で実行するスクリプトです。<br>\nファイル名は <code>Deploy.sh</code> としておきます。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/bin/sh</span><br><br><span class=\"token comment\"># Setup git user/password</span><br><span class=\"token builtin class-name\">echo</span> -e <span class=\"token string\">\"machine <span class=\"token variable\">$GIT_DOMAIN</span><span class=\"token entity\" title=\"\\n\">\\n</span>login <span class=\"token variable\">$GIT_USER</span><span class=\"token entity\" title=\"\\n\">\\n</span>password <span class=\"token variable\">$GIT_PW</span>\"</span> <span class=\"token operator\">></span> ~/.netrc<br><br><span class=\"token comment\"># Create work directory</span><br><span class=\"token function\">mkdir</span> work<br><span class=\"token builtin class-name\">cd</span> work<br><br><span class=\"token comment\"># Clone projects</span><br><span class=\"token function\">git</span> clone -b <span class=\"token variable\">$GIT_BRANCH</span> https://xxxx/my-awesome-lib.git<br><span class=\"token function\">git</span> clone -b <span class=\"token variable\">$GIT_BRANCH</span> https://xxxx/my-awesome-app.git<br><br><span class=\"token comment\"># Restore node_modules</span><br><span class=\"token builtin class-name\">cd</span> my-awesome-lib<br><span class=\"token function\">npm</span> ci<br><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span><br><br><span class=\"token comment\"># Build angular prod</span><br><span class=\"token builtin class-name\">cd</span> my-awesome-app<br><span class=\"token function\">npm</span> ci<br>ng --base-href<span class=\"token operator\">=</span>./ --prod build<br><br><span class=\"token comment\"># Deploy to S3</span><br>aws s3 <span class=\"token function\">sync</span> ./dist/my-awesome-app/ s3://my-awesome-bucket/www --acl public-read</code></pre>\n<p>冒頭で言ったように、複数のリポジトリから Clone する必要があるプロジェクトです。<br>\nまた Private なので user/password が必要ですが、どうせ docker コンテナは使い捨てだし <code>.netrc</code> でいっか、と思ってますがどうなんでしょう？</p>\n<p>clone した後、それぞれのディレクトリに移動して <code>npm ci</code> をして node_modules を復元します。</p>\n<p>その後、Angular アプリをビルド (<code>ng --prod build</code>)します。</p>\n<p>最後に、 <code>s3 sync</code> で AWS S3 の指定バケットにアップロードしています。<code>--acl public-read</code> は、誰でも閲覧できるサイトにするために付けています。</p>\n<h3 id=\"%E5%BF%85%E8%A6%81%E3%81%AA%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0\">必要な環境変数 <a class=\"direct-link\" href=\"#%E5%BF%85%E8%A6%81%E3%81%AA%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0\">#</a></h3>\n<p>Dockerコンテナ内で、次の環境変数が必要です。</p>\n<ul>\n<li>Git アクセス\n<ul>\n<li>GIT_DOMAIN - git リポジトリのドメイン</li>\n<li>GIT_USER - git ユーザー</li>\n<li>GIT_PW - ↑のパスワード</li>\n<li>GIT_BRANCH - 取得する branch 名</li>\n</ul>\n</li>\n<li>AWS S3 アクセス\n<ul>\n<li>AWS_ACCESS_KEY_ID - S3 への書込権限を持った IAMユーザーのアクセスキー</li>\n<li>AWS_SECRET_ACCESS_KEY - ↑のシークレットキー</li>\n<li>AWS_DEFAULT_REGION - リージョン（S3 だから要らないかも）</li>\n</ul>\n</li>\n</ul>\n<p>これらの値は、後述の <code>docker run</code> する時に渡します。</p>\n<h2 id=\"docker-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E5%AE%9F%E8%A1%8C\">Docker イメージのビルドとコンテナの実行 <a class=\"direct-link\" href=\"#docker-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%81%A8%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h2>\n<h3 id=\"docker-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89\">Docker イメージのビルド <a class=\"direct-link\" href=\"#docker-%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89\">#</a></h3>\n<p><code>Dockerfile</code> のあるディレクトリで、以下のコマンドを実行します。</p>\n<pre><code>docker build -t aws-angular .\n</code></pre>\n<p><code>docker images</code> で aws-angular が作成されていれば成功です。</p>\n<h3 id=\"%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%AE%9F%E8%A1%8C%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\">コンテナ実行スクリプト <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E5%AE%9F%E8%A1%8C%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\">#</a></h3>\n<p>実行スクリプトファイル <code>Deploy.sh</code> があるディレクトリで、以下のコマンドを実行します。<br>\n環境変数に入れる値はそれぞれ準備してください。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker run -it <span class=\"token punctuation\">\\</span><br> -e <span class=\"token assign-left variable\">AWS_ACCESS_KEY_ID</span><span class=\"token operator\">=</span>xxxx <span class=\"token punctuation\">\\</span><br> -e <span class=\"token assign-left variable\">AWS_SECRET_ACCESS_KEY</span><span class=\"token operator\">=</span>xxxxxxx <span class=\"token punctuation\">\\</span><br> -e <span class=\"token assign-left variable\">AWS_DEFAULT_REGION</span><span class=\"token operator\">=</span>ap-northeast-1 <span class=\"token punctuation\">\\</span><br> -e <span class=\"token assign-left variable\">GIT_DOMAIN</span><span class=\"token operator\">=</span>your.repo.com <span class=\"token punctuation\">\\</span><br> -e <span class=\"token assign-left variable\">GIT_USER</span><span class=\"token operator\">=</span>your_user_id <span class=\"token punctuation\">\\</span><br> -e <span class=\"token assign-left variable\">GIT_PW</span><span class=\"token operator\">=</span>your_password <span class=\"token punctuation\">\\</span><br> -e <span class=\"token assign-left variable\">GIT_BRANCH</span><span class=\"token operator\">=</span>master <span class=\"token punctuation\">\\</span><br> -v <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span>:/data <span class=\"token punctuation\">\\</span><br> aws-angular <span class=\"token function\">sh</span> /data/deploy.sh</code></pre>\n<p>これを実行すると、</p>\n<ol>\n<li>git repo からソースを clone する（複数の repo を clone する必要がある)</li>\n<li>それは Angular のアプリなので、 <code>ng --prod build</code> する</li>\n<li>ビルドされたアプリのファイル群を aws cli を使って S3 にアップロードする</li>\n</ol>\n<p>が順次実行されます。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://qiita.com/ABCompany1/items/c92ac5087519c103f056\">AWS CLIをDocker環境で実行する - Qiita</a></li>\n<li><a href=\"http://www.codebind.com/linux-tutorials/install-latest-nodejs-npm-ubuntu-18-04-linux/\">How to Install Latest Nodejs with Npm on Ubuntu 18.04 (Linux)</a></li>\n<li><a href=\"https://qiita.com/azusanakano/items/8dc1d7e384b00239d4d9#1-netrc%E3%81%AB%E3%83%A6%E3%83%BC%E3%82%B6%E5%90%8D%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\">GitHubでユーザ名・パスワード省略（push, pull） - Qiita</a></li>\n<li><a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-services-s3-commands.html\">Using High-Level (s3) Commands with the AWS CLI - AWS Command Line Interface</a></li>\n</ul>\n",
      "date_published": "2019-03-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2019/03/13/57dc477fcec9192aa7e0/",
      "url": "https://blog.amay077.net/blog/2019/03/13/57dc477fcec9192aa7e0/",
      "title": "Xamarin.UITest が HttpRequestException で失敗する場合の対処",
      "content_html": "<h2 id=\"%E7%97%87%E7%8A%B6\">症状 <a class=\"direct-link\" href=\"#%E7%97%87%E7%8A%B6\">#</a></h2>\n<p>Xamarin.Forms の新規ソリューションを UITest 付きで作成して、すぐに Android 側の UITest を実行してみたところ、</p>\n<!--more-->\n<pre><code>SetUp : System.Net.Http.HttpRequestException : An error occurred while sending the request\n  ----&gt; System.IO.IOException : Unable to write data to the transport connection: The socket has been shut down.\n  ----&gt; System.Net.Sockets.SocketException : The socket has been shut down\n</code></pre>\n<p>という例外が発生して、テストが成功しませんでした。</p>\n<p>テンプレで作成されるテストケースは</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Test</span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WelcomeTextIsDisplayed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">AppResult<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> results <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span><span class=\"token function\">WaitForElement</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">=></span> c<span class=\"token punctuation\">.</span><span class=\"token function\">Marked</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome to Xamarin.Forms!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    app<span class=\"token punctuation\">.</span><span class=\"token function\">Screenshot</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome screen.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    Assert<span class=\"token punctuation\">.</span><span class=\"token function\">IsTrue</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">.</span><span class=\"token function\">Any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>というもので、画面に &quot;Welcome to Xamarin.Forms&quot; が表示されたら成功ですが、<br>\nそもそもテスト対象アプリが起動せず終了しています。</p>\n<h2 id=\"%E5%8E%9F%E5%9B%A0%E3%81%A8%E5%AF%BE%E5%87%A6\">原因と対処 <a class=\"direct-link\" href=\"#%E5%8E%9F%E5%9B%A0%E3%81%A8%E5%AF%BE%E5%87%A6\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/xamarin/xamarin-android/issues/1817\">VS 4 Mac beta - Socket error on UITest tests · Issue #1817 · xamarin/xamarin-android</a></li>\n</ul>\n<p>UITest のプロジェクトが参照している Xamarin.UITest パッケージのバージョンが古い(2.24以下?)と発生するようです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/024bc5c7-2ad4-2258-e06b-1fc5a4aa85ec.png\" alt=\"image.png\"></p>\n<p>パッケージをアップデート(この時点では 2.2.7 になりました)してテストを実行しなおすと、無事アプリが起動してテストが成功するようになりました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/9bf64824-8c99-0aed-d08e-baab4c2fe9eb.png\" alt=\"image.png\"></p>\n<p>Visual Studio for Mac 7.7.3 での事でしたが、理由はともかく、いきなり動かんのはおかんむりです。</p>\n",
      "date_published": "2019-03-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2019/02/11/talk_for_droidkaigi_2019/",
      "url": "https://blog.amay077.net/blog/2019/02/11/talk_for_droidkaigi_2019/",
      "title": "DroidKaigi2019 でクロスプラットフォーム開発ツールについて話しました",
      "content_html": "<p>2019.2.7〜2.8 に行われた <a href=\"https://droidkaigi.jp/2019/\">DroidKaigi2019</a> に登壇させてもらいました。<br>\n参加者としての感想は <a href=\"https://qiita.com/amay077/items/ed43ef822c34677d2254\">別に書きました</a>。</p>\n<!--more-->\n<p><img src=\"/img/posts/2019_02_10_droidkaigi2019.png\" alt=\"\"></p>\n<h2 id=\"%E7%99%BB%E5%A3%87\">登壇 <a class=\"direct-link\" href=\"#%E7%99%BB%E5%A3%87\">#</a></h2>\n<p>「<a href=\"https://droidkaigi.jp/2019/timetable/70891\">クロスプラットフォームモバイルアプリ開発ツール総ざらい2019 〜Titanium MobileからKotlin/Nativeまで〜</a>」というタイトルで登壇してきました。</p>\n<p>RoomC に来ていただいた方々、ありがとうございます。<br>\n観ていない方は、資料や動画もすでに公開(早い！)していただいているので、よければ観てみてください。</p>\n<ul>\n<li>資料 - <a href=\"https://speakerdeck.com/amay077/native-made-number-droidkaigi\">クロスプラットフォームモバイルアプリ開発ツール総ざらい2019 〜Titanium Mobile から Kotlin/Native まで〜 #droidkaigi - Speaker Deck</a></li>\n<li>セッション動画 - <a href=\"https://youtu.be/51SW52cf2UY\">YouTube</a></li>\n</ul>\n<p>コルーチンや LiveData+MVx まわりの事は他の人の方がガッツリやっていてライバルが多いだろうという事と、自分が近年注力していることで DroidKaigi に CfP を出せるのはやはりクロスプラットフォーム関連しかないなという事で、今回のネタになりました。</p>\n<p>セッションの内容は、</p>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/dff88e7ce6868615a9bb\">Xamarin と React Native と Flutter の違いを正しく理解しよう - Qiita</a></li>\n</ul>\n<p>の内容を30分で話すために、簡潔に整理して私の最新の視点を加えたものです。</p>\n<p>改めて、「まとめ」だけ引用して振り返りましょうか。</p>\n<ul>\n<li>モバイルクロスプラットフォーム開発ツールは必要悪</li>\n<li>どのツールもオワコンではない</li>\n<li>Kotlin／Native には言語の壁を超えられる魅力がある</li>\n<li>プラットフォームとその言語へのリスペクトを忘れずに</li>\n<li>Webアプリとも仲良くやっていこう</li>\n</ul>\n<p>クロスプラットフォーム開発ツールは、十分な開発リソース・期間・保守コストが確保できれば使う必要はないわけです。しかし、現実には大企業でも、イケイケなサービス企業でも、プロジェクト単位・チーム単位ではリソースは制限されていて、クロスプラットフォーム開発ツールが利用検討対象に挙がることはよくあるのだと思います。<br>\n正直、「どんなツールを選択すべきか？」はどうでもいいです。現実的には提供企業の規模とあなたのチームのスキルセットでだいたい選択肢は絞られるので、「あなたはその答えをもう持っているのだから…」とか返答しましょう。</p>\n<p>クロスプラットフォーム流行の歴史では、私の観測範囲内でこれまでに登場してきたツールについて触れました。Xamarin 利用歴が一番長いので、視点がそれよりになってしまったかもですが、極力特定のツールに依存しない話にしたつもりです。<br>\n&quot;Titanium&quot; を知らない、読み方がわからないという方が一定数いらっしゃる事を知ったときには、 <strong>「モバイルクロスプラットフォーム開発ツール老人会」</strong> の発足が頭をよぎりましたね。</p>\n<p>各ツールの説明にはややdisりが含まれていたかも知れません(そう感じた方にはすみません)が、どのツールもdisconにはなっておらず(disconになったツールはそもそも紹介してない)、世界的に見れば利用されている方は多いと思います。<br>\n&quot;とある開発ツール&quot; を利用する(あるいは利用しない)のには、それなりの理由があるのですから、その理由を理解しようとしないまま「オワコンだ」とか「成功しない」とかは言わない方がよいと思います。それよりは、利用した／しなかった 理由についての知識を溜め、自分のケースに当てはめて判断したらよいと考えています。</p>\n<p>Kotlin/Native に関しては、他言語向けに親和性の高いライブラリをビルド&amp;出力できる開発ツールは、モバイル関連では他に実用レベルに至っているものを知りません(.NET/C# における同類技術である <a href=\"https://github.com/mono/Embeddinator-4000\">.NET Embedding コードネーム:Embeddinator-4000</a> は、開発が停滞しているというウワサも聞きます)。<br>\nAndroid/Kotlin の Google / JetBrains / OSS 周辺の開発パワーはとても高いので、急速に環境が整備されていくのだろうなと感じています。</p>\n<p>となると、Android/iOS アプリの多くの領域を Kotlin で書けるようになるため、「Kotlin/Native強硬派」が現れると思うのですが、それについてこれまで Swift で iOS アプリを開発していた人たちがどう思うかは十分に話し合って導入して欲しいと思います。敵対関係になってしまってはまったく意味がないです。(逆の立場だったらどうでしょう？)</p>\n<p>「ガワネイティブ」は、脊髄反射で「NO」と言わない方がよい技術であることもお話しました。<br>\nSPA, PWA に代表される Web 技術は、確実にネイティブアプリの領域と重なって来ています。<br>\nクロスプラットフォームアプリ開発技術者としては、 <strong>「PWA などのWeb技術の海」と、「ネイティブアプリ技術の陸地」の波打ち際</strong> に注目していて、2019年2月の現時点だと、「クロスプラットフォーム開発ツールで作るガワネイティブアプリ」は、有力な「おとしどころ」だと思っています。</p>\n<p>話さなかった(知識不足で話せなかった)ことに関して言えば、WebAssembly があります。<br>\n例えば、「ガワネイティブアプリの中にある HTML ページの div タグ内でネイティブのUIパーツが利用される」などという世界線があるのかも知れないし、ぜんぜん無いのかも知れないです。</p>\n<p>なんやかんやでクロスプラットフォームアプリ開発ツールに関連する領域は、モバイルだけを見てもまだまだネタに尽きないですし、モバイルに拘らなければ無限にありますので、ウォッチしていて飽きないですね。</p>\n<p>とりあえず来年の DroidKaigi には <strong>Kotlin/Native with Multi Platform Project に関するセッションが10個以上はある</strong> と思っています。今、CfP を考えてみても、</p>\n<ul>\n<li>実践！Kotlin/Native with MPP アプリ開発</li>\n<li>Kotlin MPP に対応済のライブラリたち</li>\n<li>Kotlin/Native ＋ xxx(←任意のクロスプラットフォーム開発ツール)</li>\n<li>Kotlin MPP を踏まえたアプリケーション設計手法</li>\n<li>Kotlin/Native for XXX を作って(!)みた</li>\n</ul>\n<p>などなど、挙げたらキリがないですね。<br>\n来年 CfP を出すとしても、セッションを聞くとしてもとても楽しみです。</p>\n<h2 id=\"%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">コミュニケーション <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">#</a></h2>\n<p>わざわざ声をかけていただいて「Qiita の投稿、勉強になってます！」などと言って頂いたのは死ぬほど嬉しかったです。<br>\n前々回も、同じように若いITエンジニアさんに声かけていただいて、承認要求充足おじさんでした。<br>\nただそれが目的にならないように、たくさんの人からいいね!されるよりは、誰か一人が「超助かった」と言ってもらえるようなアウトプットを心がけたい思っています。</p>\n<p>パーティでの「登壇者風船プレイ」も良かったですね(風船を付けたのは数年前の de:code 以来でした)。<br>\nこちらからグイグイいくタイプでないので、風船のおかげで何人かの人に声をかけてもらえました。<br>\nお話ししていただいた皆さん、ありがとうございました。</p>\n<h2 id=\"%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">おわりに <a class=\"direct-link\" href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">#</a></h2>\n<p>スタッフの皆さま、今回も最高のイベントでした。<br>\nスムースな Registration に会場移動、セッション終了時刻を意図的にズラしての流量調整など、イベントのプロでも実施できるチームは少ないのではないでしょうか、素晴らしい運営だったと思います。</p>\n<p>遠方からのスピーカーに対するサポート強化もありがたかったです。<br>\nできましたら、(パーティ始まりに?)スタッフの皆様の紹介をしていただけたら、個別にごあいさつできたのですが。。。<br>\n(メール対応していただいた方の名前と Twitter アカウントと顔が一致しないとか)</p>\n<p>DroidKaigi には毎年参加していて、今回含め2度登壇させてもらってますが、やはり登壇した方が楽しいですね。<br>\nまた、次回があると信じていますが、その時はなんらかのネタで登壇を狙いたいと思います。</p>\n<p>ありがとうございました！</p>\n",
      "date_published": "2019-02-11T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/12/26/e31652bf6e384b6ffbed/",
      "url": "https://blog.amay077.net/blog/2018/12/26/e31652bf6e384b6ffbed/",
      "title": "Azure Pipelines の Android アプリビルドでビルドタイプを指定する",
      "content_html": "<p><a href=\"https://azure.microsoft.com/ja-jp/services/devops/pipelines/\">Azure Pipelines</a> で Android アプリ(Not Xamarin)をビルドする時、</p>\n<!--more-->\n<p>普通にテンプレから作った gradle タスクは、 <code>gradlew build</code> を実行しますが、これはアプリのプロジェクトに含まれる全てのビルドタイプをビルドするため、多くの場合ムダです。[^1]</p>\n<p>[^1]: Debug ビルドで単体テストを行い、同時に配布用 Release ビルドを生成したい、というケースでもあるのでしょうか？わからん。</p>\n<p>例えば私のプロジェクトの場合、ビルドタイプは標準の「Debug」,「Release」に加え実験用の「Experiment」を用意していたので、タスクの実行に 12分 もかかっていました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/346f0a15-a0c9-f671-9046-d90d3e39ce5a.png\" alt=\"image.png\"></p>\n<p>完了後、Debug, Release, Experiment それぞれの <code>.apk</code> が生成されていました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/5390eac9-9deb-42b1-8155-a3e0659f25cf.png\" alt=\"image.png\"></p>\n<h2 id=\"release-%E3%81%AE%E3%81%BF%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B\">Release のみをビルドする <a class=\"direct-link\" href=\"#release-%E3%81%AE%E3%81%BF%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B\">#</a></h2>\n<p>特定のビルドタイプのみ（ここでは Release とします）をビルドする場合、<code>gradlew build</code> の代わりに <code>gradlew assembleRelease</code> を実行すればよいのですが、既定で追加されている gradle タスクではなぜか変更できません。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/91a0b402-1cdc-2628-dfde-67c25b693a65.png\" alt=\"image.png\"></p>\n<p>仕方がないので、既存の gradle タスクは削除して、「＋」 で gradle タスクを検索して追加します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/70053a12-60e8-d632-03af-6bac2faf4d66.png\" alt=\"image.png\"></p>\n<p>こちらの Tasks は変更できるので <code>assembleRelease</code> を設定します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/13f771df-de9e-f480-21ec-1f8926722de3.png\" alt=\"image.png\"></p>\n<p>これで保存してパイプラインを実行すると、ビルドタスクの時間が 12分 から <strong>8分</strong> に短縮されました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/c59dc0e7-8e5f-6cb6-387a-6872f4de6610.png\" alt=\"image.png\"></p>\n<p>Artifacts にも Release 版の apk しか生成されていないのが確認できます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/cbc5cf63-50cf-6eea-88a2-0d0c3f22ecac.png\" alt=\"image.png\"></p>\n<p><a href=\"https://twitter.com/penguin_sharp/status/1077762715853107201\">@penguin_sharp さん</a>、ありがとうございました。</p>\n<h2 id=\"%E3%81%8A%E3%81%BE%E3%81%91\">おまけ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">#</a></h2>\n<p>上記はビルドAgent 「Hosted VS2017」 で作業してたんですが、これを 「Hosted macOS」 に替えたところ、 8分かかっていたビルド時間が <strong>「2分50秒」</strong> に短縮されました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/05a69245-4fe5-ab16-53de-24fdca7cca13.png\" alt=\"image.png\"></p>\n<p>VS2017 が遅いのか Hosted macOS が早いのか分かりませんが、とりあえず Android アプリのビルドは Hosted macOS を使うとよさそうです。[^2]</p>\n<p>[^2]: Xamarin.Android も Hosted macOS でビルドしたいなー、確か Xamarin.iOS しかビルドできないんだよなー</p>\n",
      "date_published": "2018-12-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/12/25/45cd7ec04f906cba2f88/",
      "url": "https://blog.amay077.net/blog/2018/12/25/45cd7ec04f906cba2f88/",
      "title": "Azure Custom Vision を使って「ハムスターが起きているか？」を判定してみた",
      "content_html": "<ul>\n<li><a href=\"https://ngk2018b.connpass.com/event/104965/\">NGK2018B 昼の部（LT大会） - connpass</a></li>\n</ul>\n<p>で発表した内容のフォローアップです。</p>\n<!--more-->\n<p>５分厳守なガチLTは久しぶりだったので、タイムキープには特に注意しました。1分余らせるつもりがちょうど良い感じでしたが、ちょっとテンパってしまいましたね。</p>\n<p>LT大会自体も、多種多様なネタを聞くことができてとっても参考になりましたね。<br>\n最近は特定のテクノロジー向けの勉強会・イベントしか参加してなかったので思わぬ発見ができてよかったです。</p>\n<p>当日の録画が</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=eAlJ-FK-2tw&amp;list=PLscGe0lpp6WY0E0VA_aFgPyeCn2GuEXor\">NGK2018B オープニング &amp; LT #1 - YouTube</a></li>\n</ul>\n<p>にあるので、年末年始のテレビがつまらないと思う人はどうぞ。たぶんそれよりもずっと面白いです。</p>\n<p>さて自分の発表は、</p>\n<ul>\n<li><a href=\"https://speakerdeck.com/amay077/hamusutajian-chu-qi-wo1ri-dezuo-tutemita-number-ngk2018b\">ハムスター検出器を1日で作ってみた #NGK2018B - Speaker Deck</a></li>\n</ul>\n<p>だったわけですが、かいつまんで言うと、</p>\n<ul>\n<li>ハムスター飼っている</li>\n<li>ケージの様子をライブ配信している</li>\n<li>ハムスターが起きているか寝ているかを判定したい</li>\n<li>Azure Custom Vision でやってみた</li>\n</ul>\n<p>というものです。普段ウケを狙う事はないのですが、笑っていただけたので良かったです。</p>\n<h2 id=\"%E6%8A%95%E5%85%A5%E3%81%97%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">投入したデータについて <a class=\"direct-link\" href=\"#%E6%8A%95%E5%85%A5%E3%81%97%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>約2000枚の画像にタグ付けをしたわけですが、「ハムスターはほとんど寝ている」ので、必然的に「寝ている画像」の方が多くなります。</p>\n<p>それをそのまま Custom Vision にぶっこんだら、Train の結果で Warning が出ました。<br>\n内容は「タグ毎のデータ量に偏りがあるから是正したほうが良いよ(意訳)」というものでした。</p>\n<p>その後機械学習のデータ準備について少し学んだら同じ情報が得られたので、Custom Vision は、その辺りのアドバイスもしてくれるのだなあ、親切！と感じました。</p>\n<h2 id=\"performance-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">Performance について <a class=\"direct-link\" href=\"#performance-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>スライドにもあるように、タグ付けしたデータの一部を「検証用データ」としてとっておいて、学習後の Custom Vision に与えて Validation しようと思っていたのですが、 Performance というタブになんだか評価結果が出ているようでした。</p>\n<p>各タグについて Precision と Recall のパーセンテージが出ており、それぞれ</p>\n<ul>\n<li>Precision - 「起きてる」とタグ付けされた画像が、「起きてる」と判定された確率</li>\n<li>Recall - 「起きてる」と判定された画像の内、「起きてる」とタグ付けされた画像の確率</li>\n</ul>\n<p>であると、こちらも学習して理解しました。<br>\nそして、Custom Vision がこの数値を出しているということは、Custom Vision の中で検証のプロセスも行っていると判断しました。</p>\n<h2 id=\"free(trial)%E7%89%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">Free(Trial)版について <a class=\"direct-link\" href=\"#free(trial)%E7%89%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>無償の Free 版では、以下の <a href=\"https://azure.microsoft.com/en-us/pricing/details/cognitive-services/custom-vision-service/\">制約</a> があります。</p>\n<ul>\n<li>2 Project まで</li>\n<li>アップロード画像 5000 画像まで</li>\n</ul>\n<p>複数のデータセットを用意して、同時に評価したい場合は 2 project だと足りません。<br>\nその場合は Azure の有償サブスクリプションに紐づけて利用することになります。</p>\n<p>今回は Standard(S0) という有償プランを使いましたが、数日利用していて現在までの利用料は「247円」でした。<br>\nアップロード、学習、判定の各トランザクションで課金され、額は $1 per 1,000 transactions とのことなので、判定APIが大量に利用されるようなサービスでは要注意になるのでしょう。</p>\n<h2 id=\"%E5%88%A4%E5%AE%9A%E7%B5%90%E6%9E%9C%E3%81%AE%E6%89%80%E6%84%9F\">判定結果の所感 <a class=\"direct-link\" href=\"#%E5%88%A4%E5%AE%9A%E7%B5%90%E6%9E%9C%E3%81%AE%E6%89%80%E6%84%9F\">#</a></h2>\n<p>今回は、配信PCのスクリーンショットを教師データとして使用しました。これはアプリウィンドウのフレームやカメラ映像以外の部分も含まれたものですが、加工が面倒だったのでこのまま使用しました。<br>\nその状態でも Precision:94%, Recall:69% というのは実用に耐えられる数値ではないかと思います。</p>\n<p>ポイントとなる箇所のみに画像をトリミングしたところ、１００% に近い数値になったので、「簡単な加工をするだけでかなりの精度向上が見込める」ことも分かりました。</p>\n<p>趣味やお仕事で使うことも増えそうな、よいサービスだなと改めて思いました。</p>\n",
      "date_published": "2018-12-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/12/25/150f484e68924468a2c3/",
      "url": "https://blog.amay077.net/blog/2018/12/25/150f484e68924468a2c3/",
      "title": "Xamarin.Forms でも HotReload がしたい！",
      "content_html": "<p>こんにちわ.</p>\n<!--more-->\n<p>過去5年で9個!のアドベントカレンダーをこなして来た Xamarin、過渡期における認知・普及に大いに貢献できたと思います、参加頂いた皆様に改めてお礼申し上げまする。<br>\nXamarin が成熟期に入ったであろう今年は「そろそろ頃合いかな<a href=\"%E5%80%8B%E4%BA%BA%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AF%E8%B6%A3%E5%91%B3%E3%81%A7%E3%82%82%E8%88%88%E5%91%B3%E3%81%A7%E3%82%82%E3%81%BE%E3%81%A0%E3%81%BE%E3%81%A0%E5%85%A8%E7%84%B6Hot%E3%81%AA%E3%82%93%E3%81%A7%E3%81%99%E3%82%88%E3%80%81Xamarin%E3%80%8C%E3%82%82%E3%80%8D\">^1</a>」とホストもせず放置していましたが、@muak_x さんが立ち上げられたので「ならば協力せねば」という事で、埋まりづらいであろうトリに名乗りを上げさせて頂きました。しかしその後の様子を見るにそれも杞憂だったかな、と。皆様の Xamarin に対する意欲の高さを感じることができました。</p>\n<p>さて前置きはこのくらいで、、、、<br>\n画面の開発（画面レイアウト作成）をする際、みなさんが好む「スタイル」は何ですか？</p>\n<ul>\n<li>デザイナーでポチポチ</li>\n<li>xml や xaml などの DSL を手書き</li>\n<li>DSL も使わん、全部プログラム言語で手書き</li>\n<li>etc</li>\n</ul>\n<p>私は 「xml や xaml などの DSL を手書き」 派です。</p>\n<p>いずれにしても「UIの見た目」を逐次確認しながら開発できるというのは、画面開発においては必須要件です。<br>\nこの 「見た目を確認する機能」 は、プラットフォームや IDE によっていくつかの提供方式があります。</p>\n<h2 id=\"ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A-vs-%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%A2-vs-hotreload\">UIデザイナ vs プレビューア vs HotReload <a class=\"direct-link\" href=\"#ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A-vs-%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%A2-vs-hotreload\">#</a></h2>\n<p>UIデザイナとはアプリ開発環境でいうと「UI部品をドラッグ&amp;ドロップでレイアウトできる」機能を差します。多くの場合はそれが「プレビューア」も兼ねています。</p>\n<p>プレビューアとは、コードで記述されたUI定義の「見た目」を「シミュレート」する機能です。</p>\n<p>HotReload とは、「実際のアプリケーション」を動かしながらも、コードやUI定義の変更を即座に実際のアプリケーションに反映させる機能を言うものとします。</p>\n<p>それぞれのメリットデメリットを考えて挙げてみました。（個人の恣意的な見解を大いに含みます。）</p>\n<h3 id=\"ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A\">UIデザイナ <a class=\"direct-link\" href=\"#ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A\">#</a></h3>\n<ul>\n<li>⭕ - 初心者に「使いやすい」と思わせることができる</li>\n<li>❌ - 生成されるUI定義コードが人間には理解不能(and diff unfriendly)</li>\n<li>❌ - (IDE提供会社側)機能を作るのが超大変・面倒</li>\n</ul>\n<p>UIデザイナを採用するのは Visual Basic 6, Windows Forms, WPF/UWP/ASP.NET(Web Forms)/Xamarin Native(Android/iOS) など、macOS/iOSアプリ開発の Xcode(Interface Builder/Storyboard)、Android Studio の UI Editor、アプリ開発以外では Word やホームページビルダーなどもそうですね（これらを挙げるのは恣意的ですがw）。</p>\n<h2 id=\"%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%A2\">プレビューア <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E3%82%A2\">#</a></h2>\n<ul>\n<li>⭕ - (自力で)視認性の高いコードを記述できる(ツールに邪魔されない)</li>\n<li>⭕ - 任意のタイミングあるいはリアルタイムに、見た目を「おおよそ」確認できる</li>\n<li>❌ - (IDE提供会社側)異なるプラットフォームの「見た目」を再現しようとすると、実装が大変・面倒</li>\n</ul>\n<p>プレビューアを採用するのは、Visual Studio 20xx の XAML Previewer for Xamarin.Forms くらいですかね。GitHub や Qiita などに見られる「Markdown のリアルタイムプレビュー」も該当すると言えるかも知れません。</p>\n<h2 id=\"hotreload\">HotReload <a class=\"direct-link\" href=\"#hotreload\">#</a></h2>\n<ul>\n<li>⭕ - (自力で)視認性の高いコードを記述できる(ツールに邪魔されない)</li>\n<li>⭕ - 実際のアプリケーションを動かしながら、見た目の変更を「完全に」確認できる</li>\n<li>❌ - (IDE提供会社側)アプリ側にIDEからの変更通知を受信するための「仕掛け」が必要</li>\n</ul>\n<p>HotReload は、最近では Flutter が名を上げていますね。React や Angular でも細かい方式の違いはあるのでしょうが、デベロッパー体験としては HotReload のような事ができます。Android Studio の「Instant Run」もここに分類することにしましょう。</p>\n<h2 id=\"%E3%81%A9%E3%82%8C%E3%81%8C%E3%81%84%E3%81%84%E3%81%AE%EF%BC%9F\">どれがいいの？ <a class=\"direct-link\" href=\"#%E3%81%A9%E3%82%8C%E3%81%8C%E3%81%84%E3%81%84%E3%81%AE%EF%BC%9F\">#</a></h2>\n<p>改めて個人の見解ですが、ここで言いたいのは<br>\n<strong>「UIデザイナーやプレビューアはそれを提供する側の開発コストがとても高いが、その割にそれを利用する側の評価は低い（見た目が実際と&lt;少し&gt;違う、等）」</strong><br>\nと言うことです。[^2]</p>\n<p>[^2]: まあ「UIデザイナ やプレビュー機能はもう二度と作りたくない」という過去の体験からくる意見です</p>\n<p>対して本物のアプリを動かしつつUIを変更できる HotReload は、<br>\n<strong>「(UIデザイナに比べて)提供側の開発コストは低く、利用する側の開発体験は高い」</strong><br>\nと思います。「デベロッパー目線では」 HotReload はとってもコスパが高いと思うんですね。</p>\n<p>Microsoft は、Visual Studio で Xamarin.Forms アプリの HotReload が可能になるはずだった 「 <a href=\"https://github.com/MicrosoftDocs/xamarin-docs/issues/947#issuecomment-432973028\">Xamarin LiveReload の開発を停止し、プレビューアの機能を強化していく</a> 」そうですが、私にはこれは悪手に見えます。<br>\n開発環境も実行環境も Windows だった WinForms/WPF に対して、異なるプラットフォーム上で動作するアプリケーションの見た目を Windows の IDE上で再現(プレビュー)する事は、相当な開発コストが必要と推測します。<br>\nそれだけのコストをかけても「Windows 上で表示されるプレビュー」は所詮 <strong>ニセモノ</strong> であり、その再現性に私は期待が持てないのです。GoogleMapsを埋め込んだユーザーコントロールを開発してる身としては「どう考えてもムリ」という結論になります。</p>\n<p>Xamarin LiveReload は Visual Studio for Macでいつ使えるようになるのかなー？と言う期待は、遂に実現されませんでした。</p>\n<p>もう一つ、 <a href=\"https://docs.microsoft.com/ja-jp/xamarin/tools/live-player\">Xamarin Live Player</a> というものがありました（もう過去形でよいと思ってるけど）。<br>\nこれは実機に「開発中アプリを実行するためのアプリ」をインストールしておき、それが開発中アプリのコードを解釈＆実行することで HotReload が可能です。しかし <a href=\"https://www.sys-cube.co.jp/blog/15002.html\">iOS版アプリがAppStoreから削除され、testflightでの公開もなくなり、今はAndroid版のみの提供となっているよう</a> です。そして活発な開発は行われていないように見えます。</p>\n<p>Microsoft には「初心者にウケのよい機能にチカラを入れる」という SAGA があるように感じますが、それが徒にならないとよいですなと願います。（注力するのは良いんですが、それによって全体のDX(Developer Experience)を下げるのはよろしくない選択だと思います。）</p>\n<h2 id=\"livexaml-%E3%81%AA%E3%82%89-xamarin.forms-%E3%81%A7-hotreload-%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%93%E3%81%98%E3%82%83%E3%81%81%E3%81%81%E3%81%82%E3%81%84%E3%83%83%EF%BC%81%EF%BC%81\">LiveXAML なら Xamarin.Forms で HotReload ができるんじゃぁぁあいッ！！ <a class=\"direct-link\" href=\"#livexaml-%E3%81%AA%E3%82%89-xamarin.forms-%E3%81%A7-hotreload-%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%93%E3%81%98%E3%82%83%E3%81%81%E3%81%81%E3%81%82%E3%81%84%E3%83%83%EF%BC%81%EF%BC%81\">#</a></h2>\n<p>よろしい、Visual Studio の標準機能としてそれが搭載されることは諦めましょう。<br>\nVS に頼らなくても、我々には素晴らしいツールを提供してくれるサードパーティーがいます。</p>\n<p><strong><a href=\"https://www.livexaml.com/\">LiveXAML for Xamarin.Forms</a></strong> は <a href=\"http://livexaml.com\">livexaml.com</a> で販売・配布されている拡張ツールです。</p>\n<ul>\n<li>IDE(Visual Studio 201x、Visual Studio for Mac)のエクステンション</li>\n<li>アプリに入れる nuget パッケージ</li>\n</ul>\n<p>から成っています。</p>\n<p>開発・提供者はちょっと辿りにくいのですけど、「ION OÜ」というエストニアの屋号が確認できました（が、規模はおそらく小さいでしょう）。他に <a href=\"http://www.ammyui.com/\">ammyui</a> という、「XAMLの代わりにJSONライクな定義でUIを記述できるツールキット」も開発しているようです。</p>\n<h3 id=\"livexaml-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95\">LiveXAML のインストール方法 <a class=\"direct-link\" href=\"#livexaml-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E6%96%B9%E6%B3%95\">#</a></h3>\n<p>Visual Studio for Mac で使ってみます。Win の人は <a href=\"https://marketplace.visualstudio.com/items?itemName=ionoy.XamarinFormsLive-18843\">INSTRUCTIONS</a> を見てね。</p>\n<h4 id=\"1.-visual-studio-for-mac-%E3%81%AB-livexaml-%E3%81%AE-extension-%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\">1. Visual Studio for Mac に LiveXAML の Extension を入れる <a class=\"direct-link\" href=\"#1.-visual-studio-for-mac-%E3%81%AB-livexaml-%E3%81%AE-extension-%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\">#</a></h4>\n<p>Visual Studio for Mac を起動し、左上のアイコンから Extensions... を選択、Extension Manager の検索ボックスに &quot;LiveXAML&quot; と入力し、インストールします。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/0c35f9b0-2b33-55c6-775a-6362b4576e1a.png\" alt=\"image.png\"></p>\n<p>インストール後、Visual Studio を再起動したほうが良さそうです。</p>\n<h4 id=\"2.-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-livexaml-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\">2. アプリケーションのプロジェクトに LiveXAML の nuget パッケージを入れる <a class=\"direct-link\" href=\"#2.-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-livexaml-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\">#</a></h4>\n<p>Xamarin.Forms の共通プロジェクト（.NET Standard） <strong>のみ</strong> に、 LiveXAML nuget パッケージを入れます。<br>\n（間違えて Android プロジェクトにも入れたところ、ビルドエラーになりました）</p>\n<p>例として拙作 Xamarin.Forms.GoogleMaps のサンプルアプリソリューションを挙げると、 <code>XFGoogleMapsSample</code> プロジェクトのみに LiveXAML を入れます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/e07401f2-db44-6434-b718-c4016e79d8c1.png\" alt=\"image.png\"></p>\n<h4 id=\"3.-%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">3. 動かしてみる <a class=\"direct-link\" href=\"#3.-%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h4>\n<p>Trial するためのステップはこれで終わりです。</p>\n<h5 id=\"%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A7%E5%AE%9F%E8%A1%8C\">エミュレータで実行 <a class=\"direct-link\" href=\"#%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A7%E5%AE%9F%E8%A1%8C\">#</a></h5>\n<p>試しに Android エミュレータでアプリを <strong>デバッグ実行</strong> し、そのまま画面の <code>.xaml</code> ファイルを Visual Studio で変更し、保存すると、数秒以内に実行中のアプリに適用されます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/110415b8-ed63-d922-f04f-43b6e9f7df77.gif\" alt=\"Untitled6.gif\"></p>\n<p>もちろん iOS でもおｋ。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/076bb2db-5113-ad04-dbdd-3cea88bf592f.gif\" alt=\"Untitled7.gif\"></p>\n<p>UWP に興味が無いのでまったく触れていないですが、LiveXAML は UWP にも対応しています。</p>\n<h5 id=\"%E5%AE%9F%E6%A9%9F%E3%81%A7%E5%AE%9F%E8%A1%8C\">実機で実行 <a class=\"direct-link\" href=\"#%E5%AE%9F%E6%A9%9F%E3%81%A7%E5%AE%9F%E8%A1%8C\">#</a></h5>\n<p>Android, iOS ともに開発PCと「同じネットワークに接続されている」ならば、実機でも HotReload されます。</p>\n<p>iOS の方は、ビルド設定で Linker の動作 を 「Don't Link」 に変更する必要があるかもしれません。既定で 「Don't Link」 ならOKです。（Link All, Link Framework SDK Only では動作しません。）</p>\n<h5 id=\"%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%98%E3%82%83%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%82-hotreload\">デバッグじゃなくても HotReload <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%98%E3%82%83%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%82-hotreload\">#</a></h5>\n<p>&quot;Update even if not debugging&quot; というオプションを ✔ すれば、デバッグ実行でなくても適用されるそうです(VS4M にその項目はなかったので VSforWinならあると思われ)。</p>\n<p>これにより、Rider などの外部エディタでの変更も適用できたり、複数の端末に適用させることもできるとのことです。前出の FAQ より。<br>\nうまく使うと、 <strong>Android アプリと iOS アプリを同時実行しながら、HotReload できる</strong> んじゃないかな？(要確認)</p>\n<p>どうっすか。これですよ私が求めていた開発体験(DX: Developer Experience)は！</p>\n<h3 id=\"livexaml-%E3%81%A7%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\">LiveXAML でできないこと <a class=\"direct-link\" href=\"#livexaml-%E3%81%A7%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E3%81%93%E3%81%A8\">#</a></h3>\n<h4 id=\"xaml-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BB%A5%E5%A4%96%E3%81%AE%E5%A4%89%E6%9B%B4%E9%81%A9%E7%94%A8\">XAML ファイル以外の変更適用 <a class=\"direct-link\" href=\"#xaml-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E4%BB%A5%E5%A4%96%E3%81%AE%E5%A4%89%E6%9B%B4%E9%81%A9%E7%94%A8\">#</a></h4>\n<p>&quot;HotReload&quot; されるのは <code>.xaml</code> ファイルへの変更のみです。<br>\n<code>.cs</code> ファイルを変更して保存しても何も起こらないし、<code>.cproj</code> への変更も反映されません。<br>\n例えば <code>&lt;Image Source=&quot;apple.jpg&quot; /&gt;</code> とXAMLに書かれた時に、 <code>apple.jpg</code> をりんごからオレンジの画像に差し替えても、りんごのままです。</p>\n<p>あれ、あんまり「できない事」はなかったｗ 詳しくは <a href=\"https://www.livexaml.com/\">https://www.livexaml.com/</a> の FAQ を見てください。</p>\n<p>ちなみに C# ソースコードの変更を HotReload する技術? も開発中で、</p>\n<ul>\n<li>LiveSharp - <a href=\"https://github.com/OYIon/LiveSharp\">https://github.com/OYIon/LiveSharp</a></li>\n</ul>\n<p>というそうです。Windows + Visual Studio なら試せるらしいので、興味ある方はどうぞ。</p>\n<h3 id=\"%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\">トラブルシューティング <a class=\"direct-link\" href=\"#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\">#</a></h3>\n<p>今のところ、</p>\n<ul>\n<li>VS4M に LiveXAML Extension をインストールしてすぐアプリ実行したが HotReload されない → VS4M を再起動したらなんか大丈夫になった</li>\n<li>LiveXAML nuget パッケージをコアプロジェクト以外には入れる必要がないのに入れちゃった → ビルドエラーになった</li>\n<li>iOS アプリで HotReload されない → Linker が Link Framework SDK Only になってた(Don't Link にする必要がある)</li>\n</ul>\n<p>に遭遇しました。いずれも VS4M の Application Output にログが出力されるので、それを手がかりに調べれば、なんやかんやで解決するでしょう。</p>\n<h3 id=\"%E8%B2%B7%E3%81%86%E3%82%88%E3%81%AD%EF%BC%9F\">買うよね？ <a class=\"direct-link\" href=\"#%E8%B2%B7%E3%81%86%E3%82%88%E3%81%AD%EF%BC%9F\">#</a></h3>\n<p>そんな LiveXAML、価格は</p>\n<ul>\n<li>$24 / 月</li>\n<li><strong>$240</strong> / ∞</li>\n</ul>\n<p>です。年間240$ じゃないよ <strong>「無制限」</strong> だよ。<br>\n即買いだよね。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/4741eebd-a9c9-9904-f2ae-dd9363e730c0.png\" alt=\"image.png\"></p>\n<p>はい買った。感覚的には Donation です。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>「世はまさに大HotReload時代」だけど Xamarin.Forms ではできるの？」<br>\n↓<br>\n<strong>「Visual Studio だけではムリ。でも LiveXAML という拡張機能を使うとできるよ！」</strong><br>\n↓<br>\n「なるほど、値段も <strong>$240 ポッキリだから、これは「その成果に敬意を表する寄付」だと思えば安いもの</strong> だね！」<br>\n↓<br>\n「Exactly！ こうして Visual Studio に頼らない開発ツールが増えていくと、開発者の選択肢が増えて、まさに &quot;Any Developer, Any App, Any Platform, <strong>Any Tool</strong>&quot; だね！」</p>\n",
      "date_published": "2018-12-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/12/18/2a8f14684b1210d75c1e/",
      "url": "https://blog.amay077.net/blog/2018/12/18/2a8f14684b1210d75c1e/",
      "title": "Xamarin.Forms の WebView で JavaScript 連携を行う(with iOS/Android共通化)",
      "content_html": "<h2 id=\"%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E4%BA%8B\">やりたい事 <a class=\"direct-link\" href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E4%BA%8B\">#</a></h2>\n<!--more-->\n<p>Xamarin.Forms 製アプリの WebView に表示した Webページから、ネイティブ(C#)で時間のかかる処理を行い、結果を JavaScript に通知したい。<br>\nJavaScript のコードは Android/iOS で共通にしたい。</p>\n<p>具体的には、次のような JavaScript コードの <code>heavyAdd(num)</code> を実行した時に、ネイティブ側で処理を行い、結果を <code>onResult(res)</code> で受信したい。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <br>  MyCalc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onResult</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> label <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    label<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'MyCalc.onResult - '</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>  MyCalc<span class=\"token punctuation\">.</span><span class=\"token function\">heavyAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E3%81%A7%E3%81%8D%E3%81%9F%EF%BC%81\">できた！ <a class=\"direct-link\" href=\"#%E3%81%A7%E3%81%8D%E3%81%9F%EF%BC%81\">#</a></h2>\n<ul>\n<li>前提 - Xamarin.Forms 3.4.x が必要</li>\n</ul>\n<h3 id=\"%E5%85%B1%E9%80%9A\">共通 <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A\">#</a></h3>\n<p><strong>sample.html</strong></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ja<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token keyword\">function</span> <span class=\"token function\">addAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <br>      MyCalc<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onResult</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">var</span> label <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        label<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'MyCalc.onResult - '</span> <span class=\"token operator\">+</span> res<span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>      MyCalc<span class=\"token punctuation\">.</span><span class=\"token function\">heavyAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">98</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>WebView−JavaScript連携サンプル<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addAsync();<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>計算実行<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>result<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>ローカルPC にある <code>sample.html</code> は、 Webサーバー(<a href=\"http://rennnosukesann.hatenablog.com/entry/2018/03/19/233245\">npm serve とか</a>)を立てて、 <a href=\"https://qiita.com/mininobu/items/b45dbc70faedf30f484e\">ngrok</a> を使って外部公開するのが便利ですね。</p>\n<p><strong>MainPage.xaml</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xamarin.com/schemas/2014/forms<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/winfx/2009/xaml<span class=\"token punctuation\">\"</span></span> <br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>local</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clr-namespace:WebViewSample<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WebViewSample.MainPage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>StackLayout</span> <span class=\"token attr-name\">Orientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Vertical<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>WebView</span> <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>webView<span class=\"token punctuation\">\"</span></span> <br>                 <span class=\"token attr-name\">Source</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://xxxx.ngrok.io/sample.html<span class=\"token punctuation\">\"</span></span><br>                 <span class=\"token attr-name\">VerticalOptions</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>FillAndExpand<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>StackLayout</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ContentPage</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"android%E5%81%B4\">Android側 <a class=\"direct-link\" href=\"#android%E5%81%B4\">#</a></h3>\n<p><strong>Android の CustomWebViewRenderer.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Java<span class=\"token punctuation\">.</span>Interop</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>Android</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ExportRenderer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WebView</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WebViewSample<span class=\"token punctuation\">.</span>Droid<span class=\"token punctuation\">.</span>CustomWebViewRenderer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">WebViewSample<span class=\"token punctuation\">.</span>Droid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomWebViewRenderer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">.</span>WebViewRenderer</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">CustomWebViewRenderer</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementChangedEventArgs<span class=\"token punctuation\">&lt;</span>WebView<span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            Control<span class=\"token punctuation\">.</span><span class=\"token function\">AddJavascriptInterface</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">JavaScriptHandler</span><span class=\"token punctuation\">(</span>Control<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MyCalc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">JavaScriptHandler</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Android<span class=\"token punctuation\">.</span>Webkit<span class=\"token punctuation\">.</span>WebView</span> webView<span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">JavaScriptHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Android<span class=\"token punctuation\">.</span>Webkit<span class=\"token punctuation\">.</span>WebView</span> webView<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webView <span class=\"token operator\">=</span> webView<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Export</span></span><span class=\"token punctuation\">]</span><br>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Android<span class=\"token punctuation\">.</span>Webkit<span class=\"token punctuation\">.</span>JavascriptInterface</span></span><span class=\"token punctuation\">]</span><br>        <span class=\"token keyword\">async</span> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">heavyAdd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// メインスレッドから呼ばないとエラー</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webView<span class=\"token punctuation\">.</span><span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>webView<span class=\"token punctuation\">.</span><span class=\"token function\">LoadUrl</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"javascript:MyCalc.onResult(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">);\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><a href=\"https://qiita.com/usayuki/items/aebd4e3ab791b7b008ca\">[Android][Kotlin]JavaScriptと相互通信 - Qiita</a></li>\n</ul>\n<p>を参考に、ネイティブのやり方をカスタムレンダラーで。<br>\nAndroid の方はまだ単純で <code>AddJavascriptInterface()</code> の第2引数がクラス名に、<code>JavascriptInterface</code> 属性を付けたメソッドが JavaScript のメソッド名になる。<br>\n結果の通知は <code>this.webView.LoadUrl($&quot;javascript:MyCalc.onResult(xx);</code> で。</p>\n<h3 id=\"ios%E5%81%B4\">iOS側 <a class=\"direct-link\" href=\"#ios%E5%81%B4\">#</a></h3>\n<p><strong>iOS の CustomWebViewRenderer.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Foundation</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">WebKit</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>iOS</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ExportRenderer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WebView</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">WebViewSample<span class=\"token punctuation\">.</span>iOS<span class=\"token punctuation\">.</span>CustomWebViewRenderer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">WebViewSample<span class=\"token punctuation\">.</span>iOS</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomWebViewRenderer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>iOS<span class=\"token punctuation\">.</span>WkWebViewRenderer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IWKScriptMessageHandler</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">VisualElementChangedEventArgs</span> e<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> webView <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>NativeView <span class=\"token keyword\">as</span> <span class=\"token class-name\">WKWebView</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// JavaScript から呼び出すハンドラを追加。</span><br>            webView<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span>UserContentController<span class=\"token punctuation\">.</span><span class=\"token function\">AddScriptMessageHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MyHeavyAdd\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// JavaScript 側で MyCalc.heavyAdd(n) が呼ばれた時に window.webkit.messageHandlers.xxx を呼ぶようにする。</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> script <span class=\"token operator\">=</span><br>                <span class=\"token string\">\"MyCalc = {};\"</span> <span class=\"token operator\">+</span><br>                <span class=\"token string\">\"MyCalc.heavyAdd = function (num) { window.webkit.messageHandlers.MyHeavyAdd.postMessage(num); };\"</span><span class=\"token punctuation\">;</span><br>            webView<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">.</span>UserContentController<span class=\"token punctuation\">.</span><span class=\"token function\">AddUserScript</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WKUserScript</span><span class=\"token punctuation\">(</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NSString</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> WKUserScriptInjectionTime<span class=\"token punctuation\">.</span>AtDocumentStart<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> IWKScriptMessageHandler<span class=\"token punctuation\">.</span><span class=\"token function\">DidReceiveScriptMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WKUserContentController</span> userContentController<span class=\"token punctuation\">,</span> <span class=\"token class-name\">WKScriptMessage</span> message<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>Name <span class=\"token operator\">==</span> <span class=\"token string\">\"MyHeavyAdd\"</span><span class=\"token punctuation\">)</span> <br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// 時間のかかる処理</span><br>                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span>Body <span class=\"token keyword\">as</span> <span class=\"token class-name\">NSNumber</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Int32Value <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// 結果を通知</span><br>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> webView <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>NativeView <span class=\"token keyword\">as</span> <span class=\"token class-name\">WKWebView</span><span class=\"token punctuation\">;</span><br>                webView<span class=\"token punctuation\">.</span><span class=\"token function\">EvaluateJavaScript</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"MyCalc.onResult(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">result</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">);\"</span></span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><a href=\"https://qiita.com/usayuki/items/6979d0d6f7d8f5b302ad\">[iOS][Swift]JavaScriptと相互通信 - Qiita</a></li>\n</ul>\n<p>を参考にカスタムレンダラーで実装。</p>\n<p>ポイント1。Xamarin.Forms 3.4から? WebView の実装が <code>WKWebView</code> になった模様。それまでは(少なくとも Xamarin.Forms 3.1 では) UIWebView だった。<br>\nXamarin.Forms 3.4 でないと <a href=\"https://github.com/xamarin/Xamarin.Forms/blob/3.4.0/Xamarin.Forms.Platform.iOS/Renderers/WkWebViewRenderer.cs\"><code>Xamarin.Forms.Platform.iOS.WkWebViewRenderer</code></a> が存在しないため使えない。</p>\n<p>ポイント２。iOS で JavaScript からネイティブの処理を呼ぶには <code>window.webkit.messageHandlers.xxxx.postMessage()</code> を使わなければならないが、これでは Android 側と共通化できないので、<code>AddUserScript</code> で <code>window.webkit.〜</code> を <code>MyCalc.heavyAdd</code> にマップしている。</p>\n<p>ポイント３。JavaScript からの呼び出しに反応するのは <code>IWKScriptMessageHandler</code> インターフェース。</p>\n<h2 id=\"%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\">こんな感じ <a class=\"direct-link\" href=\"#%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\">#</a></h2>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/488b5e50-3059-0897-0ea8-9d51b9592957.png\" alt=\"image.png\"></p>\n<p>端的に言うと、Android と異なる iOS の JavaScript→ネイティブ呼び出しを、AddUserScript で同じAPIにラップしたよーというお話でした。</p>\n",
      "date_published": "2018-12-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/12/14/4c418310872e8659fe6a/",
      "url": "https://blog.amay077.net/blog/2018/12/14/4c418310872e8659fe6a/",
      "title": "Azure Custom Vision に投入する学習用画像データを imgaug を使って水増ししてみた",
      "content_html": "<p>Azure Custom Vision を使ったシステムを作っています。</p>\n<!--more-->\n<p><a href=\"https://azure.microsoft.com/ja-jp/services/cognitive-services/custom-vision-service/\">Azure Custom Vision</a> を使うには、1つのタグに5つ以上の画像ファイルが必要です。</p>\n<p>が、データ提供元から画像データが一つしかもらえなかったり、そもそも5ファイル程度では期待した精度が得られなかったりします。</p>\n<p>こういう時、機械学習の世界では、学習用のデータを水増し(augmentation)することがよくあるようです。</p>\n<ul>\n<li><a href=\"https://qiita.com/bohemian916/items/9630661cd5292240f8c7\">機械学習のデータセット画像枚数を増やす方法 - Qiita</a></li>\n<li><a href=\"https://products.sint.co.jp/aisia/blog/vol1-7\">水増しと転移学習 (Vol.7)</a></li>\n</ul>\n<p>機械学習のフレームワーク(Cognitive toolkit を含む)には、データの水増し機能が入っているそうですが、今回は Custom Vision を使いたいだけなので、CNTK は使わず、画像の水増しを行うライブラリを使ってみました。</p>\n<h2 id=\"%E7%94%BB%E5%83%8F%E3%81%AE%E6%B0%B4%E5%A2%97%E3%81%97%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%81%84%E3%81%8F%E3%81%A4%E3%81%8B\">画像の水増しライブラリをいくつか <a class=\"direct-link\" href=\"#%E7%94%BB%E5%83%8F%E3%81%AE%E6%B0%B4%E5%A2%97%E3%81%97%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%81%84%E3%81%8F%E3%81%A4%E3%81%8B\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/aleju/imgaug\">aleju/imgaug: Image augmentation for machine learning experiments.</a></li>\n<li><a href=\"https://github.com/mdbloice/Augmentor\">mdbloice/Augmentor: Image augmentation library in Python for machine learning.</a></li>\n</ul>\n<p>Python ばっかりやなー。C# や JavaScript 製のも探してみたのですが Popular なものは見つからず。<br>\nPython はハンズオンを一度経験しただけの状態ですが、トライしてみます。</p>\n<p>ツールは「imgaug」を使うことにしました。日本語の解説記事がありましたので。</p>\n<ul>\n<li><a href=\"https://dev.classmethod.jp/etc/imgaug-introduction/\">imgaugを使ってPythonで画像増幅を行う ｜ DevelopersIO</a></li>\n</ul>\n<h2 id=\"%E3%81%A4%E3%81%84%E3%81%A7%E3%81%AB-docker-%E3%82%82%E4%BD%BF%E3%81%8A%E3%81%86\">ついでに Docker も使おう <a class=\"direct-link\" href=\"#%E3%81%A4%E3%81%84%E3%81%A7%E3%81%AB-docker-%E3%82%82%E4%BD%BF%E3%81%8A%E3%81%86\">#</a></h2>\n<p>たしか Python って 2.x と 3.x がどちらも生きてるんだよねえ、(macOSだけど)環境構築面倒そう。<br>\nということで Docker を使うことにしました。Docker で動くようにしておけば、ゆくゆくはまるっと FaaS 化できるよね、という期待もあります。</p>\n<p>Docker は version 18.09.0 が入っているのでこのままで。<br>\nまず Docker イメージを作るための <code>Dockerfile</code> を記述します。</p>\n<p><strong>Dockerfile</strong></p>\n<pre><code>FROM python:3\n\nRUN pip install imgaug\nRUN pip install opencv-python\nRUN pip install imageio\n</code></pre>\n<p>python:3 をベースに imgaug と処理に必要なライブラリ各種をインストールしておきます。</p>\n<p>そして <code>Dockerfile</code> のあるディレクトリで</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">docker build <span class=\"token builtin class-name\">.</span> imgaug</code></pre>\n<p>を実行すると、 imgaug という名の Docker イメージが作成されます。(↓は <code>docker images</code> で確認した様子)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>imgaug              latest              1fb215f98c9a        About an hour ago   <span class=\"token number\">1</span>.41GB<br>python              <span class=\"token number\">3</span>                   1e80caffd59e        <span class=\"token number\">3</span> weeks ago         923MB</code></pre>\n<h2 id=\"imgaug-%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E6%B0%B4%E5%A2%97%E3%81%97%E3%81%99%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\">imgaug で画像を水増しするコードを書く <a class=\"direct-link\" href=\"#imgaug-%E3%81%A7%E7%94%BB%E5%83%8F%E3%82%92%E6%B0%B4%E5%A2%97%E3%81%97%E3%81%99%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\">#</a></h2>\n<p>次に imgaug で水増しを行う処理を Python で書きます。</p>\n<p><code>work/</code> ディレクトリを作って、その中に <code>run_aug.py</code> を作成することにしましょうか。<br>\nあ、今のところは docker 関係なく。ホストコンピュータの方で作業します。</p>\n<p><strong>run_aug.py</strong></p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> imgaug <span class=\"token keyword\">as</span> ia<br><span class=\"token keyword\">from</span> imgaug <span class=\"token keyword\">import</span> augmenters <span class=\"token keyword\">as</span> iaa<br><span class=\"token keyword\">from</span> matplotlib <span class=\"token keyword\">import</span> pyplot <span class=\"token keyword\">as</span> plt<br><span class=\"token keyword\">import</span> imageio<br><span class=\"token keyword\">import</span> glob<br><span class=\"token keyword\">import</span> os<span class=\"token punctuation\">.</span>path<br><br><span class=\"token keyword\">def</span> <span class=\"token function\">remove_glob</span><span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token keyword\">for</span> p <span class=\"token keyword\">in</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span>pathname<span class=\"token punctuation\">,</span> recursive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>isfile<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>            os<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>dir_in<span class=\"token punctuation\">,</span> dir_out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    <span class=\"token comment\"># 出力先ディレクトリをクリーン</span><br>    remove_glob<span class=\"token punctuation\">(</span>dir_out <span class=\"token operator\">+</span> <span class=\"token string\">'/*'</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">for</span> filepath <span class=\"token keyword\">in</span> glob<span class=\"token punctuation\">.</span>glob<span class=\"token punctuation\">(</span>dir_in <span class=\"token operator\">+</span><span class=\"token string\">'/*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'in: '</span> <span class=\"token operator\">+</span> filepath<span class=\"token punctuation\">)</span><br>        img <span class=\"token operator\">=</span> imageio<span class=\"token punctuation\">.</span>imread<span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span><br><br>        <span class=\"token comment\"># ノイズ</span><br>        noise<span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> dir_out<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\"># 加工後画像をファイルに保存する</span><br><span class=\"token keyword\">def</span> <span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> dir_out<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> aug_img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    filename <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>basename<span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">)</span> <span class=\"token comment\"># /data_in/img.jpg -> img.jpg</span><br>    root<span class=\"token punctuation\">,</span> ext <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">)</span> <span class=\"token comment\"># img.jpg -> (img, jpg)</span><br>    outpath <span class=\"token operator\">=</span> dir_out <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> root <span class=\"token operator\">+</span> <span class=\"token string\">'_'</span> <span class=\"token operator\">+</span> prefix <span class=\"token operator\">+</span> <span class=\"token string\">'_'</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> ext<br>    imageio<span class=\"token punctuation\">.</span>imwrite<span class=\"token punctuation\">(</span>outpath<span class=\"token punctuation\">,</span> aug_img<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'out: '</span> <span class=\"token operator\">+</span> outpath<span class=\"token punctuation\">)</span><br><br><span class=\"token comment\"># ノイズを入れる</span><br><span class=\"token keyword\">def</span> <span class=\"token function\">noise</span><span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> dir_out<span class=\"token punctuation\">,</span> img<span class=\"token punctuation\">,</span> params<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><br>    i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>    <span class=\"token keyword\">for</span> d <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">:</span><br>        i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><br>        <span class=\"token comment\"># 画像に変換を適用する</span><br>        augDropout <span class=\"token operator\">=</span> iaa<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span>p<span class=\"token operator\">=</span>d<span class=\"token punctuation\">)</span><br>        aug_img <span class=\"token operator\">=</span> augDropout<span class=\"token punctuation\">.</span>augment_image<span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><br>        writeFile<span class=\"token punctuation\">(</span>filepath<span class=\"token punctuation\">,</span> dir_out<span class=\"token punctuation\">,</span> <span class=\"token string\">'noise'</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> aug_img<span class=\"token punctuation\">)</span><br><br><span class=\"token builtin\">dir</span> <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span> <span class=\"token comment\"># 実行ファイルの場所</span><br>main<span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/images_in'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">dir</span> <span class=\"token operator\">+</span> <span class=\"token string\">'/images_out'</span><span class=\"token punctuation\">)</span></code></pre>\n<p>これが C#er が初めて書いた Python のコードだｗ</p>\n<p>ええと、 <code>run_aug.py</code> のあるディレクトリに <code>images_in/</code>、 <code>images_out/</code> というディレクトリを作り、入力画像を <code>images_in/</code> に入れます。</p>\n<p><code>image_in/</code> 内のファイルを列挙して、入力ファイルにノイズを入れます。 <code>noise</code> 関数に渡しているパラメータ <code>[0.3, 0.4, 0.5]</code> はノイズの濃さを示しており、ノイズ薄い・中間・濃いの3つのファイルが <code>images_out/</code> に出力されるという仕組みです。</p>\n<h2 id=\"docker-%E3%81%A7-run_aug.py-%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\">Docker で <code>run_aug.py</code> を実行する <a class=\"direct-link\" href=\"#docker-%E3%81%A7-run_aug.py-%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Docker 内で、Python で <code>run_aug.py</code> を実行します。<br>\n<code>work/</code> ディレクトリで、以下のコマンド一発です。</p>\n<pre><code>cd work\n\ndocker run --rm -v $(pwd):/temp imgaug python /temp/work/run_aug.py\n</code></pre>\n<p>一応解説。</p>\n<ul>\n<li>docker run : docker コンテナを作って起動します</li>\n<li>--rm : 実行が終わったら直ちにコンテナを削除します</li>\n<li>-v : <code>$(pwd)</code>=現在のディレクトリを docker 内の <code>/temp</code> ディレクトリにマップします</li>\n<li>imgaug : docker イメージ名です(先に作ったやつ)</li>\n<li>python /temp/work/run_aug.py : docker 内で実行するコマンドです。Python で <code>run_aug.py</code> を実行します。</li>\n</ul>\n<p>完了すると、 <code>images_out/</code> ディレクトリに、</p>\n<pre><code>sample_noise_1.jpg\nsample_noise_2.jpg\nsample_noise_3.jpg\n</code></pre>\n<p>の水増し画像ファイル群が出力されます。</p>\n<h2 id=\"%E5%AE%8C%E5%85%A8%E7%89%88\">完全版 <a class=\"direct-link\" href=\"#%E5%AE%8C%E5%85%A8%E7%89%88\">#</a></h2>\n<p>これの完全版を github に公開しています。<br>\nノイズ以外に「一部欠落」「回転」「移動」「剪断(shear)」を行っています。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/imgaug_sample_with_docker\">amay077/imgaug_sample_with_docker: imgaug を使うサンプルプログラム（実行環境 docker 付き）</a></li>\n</ul>\n<p><strong>完全版の実行結果</strong></p>\n<p><img src=\"https://github.com/amay077/imgaug_sample_with_docker/raw/master/result.png\" alt=\"\"></p>\n<h2 id=\"%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">おわりに <a class=\"direct-link\" href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">#</a></h2>\n<p>こうして水増しされた画像を、元画像とともに Custom Vision に投入して Train し、まずまず期待した検出が行えるようになりました。</p>\n<p>水増しの加工の種類は imgaug にもたくさん用意されており、今回試したものが最適とは思えませんが、とりあえず検証を繰り返すための 「たたき台」 としては使えると思っています。</p>\n<p>ひとつ疑問なのは、</p>\n<p><strong>「Custom Vision の Train の過程で、自動的にデータの水増し(augmentation)を行っているのではないか？」</strong></p>\n<p>ということです。特に根拠はなく、「CNTKには、データの水増し機能が入っている」という情報から勝手に思っているだけなのですが。</p>\n<p>できれば機械学習そのものに対する学習はできるだけ避けてとおりたい（手が回らん）ので、簡単な手間で使用できる Custom Vision を始めとする各社の PaaS は、大変助かります。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Q:どのくらい勉強しなければならないのか？<br>A:時間軸次第。２～３年先には機械学習もパターン化すると予想。その後にはアルゴリズムを選択する必用もなくなると思う。 <a href=\"https://twitter.com/hashtag/roomH?src=hash&amp;ref_src=twsrc%5Etfw\">#roomH</a> <a href=\"https://twitter.com/hashtag/decode16?src=hash&amp;ref_src=twsrc%5Etfw\">#decode16</a></p>&mdash; あめいぱわーにおまかせろ! (@amay077) <a href=\"https://twitter.com/amay077/status/735333613085020160?ref_src=twsrc%5Etfw\">2016年5月25日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>これ、2年前の de:code でスピーカーの方が話されていたことですが、だいぶその通りな世界になりつつあるなあという感じがします。</p>\n",
      "date_published": "2018-12-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/12/11/1c1f55d09760fa57b448/",
      "url": "https://blog.amay077.net/blog/2018/12/11/1c1f55d09760fa57b448/",
      "title": "Android/iOSアプリを Azure Pipelines から DeployGate に配信する",
      "content_html": "<p><a href=\"https://azure.microsoft.com/ja-jp/services/devops/pipelines/\">Azure Pipelines</a> でビルドした Android や iOS アプリを <a href=\"https://deploygate.com/?locale=ja\">DeployGate</a> に配信します。</p>\n<!--more-->\n<p>DeployGate はモバイルアプリをテスターやβ版ユーザーに配布するサービスです。<br>\nMicrosoft 系のサービスだと App Center にアプリ配布機能があるのですが、DeployGate は日本のサービスで（クライアントアプリ含め）UI が日本語である点と、一つのアプリをグループごとに配信管理(会社のお偉いさんた達には Stable を、同僚グループには最新版を、とか)できるのが気に入っています。</p>\n<h2 id=\"deploygate-%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%90%8D%E3%81%A8-api%E3%82%AD%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97\">DeployGate のユーザー名と APIキーの取得 <a class=\"direct-link\" href=\"#deploygate-%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E5%90%8D%E3%81%A8-api%E3%82%AD%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97\">#</a></h2>\n<p>1つ目は、DeployGate でユーザーを作ったときのユーザー名を得ておきます。<br>\n2つ目は <a href=\"https://deploygate.com/settings\">https://deploygate.com/settings</a> にアクセスして「API key」に表示されてる値を得ます。</p>\n<h2 id=\"azule-pipelines-%E3%81%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%82%92%E8%BF%BD%E5%8A%A0\">Azule Pipelines にタスクを追加 <a class=\"direct-link\" href=\"#azule-pipelines-%E3%81%AB%E3%82%BF%E3%82%B9%E3%82%AF%E3%82%92%E8%BF%BD%E5%8A%A0\">#</a></h2>\n<p>DeployGate 用のタスクは残念ながら無いので、Bash Script でやります。</p>\n<h3 id=\"android-%E3%81%AE%E5%A0%B4%E5%90%88\">Android の場合 <a class=\"direct-link\" href=\"#android-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>Android の場合は、Bash のタスクを「Signing and aligning APK file(s)」の下に追加します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/9c3766b0-72c6-9259-30e6-fa01eaeff8f5.png\" alt=\"image.png\"></p>\n<p>スクリプトは次のように記述します。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"token=＜DeployGateAPIキー＞\"</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"file=@<span class=\"token variable\"><span class=\"token variable\">$(</span>build.binariesdirectory<span class=\"token variable\">)</span></span>\\<span class=\"token variable\"><span class=\"token variable\">$(</span>BuildConfiguration<span class=\"token variable\">)</span></span>\\＜APKファイル名＞\"</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"message=＜デプロイ時のメッセージ＞\"</span> <span class=\"token punctuation\">\\</span><br>  https://deploygate.com/api/users/＜DeployGateユーザー名＞/apps</code></pre>\n<ul>\n<li>＜DeployGateAPIキー＞ - 先に取得しておいた DeployGate の APIキー</li>\n<li>＜DeployGateユーザー名＞ - 先に取得しておいた DeployGate の ユーザー名</li>\n<li>＜APKファイル名＞ - ビルド・サインされた APK ファイル（com.mycompany.awesomeapp-Signed.apk など）</li>\n<li>＜デプロイ時のメッセージ＞ - DeployGate へのこの配信に付与するメッセージ(最新のgitコミットログを代入できるとよいんだけど…)</li>\n</ul>\n<p>＜APKファイル名＞ は、初見では分からないと思うので、一度ビルドして Artifact に保存されたファイル一覧を確認するとよいと思います。くれぐれも「サイン済み」の「-Signed」が付いた apk ファイルを指定してください。</p>\n<h3 id=\"ios-%E3%81%AE%E5%A0%B4%E5%90%88\">iOS の場合 <a class=\"direct-link\" href=\"#ios-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>iOS の場合は、Bash のタスクを「Copy Files to: $(build.artifactstagingdirectory)」の下に追加します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/5ba3beaf-dc36-4891-fdbf-9f52a0d1d938.png\" alt=\"image.png\"></p>\n<p>スクリプトは Android とほぼ同じように、次のように記述します。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"token=＜DeployGateAPIキー＞\"</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"file=@<span class=\"token variable\"><span class=\"token variable\">$(</span>build.artifactstagingdirectory<span class=\"token variable\">)</span></span>/＜ipaファイルへのパス＞\"</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"message=＜デプロイ時のメッセージ＞\"</span> <span class=\"token punctuation\">\\</span><br>  https://deploygate.com/api/users/＜DeployGateユーザー名＞/apps</code></pre>\n<ul>\n<li>＜DeployGateAPIキー＞ - Android 側と同じ</li>\n<li>＜DeployGateユーザー名＞ - Android 側と同じ</li>\n<li>＜ipaファイルへのパス＞ - ビルドされた ipa ファイルへのパス（xxx/bin/iPhone/Release/AwesomeApp.ipa など）</li>\n<li>＜デプロイ時のメッセージ＞ - Android 側と同じ</li>\n</ul>\n<p>＜ipaファイルへのパス＞ も、一度ビルドして Artifact を見るのがよいと思います。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Azure Pipelines を使う人は DeployGate にあまり馴染みがないと感じるので紹介してみました。<br>\nこれは Pipelines の Builds じゃなくて Releases の方でやるべきかな？わからん。</p>\n<p>signed-apk や ipa ファイルへのパスを示す環境変数があったら便利なんすけどねー、どやんすー。</p>\n",
      "date_published": "2018-12-11T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/11/30/694b6d5929c71bb00308/",
      "url": "https://blog.amay077.net/blog/2018/11/30/694b6d5929c71bb00308/",
      "title": "Azure Pipelines で Xamarin.Android の AOT Compile を使う",
      "content_html": "<p>Xamarin.Forms で簡単なアプリを作って、その Android 版を社内向けに配布しようとしたんですけど、 .apk のサイズが 60Mbyte超 もあって、「仕方ないよね…」と思いながら、 モバイル回線でそれをダウンロードさせるのかー、と思うと良心の呵責を感じてしまい、可能な限りで apk のサイズを縮小することを試みました。</p>\n<!--more-->\n<h2 id=\"xamarin.android-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%AA%BF%E6%95%B4%E3%81%97%E3%81%A6-apk-%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%B8%9B%E3%82%89%E3%81%99\">Xamarin.Android アプリのビルドオプションを調整して apk サイズを減らす <a class=\"direct-link\" href=\"#xamarin.android-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%AA%BF%E6%95%B4%E3%81%97%E3%81%A6-apk-%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%B8%9B%E3%82%89%E3%81%99\">#</a></h2>\n<p>apk サイズの削減については、</p>\n<ul>\n<li><a href=\"https://qiita.com/conduits/items/cd7338329c3b7c22dc9c\">Xamarin.Android 起動速度改善の記録 (追記あり) - Qiita</a></li>\n</ul>\n<p>を参考にさせていただきました。当該記事は「起動時間」にフィーチャーしていますが、サイズ縮小についても十分に有用です。</p>\n<p>最終的に落ち着いたコンパイルオプションは、</p>\n<ul>\n<li>Android Build - Enable AOT</li>\n<li>Linker - Link SDK assemblies only</li>\n</ul>\n<p>で、これも上記記事と同じです(LLVM は使ってません)。<br>\nこの結果 apk のサイズは 60Mbyte超 → 33Mbyte になりました。</p>\n<p>（上記に比べてさらに、「Linker - Link all assemblies」 とすれば 25Mbyte にまで削減できましたが、このアプリは起動せず、「リンクしたらマズそうなアセンブリ」を Ignore assemblies に追加していったら起動するようにはなったものの apk は 29Mbyte になったので、かけるコストに対して効果は薄そうだと判断してやめました。）</p>\n<p>ここまではアプリのビルドの話で、次からが本題です。</p>\n<h2 id=\"azure-pipelines-%E3%81%A7-xamarin.forms(android)-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B\">Azure Pipelines で Xamarin.Forms(Android) アプリをビルドする <a class=\"direct-link\" href=\"#azure-pipelines-%E3%81%A7-xamarin.forms(android)-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B\">#</a></h2>\n<p><a href=\"https://azure.microsoft.com/ja-jp/services/devops/pipelines/\">Azure Pipelines</a> は Azure DevOps というサービスに含まれるサブサービスの一つで、CI/CD の機能を提供します。</p>\n<p>Android, iOS, Linux, macOS, Windows 用のアプリをビルド・デプロイできます。<br>\nOSS向けならビルド時間は無制限、個人プライベート向けでも1800分/月[^a] まで無料で使うことができます。</p>\n<p>[^a]: サイトには「並列ジョブ (1 か月あたり最大 1,800 分)」 とあるので、単一のジョブなら無制限なのかもしれません。</p>\n<p>Azure Pipelines で Xamarin.Android 向けのプリセットを選択すると、ほぼそのままアプリのビルドが行える状態になります。このプリセットで使用されるビルドエージェントは &quot;Hosted VS2017&quot; で、つまり 「Visual Studio 2017 がインストールされた Windows マシン」 です。</p>\n<p>が、上記の 「Enable AOT」 を有効にしたプロジェクトで CI ビルドさせると、以下のエラーが出ます。</p>\n<blockquote>\n<p>XA5101: Missing Android NDK toolchains directory '\\toolchains'. Please install the Android NDK.</p>\n</blockquote>\n<p>どうやら Android NDK がインストールされていない様子。 Agent の Pool information を見ても Android NDK は記載されていません。</p>\n<p>そこで <a href=\"https://twitter.com/AzureDevOps\">公式Twitter</a> に凸! すると、</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">Thanks for reaching out! We rely on Visual Studio to install the Android NDK. This thread with a similar scenario might come in handy: <a href=\"https://t.co/rSqfEaoLhS\">https://t.co/rSqfEaoLhS</a>.</p>&mdash; Azure DevOps (@AzureDevOps) <a href=\"https://twitter.com/AzureDevOps/status/1068128192685375488?ref_src=twsrc%5Etfw\">2018年11月29日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>「Android NDK は Visual Studio が入れちゃんだわ、NDK は <code>C:\\Microsoft\\AndroidNDK64\\android-ndk-r15c</code> に入ってるよ(超意訳)。」とのこと。<br>\nこれを手がかりにさらに調べると、</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/36940896/missing-android-ndk-toolchains-directory-toolchains-when-building-xamarin-and/47338287#47338287\">Missing Android NDK toolchains directory '\\toolchains' when building Xamarin.Android with hosted tfs build server - Stack Overflow</a></li>\n</ul>\n<blockquote>\n<p>in the MSBuild Options, provide the following Additional Argument:</p>\n<p>VS2017 Hosted agent:<br>\n/p:AndroidNdkDirectory=&quot;C:\\ProgramData\\Microsoft\\AndroidNDK64\\android-ndk-r13b&quot;</p>\n</blockquote>\n<p>これだね。</p>\n<p>というわけでビルドタスクのオプションに、</p>\n<pre><code>/p:AndroidNdkDirectory=&quot;C:\\Microsoft\\AndroidNDK64\\android-ndk-r15c&quot;\n</code></pre>\n<p>を追加します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/1025aa90-0845-16c6-2578-a4db3949904d.png\" alt=\"image.png\"></p>\n<p>これで AOT を有効にした状態の Xamarin.Android プロジェクトがビルドできるようになりました。</p>\n<p>そういえば AOT はまだ Experimental ですね。<br>\nあと Enterprise Edition でしか使えないということだったような？ まあ見なかったことにしよう。</p>\n",
      "date_published": "2018-11-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/10/29/d774613ccab4e7517201/",
      "url": "https://blog.amay077.net/blog/2018/10/29/d774613ccab4e7517201/",
      "title": "Xamarin Profiler と Android Profiler を併用して Xamarin Android アプリのメモリ使用量を測定する",
      "content_html": "<p>Xamarin 製アプリのメモリのプロファイリングは、</p>\n<!--more-->\n<ul>\n<li>.NET(mono ランタイム) が管理するオブジェクト</li>\n<li>Java(Dalvik) が管理するオブジェクト</li>\n</ul>\n<p>を意識する必要があります。</p>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB\">使用するツール <a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%84%E3%83%BC%E3%83%AB\">#</a></h2>\n<p>.NET(mono ランタイム) が管理するオブジェクトのメモリ測定には、</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/ja-jp/xamarin/tools/profiler/?tabs=vsmac\">Xamarin Profiler - Xamarin ｜ Microsoft Docs</a></li>\n</ul>\n<p>を使用します。これは Visual Studio と連携するアプリで、IDE から Run</p>\n<blockquote>\n<p>Start Profiling とすると起動できるものです。</p>\n</blockquote>\n<p>Java(Dalvik) が管理するオブジェクトのメモリ測定には、</p>\n<ul>\n<li><a href=\"https://developer.android.com/studio/profile/android-profiler?hl=ja\">Android Profiler でアプリのパフォーマンスを測定する  ｜  Android Developers</a></li>\n</ul>\n<p>を使用します。こちらは Android Studio をインストールすれば一緒に入っています。</p>\n<h2 id=\"%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F\">試してみた <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<h3 id=\"xamarin-profiler\">Xamarin Profiler <a class=\"direct-link\" href=\"#xamarin-profiler\">#</a></h3>\n<p>Xamarin Android で、画面に2つのボタンを配置し、それぞれ次のような処理を行うコードを書きます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"LeakSample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Icon <span class=\"token operator\">=</span> <span class=\"token string\">\"@mipmap/icon\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>MemoryStream</span> netStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>MemoryStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>ByteArrayOutputStream</span> javaStream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Java<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>        <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> size <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span><br>            netStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> size <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span><br>            javaStream<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">byte</span></span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>myButton1</code> を押したときには、 .NET のクラスである <code>System.IO.MemoryStream</code> にデータ追加します。</p>\n<p><code>myButton2</code> を押したときには、 Java のクラスである <code>Java.IO.ByteArrayOutputStream</code> にデータ追加します。</p>\n<p>こんなプログラムを Run &gt; Start Profiling で起動してみます。<br>\nアプリが起動する前に Xamarin Profiler が起動します。Choose target は既に起動したい Android アプリが設定されているので、「割り当て」を選択して「Next」します。</p>\n<p>次の画面の「Enable automatic snapshots」をチェックすると自動的(一定間隔で)にメモリのスナップショットを記録しますがこれはお好みで。</p>\n<p>「プリファイリングの開始」を押すとアプリが起動します。<br>\nXamarin Profiler の上部にある カメラアイコン を押すと任意のタイミングでメモリ状態を記録できます。</p>\n<p><code>myButton1</code> を数回押してから カメラアイコン を押してみましょう。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/83830c8c-486f-e9da-5a1b-89b11e96c88f.png\" alt=\"image.png\"></p>\n<p>上図のように、追加した byte データが記録されています。</p>\n<p>次に、<code>myButton2</code> を数回押してから カメラアイコン を押してみましょう。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/a82fb1e1-f810-c511-ec10-260e941676eb.png\" alt=\"image.png\"></p>\n<p>今度は Dalvik 管轄のオブジェクトへデータを追加したので Xamarin Profiler ではそのクラスは観測できません。（ワーキングセットは増えてるのでそれは観測できる？）</p>\n<h3 id=\"android-profiler-with-xamarin.android-apps\">Android Profiler with Xamarin.Android apps <a class=\"direct-link\" href=\"#android-profiler-with-xamarin.android-apps\">#</a></h3>\n<p>Dalvik が管理している領域のプロファイリングは Android Profiler を使います。<br>\nXamarin であっても「それは Android/Java API をラップしただけ」の実体はネイティブ Android アプリなので、Android SDK のツールは使えるのです。</p>\n<p>Android Studio を起動して適当な Android Apps のプロジェクトを開くか作ります（これはダミーです）。<br>\n次に メニュー &gt; View &gt; Tool Windows &gt; Profiler で下部に Profiler ペインが開きます。<br>\nSESSIONS の横の「＋」を押して、対象の端末 &gt; Other processes &gt; 対象のアプリID を選択すると、プロファイリングが始まります。</p>\n<p>この状態で、アプリの <code>myButton2</code> を何度か押すと、下図のようになります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/ac764a06-0947-a4e1-b579-75cde686d392.png\" alt=\"image.png\"></p>\n<p>ボタンを押すたびにメモリ使用量が増えているのが確認できます。<br>\n（実は <code>myButton1</code> を押すと、最初の1回はメモリ使用量が増えます。&quot;.NET だけ&quot; には留まらないなにか、があるのでしょうか、おそらく。）</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>このように Xamarin(.NET)側のプロファイリングには Xamarin Profiler が、Java/Android API使用部のプロファイリングには Android Profiler がそれぞれ使用でき、同時利用あるいは併用することで、 Xamarin Android アプリの計測ができます。</p>\n<p>これは Xamarin.Forms アプリでも同様です。その場合、Custom Renderer やライブラリの Android 依存な箇所の計測は Android Profiler に頼ることがでてくるでしょう。</p>\n<p>また、Xamarin Profiler は Xamarin.iOS アプリの計測もできます。というか Xamarin Profiler の Look&amp;Feel は Xcode - Instruments にとても似ていますね。</p>\n<p>各種プロファイラ自体の使い方や機能については、私も全然把握できてないので、知見が溜まったらまた何か書きます。</p>\n",
      "date_published": "2018-10-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/10/29/4862dece31f3d83bf050/",
      "url": "https://blog.amay077.net/blog/2018/10/29/4862dece31f3d83bf050/",
      "title": "Android の app/build.gradle に kapt databinding:compiler の定義は要らなくなった(というか書いちゃダメ)",
      "content_html": "<p>3ヶ月ぶりにメンテすることになった Android アプリのプロジェクトを現在(2018年10月)最新の Android Studio で開いてビルドしたらエラーになった。</p>\n<!--more-->\n<p>その解決事例を記録しておく。</p>\n<p>結論だけ言うと <strong>「app/build.gradle の app/build.gradle の <code>kapt '*.databinding:compiler:x.x.x'</code> の行は消せ」</strong> です。</p>\n<h2 id=\"0.-%E4%BF%AE%E6%AD%A3%E5%89%8D%E3%81%AE-build.gradle\">0. 修正前の build.gradle <a class=\"direct-link\" href=\"#0.-%E4%BF%AE%E6%AD%A3%E5%89%8D%E3%81%AE-build.gradle\">#</a></h2>\n<p>修正前の Project と app モジュールの build.gradle はこんな感じ。<br>\n3ヶ月前の時点で最新の Kotlin, Gradle, Support Libraries, ACC などを使っていた。</p>\n<p><strong>Project: build.gradle</strong></p>\n<pre><code>// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.2.0'\n    repositories {\n        maven { url 'https://maven.google.com' }\n        jcenter()\n        google()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.1.2'\n        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;\n        classpath 'com.github.gfx.ribbonizer:ribbonizer-plugin:2.1.0'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        jcenter()\n        maven { url 'https://maven.google.com' }\n        maven { url 'https://jitpack.io' }\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n\next {\n    playServicesVersion = &quot;11.6.2&quot;\n    supportLibVersion = &quot;26.1.0&quot;\n    runnerVersion = &quot;1.0.1&quot;\n    rulesVersion = &quot;1.0.1&quot;\n    espressoVersion = &quot;3.0.1&quot;\n    archLifecycleVersion = &quot;1.0.0&quot;\n    archRoomVersion = &quot;1.0.0&quot;\n}\n</code></pre>\n<p><strong>app: build.gradle</strong></p>\n<pre><code>apply plugin: 'com.android.application'\napply plugin: 'kotlin-android'\napply plugin: 'kotlin-android-extensions'\napply plugin: 'kotlin-kapt'\napply plugin: 'com.github.gfx.ribbonizer'\n\nandroid {\n    compileSdkVersion 26\n    defaultConfig {\n        applicationId &quot;my.domain.awesomeapp&quot;\n        minSdkVersion 23\n        targetSdkVersion 26\n        versionCode 101\n        versionName &quot;1.0&quot;\n        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;\n        multiDexEnabled true\n    }\n\n    buildTypes {\n        debug {\n            applicationIdSuffix &quot;.debug&quot;\n        }\n\n        experiment {\n            applicationIdSuffix &quot;.exp&quot;\n            debuggable true\n        }\n\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n\n    dataBinding {\n        enabled = true\n    }\n}\n\ndependencies {\n    kapt 'com.android.databinding:compiler:3.1.2'\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {\n        exclude group: 'com.android.support', module: 'support-annotations'\n    })\n\n\n    // Kotlin\n    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;\n\n    def coroutines_version = '0.20'\n    implementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version&quot;\n    implementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version&quot;\n\n    // Android Support Libraries\n    implementation 'com.android.support:design:' + rootProject.supportLibVersion\n    implementation 'com.android.support:appcompat-v7:' + rootProject.supportLibVersion\n    implementation 'com.android.support:cardview-v7:' + rootProject.supportLibVersion\n    implementation 'com.android.support.constraint:constraint-layout:1.0.2'\n\n    // Google Play services\n    implementation 'com.google.android.gms:play-services-maps:' + rootProject.playServicesVersion\n    implementation 'com.google.android.gms:play-services-location:' + rootProject.playServicesVersion\n\n    // retrofit &amp; Gson\n    implementation 'com.squareup.retrofit2:retrofit:2.1.0'\n    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'\n    implementation 'com.squareup.okhttp3:logging-interceptor:3.3.1'\n    implementation 'com.google.code.gson:gson:2.8.0'\n\n    // DeployGate\n    implementation 'com.deploygate:sdk:4.0.0'\n\n    // Others\n    implementation 'com.github.florent37:materialviewpager:1.2.3'\n    implementation 'com.vividsolutions:jts-core:1.14.0'\n    implementation 'com.annimon:stream:1.1.6'\n    implementation 'com.squareup.picasso:picasso:2.5.2'\n    implementation 'com.google.android:flexbox:0.3.1'\n\n    // AAC\n    implementation 'android.arch.lifecycle:extensions:' + rootProject.archLifecycleVersion\n    implementation 'android.arch.persistence.room:runtime:' + rootProject.archRoomVersion\n    annotationProcessor &quot;android.arch.lifecycle:compiler:&quot; + rootProject.archLifecycleVersion\n    annotationProcessor &quot;android.arch.persistence.room:compiler:&quot; + rootProject.archRoomVersion\n\n    // debot\n//    debugCompile 'com.tomoima.debot:debot:2.0.3'\n//    releaseCompile 'com.tomoima.debot:debot-no-op:2.0.3'\n    implementation 'com.tomoima.debot:debot:2.0.3'\n\n    // Rx, RxProperty\n    implementation 'io.reactivex.rxjava2:rxjava:2.0.7'\n    implementation 'io.reactivex.rxjava2:rxkotlin:2.1.0'\n    implementation 'com.github.k-kagurazaka.rx-property-android:rx-property:4.0.0'\n    implementation 'com.github.k-kagurazaka.rx-property-android:rx-property-kotlin:4.0.0'\n    implementation 'com.jakewharton.rxrelay2:rxrelay:2.0.0'\n\n    // Geo\n    implementation 'ch.hsr:geohash:1.3.0'\n\n    // Rutime permission\n    implementation 'net.taptappun.taku.kobayashi:runtimepermissionchecker:1.0.4'\n\n    testImplementation 'junit:junit:4.12'\n}\nrepositories {\n    mavenCentral()\n    maven { url &quot;http://dl.bintray.com/kotlin/kotlin-eap-1.1&quot; }\n}\n\n//アイコン帯\nribbonizer {\n    builder { variant, iconFile -&gt;\n        if (variant.buildType.name.equals(&quot;debug&quot;)) {\n            // debug は緑\n            return greenRibbonFilter(variant, iconFile)\n        }\n    }\n}\n</code></pre>\n<h2 id=\"1.-gradle-%E3%81%AE%E6%9B%B4%E6%96%B0\">1. Gradle の更新 <a class=\"direct-link\" href=\"#1.-gradle-%E3%81%AE%E6%9B%B4%E6%96%B0\">#</a></h2>\n<p>現在最新の Android Studio(3.2.1) でこのプロジェクトを開いて <strong>Rebuild をしてみた</strong> 。</p>\n<p>するとビルドの途中で「Gradle Plugin を 3.2.1 に、Gradle 自体を 4.6 に上げろ」と言ってくるので Update を押す。</p>\n<p><code>Project: build.gradle</code> は次のように書き換えられる。</p>\n<pre><code>-        classpath 'com.android.tools.build:gradle:3.1.2'\n+        classpath 'com.android.tools.build:gradle:3.2.1'\n</code></pre>\n<p>また、<code>gradle/wrapper/gradle-wrapper.properties</code> も次のように更新される。</p>\n<pre><code>-distributionUrl=https\\://services.gradle.org/distributions/gradle-4.4-all.zip\n+distributionUrl=https\\://services.gradle.org/distributions/gradle-4.6-all.zip\n</code></pre>\n<h2 id=\"2.-kotlin-gradle-plugin-%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\">2. Kotlin Gradle Plugin のエラー <a class=\"direct-link\" href=\"#2.-kotlin-gradle-plugin-%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\">#</a></h2>\n<ol>\n<li>でビルドエラーが出る。内容は、</li>\n</ol>\n<p><strong>The Android Gradle plugin supports only Kotlin Gradle plugin version 1.2.51 and higher. Project 'my_awesomeapp' is using version 1.2.0.</strong></p>\n<p>Kotlin Gradle Plugin のバージョンが古いので 1.2.51 以上に上げてよ、ということなので、<code>Project: build.gradle</code> を次のように更新する。現在の Plugin の最新は 1.2.71 だったのでそうした。</p>\n<pre><code>-    ext.kotlin_version = '1.2.0'\n+    ext.kotlin_version = '1.2.71'\n</code></pre>\n<h2 id=\"3.-kapt-%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89(%E5%AE%9F%E8%A1%8C%E6%99%82%EF%BC%9F)%E3%82%A8%E3%83%A9%E3%83%BC\">3. Kapt のビルド(実行時？)エラー <a class=\"direct-link\" href=\"#3.-kapt-%E3%81%AE%E3%83%93%E3%83%AB%E3%83%89(%E5%AE%9F%E8%A1%8C%E6%99%82%EF%BC%9F)%E3%82%A8%E3%83%A9%E3%83%BC\">#</a></h2>\n<p>もう一度 <strong>Rebuild</strong> する → エラーはでない。ここで安心してはいけない。<br>\nじゃあアプリ動かそー、と Run をすると Build エラーになる。</p>\n<p>Run tasks &gt; app::kaptDebugKotlin には次のように記録されている。</p>\n<pre><code>org.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:kaptDebugKotlin'.\n\tat org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:103)\n\tat org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:73)\n\tat org.gradle.api.internal.tasks.execution.OutputDirectoryCreatingTaskExecuter.execute(OutputDirectoryCreatingTaskExecuter.java:51)\n\tat org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:59)\n\tat org.gradle.api.internal.tasks.execution.ResolveTaskOutputCachingStateExecuter.execute(ResolveTaskOutputCachingStateExecuter.java:54)\n\tat org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:59)\n\tat org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:101)\n\tat org.gradle.api.internal.tasks.execution.FinalizeInputFilePropertiesTaskExecuter.execute(FinalizeInputFilePropertiesTaskExecuter.java:44)\n\tat org.gradle.api.internal.tasks.execution.CleanupStaleOutputsExecuter.execute(CleanupStaleOutputsExecuter.java:91)\n\tat org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:62)\n\tat org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:59)\n\tat org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)\n\tat org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)\n\tat org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)\n\tat org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker$1.run(DefaultTaskGraphExecuter.java:256)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:199)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:110)\n\tat org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:249)\n\tat org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:238)\n\tat org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.processTask(DefaultTaskPlanExecutor.java:123)\n\tat org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.access$200(DefaultTaskPlanExecutor.java:79)\n\tat org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:104)\n\tat org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker$1.execute(DefaultTaskPlanExecutor.java:98)\n\tat org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.execute(DefaultTaskExecutionPlan.java:663)\n\tat org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.executeWithTask(DefaultTaskExecutionPlan.java:597)\n\tat org.gradle.execution.taskgraph.DefaultTaskPlanExecutor$TaskExecutorWorker.run(DefaultTaskPlanExecutor.java:98)\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.gradle.api.GradleException: Compilation error. See log for more details\n\tat org.jetbrains.kotlin.gradle.tasks.TasksUtilsKt.throwGradleExceptionIfError(tasksUtils.kt:16)\n\tat org.jetbrains.kotlin.gradle.internal.KaptWithKotlincTask.compile(KaptWithKotlincTask.kt:79)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)\n\tat org.gradle.api.internal.project.taskfactory.StandardTaskAction.doExecute(StandardTaskAction.java:46)\n\tat org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:39)\n\tat org.gradle.api.internal.project.taskfactory.StandardTaskAction.execute(StandardTaskAction.java:26)\n\tat org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:788)\n\tat org.gradle.api.internal.AbstractTask$TaskActionWrapper.execute(AbstractTask.java:755)\n\tat org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter$1.run(ExecuteActionsTaskExecuter.java:124)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:336)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor$RunnableBuildOperationWorker.execute(DefaultBuildOperationExecutor.java:328)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor.execute(DefaultBuildOperationExecutor.java:199)\n\tat org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:110)\n\tat org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:113)\n\tat org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:95)\n\t... 33 more\n\n</code></pre>\n<p>なるほどぜんぜんわからん。<br>\n次に Kotlin compiler のエラーには <code>ActivityXXXXBinding.java</code> 全般で</p>\n<pre><code>my_awesomeapp/app/build/generated/data_binding_base_class_source_out/debug/dataBindingGenBaseClassesDebug/out/my_awesomeapp/databinding/ActivityMainBinding.java:120: エラー: シンボルを見つけられません\n      @Nullable ViewGroup root, boolean attachToRoot, @Nullable DataBindingComponent component) {\n                                                                ^\n  シンボル:   クラス DataBindingComponent\n  場所: クラス ActivityMainBinding\n</code></pre>\n<p>というエラーが出ており、DataBinding 関連のエラーであることが推察できる。</p>\n<p>と、ここで</p>\n<ul>\n<li><a href=\"https://medium.com/@star_zero/databinding%E3%81%AEkapt%E3%82%92%E6%9B%B8%E3%81%8B%E3%81%AA%E3%81%8F%E3%81%A6%E3%82%82%E8%89%AF%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%9F-3634a3ede080\">DataBindingのkaptを書かなくても良くなった – Kenji Abe – Medium</a></li>\n</ul>\n<p>という情報があったことを思い出す。</p>\n<p>そこで <code>app: build.gradle</code> の dependencies に書かれている <code>kapt 'com.android.databinding:compiler:x.x.x'</code> の行を削除した。</p>\n<pre><code>dependencies {\n-    kapt 'com.android.databinding:compiler:3.1.2'\n</code></pre>\n<p>そして Rebuild &gt; Run してみたところ、無事アプリが起動できた。</p>\n<p>それにしても Kaptのビルドエラー群から「app/build.gradle に kapt <code>*.databinding:compiler:x.x.x</code> って書いちゃだめー」に辿り着くのは無理ゲー感がある。</p>\n<p>ちなみに <code>kapt 'com.android.databinding:compiler:3.1.2'</code> のバージョンが古いだけで現在最新の 3.1.4 に書き換えれば問題ないのでは？と思ってやってみたけどエラー解消しなかった、やっぱこの行は消さないとダメっぽい。</p>\n<p>この投稿もサラりと書いているが、アプリが起動できるようになるまで2時間以上を費やした。targetSdkVersion とか AAC や SupportLib, Playservices のバージョンが原因かと思っていろいろ弄り倒してたんだよね、 <strong>それらはすべて関係なかった</strong> という :sob:</p>\n",
      "date_published": "2018-10-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/10/19/54deb0de587baae47732/",
      "url": "https://blog.amay077.net/blog/2018/10/19/54deb0de587baae47732/",
      "title": "Firebase Firestore のデータを async/await で取得する",
      "content_html": "<p><strong>一行まとめ： <a href=\"https://github.com/Kotlin/kotlinx.coroutines/tree/develop/integration/kotlinx-coroutines-play-services\">kotlinx-coroutines-play-services</a> を使おうね</strong></p>\n<!--more-->\n<p>Firebase Firestore の Android 用 SDK では、データの取得はコールバックスタイルで行うようです。</p>\n<ul>\n<li><a href=\"https://firebase.google.com/docs/firestore/query-data/get-data?hl=ja\">Cloud Firestore でデータを取得する  /  Firebase</a></li>\n</ul>\n<p>また、コード例が Java のみで Kotlin の例がないので、Java のコード例を Kotlin で書き換えたあと、さらに Kotlin-coroutine を使って async/await 化してみます。</p>\n<h2 id=\"%E3%83%87%E3%83%BC%E3%82%BF%E3%82%921%E4%BB%B6%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">データを1件取得する場合 <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%921%E4%BB%B6%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>まず、単一のドキュメントを取得する方法です。</p>\n<h3 id=\"java-%E7%89%88\">Java 版 <a class=\"direct-link\" href=\"#java-%E7%89%88\">#</a></h3>\n<p>Java では次のコード例になります。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">DocumentReference</span> docRef <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cities\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">document</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SF\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>docRef<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addOnCompleteListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnCompleteListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DocumentSnapshot</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Task</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DocumentSnapshot</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">DocumentSnapshot</span> document <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"DocumentSnapshot data: \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No such document\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get failed with \"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"kotlin-%E7%89%88\">Kotlin 版 <a class=\"direct-link\" href=\"#kotlin-%E7%89%88\">#</a></h3>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> docRef <span class=\"token operator\">=</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cities\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">document</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SF\"</span><span class=\"token punctuation\">)</span><br>docRef<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addOnCompleteListener</span> <span class=\"token punctuation\">{</span> task <span class=\"token operator\">-></span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">val</span> document <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"DocumentSnapshot data: \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No such document\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"get failed with \"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>少しシンプルになりました。</p>\n<h2 id=\"kotlin-%2B-async%2Fawait%E7%89%88\">Kotlin + async/await版 <a class=\"direct-link\" href=\"#kotlin-%2B-async%2Fawait%E7%89%88\">#</a></h2>\n<p>さて、ここからが本題で、async/await でデータを取得できるようにします。<br>\n注目したいのが、 <code>docRef.get()</code> の戻り値の型で、これは <code>Task&lt;T&gt;</code> です。<br>\n<code>Task&lt;T&gt;</code> に、 <code>addOnCompleteListener</code> やその他諸々のコールバックを受信するためのメソッドがあり、結果はそのコールバックで受け取ります。</p>\n<p>ということは、この <code>Task&lt;T&gt;</code> を async/await で使える形式に変換してあげればよいわけです。</p>\n<p>そこで、こんな拡張関数を作ってあげます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Task<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">toSuspendable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> T <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> suspendCoroutine <span class=\"token punctuation\">{</span> cont <span class=\"token operator\">-></span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">addOnCompleteListener</span> <span class=\"token punctuation\">{</span> task <span class=\"token operator\">-></span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>isSuccessful<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                cont<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>isCanceled<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                cont<span class=\"token punctuation\">.</span><span class=\"token function\">resumeWithException</span><span class=\"token punctuation\">(</span><span class=\"token function\">CancellationException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                cont<span class=\"token punctuation\">.</span><span class=\"token function\">resumeWithException</span><span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span>exception <span class=\"token operator\">?:</span> <span class=\"token function\">Exception</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin で async/await = 所謂コルーチンに対応させるには、メソッドに <code>suspend</code> を付けます。そして、<code>suspendCoroutine</code> を呼び出すと、そこで実行を「一時停止」し、<code>cont.resume</code> または <code>cont.resumeWithException</code> が呼び出されたら再開します。ここでは <code>addOnCompleteListener</code> のコールバックを受信したときに <code>cont.resume</code> を呼び出して、処理を再開させています。</p>\n<p>さて、実際に使ってみましょう。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>CommonPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> document <span class=\"token operator\">=</span> docRef<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSuspendable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"DocumentSnapshot data: \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"No such document\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>はい。<br>\n最初の Java のコードに比べるとずいぶんスッキリしたと思います。</p>\n<h2 id=\"%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E8%A4%87%E6%95%B0%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">データを複数取得する場合 <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E8%A4%87%E6%95%B0%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>作成した拡張関数 <code>Task.toSuspendable</code> は、データを複数件取得するときにも使えます。</p>\n<p>例えば、以下の Java のコード例、</p>\n<pre class=\"language-java\"><code class=\"language-java\">db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cities\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">whereEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"capital\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">addOnCompleteListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnCompleteListener</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QuerySnapshot</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@NonNull</span> <span class=\"token class-name\">Task</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QuerySnapshot</span><span class=\"token punctuation\">></span></span> task<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task<span class=\"token punctuation\">.</span><span class=\"token function\">isSuccessful</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">QueryDocumentSnapshot</span> document <span class=\"token operator\">:</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" => \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Error getting documents: \"</span><span class=\"token punctuation\">,</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">getException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>これを、一気に Kotlin + async/await 化してみます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>CommonPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> querySnapshot <span class=\"token operator\">=</span>  db<span class=\"token punctuation\">.</span><span class=\"token function\">collection</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cities\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">whereEqualTo</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"capital\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toSuspendable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>document <span class=\"token keyword\">in</span> querySnapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span>id <span class=\"token operator\">+</span> <span class=\"token string\">\" => \"</span> <span class=\"token operator\">+</span> document<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>複数件を取得する <code>db.collection(&quot;cities&quot;).whereXXX(...).get()</code> の戻り値も <code>Task&lt;T&gt;</code> なので <code>toSuspendable</code> が使えます。<br>\nただしコレクションの場合の <code>T</code> は <code>QuerySnapshot</code> 型です。<br>\n<code>QuerySnapshot</code> はそれ自体が複数件のドキュメントを持っているので、 <code>for</code> で走査することができます。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>コールバックスタイルの型を suspend 可能な関数に変換する拡張関数を作っておくと、スッキリと書けます。</p>\n<p>もしかしたら既にFirebase SDKに搭載されていたり、有志のライブラリで実現できるのかも知れませんが、自作でもどうにかなりますよ、というお話でした。</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">最後に書いてある通りですがkotlinx-coroutines-play-servicesでいけますね👀 ただこうやって拡張はやして対応していけるのはいいですね👍 <a href=\"https://t.co/eSHYXtEWaP\">https://t.co/eSHYXtEWaP</a></p>&mdash; takahirom (@new_runnable) <a href=\"https://twitter.com/new_runnable/status/1053208499193241601?ref_src=twsrc%5Etfw\">2018年10月19日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>やっぱりあったー！ww<br>\n自作の <code>.toSuspendable()</code> は、kotlinx-coroutines-play-services を導入したら <code>.await()</code> に置き換えられます。こっちの方が cancellable だし完了してる場合の考慮もされれてよいですね :thumbsup:</p>\n<p>導入方法はアプリモジュールの <code>build.gradle</code> に <code>kotlinx-coroutines-play-services</code> を追加、です。</p>\n<pre><code>def coroutines_version = '0.30.2'\nimplementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version&quot;\nimplementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version&quot;\nimplementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-play-services:$coroutines_version&quot;  ←追加\n</code></pre>\n",
      "date_published": "2018-10-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/10/11/9aa0893e2e1a53234c3f/",
      "url": "https://blog.amay077.net/blog/2018/10/11/9aa0893e2e1a53234c3f/",
      "title": "Azure Functions + node.js で Multipart/Post ファイルアップロード",
      "content_html": "<p>流行りの「日本のITエンジニアが書いた」「やってみた」「個人メモ」な投稿です。</p>\n<!--more-->\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/b3ea8a07-9d2b-c6d7-43f8-918f34a90c16.png\" alt=\"image.png\"></p>\n<p>こういうファイルアップロード用のフォームで、ファイルのアップロードを受け付ける機能を、Azure Functions + node.js で作ります。<br>\nこのような機能の場合、multipart に対応しないといけないのがポイントです。</p>\n<p>今回は multipart 対応に、<a href=\"https://github.com/expressjs/multer\">multer</a> という npm パッケージを使います。</p>\n<p>とりあえず Azure ポータルで、Functions App を node.js で作り、次のように <code>package.json</code> ファイルを配置します。</p>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"uploader\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node ./bin/www\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"memory-streams\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.1.3\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"multer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.4.0\"</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に <code>index.js</code> を次のように書き換えます。</p>\n<p><strong>index.js</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> multer <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'multer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> streams <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'memory-streams'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> upload <span class=\"token operator\">=</span> <span class=\"token function\">multer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> storage<span class=\"token operator\">:</span> multer<span class=\"token punctuation\">.</span><span class=\"token function\">memoryStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'JavaScript HTTP trigger function processed a request.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> stream <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">streams<span class=\"token punctuation\">.</span>ReadableStream</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> key <span class=\"token keyword\">in</span> req<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            stream<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    context<span class=\"token punctuation\">.</span>stream <span class=\"token operator\">=</span> stream<span class=\"token punctuation\">;</span><br><br>    upload<span class=\"token punctuation\">.</span><span class=\"token function\">any</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">const</span> f <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>f<span class=\"token punctuation\">.</span>originalname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFileSync</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">.</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        context<span class=\"token punctuation\">.</span>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> body<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Upload </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>f<span class=\"token punctuation\">.</span>originalname<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> done.</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"uploader\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.0.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node ./bin/www\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"memory-streams\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.1.3\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"multer\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.4.0\"</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に Azure Portal のコンソールで <code>npm install</code> を実行します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/8b27da2a-5c1f-a935-df37-982853531b67.png\" alt=\"image.png\"></p>\n<p>サーバー側はこれで終わりなんで、「関数のURLを取得」しておきます。あ、メニューの 統合 の方で、「POST を許可する」のと「承認レベルを anonymous にする」のを忘れずに。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/ce8f7a62-09f2-63d3-fbe2-31761d7dc88d.png\" alt=\"image.png\"></p>\n<p>次にクライアント側をテキトーに作ります。</p>\n<ul>\n<li><a href=\"https://qiita.com/standard-software/items/b0df2ca4640b31b710e4\">node.js express でWebサーバーを作り、ファイル/ディレクトリ一覧表示する - Qiita</a></li>\n</ul>\n<p>を参考にさせていただいて、 <code>index.html</code> を次のように記述してフォームを作ります。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>post<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://xxxx.azurewebsites.net/api/HttpTriggerJS1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">enctype</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>multipart/form-data<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SEND<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code>action</code> に指定するURLはさっきコピった Azure Function の関数のURLです。<br>\nできたら <code>node server01.js</code> で Webサーバを起動し、 ttp://localhost:8001 でフォームを表示します。<br>\n適当なファイルを選択して「SEND」ボタンを押せば、ファイルがアップロードされるはずです。<br>\nアップロードが完了するとページ遷移して「Upload <a href=\"http://xxxx.xxx\">xxxx.xxx</a> done.」という表示になります。</p>\n<p>さて、ファイルが実際にどこにアップロードされたかというと、Azure Functions が配置されたディレクトリに保存されています。</p>\n<p>試しにフォームから <code>input.png</code> というファイルをアップロードしたあとで、Azure ポータルの方でコンソールを開いて <code>ls -l</code> を実行すると、下図のように <code>input.png</code> が存在していることがわかります、ファイルサイズもなんかそれっぽいので成功しているのでしょう。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/b9e93ece-8d6d-cccf-51df-ba5a51092829.png\" alt=\"image.png\"></p>\n<h2 id=\"%E6%9C%AA%E7%A2%BA%E8%AA%8D%E3%81%AA%E3%81%93%E3%81%A8\">未確認なこと <a class=\"direct-link\" href=\"#%E6%9C%AA%E7%A2%BA%E8%AA%8D%E3%81%AA%E3%81%93%E3%81%A8\">#</a></h2>\n<ul>\n<li>ちゃんとマルチパートな送信データを処理できるよね？ → フォームで送ったらパートが一つだけだったので未確認。</li>\n<li>大きなファイルサイズ耐えられる？ → ダメかも。5MB程度のファイルをアップロードしたら 502 エラーになりますた。どこまで耐えられてどうしたら上限引き上げられるのかは未調査。</li>\n</ul>\n",
      "date_published": "2018-10-11T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/09/19/efe62bb382f960f51370/",
      "url": "https://blog.amay077.net/blog/2018/09/19/efe62bb382f960f51370/",
      "title": "ローカルの PHP+Postgres な docker 環境を Azure VM にデプロイする",
      "content_html": "<p>インフラど素人のメモです。</p>\n<!--more-->\n<p>手元に PHP と PostgreSQL(正確には PostGIS)の docker/docker-compose 環境があり、これをインターネットに公開したい（開発しているシステムを顧客にも試してもらいたい）。</p>\n<p>Azure のクレジットが訳あって余ってるんで Azure VM を使います。</p>\n<p>CoreOS という VMイメージ には最初から docker が入っているらしいので、 Azure の Virtual Machine から CoreOS を検索して stable なイメージを起動。ケチなのでスペックは 「Standard B1ms (1 vcpu 数、2 GB メモリ)」。<br>\nあと自動シャットダウンも付けといたほうが無難。とりあえず user/password でログインできるようにした。<br>\nあ、ポートも開けておこう。 HTTP/HTTPS/SSH くらい。Postgres に繋ぎたいなら 5432 も必要。</p>\n<p>この VM には docker は入っているが docker-compose は入ってないので 次に、</p>\n<ul>\n<li><a href=\"https://qiita.com/hiroseabook/items/50bda4b0fd85ab228c6d\">CoreOSにdocker-composeを導入 - Qiita</a></li>\n</ul>\n<p>にしたがって  docker-compose をインストール。</p>\n<p>さらに、このままだと <code>docker-compose up</code> をしたときに &quot;Couldn't connect to Docker daemon at http+docker://localhost - is it running?&quot; なんてエラーが出るので、</p>\n<ul>\n<li><a href=\"https://qiita.com/DQNEO/items/da5df074c48b012152ee\">Dockerコマンドをsudoなしで実行する方法 - Qiita</a></li>\n</ul>\n<p>も実施。</p>\n<p>次にローカルPCにある <code>Dockerfile</code> や <code>docker-compose.yml</code> やデータファイルを圧縮して VM に転送する。</p>\n<ul>\n<li><a href=\"https://qiita.com/sayama0402/items/c5c2795968ced798150a\">sshでファイル転送の手順 - Qiita</a></li>\n</ul>\n<p>にある通り、 <code>scp ./docker.zip amay077@xx.xx.xxx.xxx:/home/amay077</code> のようなコマンドでアップロードできる。</p>\n<p>今回使う <code>docker-compose.yml</code> はこんな感じ。</p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3\"</span><br><br><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span><br>  <span class=\"token key atrule\">php</span><span class=\"token punctuation\">:</span><br>    <span class=\"token comment\"># image: php:5.6.31-apache</span><br>    <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span> ./php<br>    <span class=\"token key atrule\">expose</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80\"</span><br>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"80:80\"</span><br>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> ../php/html<span class=\"token punctuation\">:</span>/var/www/html<br>    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> php <span class=\"token punctuation\">-</span>S 0.0.0.0<span class=\"token punctuation\">:</span><span class=\"token number\">80</span><br>    <span class=\"token key atrule\">links</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> db<br>  <span class=\"token key atrule\">db</span><span class=\"token punctuation\">:</span><br>    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> mdillon/postgis<span class=\"token punctuation\">:</span><span class=\"token number\">9.5</span><br>    <span class=\"token comment\"># build: ./db</span><br>    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"5432:5432\"</span><br>    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> ../../share/sql<span class=\"token punctuation\">:</span>/var/sql<br>      <span class=\"token punctuation\">-</span> ../../share/postgresql/data<span class=\"token punctuation\">:</span>/var/lib/postgresql/data<br>    <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"POSTGRES_USER=postgres\"</span><br>      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"POSTGRES_PASSWORD=xxxxxxxx\"</span></code></pre>\n<p>相対パスの配置に気をつけて、ローカルと同じようなディレクトリ構成にする。</p>\n<p>そして、 <code>docker-compose up</code> を実行！ バックグラウンドで動かすなら <code>docker-compose up -d</code> 。<br>\n初回はイメージのダウンロードに時間がかかるが、以下のようなログが出て起動完了したっぽい（このログはローカルと同じだ）。</p>\n<pre><code>Creating network &quot;docker_default&quot; with the default driver\nCreating docker_db_1 ... done\nCreating docker_php_1 ... done\nAttaching to docker_db_1, docker_php_1\ndb_1   | LOG:  database system was shut down at 2018-09-18 16:19:41 UTC\ndb_1   | LOG:  MultiXact member wraparound protections are now enabled\ndb_1   | LOG:  database system is ready to accept connections\ndb_1   | LOG:  autovacuum launcher started\n</code></pre>\n<p>外部からのルーティングとかよく分かってないけれど、とりあえず VM のグローバルIP で http アクセスしてみる。</p>\n<p>…と、よく分からんが PHP のサイトが見られた。 <code>docker-compose.yml</code> の設定で 80 ポートは docker に流す、的な設定がしてあるんですかね。</p>\n<p>とりあえず目的は果たせた。</p>\n",
      "date_published": "2018-09-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/31/865b6de860b67ae8d5a7/",
      "url": "https://blog.amay077.net/blog/2018/07/31/865b6de860b67ae8d5a7/",
      "title": "TypeScript 3.0 の Project reference(プロジェクト参照) やってみた",
      "content_html": "<p>TypeScript 3.0 がリリースされました。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://blogs.msdn.microsoft.com/typescript/2018/07/30/announcing-typescript-3-0/\">Announcing TypeScript 3.0 / TypeScript</a></li>\n</ul>\n<p>追加機能のひとつ、Project references は、ちょうど仕事で「どうするのがいいの？」と迷ってたところだったので、さっそくやってみました。</p>\n<p>話としてはよくある、 <strong>複数のプロジェクトから参照される &quot;共通プロジェクト&quot; の在り方</strong> です。</p>\n<h2 id=\"project-reference-%E9%81%A9%E7%94%A8%E4%BB%A5%E5%89%8D\">Project Reference 適用以前 <a class=\"direct-link\" href=\"#project-reference-%E9%81%A9%E7%94%A8%E4%BB%A5%E5%89%8D\">#</a></h2>\n<p>Project Reference 適用前（つまり現状）は、次のような構成になっていました（説明簡略化のため、client -&gt; shared のみを書いてますが serverside からも shared を参照しています）。</p>\n<pre><code>root\n├── client\n│   ├── tsconfig.json\n│   └── src\n│       └── main.ts\n└── shared\n    └── src\n        └── calc.ts\n</code></pre>\n<p><strong>shared の calc.ts</strong></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">calcAdd</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>client の main.ts</strong></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> calcAdd <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../shared/src/calc'</span><span class=\"token punctuation\">;</span><br><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calcAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 3</span></code></pre>\n<p><strong>client の tsconfig.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./dist\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>shared/</code> 配下 は <strong>ただのファイル置き場</strong> で、client から相対パスで <code>calc.ts</code> を参照しているに過ぎません。</p>\n<p>これを <code>tsc -b client/tsconfig.json</code> した結果は次のようになります。</p>\n<pre><code>root\n├── dist\n│   ├── client\n│   │   └── src\n│   │       └── main.js\n│   └── shared\n│       └── src\n│           └── calc.js\n├── client\n│    └─-\n└── shared\n     └─-\n</code></pre>\n<p>これはイケてないと思いつつ開発してきましたが、これを Project reference に変えてみます。</p>\n<h2 id=\"project-reference-%E9%81%A9%E7%94%A8%E5%BE%8C\">Project reference 適用後 <a class=\"direct-link\" href=\"#project-reference-%E9%81%A9%E7%94%A8%E5%BE%8C\">#</a></h2>\n<p>ではプロジェクト参照を使ってみます。TypeScript Version 3.0.1 で試しています。</p>\n<p>まず、 shared/ をプロジェクト化するために <code>tsc --init</code> で <code>tsconfig.json</code> を作り、内容を次のようにします。</p>\n<p><strong>shared の tsconfig.json</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><br>  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// tsc --init で既定で設定されてた項目</span><br>    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br><br>    <span class=\"token comment\">// あとから追加した項目</span><br>    <span class=\"token string\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../dist/shared\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"composite\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>&quot;composite&quot;: true</code> がプロジェクト参照のために必要な項目で、<code>&quot;declaration&quot;: true</code> は、型定義ファイルを出力するために必要です(よね？)。<code>outDir</code> と <code>rootDir</code> は出力される .js ファイルの場所を調整するために設定しました。</p>\n<p>次に client 側の <code>tsconfig.json</code> を修正します。</p>\n<p><strong>client の tsconfig.json</strong></p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span><br>  <span class=\"token string\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// tsc --init で既定で設定されてた項目</span><br>    <span class=\"token string\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es5\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br><br>    <span class=\"token comment\">// あとから追加した項目</span><br>    <span class=\"token string\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../dist/client\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./src\"</span><span class=\"token punctuation\">,</span><br><br>    <span class=\"token comment\">// さらに追加した相対パス地獄を防ぐための項目</span><br>    <span class=\"token string\">\"baseUrl\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"./\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"paths\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token string\">\"shared/*\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token string\">\"../dist/shared/*\"</span><br>      <span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token comment\">// あとから追加した項目</span><br>  <span class=\"token string\">\"references\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>    <span class=\"token punctuation\">{</span> <span class=\"token string\">\"path\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"../shared\"</span> <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>こちらには、 <code>&quot;references&quot;</code> を追加し、shared への参照を設定します。これがプロジェクト参照のメインですね。</p>\n<p><code>baseUrl</code> と <code>paths</code> は、 &quot;relative path hell&quot; を回避するための設定です。</p>\n<ul>\n<li><a href=\"http://js.studio-kingdom.com/typescript/handbook/module_resolution\">モジュール解決 / TypeScript 日本語ハンドブック / js STUDIO</a></li>\n</ul>\n<p>を見てやってみました。</p>\n<p>最後に、client の <code>main.ts</code> の <code>import</code> 文を書き換えます。</p>\n<p><strong>client の main.ts</strong></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> calcAdd <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'shared/calc'</span><span class=\"token punctuation\">;</span><br><br><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">calcAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// = 3</span></code></pre>\n<p>import は、shared プロジェクトのビルド結果である <code>./dist/shared</code> を参照するようにしますが、 先に <code>baseUrl</code> と <code>paths</code> で <code>shared/*</code> に <code>../dist/shared/*</code> をマッピングさせているので、ここでは <code>from 'shared/calc'</code> だけで済みます。</p>\n<p>ではビルドしてみましょう。</p>\n<pre><code>tsc -b client/tsconfig.json\n</code></pre>\n<p>を実行します。ポイントは、shared もプロジェクトなのにそれは含めていない、ということです。</p>\n<p>ビルド結果を含むディレクトリ全体は次のようになります。</p>\n<pre><code>root\n├── client\n│   ├── tsconfig.json\n│   └── src\n│       └── main.ts\n├── shared\n│   ├── tsconfig.json\n│   └── src\n│       └── calc.ts\n└── dist\n    ├── client\n    │   └── main.js\n    └── shared\n        ├── calc.js\n        └── calc.d.ts\n</code></pre>\n<p>なんだかそれっぽくなった気がします。<br>\n<code>tsc -b client/tsconfig.json</code> としたのに、プロジェクト参照に設定されている shared 側も（先に）ビルドされて <code>dist/shared</code> に出力されています。</p>\n<p>client の <code>tsconfig.json</code> には <code>&quot;rootDir&quot;: &quot;./src&quot;</code> を設定したので、好き勝手に別の親ディレクトリにある .ts ファイルを参照することができなくなり、秩序が守られる気がします。</p>\n<p>冒頭の説明には、もっとたくさんのオプションについて説明がありますが、とりあえず以上です。</p>\n",
      "date_published": "2018-07-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/31/46ad2c8aa114bdf53abb/",
      "url": "https://blog.amay077.net/blog/2018/07/31/46ad2c8aa114bdf53abb/",
      "title": "Azure Functions で REST な API を作る",
      "content_html": "<p>Azure Functions で REST っぽい WebAPI を作りたいです。</p>\n<!--more-->\n<p>REST な API については、</p>\n<ul>\n<li><a href=\"https://qiita.com/masato44gm/items/dffb8281536ad321fb08\">0からREST APIについて調べてみた - Qiita</a></li>\n</ul>\n<p>にある通りで。</p>\n<p>例えば、日本の住所を REST な API で考えると、</p>\n<pre><code>GET https://hoge.com/api/address/23      &lt;-- 愛知県のデータを取得\nGET https://hoge.com/api/address/23/106  &lt;-- 愛知県/名古屋市中区のデータを取得\n\nPOST https://hoge.com/api/address/23/112 &lt;-- 愛知県/名古屋市南区のデータを追加\nPUT  https://hoge.com/api/address/23/113 &lt;-- 愛知県/名古屋市守山区のデータを更新\n\nDELETE https://hoge.com/api/address/13   &lt;-- 東京都のデータを削除\n</code></pre>\n<p>という感じになります。あ、説明不足でごめん <code>23</code> は総務省が定めた <a href=\"http://www.soumu.go.jp/denshijiti/code.html\">都道府県コード</a> 、<code>112</code> は <a href=\"http://www.soumu.go.jp/denshijiti/code.html\">市区町村コード</a> (の下3桁)です。</p>\n<p>このような API を Azure Functions で作りたいと思っても、通常の Http Trigger では「動的な」「多段の」パスは定義できません。</p>\n<h2 id=\"azure-functions-%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%82%92%E4%BD%BF%E3%81%86\">Azure Functions のプロキシを使う <a class=\"direct-link\" href=\"#azure-functions-%E3%81%AE%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%82%92%E4%BD%BF%E3%81%86\">#</a></h2>\n<p>そんなときに使えるのが Azure Functions のプロキシ(関数プロキシ)機能です。</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/ja-jp/azure/azure-functions/functions-proxies\">Azure Functions でのプロキシの操作 | Microsoft Docs</a></li>\n</ul>\n<p>関数プロキシは Http Trigger な Function の前に配置され、URL やクエリ文字列、リクエストメソッドやレスポンスのカスタマイズを可能にします。ちょうど AWS の API Gateway に相当する機能だと考えられます。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Azure Functions でも、こんな機能を使って束ねることができます。<a href=\"https://t.co/GrXX7yLo6K\">https://t.co/GrXX7yLo6K</a> previewだと思うけど。</p>&mdash; Takekazu Omi (@takekazuomi) <a href=\"https://twitter.com/takekazuomi/status/1022301008972541952?ref_src=twsrc%5Etfw\">2018年7月26日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">プロキシを使ってみよう <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">#</a></h2>\n<p>実際に REST API っぽい使い勝手を、プロキシを使って実現してみます。</p>\n<p>ドンッ！！</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/14cee5a9-6f42-4670-13f6-0e84df8f5b08.png\" alt=\"image.png\"></p>\n<p>Functions Apps にプロキシというグループがあるので、そこに新しいプロキシを作ります。名前 &quot;Proxy01&quot; は任意の名称で、これは外部に公開される URL には影響を与えません。</p>\n<h3 id=\"%E5%A4%89%E6%95%B0%E3%81%AE%E5%88%A9%E7%94%A8\">変数の利用 <a class=\"direct-link\" href=\"#%E5%A4%89%E6%95%B0%E3%81%AE%E5%88%A9%E7%94%A8\">#</a></h3>\n<p>ルートテンプレートで、 <code>{table}</code> や <code>{*path}</code> と付けているのが変数で、名称は任意です。</p>\n<p><code>{table}/{*path}</code> と定義すると、呼び出した URL のパス要素が、その変数に格納されます。</p>\n<p>例えば次のようになります。</p>\n<pre><code>https://hoge.com/rest/address/23  ---&gt; table='address', path='23'\nhttps://hoge.com/rest/address/23/201  ---&gt; table='address', path='23/201'\n</code></pre>\n<p>という感じで変数にURLパスが格納されます。定義で <code>*path</code> とすると、「そこまでのパス文字列すべて」が格納されます(<code>23/201</code> のように)。</p>\n<p>そしてこの変数を別な場所で使用できます。ここでは <strong>要求のオーバーライド</strong> の項目で、クエリパラメータとして利用します。</p>\n<p>例えば、 <code>table : {table}</code> という定義は、ルートテンプレートで定義した {table} 変数をクエリパラメータの <code>table</code> にマッピングする、という意味です。</p>\n<p><code>{request.method}</code> は組み込みの変数で、URL呼び出しのリクエストメソッド(GET/POST/PUTなど)を示します。</p>\n<p>そして、このプロキシの透過先、実際の呼び出し先が <strong>バックエンドURL</strong> で指定されたURLで、通常は別な Http Trigger Function になると思います(このUIだけ見ると、Azure Functionsに限らず任意のURLを指定できるようですが)。</p>\n<p>つまり、<br>\n<code>https://hoge.com/rest/address/23/201</code><br>\nという URL が、別な URL<br>\n<code>https://huga.com/MyHttpTrigger?table=address&amp;path=23/201</code><br>\nに変換できたとみなせます。</p>\n<p>あとは、バックエンドURLの方でクエリ文字列をよしなに処理すれば、REST っぽい API が実装できそうです。<br>\n（<code>https://hoge.com/api/address/23/112</code> のようなリストの中の要素をダイレクトに示すURLは、 path に <code>23/112</code> が入るだけなので、この文字列を自力でパースする必要はあります。）</p>\n<p>Azure Functions の Http Trigger では次のようにクエリ文字列から <code>table</code>, <code>method</code> , <code>path</code> を取り出せるので、あとは SQL を組み立てるなり、DAO(Data Access Object) にお任せするなりできます。</p>\n<p><strong>MyHttpTrigger の index.js</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> table <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>table <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> method <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>method <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> path <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>path <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span><br><br>    context<span class=\"token punctuation\">.</span>res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>        headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        body<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">table=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>table<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, method=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>method<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, path=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>path<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    context<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n",
      "date_published": "2018-07-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/30/524240ebec6e75366b66/",
      "url": "https://blog.amay077.net/blog/2018/07/30/524240ebec6e75366b66/",
      "title": "moment.js(JavaScript) vs Calendar(Java) vs DateTime(C#)",
      "content_html": "<p>プログラム言語をまたいでいて、いつも迷うので書いておきます。</p>\n<!--more-->\n<p>JavaScript、なぜ標準の Date型 ではなく moment.js なのかというと、今使っているのが moment だからです。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Left align</th>\n<th style=\"text-align:left\">moment.js(JavaScript)</th>\n<th style=\"text-align:left\">Calendar(Java)</th>\n<th style=\"text-align:left\">DateTime(C#)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">文字列からのパース</td>\n<td style=\"text-align:left\">moment(text, format)</td>\n<td style=\"text-align:left\">Calendarにはない(DateFormatで代用)</td>\n<td style=\"text-align:left\">DateTime.Parse(text, culture)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">年を取得</td>\n<td style=\"text-align:left\">year()</td>\n<td style=\"text-align:left\">get(Calendar.YEAR)</td>\n<td style=\"text-align:left\">Year</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">月を取得</td>\n<td style=\"text-align:left\">month() <strong>※０〜</strong></td>\n<td style=\"text-align:left\">get(Calendar.MONTH) <strong>※０〜</strong></td>\n<td style=\"text-align:left\">Month <strong>※1〜</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">日を取得</td>\n<td style=\"text-align:left\">date()</td>\n<td style=\"text-align:left\">get(Calendar.DATE)</td>\n<td style=\"text-align:left\"><strong>Day</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">曜日を取得</td>\n<td style=\"text-align:left\"><strong>day()</strong> SUN:0〜</td>\n<td style=\"text-align:left\">get(Calendar.DAY_OF_WEEK) <strong>SUN:1〜</strong></td>\n<td style=\"text-align:left\">DayOfWeek         SUN:0〜</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">文字列へのフォーマット</td>\n<td style=\"text-align:left\">format(format)</td>\n<td style=\"text-align:left\">DateFormatで代用</td>\n<td style=\"text-align:left\">ToString(format)</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">サンプル <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">#</a></h2>\n<p>2018年1月1日は 「月曜日」 です。<br>\nあと、parse や format は Locale や Culture などに依存かもしれないので、ここでは触れないけど要注意！</p>\n<h3 id=\"moment.js(node.js-v8.9.0)\">Moment.js(Node.js v8.9.0) <a class=\"direct-link\" href=\"#moment.js(node.js-v8.9.0)\">#</a></h3>\n<p><strong>コード</strong></p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> moment <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'moment'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> m <span class=\"token operator\">=</span> <span class=\"token function\">moment</span><span class=\"token punctuation\">(</span><span class=\"token string\">'20180101'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'YYYYMMDD'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">年=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">year</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">月=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">month</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">日=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">曜日=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">day</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// &lt;---------曜日が day() で取れるなんて、わかるわけ…</span><br>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">整形=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>m<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">'YYYY年MM月DD日'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>結果</strong></p>\n<pre><code>年=2018\n月=0                  &lt;---------月は0から\n日=1\n曜日=1                &lt;---------日曜=０から\n整形=2018年01月01日\n</code></pre>\n<h3 id=\"calendar(java-v1.8.0)\">Calendar(Java v1.8.0) <a class=\"direct-link\" href=\"#calendar(java-v1.8.0)\">#</a></h3>\n<p><strong>コード</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//import java.text.DateFormat;</span><br><span class=\"token comment\">//import java.text.SimpleDateFormat;</span><br><span class=\"token comment\">//import java.util.Date;</span><br><span class=\"token comment\">//import java.util.Calendar;</span><br><span class=\"token comment\">//import java.util.Locale;</span><br><br><span class=\"token class-name\">DateFormat</span> df <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy/MM/dd\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>JAPAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Date</span> d <span class=\"token operator\">=</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2018/01/01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Calendar</span> cal <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>cal<span class=\"token punctuation\">.</span><span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"年=\"</span> <span class=\"token operator\">+</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>YEAR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"月=\"</span> <span class=\"token operator\">+</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>MONTH<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"日=\"</span> <span class=\"token operator\">+</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DATE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"曜日=\"</span> <span class=\"token operator\">+</span> cal<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span>DAY_OF_WEEK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"整形=\"</span> <span class=\"token operator\">+</span> df<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>cal<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><strong>結果</strong></p>\n<pre><code>年=2018\n月=0                  &lt;---------月は0から\n日=1\n曜日=2                &lt;---------日曜=1から\n整形=2018年01月01日\n</code></pre>\n<h3 id=\"datetime(c%23-%2F-.net-core-2.1)\">DateTime(C# / .NET Core 2.1) <a class=\"direct-link\" href=\"#datetime(c%23-%2F-.net-core-2.1)\">#</a></h3>\n<p><strong>コード</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> d <span class=\"token operator\">=</span> DateTime<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2018/01/01\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"年=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">d<span class=\"token punctuation\">.</span>Year</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"月=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">d<span class=\"token punctuation\">.</span>Month</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"日=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">d<span class=\"token punctuation\">.</span>Day</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"曜日=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">d<span class=\"token punctuation\">.</span>DayOfWeek</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>d<span class=\"token punctuation\">.</span>DayOfWeek</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"整形=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">d<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy年MM月dd日\"</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &lt;------ MM だけ大文字だ</span></code></pre>\n<p><strong>結果</strong></p>\n<pre><code>年=2018\n月=1             &lt;---------月は1から\n日=1\n曜日=Monday(1)   &lt;---------日曜=０から(Enumでも可)\n整形=2018年01月01日\n</code></pre>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<h3 id=\"moment.js\">Moment.js <a class=\"direct-link\" href=\"#moment.js\">#</a></h3>\n<ul>\n<li><a href=\"https://momentjs.com/\">Moment.js / Home</a></li>\n<li><a href=\"https://www.yoheim.net/blog.php?q=20180201\">[Javascript] Moment.jsを使って日付を扱おう - YoheiM .NET</a></li>\n</ul>\n<h3 id=\"calendar(java)\">Calendar(Java) <a class=\"direct-link\" href=\"#calendar(java)\">#</a></h3>\n<ul>\n<li><a href=\"https://www.sejuku.net/blog/20325\">【Java入門】Calendarの日付フォーマットを指定する(format) | 侍エンジニア塾ブログ | プログラミング入門者向け学習情報サイト</a></li>\n<li><a href=\"https://teratail.com/questions/33597\">Java - string型をcalender型に変換したい(33597)｜teratail</a></li>\n<li><a href=\"http://hensa40.cutegirl.jp/archives/5373\">[ Java ] 日付に対応する曜日を取得する (Calendar.DAY_OF_WEEK) – 行け！偏差値40プログラマー</a></li>\n<li><a href=\"https://yurufuwa-tech.hatenablog.com/entry/2017/07/13/222455\">SimpleDateFormatのparseでコケるときに確認すること #60 - ゆるふわ技術日誌</a></li>\n</ul>\n<h3 id=\"datetime(c%23%2F.net)\">DateTime(C#/.NET) <a class=\"direct-link\" href=\"#datetime(c%23%2F.net)\">#</a></h3>\n<ul>\n<li><a href=\"https://dobon.net/vb/dotnet/string/datetimeparse.html#section1\">日時を表す文字列をDateTimeオブジェクトに変換する - .NET Tips (VB.NET,C#...)</a></li>\n<li><a href=\"http://www.atmarkit.co.jp/ait/articles/0408/27/news104.html\">日付や時刻を文字列に変換するには？：.NET TIPS - ＠IT</a></li>\n</ul>\n",
      "date_published": "2018-07-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/25/e00a7c459bc555556bfa/",
      "url": "https://blog.amay077.net/blog/2018/07/25/e00a7c459bc555556bfa/",
      "title": "Angular 6 で、日付や時刻との双方向データバインディング",
      "content_html": "<p>Angular + ng-bootstrap でモーダルポップアップを表示した場合、<a href=\"https://ng-bootstrap.github.io/#/components/modal/examples\">Angular powered Bootstrap - Modal</a> に、基本的な使い方は書いてあるのですが、もっと簡単に、 <code>modal.confirm('title', 'message')</code> みたく使えるようにしてみました。</p>\n<!--more-->\n<p><a href=\"https://ng-bootstrap.github.io/#/components/modal/examples#component\">Components as content </a> には、Modal に表示する内容(template)を別のコンポーネントクラスで提供する方法が書かれています。</p>\n<p>これを Angular のサービスと組み合わせると、「モーダル表示を行うサービス」を作ることができます。<br>\nサービスは利用クラス側で、コンストラクタインジェクションが可能なので、簡単に使用できます。</p>\n<h2 id=\"%E9%83%A8%E5%93%81%E5%81%B4\">部品側 <a class=\"direct-link\" href=\"#%E9%83%A8%E5%93%81%E5%81%B4\">#</a></h2>\n<p>以降説明するクラス群は、すべて一つの <code>my-modal.service.ts</code> に記述できます。<br>\nこのファイル自体も <code>ng g service my-modal</code> で作ったものです。同時に <code>my-modal.service.spec.ts</code> も作成されます。こちらは作成後まったく編集しませんので、以降は触れません。</p>\n<p><strong>MyModalService クラス</strong></p>\n<p>利用者が使うサービスクラスです。ここでは「確認モーダル」を表示する <code>confirm()</code> メソッドを定義しています。<br>\nモーダルに表示する内容は、後述する <code>MyModalConfirmContent</code> により提供されます。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> Component<span class=\"token punctuation\">,</span> Input <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@angular/core'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NgbModal<span class=\"token punctuation\">,</span> NgbActiveModal <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@ng-bootstrap/ng-bootstrap'</span><span class=\"token punctuation\">;</span><br><br>@<span class=\"token function\">Injectable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  providedIn<span class=\"token operator\">:</span> <span class=\"token string\">'root'</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyModalService</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> modalService<span class=\"token operator\">:</span> NgbModal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>  <span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span>title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> okCaption<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> cancelCaption<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> modalRef <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modalService<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>MyModalConfirmContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> component <span class=\"token operator\">=</span> modalRef<span class=\"token punctuation\">.</span>componentInstance <span class=\"token keyword\">as</span> MyModalConfirmContent<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>component <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      component<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> title<span class=\"token punctuation\">;</span><br>      component<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span><br>      component<span class=\"token punctuation\">.</span>okCaption <span class=\"token operator\">=</span> okCaption <span class=\"token operator\">||</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">;</span><br>      component<span class=\"token punctuation\">.</span>cancelCaption <span class=\"token operator\">=</span> cancelCaption <span class=\"token operator\">||</span> <span class=\"token string\">'Cancel'</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">const</span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PromiseCompletionSource<span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    modalRef<span class=\"token punctuation\">.</span>result<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      source<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> reason <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>      source<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span>promise<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>PromiseCompletionSource クラス</strong></p>\n<p>Kotlin でいう <code>Continuation&lt;T&gt;</code>、 C# でいう <code>TaskCompletionSource&lt;T&gt;</code> を模したクラスです。<br>\n非同期処理の終了とエラーを通知するために使います(JavaScript/TypeScript に慣れないので思わず移植しちゃったけど、他に実現方法がありそう、おしえてplz)。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PromiseCompletionSource<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> promise<span class=\"token operator\">:</span> <span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">resolver</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>x<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">private</span> <span class=\"token function-variable function\">rejector</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>reason<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>promise <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token builtin\">Promise</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> reject<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resolver <span class=\"token operator\">=</span> resolve<span class=\"token punctuation\">;</span><br>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rejector <span class=\"token operator\">=</span> reject<span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">public</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>resolver<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolver</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">public</span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>reason<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rejector<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>          <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">rejector</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>MyModalConfirmContent クラス</strong></p>\n<p>確認モーダルの内容を示すクラスです。<br>\n実体はほぼなく、重要なのは <code>template:</code> に定義された HTML とそれへのデータバインディング用プロパティです。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  template<span class=\"token operator\">:</span><br>    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"><br>&lt;div class=\"modal-header\"><br>  &lt;h4 class=\"modal-title\">Angular 6 で、日付や時刻との双方向データバインディング&lt;/h4><br>  &lt;button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('dissmiss')\"><br>    &lt;span aria-hidden=\"true\">&amp;times;&lt;/span><br>  &lt;/button><br>&lt;/div><br>&lt;div class=\"modal-body\"><br>  &lt;p>&lt;/p><br>&lt;/div><br>&lt;div class=\"modal-footer\"><br>  &lt;button type=\"button\" class=\"btn btn-primary\" (click)=\"activeModal.close('ok')\">&lt;/button><br>  &lt;button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"activeModal.dismiss('cancel')\">&lt;/button><br>&lt;/div><br>  </span><span class=\"token template-punctuation string\">`</span></span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token comment\">// tslint:disable-next-line   &lt;-- tslint さんが「コンポーネントならクラス名に Component を付けろ」と怒り心頭なので黙らせる</span><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyModalConfirmContent</span> <span class=\"token punctuation\">{</span><br><br>  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><br>  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span><br>  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> okCaption <span class=\"token operator\">=</span> <span class=\"token string\">'OK'</span><span class=\"token punctuation\">;</span><br>  @<span class=\"token function\">Input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> cancelCaption <span class=\"token operator\">=</span> <span class=\"token string\">'Cancel'</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> activeModal<span class=\"token operator\">:</span> NgbActiveModal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E5%88%A9%E7%94%A8%E8%80%85%E5%81%B4\">利用者側 <a class=\"direct-link\" href=\"#%E5%88%A9%E7%94%A8%E8%80%85%E5%81%B4\">#</a></h2>\n<p>上で作った <code>MyModalService</code> の使い方です。</p>\n<h3 id=\"1.-app.module-%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">1. app.module に登録する <a class=\"direct-link\" href=\"#1.-app.module-%E3%81%AB%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">#</a></h3>\n<p>まず <code>MyModalConfirmContent</code> を module に登録する必要があります(app.module じゃなくてもいいです)。<br>\n下記のように <code>MyModalConfirmContent</code> を <code>declarations:</code> と <code>entryComponents:</code> に追加します(どちらも必要です)。</p>\n<p><strong>xxx.moduleクラス</strong></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">NgModule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>    CommonModule<span class=\"token punctuation\">,</span><br>    …<br>  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  declarations<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>    …<br>    MyModalConfirmContent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ←追加<br>  exports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>LayoutComponent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>  entryComponents<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>MyModalConfirmContent<span class=\"token punctuation\">]</span> ←追加<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"2.-%E3%83%A2%E3%83%BC%E3%83%80%E3%83%AB%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\">2. モーダルを表示する <a class=\"direct-link\" href=\"#2.-%E3%83%A2%E3%83%BC%E3%83%80%E3%83%AB%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\">#</a></h3>\n<p>あとは任意のコンポーネントで使用します。<br>\nコンストラクタに <code>MyModalService</code> を定義して注入させ、任意の場所で <code>this.modal.confirm()</code> を呼び出します。返値は <code>Promise&lt;boolean&gt;</code> なので async/await でも使えますね。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\">@<span class=\"token function\">Component</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>  selector<span class=\"token operator\">:</span> <span class=\"token string\">'app-my-top'</span><span class=\"token punctuation\">,</span><br>  templateUrl<span class=\"token operator\">:</span> <span class=\"token string\">'./my-top.component.html'</span><span class=\"token punctuation\">,</span><br>  styleUrls<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'./my-top.component.scss'</span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTopComponent</span> <span class=\"token punctuation\">{</span><br><br>  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><br>    <span class=\"token keyword\">private</span> modal<span class=\"token operator\">:</span> MyModalService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">async</span> <span class=\"token function\">showConfirm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modal<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'たいとる'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'もーだるですか？'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'はい'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'いいえ'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">result = {res}</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>res<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>正しく実行できれば、次のように表示されるはずです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/42275746-b2f5-dc24-7c80-e8b3e80169a4.png\" alt=\"IfsApp.png\"></p>\n<p>すべてのソースコードは</p>\n<ul>\n<li><a href=\"https://gist.github.com/amay077/b2012b7dee8e3fe6f08463273a166d15\">https://gist.github.com/amay077/b2012b7dee8e3fe6f08463273a166d15</a></li>\n</ul>\n<p>にもあります。</p>\n<p>実際に動いた <strong>package.json</strong> の一部はこんな感じです。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"@angular/animations\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/common\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/compiler\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/core\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/forms\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/http\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/platform-browser\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/platform-browser-dynamic\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@angular/router\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.3\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"@ng-bootstrap/ng-bootstrap\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.2.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"bootstrap\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.1.1\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"core-js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.5.4\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"font-awesome\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.7.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"moment\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.22.2\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"ng-spin-kit\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.1.1\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"ngx-loading\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.14\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"rxjs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^6.0.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"zone.js\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^0.8.26\"</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre>\n<h2 id=\"%E3%83%A2%E3%83%BC%E3%83%80%E3%83%AB%E3%81%AE%E7%A8%AE%E9%A1%9E%E3%82%92%E5%A2%97%E3%82%84%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88\">モーダルの種類を増やしたい場合 <a class=\"direct-link\" href=\"#%E3%83%A2%E3%83%BC%E3%83%80%E3%83%AB%E3%81%AE%E7%A8%AE%E9%A1%9E%E3%82%92%E5%A2%97%E3%82%84%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88\">#</a></h2>\n<ol>\n<li><code>MyModalXxxxContent</code> を追加</li>\n<li><code>MyModalXxxxContent</code> を <code>app.module.ts</code> に追加</li>\n<li><code>MyModalService</code> に <code>MyModalXxxxContent</code> に対応した新しいメソッドを追加</li>\n</ol>\n<p>で ok です。</p>\n",
      "date_published": "2018-07-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/25/16722d33632bbc543f19/",
      "url": "https://blog.amay077.net/blog/2018/07/25/16722d33632bbc543f19/",
      "title": "Angular 6 で、日付や時刻との双方向データバインディング",
      "content_html": "<p>Angular 始めましたなので、メモ書きです。</p>\n<!--more-->\n<h2 id=\"%E6%99%AE%E9%80%9A%E3%81%AE%E3%82%84%E3%81%A4\">普通のやつ <a class=\"direct-link\" href=\"#%E6%99%AE%E9%80%9A%E3%81%AE%E3%82%84%E3%81%A4\">#</a></h2>\n<p><strong>HTML</strong></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">[(ngModel)]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myText<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token comment\">&lt;!-- これでもおｋ &lt;input type=\"text\" [ngModel]=\"myText\" (ngModelChange)=\"myText=$event\" /> --></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>TypeScript</strong></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Main</span><br>Component <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">public</span> myText<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>結果</strong></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/608e5bba-30e3-b872-052a-a3e14600d698.gif\" alt=\"Untitled5.gif\"></p>\n<p><code>[(ngModel)]=&quot;myText&quot;</code> は <code>[ngModel]=&quot;myText&quot; (ngModelChange)=&quot;myText=$event&quot;</code> の短縮表記に過ぎないことを知りました。</p>\n<h2 id=\"%E6%97%A5%E4%BB%98%E3%81%AE-%3Cinput%3E-%E3%81%A8-%E6%99%82%E5%88%BB%E3%81%AE-%3Cinput%3E-%E3%81%A8-date-%E5%9E%8B%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">日付の <code>&lt;input&gt;</code> と 時刻の <code>&lt;input&gt;</code> と <code>Date</code> 型プロパティ <a class=\"direct-link\" href=\"#%E6%97%A5%E4%BB%98%E3%81%AE-%3Cinput%3E-%E3%81%A8-%E6%99%82%E5%88%BB%E3%81%AE-%3Cinput%3E-%E3%81%A8-date-%E5%9E%8B%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">#</a></h2>\n<p><strong>HTML</strong></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>date<span class=\"token punctuation\">\"</span></span> <br>  <span class=\"token attr-name\">[ngModel]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myDate | date: <span class=\"token punctuation\">'</span>y-MM-dd<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <br>  <span class=\"token attr-name\">(ngModelChange)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myDateChange($event)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>  <br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>time<span class=\"token punctuation\">\"</span></span> <br>  <span class=\"token attr-name\">[ngModel]</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myDate | date: <span class=\"token punctuation\">'</span>HH:mm<span class=\"token punctuation\">'</span><span class=\"token punctuation\">\"</span></span> <br>  <span class=\"token attr-name\">(ngModelChange)</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myTimeChange($event)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>TypeScript</strong></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">public</span> myDate<span class=\"token operator\">:</span> Date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2018</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2018/7/20 15:56</span><br><br><span class=\"token keyword\">public</span> <span class=\"token function\">myDateChange</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// インスタンス変えた方がいいと思うんだ</span><br>  <span class=\"token keyword\">const</span> newDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token comment\">// 新しいインスタンスに年月日をコピー(時刻は維持)</span><br>  <span class=\"token keyword\">const</span> parsed <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  newDate<span class=\"token punctuation\">.</span><span class=\"token function\">setFullYear</span><span class=\"token punctuation\">(</span><br>    parsed<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    parsed<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    parsed<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <br><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myDate <span class=\"token operator\">=</span> newDate<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">public</span> <span class=\"token function\">myTimeChange</span><span class=\"token punctuation\">(</span>text<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// インスタンス変えた方がいいと思うんだ</span><br>  <span class=\"token keyword\">const</span> newDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  <span class=\"token comment\">// 新しいインスタンスに時刻をコピー(年月日は維持)</span><br>  <span class=\"token keyword\">const</span> buf <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">':'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    newDate<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myDate <span class=\"token operator\">=</span> newDate<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>結果</strong></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/0d775891-0964-5545-1c43-c0c65c313a79.gif\" alt=\"Untitled6.gif\"></p>\n<p>パイプ(<code>| date:</code>) のところの意味が未だわかってません。</p>\n",
      "date_published": "2018-07-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/19/bbf4a9bcc1ba4594ebc3/",
      "url": "https://blog.amay077.net/blog/2018/07/19/bbf4a9bcc1ba4594ebc3/",
      "title": "各Cloud Functions で使える言語比較(2018年7月)",
      "content_html": "<p>FaaS (Function as a Service) と呼ばれるクラウドに用意された関数実行環境(＝Cloud Functions)について、各クラウドベンダーで使用できる開発言語を比較してみました。</p>\n<!--more-->\n<h2 id=\"%E6%AF%94%E8%BC%83%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%99%E3%83%B3%E3%83%80%E3%83%BC\">比較クラウドベンダー <a class=\"direct-link\" href=\"#%E6%AF%94%E8%BC%83%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%99%E3%83%B3%E3%83%80%E3%83%BC\">#</a></h2>\n<ul>\n<li>AWS - <a href=\"https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/current-supported-versions.html\">Lambda</a></li>\n<li>Microsoft - <a href=\"https://docs.microsoft.com/ja-jp/azure/azure-functions/functions-reference-node#node-version-and-package-management\">Azure Functions(2.x系)</a></li>\n<li>Google - <a href=\"https://cloud.google.com/functions/docs/writing/\">Cloud Function</a>(Firebase Functions も同じ)</li>\n<li>IBM - <a href=\"https://console.bluemix.net/docs/openwhisk/openwhisk_actions.html#openwhisk_actions\">Cloud Functions</a></li>\n</ul>\n<h2 id=\"%E6%AF%94%E8%BC%83%E8%A1%A8\">比較表 <a class=\"direct-link\" href=\"#%E6%AF%94%E8%BC%83%E8%A1%A8\">#</a></h2>\n<ul>\n<li>2018/7/25 - <a href=\"https://www.blog.google/products/google-cloud/next18-recap/\">What happened at Google Cloud Next ‘18</a> に伴い追記</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>言語＼ベンダー</th>\n<th>AWS Lambda</th>\n<th>Azure Functions(2.x プレビュー)</th>\n<th>Google Cloud Functions</th>\n<th>IBM Cloud Functions</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Node.js(JavaScript)</td>\n<td>:heavy_check_mark: v8.10</td>\n<td>:heavy_check_mark: v8.9.4</td>\n<td>:heavy_check_mark: v6.14.0 / v8.11.1(β)</td>\n<td>:heavy_check_mark: v8</td>\n</tr>\n<tr>\n<td>Python</td>\n<td>:heavy_check_mark: 3.6</td>\n<td></td>\n<td>:heavy_check_mark: 3.7.0(β)</td>\n<td>:heavy_check_mark: 3.6.5</td>\n</tr>\n<tr>\n<td>Java</td>\n<td>:heavy_check_mark: 8</td>\n<td>:heavy_check_mark:</td>\n<td></td>\n<td>:heavy_check_mark: 8</td>\n</tr>\n<tr>\n<td>C#(.NET Core)</td>\n<td>:heavy_check_mark: 2.0</td>\n<td>:heavy_check_mark:</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Go</td>\n<td>:heavy_check_mark: 1.x</td>\n<td></td>\n<td></td>\n<td>:heavy_check_mark:</td>\n</tr>\n<tr>\n<td>PHP</td>\n<td></td>\n<td></td>\n<td></td>\n<td>:heavy_check_mark: v7.1.18</td>\n</tr>\n<tr>\n<td>Swift</td>\n<td></td>\n<td></td>\n<td></td>\n<td>:heavy_check_mark: 4.1</td>\n</tr>\n<tr>\n<td>Docker</td>\n<td></td>\n<td>:heavy_check_mark:</td>\n<td></td>\n<td>:heavy_check_mark:</td>\n</tr>\n</tbody>\n</table>\n<p>(バージョンが書かれていないのは公式Webサイトで情報を得られなかったもの)</p>\n<p>Node.js(JavaScript) はすべてのベンダーでサポート済み。<br>\n次に多いのは Java、その次が C#(.NET Core) になりました。<br>\nJava はマルチプラットフォーム前提ですが、 .NET Core も Linux や macOS などの非Win環境をフルサポートしているため、FaaS の実行環境が Windows でない場面でも使うことができます。</p>\n<p>簡潔な処理だけを FaaS にまかせて、複雑な処理はホスティングしたアプリケーションサーバーやバッチサーバに行わせるのが一般的でしたが、サーバーレス、マイクロサービス化の流れが強くなってきているので、FaaS でやりたい事も増えつつあります。<br>\nその場合 JavaScript(TypeScript) ではツラい場面も増えると思われるので、他の(希望する)言語が使えるかは重要な要素になってきます。</p>\n<p>ベンダー別に見ると、AWS は基本的な言語をひととおり抑えてますね。<br>\n意外にも IBM の対応言語の多さよ。特に <strong>サーバーサイド Swift</strong> をサポートしているのはなかなか野心的ですね。</p>\n<p>あと、言語ではないのですが表には Docker という項目を入れています。<br>\nこれは、関数が呼び出されたときに、Docker コンテナを起動して任意の処理を行わせる、というもので、要するに何でもアリです。<br>\nこの機能は Azure と IBM がサポートしていて、主にバッチ処理的な使い方ができそうです。</p>\n<p>クラウドサービスを使う開発が当然のようになっている現在ですが、さらに素のインスタンス(EC2とか)をどれだけ <strong>使わないか</strong> がポイントになってきていると思うので、FaaS が重要な役割を占めるようになってきています。</p>\n<p>今後も折をみて内容を更新します。</p>\n",
      "date_published": "2018-07-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/12/62e1eb656fbd730b3dd1/",
      "url": "https://blog.amay077.net/blog/2018/07/12/62e1eb656fbd730b3dd1/",
      "title": "Angular + VSCode でデバッグ開始したときに ng serve する",
      "content_html": "<p>Angular + VSCode でのWebアプリ開発、普通は</p>\n<!--more-->\n<ol>\n<li><code>ng serve</code> する</li>\n<li>(launch.json で) Chrome 起動して <code>http://localhost:4200/</code> を開く</li>\n</ol>\n<p>としますが、 <code>ng serve</code> を忘れたりシェルのウィンドウどこいった？ってなったりして面倒なので VSCode の「デバッグ開始(F5)」 一発で <code>ng serve</code> -&gt; Chrome 起動する方法を考えてみました。</p>\n<p><strong>.vscode/tasks.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"2.0.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"tasks\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng-serve\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"isBackground\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng serve\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"problemMatcher\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token property\">\"owner\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"custom\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token property\">\"pattern\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token property\">\"regexp\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^$\"</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                <span class=\"token property\">\"background\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token property\">\"activeOnStart\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token property\">\"beginsPattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".*Angular Live Development Server.*\"</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token property\">\"endsPattern\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\".*Compiled successfully.*\"</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"label\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng-kill\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"shell\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"killall ng\"</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>ng-serve</code> と <code>ng-kill</code> という2つのタスクを定義します。</p>\n<p><code>ng-serve</code> は <code>ng serve</code> を実行するものですが、フォアグラウンドで実行すると、listen状態で待ち続ける（＝次の処理であるChrome起動が行われない）になるので、<code>&quot;isBackground&quot;: true</code> にします。すると今度は「タスクの終了」を示すものがなくなってしまうので、<code>&quot;problemMatcher&quot;: { }</code> 内の <code>&quot;endsPattern&quot;: &quot;.*Compiled successfully.*&quot;</code> として、 「<code>ng serve</code> が正常に実施されてこのメッセージが出力されたらタスク終了とみなす」という定義をします。</p>\n<p><code>ng-kill</code> は、 <code>killall ng</code> として ng という名前のプロセスを kill しているだけです。VSCode の機能で「任意のタスクを終了させるタスク」を作る方法がわからなかったのでこうなりました:sweat: (macOS では動いたけど Windows では動きそうにないな…)</p>\n<p><strong>.vscode/launch.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Debug with Chrome\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:4200\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"webRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceFolder}\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"preLaunchTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng-serve\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"postDebugTask\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ng-kill\"</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>こちらは通常の「Chromeを起動させる」 launch.json に <code>preLaunchTask</code> と <code>postDebugTask</code> を追加しただけです。</p>\n<p>これで デバッグ開始(F5) をすると、<code>ng serve</code> が実行されて、待受開始になったら Chrome が起動します。<br>\nまた、デバッグを停止させると <code>killall ng</code> が実行されて <code>ng serve</code> も停止します。</p>\n<p>作ってはみたものの、実行の度に <code>ng serve</code> されるのはそれなりに時間がかかって嫌だし、これは常駐させておくものだからデバッグ終了で止めない方がいいかもなーと思います。</p>\n<p>GitHub の VSCode プロジェクトでは「一度作ったタスクを使い回す」設定のPRが立っていて、これが加わると便利になりそうだなと思います。</p>\n<ul>\n<li><a href=\"https://github.com/Microsoft/vscode/pull/32384\">Added a <code>singleInstanceOnly</code> option in tasks, Fixes #32264 by ishanjain28 · Pull Request #32384 · Microsoft/vscode</a></li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://nealbuerger.com/2017/09/vscode-launch-create-react-app-and-chrome-with-launch-json/\">VSCode: Launch create-react-app and Chrome with launch.json</a></li>\n</ul>\n",
      "date_published": "2018-07-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/05/c572870378b9e61f3399/",
      "url": "https://blog.amay077.net/blog/2018/07/05/c572870378b9e61f3399/",
      "title": "Azure の Functions Bot を TypeScript で作る(+ VSCodeでデバッグする)",
      "content_html": "<p>Bot Application が Azure Functions で作れるようになっていました。</p>\n<!--more-->\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/d28995cf-41ac-c440-351d-1a06bbf0662d.png\" alt=\"image.png\"></p>\n<p>Node.js か C# のいくつかのテンプレートから選択できます。</p>\n<p>Node.js → Basic を選択して作った Functions は JavaScript なので、これを TypeScript に変えてみます。</p>\n<h2 id=\"node.js-%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">Node.js のサンプルをダウンロードする <a class=\"direct-link\" href=\"#node.js-%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Bot を作成したあと、ビルド → zip ファイルをダウンロード でソースコード一式がダウンロードできます。</p>\n<p>そのディレクトリ構成は次の図に。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/a4583c7c-3c57-a984-295c-f3a31efb618c.png\" alt=\"image.png\"></p>\n<h2 id=\"typescript-%E3%81%AB%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B\">TypeScript に書き換える <a class=\"direct-link\" href=\"#typescript-%E3%81%AB%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B\">#</a></h2>\n<p><code>/messages</code> ディレクトリが Function のソースなので、ターミナルでここに移動し、</p>\n<pre><code>tsc init\n</code></pre>\n<p>を実行します。すると <code>tsconfig.json</code> が作成されるので、それを次のように書き換えます。</p>\n<p><strong>messages/tsconfig.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"sourceMap\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"esModuleInterop\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>コメント行や説明のコメントは省略しています。既定値から変えたのは次の通り。</p>\n<ul>\n<li><code>&quot;target&quot;: &quot;es2015&quot;</code> - Azure Functions の実行環境は <a href=\"https://docs.microsoft.com/ja-jp/azure/azure-functions/functions-reference-node#node-version-and-package-management\">node.js v8.4.0 以上を推奨</a> とのことで、node v8.2.0 は ES2016 までの API をすべてサポートしています</li>\n<li><code>&quot;sourceMap&quot;: true</code> - ソースマップを有効にし、ローカルでの TypeScript デバッグを可能にします。</li>\n<li><code>&quot;strict&quot;: false</code> - とりあえず厳密な型チェックはOFFで</li>\n</ul>\n<p>次に TypeScript で必要なモジュールをインストールします。</p>\n<p>ターミナルで <code>messages</code> ディレクトリに移動し、</p>\n<pre><code>npm install @types/node --save-dev\n</code></pre>\n<p>を実行します。実行後、 <code>package.json</code> に <code>@types/node</code> が追加されます。</p>\n<p><strong>messages/package.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"emptybot\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"description\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"botbuilder\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.13.1\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"botbuilder-azure\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^3.0.4\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"@types/node\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^10.5.1\"</span><span class=\"token punctuation\">,</span>   &lt;-- ここが追加された<br>    <span class=\"token property\">\"restify\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.0.0\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"author\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ISC\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に <code>index.js</code> をリネームし <code>index.ts</code> とし、内容を次のように書き換えます。</p>\n<p><strong>messages/index.ts</strong></p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> ChatConnector<span class=\"token punctuation\">,</span> MemoryBotStorage<span class=\"token punctuation\">,</span> UniversalBot<span class=\"token punctuation\">,</span> Session <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'botbuilder'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> BotServiceConnector<span class=\"token punctuation\">,</span> AzureTableClient<span class=\"token punctuation\">,</span> AzureBotStorage <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'botbuilder-azure'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> path <span class=\"token keyword\">from</span> <span class=\"token string\">'path'</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> useEmulator <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">==</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> connector <span class=\"token operator\">=</span> useEmulator <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ChatConnector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BotServiceConnector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>    appId<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">[</span><span class=\"token string\">'MicrosoftAppId'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>    appPassword<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">[</span><span class=\"token string\">'MicrosoftAppPassword'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><br>    openIdMetadata<span class=\"token operator\">:</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">[</span><span class=\"token string\">'BotOpenIdMetadata'</span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">/*----------------------------------------------------------------------------------------<br>* Bot Storage: This is a great spot to register the private state storage for your bot. <br>* We provide adapters for Azure Table, CosmosDb, SQL Azure, or you can implement your own!<br>* For samples and documentation, see: https://github.com/Microsoft/BotBuilder-Azure<br>* ---------------------------------------------------------------------------------------- */</span><br><br><span class=\"token keyword\">const</span> tableName <span class=\"token operator\">=</span> <span class=\"token string\">'botdata'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> azureTableClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AzureTableClient</span><span class=\"token punctuation\">(</span>tableName<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">[</span><span class=\"token string\">'AzureWebJobsStorage'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> storage <span class=\"token operator\">=</span> useEmulator <span class=\"token operator\">?</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MemoryBotStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AzureBotStorage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> gzipData<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> azureTableClient<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">const</span> bot <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UniversalBot</span><span class=\"token punctuation\">(</span>connector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>bot<span class=\"token punctuation\">.</span><span class=\"token function\">localePath</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>__dirname<span class=\"token punctuation\">,</span> <span class=\"token string\">'./locale'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>bot<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'storage'</span><span class=\"token punctuation\">,</span> storage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>bot<span class=\"token punctuation\">.</span><span class=\"token function\">dialog</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> Session<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    session<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'あなたは '</span> <span class=\"token operator\">+</span> session<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">'と言いましたね。'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>useEmulator<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">const</span> restify <span class=\"token operator\">=</span> <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'restify'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> restify<span class=\"token punctuation\">.</span><span class=\"token function\">createServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3978</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test bot endpont at http://localhost:3978/api/messages'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    server<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api/messages'</span><span class=\"token punctuation\">,</span> connector<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">module</span><span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> connector<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>処理内容はほぼ変えず、文法を TypeScript にしただけです（<code>MemoryBotStorage</code> を使うとこだけ処理を追加してます、これをしないとローカルで動かなかったので）。</p>\n<p><code>messages</code> ディレクトリで</p>\n<pre><code>tsc\n</code></pre>\n<p>を実行します。すると同じディレクトリに <code>index.js</code> と <code>index.js.mmap</code> が生成されます。</p>\n<p>この <code>index.js</code> をこれまでの <code>index.js</code> の代わりに Azure にアップロードすれば、関数はいままでどおり動作します。</p>\n<h2 id=\"%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%99%E3%82%8B%EF%BC%88vscode%E4%BD%BF%E7%94%A8)\">ローカルでデバッグする（VSCode使用) <a class=\"direct-link\" href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%99%E3%82%8B%EF%BC%88vscode%E4%BD%BF%E7%94%A8)\">#</a></h2>\n<p><code>launch.json</code> の定義が古いのでちょっと追記します。</p>\n<p><strong>messages/.vscode/launch.json</strong></p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Launch\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"inspector\"</span><span class=\"token punctuation\">,</span>  &lt;-- この行を追加<br>            <span class=\"token property\">\"program\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceRoot}/index.js\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"cwd\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceRoot}\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token property\">\"NODE_ENV\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"development\"</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>index.ts</code>(.js じゃないよ) の適当な行にブレークポイントを仕掛けて、メニュー -&gt; デバッグ -&gt; デバッグの開始 をします。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/9daa452f-fa27-666d-e0c9-5bacfdd4a2b5.png\" alt=\"image.png\"></p>\n<p>ちゃんと止まるはずです。</p>\n<p><a href=\"https://github.com/Microsoft/BotFramework-Emulator/\">BotFramework-Emulator</a> にローカルのエンドポイントである <code>http://localhost:3978/api/messages</code> を指定すれば、ボットのデバッグができます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/77955829-c30e-6890-3c39-cd29d3274b6e.png\" alt=\"image.png\"></p>\n<h2 id=\"%E7%92%B0%E5%A2%83\">環境 <a class=\"direct-link\" href=\"#%E7%92%B0%E5%A2%83\">#</a></h2>\n<ul>\n<li>macOS - 10.13.5</li>\n<li>Node.js - v8.9.4</li>\n<li>npm - 5.6.0</li>\n<li>TypeScript - 2.9.2</li>\n<li>Visual Studio Code(VSCode) - 1.24.1</li>\n<li>BotFramework-Emulator - 3.5.36</li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://qiita.com/annie/items/cf93a7a832123946a7da\">祝GA！Azure Bot Service 概略&amp;作成～公開手順 - Qiita</a></li>\n<li><a href=\"https://qiita.com/TsuyoshiUshio@github/items/41c085a5e68fea0ff9bb\">Azure Functions を TypeScript で書いてみる。 - Qiita</a></li>\n<li><a href=\"https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_supported-nodelike-runtimes\">Debug Node.js Apps using VS Code</a></li>\n</ul>\n",
      "date_published": "2018-07-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/07/02/renew_microsoft_most_valuable_professional_2018/",
      "url": "https://blog.amay077.net/blog/2018/07/02/renew_microsoft_most_valuable_professional_2018/",
      "title": "MVP Renewal",
      "content_html": "<p>まあそういうことです。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://blog.amay077.net/blog/2016/10/02/become-microsoft-mvp-for-the-first-timme/\">初めて Microsoft MVP になりました！</a></li>\n</ul>\n<p>更新のタイミング変更の影響で初受賞から２年近く経ってますね。</p>\n<p>固執するつもりはないけど、特典はいろいろ遊ぶのにありがたいし、<br>\n仕事でもこのレッテルがあるということで案件が取れる確度が上がったりするので、使えるものはつかっていこうと思います。</p>\n<p>グロサミは年に一回海外行きたいを叶えるちょうどよい機会だけど、有給を取り戻すのが大変。。。</p>\n<p>＜追記＞</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">This confusion between &quot;open source, cross-platform, tech community&quot; (e.g. .NET Foundation, <a href=\"https://twitter.com/fsharporg?ref_src=twsrc%5Etfw\">@fsharporg</a>, Go community, PSF, ...) and &quot;product-related awards program&quot; (MVP) is very profound.  We need both, and I respect both, but we shouldn&#39;t confuse them.</p>&mdash; Don Syme (@dsyme) <a href=\"https://twitter.com/dsyme/status/1014584414293151744?ref_src=twsrc%5Etfw\">2018年7月4日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>なツイートを見て。</p>\n<p>うんうん、 &quot;product-related awards program&quot; な意味でアピールはするけど、そうでない場合は特に表に出す意味もないかなーと思っています。<br>\nそういう意味ではこのブログにロゴ載せてるのもあまり意味はない、か。</p>\n",
      "date_published": "2018-07-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/06/28/f81037f942d954452619/",
      "url": "https://blog.amay077.net/blog/2018/06/28/f81037f942d954452619/",
      "title": "Kotlin の Channel と Rx の Observable/Subject の対比",
      "content_html": "<p><a href=\"https://qiita.com/amay077/items/d4629f9d20ba36a1347e\">これ</a> の通り、Rx には本来の目的のみを遂行してもらいたいので考えみました。</p>\n<!--more-->\n<h2 id=\"%E3%81%BE%E3%81%9A%E3%81%AF%E3%81%93%E3%82%8C%E3%82%92%E8%AA%AD%E3%82%82%E3%81%86\">まずはこれを読もう <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%81%93%E3%82%8C%E3%82%92%E8%AA%AD%E3%82%82%E3%81%86\">#</a></h2>\n<p>下記に書いてある以上の説明はないです（圧倒的感謝っ）</p>\n<ul>\n<li><a href=\"https://qiita.com/pljp/items/a1f3e8d1d13c88a94907\">実例によるkotlinx.coroutinesの手引き（日本語訳） - Qiita</a></li>\n<li><a href=\"https://dev.classmethod.jp/smartphone/kotlin-coroutine-channel-1/\">[Kotlin]コルーチンのChannelのハマり所 ｜ Developers.IO</a></li>\n<li><a href=\"https://qiita.com/pljp/items/f748125934fd3f880565\">Kotlinコルーチンによるリアクティブストリームのガイド (日本語訳) - Qiita</a></li>\n</ul>\n<h2 id=\"kotlin-%E3%81%AE-channel%3Ct%3E-%E3%81%A8-broadcastchannel%3Ct%3E\">Kotlin の <code>Channel&lt;T&gt;</code> と <code>BroadcastChannel&lt;T&gt;</code> <a class=\"direct-link\" href=\"#kotlin-%E3%81%AE-channel%3Ct%3E-%E3%81%A8-broadcastchannel%3Ct%3E\">#</a></h2>\n<p><code>Channel</code> は「キューのようなもの」と例えられます、<code>BroadcastChannel</code> も同じく。</p>\n<p><code>Channel&lt;T&gt;</code> は、送信者と受信者が 1:1 で、<br>\n<code>BroadcastChannel&lt;T&gt;</code> は、送信者と受信者が 1:n です。 <strong>Broadcast</strong> と言われるように。</p>\n<p>両方使ってみます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// Channel の例</span><br><span class=\"token keyword\">val</span> c <span class=\"token operator\">=</span> ArrayChannel<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// capacity=2 は具体的に何に効くのか不明…</span><br><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>CommonPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// delay(2000) // キューに追加されてから受信してもok</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">consumeEach</span> <span class=\"token punctuation\">{</span><br>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KT\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>UI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span><br>    c<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// BroadcastChannel の例</span><br><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>UI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> bc <span class=\"token operator\">=</span> ArrayBroadcastChannel<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">// 受信者1</span><br>    <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token function\">newSingleThreadContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">val</span> subscription1<span class=\"token operator\">:</span> SubscriptionReceiveChannel<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> bc<span class=\"token punctuation\">.</span><span class=\"token function\">openSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        subscription1<span class=\"token punctuation\">.</span><span class=\"token function\">consumeEach</span> <span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KT-BROADCAST-1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token comment\">// ここに何か書いても実行されないよん</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 受信者2</span><br>    <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token function\">newSingleThreadContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">val</span> subscription2<span class=\"token operator\">:</span> SubscriptionReceiveChannel<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> bc<span class=\"token punctuation\">.</span><span class=\"token function\">openSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        subscription2<span class=\"token punctuation\">.</span><span class=\"token function\">consumeEach</span> <span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KT-BROADCAST-2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token comment\">// ここに何か書いても実行されないよん</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 受信側のために少し待ってから</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p><strong>上記の出力:</strong></p>\n<pre><code>KT a\n   b\n   c\n\nKT-BROADCAST-1  C\nKT-BROADCAST-2  C\n                D\nKT-BROADCAST-1  D\n</code></pre>\n<p><code>Channel</code> は <code>send</code> されたものを <code>consumeEach { }</code> で受信します。1：1 です。<br>\nここで使っている <code>ArrayChannel</code> は単純なキューなので、send が先、あとから consume でも問題なくすべて受信できます（<code>capacity=2</code> は？？）。</p>\n<p>一方 <code>BroadcastChannel</code> は、<code>. openSubscription()</code> を呼ぶことで複数の受信者を持てます。受信者1と2が、それぞれ同じ値を受信できることがわかるでしょう。</p>\n<p><code>ArrayBroadcastChannel</code> では、受信登録前に追加した <code>&quot;A&quot;, &quot;B&quot;</code> が受信されていません。<br>\nこれは BroadcastChannel というよりは <code>ArrayBroadcastChannel</code> の特性で、 <strong>受信者が誰も居ない状態で <code>send()</code> された値はそのまま捨てられます。</strong></p>\n<h3 id=\"channel.-send()-%E3%81%A8-offer()\">Channel. <code>send()</code> と <code>offer()</code> <a class=\"direct-link\" href=\"#channel.-send()-%E3%81%A8-offer()\">#</a></h3>\n<p>どちらも「キューに要素を追加する」という役割ですが、次の違いがあります。</p>\n<h4 id=\"send()\">send() <a class=\"direct-link\" href=\"#send()\">#</a></h4>\n<ul>\n<li>コルーチンの中(<code>launch(xx) { }</code>)でしか使えない</li>\n<li>Channel のキャパシティを超える要素を追加できる(※半信半疑。<code>ArrayCannel</code> では追加できてしまった)</li>\n</ul>\n<h4 id=\"offer()\">offer() <a class=\"direct-link\" href=\"#offer()\">#</a></h4>\n<ul>\n<li>コルーチン外でも使える</li>\n<li>Channel のキャパシティを超える要素を追加できない(<code>false</code> が返却される)</li>\n</ul>\n<p>参考 − <a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental.channels/-channel/index.html\">Channel - kotlinx-coroutines-core</a></p>\n<h3 id=\"arraybroadcastchannel-%E3%81%A8-conflatedbroadcastchannel\">ArrayBroadcastChannel と ConflatedBroadcastChannel <a class=\"direct-link\" href=\"#arraybroadcastchannel-%E3%81%A8-conflatedbroadcastchannel\">#</a></h3>\n<p>BroadcastChannel には <code>ArrayBroadcastChannel</code> の他に <code>ConflatedBroadcastChannel</code> というものがあります。</p>\n<ul>\n<li><a href=\"https://kotlin.github.io/kotlinx.coroutines/kotlinx-coroutines-core/kotlinx.coroutines.experimental.channels/-conflated-broadcast-channel/index.html\">ConflatedBroadcastChannel - kotlinx-coroutines-core</a></li>\n</ul>\n<p>これは、 <strong>最近 <code>send()</code> された値をひとつだけキャッシュしておく</strong> BroadcastChannel です、どっかで聞いたことありますね。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>UI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> bc <span class=\"token operator\">=</span> ConflatedBroadcastChannel<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">// 受信者1</span><br>    <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token function\">newSingleThreadContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">val</span> subscription1<span class=\"token operator\">:</span> SubscriptionReceiveChannel<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> bc<span class=\"token punctuation\">.</span><span class=\"token function\">openSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        subscription1<span class=\"token punctuation\">.</span><span class=\"token function\">consumeEach</span> <span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KT-BROADCAST-1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token comment\">// ここに何か書いても実行されないよん</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 受信者2</span><br>    <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span><span class=\"token function\">newSingleThreadContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"threadB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">val</span> subscription2<span class=\"token operator\">:</span> SubscriptionReceiveChannel<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> bc<span class=\"token punctuation\">.</span><span class=\"token function\">openSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        subscription2<span class=\"token punctuation\">.</span><span class=\"token function\">consumeEach</span> <span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KT-BROADCAST-2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token comment\">// ここに何か書いても実行されないよん</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">)</span><br>    bc<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D\"</span><span class=\"token punctuation\">)</span><br><br>    Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"KT-BROADCAST-LATEST\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>bc<span class=\"token punctuation\">.</span>valueOrNull<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>上記の出力:</strong></p>\n<pre><code>KT-BROADCAST-1  B\nKT-BROADCAST-2  B\nKT-BROADCAST-1  C\nKT-BROADCAST-2  C\n                D\nKT-BROADCAST-LATEST  D\nKT-BROADCAST-1  D\n</code></pre>\n<p>上記のように、受信登録前に <code>send</code> された <code>A, B</code> の内、最後に送信された <code>B</code> が受信できています。<br>\nまた、最後に送信された値を <code>.valueOrNull</code> プロパティで取り出すことができます。</p>\n<h2 id=\"rx-%E3%81%A8%E3%81%AE%E5%AF%BE%E6%AF%94\">Rx との対比 <a class=\"direct-link\" href=\"#rx-%E3%81%A8%E3%81%AE%E5%AF%BE%E6%AF%94\">#</a></h2>\n<p>さてさて、 Channel と BroadcastChannel を次のようにまとめてみました。</p>\n<ul>\n<li>Channel は 送信1 : 受信1 のキュー</li>\n<li>BroadcastChannel は 送信1 : 受信n</li>\n<li>ArrayBroadcastChannel は誰も受信者が居ない時に send された値は捨てられる</li>\n<li>ConflatedBroadcastChannel は(受信者が居なくても) send された最新の値を一つキャッシュして新しい受信者に配信する</li>\n</ul>\n<p>次に Rx の Observable/Subject、Hot/Cold について次のようにまとめます(<code>Observable/Flowable/Single/Completable</code> などの違いについては述べません)。</p>\n<ul>\n<li>Cold Observable は 「あなただけの」 Observable(ニコ動[^1])</li>\n<li>Hot Observable は 「みんなの」 Observable(ニコ生)</li>\n<li>PublishSubject は <code>onNext</code> された値を subscriber に配信する(subscriber が居なければ無視される)</li>\n<li>BehaviorSubject は subscriber が居なくても <code>onNext</code> された最新の値をキャッシュして新しい subscriber に配信する</li>\n</ul>\n<p>そうすると、Channel と Rx は次のように対比できると考えます。</p>\n<p>[^1]: <a href=\"https://qiita.com/amay077/items/4bb6b09a1911b074f50c\">Hot Observable と ConnectableObservable について - Qiita</a></p>\n<ul>\n<li>Channel - Cold Observable</li>\n<li>ArrayBroadcastChannel - PublishSubject(Hot Observable)</li>\n<li>ConflatedBroadcastChannel - BehaviorSubject(Hot Observable) ※これは冒頭のリンクにも説明あり</li>\n</ul>\n<p>具体的には、</p>\n<ul>\n<li>メソッドの返値に <code>Observable&lt;T&gt;</code> を使っている → <code>Channel&lt;T&gt;</code> に替える</li>\n<li>公開プロパティとして <code>Observable&lt;T&gt;</code>(実体は <code>Subject&lt;T&gt;</code>) を用意している → <code>BroadcastChannel&lt;T&gt;</code> に替える</li>\n</ul>\n<p>ことができると思います。おまけですが、</p>\n<ul>\n<li>メソッドの返値に <code>Single&lt;T&gt;</code> や <code>Completable</code> を使っている → <code>Continuation&lt;T&gt;</code> に替える</li>\n</ul>\n<p>も。</p>\n<p>適当にリポジトリクラスを書いてみると、こんな感じかなと。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// 「アドレス帳」 のリポジトリクラスのインターフェース</span><br><span class=\"token keyword\">interface</span> AddressRepository <span class=\"token punctuation\">{</span><br>   <span class=\"token comment\">// アドレスリスト帳を通知する(1件のAddressの変更通知をするものなら完璧)</span><br>   <span class=\"token keyword\">val</span> addresses<span class=\"token operator\">:</span> BroadcastChannel<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>Address<span class=\"token operator\">></span><span class=\"token operator\">></span><br><br>   <span class=\"token comment\">// なんかの条件でアドレス帳を非同期で検索して結果を返す</span><br>   <span class=\"token keyword\">fun</span> <span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>criteria<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Channel<span class=\"token operator\">&lt;</span>Array<span class=\"token operator\">&lt;</span>Address<span class=\"token operator\">></span><span class=\"token operator\">></span><br><br>   <span class=\"token comment\">// 特定の名前の人がアドレス帳に存在するかを非同期で調べて居るなら true を返す</span><br>   <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> String<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean<br><span class=\"token punctuation\">}</span></code></pre>\n<p><a href=\"https://qiita.com/amay077/items/d4629f9d20ba36a1347e\">MV* の「つなぎ」に RxJava を使うのをやめたい</a> からは少し前進できたかなと。もっと勉強が必要です。</p>\n",
      "date_published": "2018-06-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/06/26/829630273721fb7a615e/",
      "url": "https://blog.amay077.net/blog/2018/06/26/829630273721fb7a615e/",
      "title": "Firebase Functions + TypeScript を VSCode でデバッグする",
      "content_html": "<p><a href=\"https://github.com/GoogleCloudPlatform/cloud-functions-emulator/wiki/Debugging-with-Visual-Studio-Code\">Debugging with Visual Studio Code · GoogleCloudPlatform/cloud-functions-emulator Wiki</a></p>\n<p>の内容を少しアレンジして。</p>\n<!--more-->\n<h2 id=\"%E8%A9%A6%E3%81%97%E3%81%9F%E7%92%B0%E5%A2%83\">試した環境 <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%9F%E7%92%B0%E5%A2%83\">#</a></h2>\n<ul>\n<li>macOS</li>\n<li>node - v6.11.5</li>\n<li>VSCode - 1.24.1</li>\n<li>Google Cloud Platform の任意のアカウント(ログインのみが必要で何もデプロイされません)</li>\n</ul>\n<p><code>firebase-tools</code> と <code>@google-cloud/functions-emulator</code> をインストールします。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g firebase-tools<br><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g @google-cloud/functions-emulator</code></pre>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">サンプルプロジェクトの作成 <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> fb01<br><span class=\"token builtin class-name\">cd</span> fb01<br>firebase login</code></pre>\n<p>ブラウザでログインして cli のアクセスを許可すると、コンソール側もログイン完了になります。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">firebase init functions</code></pre>\n<ul>\n<li>? Select a default Firebase... -&gt; create a new project</li>\n<li>? What language would you like... -&gt; TypeScript</li>\n<li>? Do you want to use TSLint... -&gt; Y</li>\n<li>? Do you want to install dependencies with npm now? -&gt; Y</li>\n</ul>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE-helloworld-%E9%96%A2%E6%95%B0%E3%81%AE%E4%BD%9C%E6%88%90\">サンプルの helloWorld 関数の作成 <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE-helloworld-%E9%96%A2%E6%95%B0%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">code <span class=\"token builtin class-name\">.</span></code></pre>\n<p>で <code>fb01</code> ディレクトリを VSCode で開きます（普通にフォルダを開くでもok）。</p>\n<p><code>/functions/src/index.ts</code> を開いて、 <code>helloWorld</code> のコメントアウトを外します。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> functions <span class=\"token keyword\">from</span> <span class=\"token string\">'firebase-functions'</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// // Start writing Firebase Functions</span><br><span class=\"token comment\">// // https://firebase.google.com/docs/functions/typescript</span><br><span class=\"token comment\">//</span><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> helloWorld <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br> response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from Firebase!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>次に、 <code>/.vscode/launch.json</code> を作り、次のように記述します。<br>\n(VSCode のメニュー -&gt; デバッグ -&gt; 構成の追加 でもok)</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Inspect Function\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"protocol\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"inspector\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"attach\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"port\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9229</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>VSCode で メニュー -&gt; タスク -&gt; ビルドタスクの実行 -&gt; npm build - function を実行（ターミナルで <code>npm run build</code> でもok）。</p>\n<p><code>/functions/lib</code> ディレクトリに <code>index.js</code> が <code>index.js.map</code> ができます。</p>\n<h2 id=\"functions-%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%B8%E9%96%A2%E6%95%B0%E3%82%92%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">Functions エミュレータへ関数をデプロイ <a class=\"direct-link\" href=\"#functions-%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%B8%E9%96%A2%E6%95%B0%E3%82%92%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">#</a></h2>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> functions<br>functions start</code></pre>\n<p>で Functions Emulator を起動し、</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">functions deploy helloWorld --trigger-http</code></pre>\n<p>で、エミュレータに <code>helloWorld</code> 関数をデプロイします。<br>\nデプロイできれば次のような出力になります。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">Copying file:///var/folders/lv/5j48kqb146xdtt0dn65h_2480000gn/T/tmp-69998WgYjI25qtJ59.zip<span class=\"token punctuation\">..</span>.<br>Waiting <span class=\"token keyword\">for</span> operation to finish<span class=\"token punctuation\">..</span>.done.<br>Deploying function<span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span><span class=\"token punctuation\">..</span>.done.<br>Function helloWorld deployed.<br>┌────────────┬───────────────────────────────────────────────────────────────────────────────────┐<br>│ Property   │ Value                                                                             │<br>├────────────┼───────────────────────────────────────────────────────────────────────────────────┤<br>│ Name       │ helloWorld                                                                        │<br>├────────────┼───────────────────────────────────────────────────────────────────────────────────┤<br>│ Trigger    │ HTTP                                                                              │<br>├────────────┼───────────────────────────────────────────────────────────────────────────────────┤<br>│ Resource   │ http://localhost:8010/fb01/us-central1/helloWorld                             │<br>├────────────┼───────────────────────────────────────────────────────────────────────────────────┤<br>│ Timeout    │ <span class=\"token number\">60</span> seconds                                                                        │<br>├────────────┼───────────────────────────────────────────────────────────────────────────────────┤<br>│ Local path │ /Users/xxx/dev/playground/fb01/functions                             │<br>├────────────┼───────────────────────────────────────────────────────────────────────────────────┤<br>│ Archive    │ file:///var/folders/lv/xxxxx_2480000gn/T/tmp-69998WgYjI25qtJ59.zip │<br>└────────────┴───────────────────────────────────────────────────────────────────────────────────┘</code></pre>\n<h2 id=\"%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AE%E5%AE%9F%E8%A1%8C\">デバッグの実行 <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h2>\n<p>ターミナル側で次のコマンドを実行します。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">functions inspect helloWorld</code></pre>\n<p><code>Debugger for helloWorld listening on port 9229</code> のような出力が得られます。<br>\nポート番号がもし 9229 以外なら、 <code>/.vscode/launch.json</code> の <code>port:</code> を書き換えてください。</p>\n<p>VScode で、メニュー -&gt; デバッグ -&gt; デバッグの開始 を実行します(サイドメニューの虫みたいなアイコンから実行してもok)。</p>\n<p>次に <code>/functions/src/index.ts</code> を開いて 9行目 も行番号の左側あたりをクリックしてブレークポイントを追加します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/6dfef1f5-5429-5a05-123c-87ce88f904d6.png\" alt=\"image.png\"></p>\n<p>ターミナルに戻って、次のコマンドを実行します。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">functions call helloWorld</code></pre>\n<p>すると、VSCode 側では、ブレークポイントを置いたところで処理が停止するのが確認できます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/0c1ef1fc-f2dc-54b6-1364-5e37fb9c7236.png\" alt=\"image.png\"></p>\n<p>前の手順 <code>functions deploy</code> で出力された Resource に記述された URL にアクセスしても、ブレークポイントで止まることが確認できます。</p>\n<p>めでたしめでたし。</p>\n<h2 id=\"%E5%BE%8C%E7%89%87%E4%BB%98%E3%81%91\">後片付け <a class=\"direct-link\" href=\"#%E5%BE%8C%E7%89%87%E4%BB%98%E3%81%91\">#</a></h2>\n<pre class=\"language-bash\"><code class=\"language-bash\">functions delete helloWorld</code></pre>\n<p>で deploy した関数を削除。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">functions <span class=\"token function\">kill</span></code></pre>\n<p>で start した Functions エミュレータをシャットダウンできます。</p>\n<h2 id=\"%E3%81%82%E3%81%A8%E3%81%8C%E3%81%8D\">あとがき <a class=\"direct-link\" href=\"#%E3%81%82%E3%81%A8%E3%81%8C%E3%81%8D\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/GoogleCloudPlatform/cloud-functions-emulator/wiki/Debugging-with-Visual-Studio-Code#v8-inspector-integration\">Debugging with Visual Studio Code</a> には、２つのデバッグ手法（&quot;Standard Node.js Debugger&quot; と &quot;V8 Inspector Integration&quot;）が紹介されていますが、前者はうまく機能させられませんでした。なのでこの記事は後者の内容です。</li>\n<li><a href=\"https://github.com/GoogleCloudPlatform/cloud-functions-emulator/wiki/Debugging-with-Visual-Studio-Code#v8-inspector-integration\">V8 Inspector Integration</a> で紹介されている <code>launch.json</code> は古いらしく <code>&quot;type&quot;: &quot;node2&quot;</code> で警告が出ます。それを修正したのが上記で示した <code>&quot;type&quot;: &quot;node&quot;, &quot;protocol&quot;: &quot;inspector&quot;</code> を使ったものです。</li>\n</ul>\n",
      "date_published": "2018-06-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/06/23/6f9d97ea9b884111fc8a/",
      "url": "https://blog.amay077.net/blog/2018/06/23/6f9d97ea9b884111fc8a/",
      "title": "Firebase Functions + TypeScript で CORS を使用する",
      "content_html": "<p>Web API のプロトタイプを Firebase Functions の http ハンドラーを使って実装して、それを JavaScript から呼び出したら、  <strong>No 'Access-Control-Allow-Origin' header</strong> のエラーが出たので、それに対応した手順を書きます。</p>\n<!--more-->\n<h2 id=\"%E3%81%BE%E3%81%9A\">まず <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%9A\">#</a></h2>\n<p>Firebase Functions を REST API のように <strong>即時に応答を要求する用途</strong> に使うのはほとんどの場合間違っています。一般的に、クラウドプラットフォームで提供される &quot;Functions&quot; と呼ばれる機能は、起動は遅いと考えたほうがよいです。</p>\n<h2 id=\"functions\">Functions <a class=\"direct-link\" href=\"#functions\">#</a></h2>\n<p>次のような <code>say</code> 関数を作りました、TypeScript で。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> functions <span class=\"token keyword\">from</span> <span class=\"token string\">'firebase-functions'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> say <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from Firebase!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>サンプルまんまです。</p>\n<p><code>firebase serve</code> をして、ローカルで動作させると、<br>\n<code>http://localhost:5001/＜project名＞/us-central1/say</code> のような URL で起動できます。</p>\n<h2 id=\"html\">HTML <a class=\"direct-link\" href=\"#html\">#</a></h2>\n<p>これを呼び出す HTML を次のように書きました。<br>\nこの <code>index.html</code> は Firebase Hosting に配置するので、 <code>public</code> ディレクトリに置きます。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Firebase Hosting<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token keyword\">function</span> <span class=\"token function\">loadHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">var</span> label <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"label\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>      <span class=\"token keyword\">var</span> req <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      req<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <br>          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>status <span class=\"token operator\">==</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            label<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">;</span><br>          <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>          label<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">\"通信中...\"</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>      <span class=\"token punctuation\">}</span><br>      <br>      req<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'http://localhost:5001/＜プロジェクト名＞/us-central1/say'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      req<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">onLoad</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>loadHello()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>H1</span><span class=\"token punctuation\">></span></span>Firebase Hosting<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>H1</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>label<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>loading..<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>こちらも <code>firebase serve</code> しているときに <code>http://localhost:5000/</code> でアクセスできます。</p>\n<h2 id=\"*no-access-control-allow-origin-%E3%82%A8%E3%83%A9%E3%83%BC\">*No Access-Control-Allow-Origin エラー <a class=\"direct-link\" href=\"#*no-access-control-allow-origin-%E3%82%A8%E3%83%A9%E3%83%BC\">#</a></h2>\n<p><code>index.html</code> は、読み込み時に Functions の <code>/say</code> を呼び出して、そのレスポンスを <code>id=label</code> に表示する、というものですが、読み込み時に Console にエラーが出ます。</p>\n<pre><code>Failed to load http://localhost:5001/xxxx/us-central1/say: \nNo 'Access-Control-Allow-Origin' header is present on the requested resource. \nOrigin 'http://localhost:5000' is therefore not allowed access.\n</code></pre>\n<p>よくあるやつです。</p>\n<h2 id=\"functions-%E3%81%A7-cors-%E3%82%92%E4%BD%BF%E3%81%86\">Functions で CORS を使う <a class=\"direct-link\" href=\"#functions-%E3%81%A7-cors-%E3%82%92%E4%BD%BF%E3%81%86\">#</a></h2>\n<p>Functions を CORS に対応させる（別ドメインからの呼び出しを許可する）には、<a href=\"https://github.com/expressjs/cors\">expressjs/cors: Node.js CORS middleware</a> という node.js 用ライブラリを使います。今回は TypeScript なので、これの type definitions である</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/@types/cors\">@types/cors - npm</a></li>\n</ul>\n<p>を使います。</p>\n<p>まずは cors と @types/cors をインストールします。</p>\n<pre><code>npm install --save cors\nnpm install --save-dev @types/cors\n</code></pre>\n<p><code>functions/package.json</code> は次のようになっています。</p>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span><br>  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"functions\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tslint --project tsconfig.json\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"serve\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build &amp;&amp; firebase serve --only functions\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"shell\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run build &amp;&amp; firebase functions:shell\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run shell\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"deploy\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"firebase deploy --only functions\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"logs\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"firebase functions:log\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib/index.js\"</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"cors\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.8.4\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"firebase-admin\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"~5.12.1\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"firebase-functions\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^1.0.3\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"devDependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"@types/cors\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.8.4\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"tslint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^5.8.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"typescript\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^2.5.3\"</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  <span class=\"token property\">\"private\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>続いて Functions を次のように書き換えます。</p>\n<pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> functions <span class=\"token keyword\">from</span> <span class=\"token string\">'firebase-functions'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> corsLib <span class=\"token keyword\">from</span> <span class=\"token string\">'cors'</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> cors <span class=\"token operator\">=</span> <span class=\"token function\">corsLib</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> say <span class=\"token operator\">=</span> functions<span class=\"token punctuation\">.</span>https<span class=\"token punctuation\">.</span><span class=\"token function\">onRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token function\">cors</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        response<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello from Firebase!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>cors を import して関数として実行。<br>\nさらに <code>onRequest</code> の中を、 <code>cors(req, res, ()=&gt;{ })</code> で包んじゃいます。</p>\n<p>これで html を表示させると、エラーは消え、次のような画面が表示できます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/ddb27970-0bec-1481-aaa8-15d10c162f6f.png\" alt=\"image.png\"></p>\n",
      "date_published": "2018-06-23T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/06/15/8823376f307235a7f651/",
      "url": "https://blog.amay077.net/blog/2018/06/15/8823376f307235a7f651/",
      "title": "プロダクトのドキュメントにプルリクエストを送れる仕組みがすごい",
      "content_html": "<p>これ↓なんですけど、意外と RT や Like が付いてたので、ちゃんと書きますね。</p>\n<!--more-->\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">しっかしMicrosoftのドキュメントシステム良く出来てるなー。右のEditボタン押すとGitHubが開いてすぐPR送れる。あちらでマージされれば即サイトに反映される。Contiributorsに自分のアイコンが増えた♪ これはフィードバックするのに「面倒」は理由にできないですぞ。<a href=\"https://t.co/9KhAwhV5PP\">https://t.co/9KhAwhV5PP</a> <a href=\"https://t.co/r46zFUvkEp\">pic.twitter.com/r46zFUvkEp</a></p>&mdash; あめいぱわーにおまかせろ! (@amay077) <a href=\"https://twitter.com/amay077/status/1006355144567488512?ref_src=twsrc%5Etfw\">2018年6月12日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>このツイは Microsoft の製品やサービスのドキュメントについてなんですが、</p>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/\">Microsoft Docs</a></li>\n</ul>\n<p>というポータルがありまして、同社のサービスの多くはここでドキュメント公開されている模様です。<br>\nここで公開されているドキュメント群は、バックエンドに GitHub[^gh] が使われていて、ドキュメントの修正方法に GitHub のプルリクエストの仕組みがうまく統合されています。</p>\n<p>とても素晴らしいのは、ドキュメントの修正が <strong>「誰でも」</strong>、 <strong>「簡単に（すなわち今すぐに）」</strong> できることです。Microsoft アカウントは必要ありません、GitHub アカウントがあればOKです。</p>\n<h2 id=\"%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E4%BF%AE%E6%AD%A3%E3%82%92%E9%80%81%E3%82%8B%E6%89%8B%E9%A0%86\">ドキュメントの修正を送る手順 <a class=\"direct-link\" href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AE%E4%BF%AE%E6%AD%A3%E3%82%92%E9%80%81%E3%82%8B%E6%89%8B%E9%A0%86\">#</a></h2>\n<p>例えば、テキトー に Visual Studio -&gt; Visual Studio App Center とクリックしていって <a href=\"https://docs.microsoft.com/en-us/appcenter/dashboard/\">https://docs.microsoft.com/en-us/appcenter/dashboard/</a> を開いてみると、普通にドキュメントが見られるわけですが、ここでなにか誤字を見つけたとします。</p>\n<p>そしたらすぐに、画面の右側にある「Edit」ボタンを押します。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/bc271f91-a630-3f7b-e4fe-b4c23770f56b.png\" alt=\"image.png\"></p>\n<p>するとなぜだか GitHub の当該ドキュメントのページが開くので、ここでも編集を示すアイコンをクリックします。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/e3d1ff05-5399-81fe-5846-67b4844dbbb9.png\" alt=\"image.png\"></p>\n<p>そしたら Markdown の編集画面になるので、みつけた誤字を修正します。<br>\nここでは仮に 「EMail を E-Mail に直す」 という超どうでもいい修正をしました。</p>\n<p><strong>仮なので実際にはこんなPRは送らないですよ</strong></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/d98bbdbf-05bb-5e91-4b29-110a9976dca6.png\" alt=\"image.png\"></p>\n<p>「Propose file changes」 を押します。大丈夫です、まだ何も起こりません。</p>\n<p>次に修正箇所の確認画面になります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/07121645-736c-9802-f40e-faf98f25dacd.png\" alt=\"image.png\"></p>\n<p>修正が問題ないことを確認したら、「Create pull request」を押します。まだ何も起こりません。</p>\n<p>すると、次のような画面になります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/0146cf93-0fb0-c248-6f99-5f3c8372fb3e.png\" alt=\"image.png\"></p>\n<p>&quot;Leave a comment&quot; に簡単に「どんな修正をしたか」とか「なぜこの修正をしたか」などを書いて「Create pull request」 を押すと、 <strong>実際に修正が送信されます</strong>。</p>\n<p>プルリクエストが送信されると、Microsoft のチームの人がそれをレビューし、問題なければマージされ、サイトに反映されます。</p>\n<h2 id=\"%E7%A7%81%E3%81%8C%E9%80%81%E3%81%A3%E3%81%9F%E4%BF%AE%E6%AD%A3%E3%81%AE%E3%83%97%E3%83%AB%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\">私が送った修正のプルリクエスト <a class=\"direct-link\" href=\"#%E7%A7%81%E3%81%8C%E9%80%81%E3%81%A3%E3%81%9F%E4%BF%AE%E6%AD%A3%E3%81%AE%E3%83%97%E3%83%AB%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\">#</a></h2>\n<p>App Center で Android アプリをビルドするときに、環境変数を注入する方法が間違っているのに気づいて、それを修正しました。</p>\n<p><a href=\"https://github.com/MicrosoftDocs/appcenter-docs/pull/168\">https://github.com/MicrosoftDocs/appcenter-docs/pull/168</a></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/ee5f90cd-b443-c1d9-0766-6b916b55ed94.png\" alt=\"image.png\"></p>\n<p>「Java なんだから <code>string</code> じゃなくて大文字の <code>String</code> だろ」 とか 「文字列は <code>\\&quot;</code> で囲まなきゃダメだろ」 というところを直して、簡単に説明して送信しました。</p>\n<p>送信後、こんな↓感じで、アチラのメンバーの人がリアクションしてくれました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/da1a16fc-2b98-c2fe-107e-9e0dcb5d078e.png\" alt=\"image.png\"></p>\n<p>コメントがもらえたらすかさず :thumbsup: して、「見てますよ〜」 感を出していくと、アチラも悪い気はしないと思います。</p>\n<p>最終的には５日後くらいにこの修正がマージされて、サイトに公開されました。</p>\n<p>現在、該当ページは次のように修正済みです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/3d0da3e0-5acb-150b-32b9-3e4fcc32647a.png\" alt=\"image.png\"></p>\n<p>ついでにページ上部の contributors にアイコンが付きました、やったね。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/52f2716e-7565-1961-f48b-39fb639862e1.png\" alt=\"image.png\"></p>\n<h2 id=\"%E4%BB%8A%E3%81%99%E3%81%90%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%83%88%EF%BC%81\">今すぐコントリビュート！ <a class=\"direct-link\" href=\"#%E4%BB%8A%E3%81%99%E3%81%90%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AA%E3%83%93%E3%83%A5%E3%83%BC%E3%83%88%EF%BC%81\">#</a></h2>\n<p><a href=\"https://docs.microsoft.com/\">https://docs.microsoft.com/</a> はローカライズもされているのですが、「とりあえず機械翻訳で出したよ」的なものも多く見られます。</p>\n<p>例えば <a href=\"https://docs.microsoft.com/ja-jp/xamarin/android/user-interface/material-theme\">Xamarin Android の日本語のページのひとつ</a> を見てみましょう。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/1240d772-cc43-25ca-b388-be4a93187366.png\" alt=\"image.png\"></p>\n<p>おお、Material Theme を「材料テーマ」ときましたかｗ<br>\nまあ機械翻訳だし仕方なし。<br>\nカーソルを当てると英語の原文が見られるのも便利ですごい。<br>\nここから適切な日本語文に修正してプルリクエストを送ることができます。</p>\n<p>日本語訳は結構難しくて、ドキュメント全体で訳の一貫性を保たせなければならない、とかあるんでしょうけど、なにかアクションを起こさないとこちらの(この日本語版ドキュメントが欲しいという)ニーズも伝わらないので、カジュアルにプルリクしてよいと思います。ダメなら Reject されるだけです。</p>\n<h2 id=\"%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">おわりに <a class=\"direct-link\" href=\"#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB\">#</a></h2>\n<p>と、このように誰でもすぐにドキュメント修正が行える仕組み、よくできてるなあ、と感動しました[^hb]。<br>\nやりたい／やってほしい事が抵抗なくできるシステム、理想的なんじゃあないでしょうか。</p>\n<p>Microsoft さんにはこの仕組み自体を我々にも使わせて欲しい！（もう公開されてるなら教えてください）<br>\n自社の製品やサービスのマニュアルもこれ使いたい！ APIリファレンスもこれで書きたい！ もはや CMS これでいいじゃん。<br>\nよろしくご検討ください。</p>\n<h2 id=\"%E4%BB%96%E3%81%AE%E4%BA%8B%E4%BE%8B(%E9%9A%8F%E6%99%82%E8%BF%BD%E8%A8%98-%E2%80%BB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AA%E3%81%A9%E3%81%A7%E5%8B%9F%E9%9B%86%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99)\">他の事例(随時追記 ※コメントなどで募集してます) <a class=\"direct-link\" href=\"#%E4%BB%96%E3%81%AE%E4%BA%8B%E4%BE%8B(%E9%9A%8F%E6%99%82%E8%BF%BD%E8%A8%98-%E2%80%BB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AA%E3%81%A9%E3%81%A7%E5%8B%9F%E9%9B%86%E3%81%97%E3%81%A6%E3%81%BE%E3%81%99)\">#</a></h2>\n<h3 id=\"elasticsearch\">Elasticsearch <a class=\"direct-link\" href=\"#elasticsearch\">#</a></h3>\n<p><a href=\"https://www.elastic.co/jp/products/elasticsearch\">Elasticsearch</a> の<a href=\"https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl-function-score-query.html\">ドキュメント</a>も、同じ仕組みであるとの情報をいただきました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://t.co/qppqavNAks\">https://t.co/qppqavNAks</a><br><br>すっごい薄いですが「edit」というボタンがあります。ちょっと薄すぎて目を凝らさないと見えないですが…ｗ</p>&mdash; FUJI Goro (@__gfx__) <a href=\"https://twitter.com/__gfx__/status/1006712075492585473?ref_src=twsrc%5Etfw\">2018年6月13日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h3 id=\"mdn(mozilla-developer-network)\">MDN(Mozilla Developer Network) <a class=\"direct-link\" href=\"#mdn(mozilla-developer-network)\">#</a></h3>\n<p>MDN のドキュメントも、同じ仕組みであるとの情報がありました</p>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">MDNも忘れないで！MDNは2006年以前からその仕組みがある。MSのこの改善は素晴らしい。もっと早くに欲しかった。 / “プロダクトのドキュメントにプルリクエストを送れる仕組みがすごい” <a href=\"https://t.co/G1jeSeIKcJ\">https://t.co/G1jeSeIKcJ</a></p>&mdash; test (@in_dow) <a href=\"https://twitter.com/in_dow/status/1006718243644452864?ref_src=twsrc%5Etfw\">2018年6月13日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Learn/HTML/Introduction_to_HTML/Getting_started\">HTMLを始めよう - ウェブ開発を学ぶ | MDN</a></li>\n</ul>\n<p>なるほど右上に「編集」ボタンがあります。</p>\n<h3 id=\"docker\">Docker <a class=\"direct-link\" href=\"#docker\">#</a></h3>\n<p><a href=\"http://docs.docker.jp/index.html\">Docker ドキュメント日本語化プロジェクト — Docker-docs-ja 17.06.Beta ドキュメント</a> は Read the Docs が使われているようです。</p>\n<h3 id=\"aws(amazon-web-services)\">AWS(Amazon Web Services) <a class=\"direct-link\" href=\"#aws(amazon-web-services)\">#</a></h3>\n<p>ドキュメントの言語を English にしたときのみ「Edit on Github」のボタンが現れます(コメントで教えていただきました。)。</p>\n<p>例 - <a href=\"https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html\">https://docs.aws.amazon.com/AmazonECS/latest/developerguide/Welcome.html</a></p>\n<h3 id=\"%E3%81%95%E3%82%89%E3%81%AB%EF%BC%88%E3%81%99%E3%81%BF%E3%81%BE%E3%81%9B%E3%82%93%E3%80%81%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%EF%BC%89\">さらに（すみません、まとめて） <a class=\"direct-link\" href=\"#%E3%81%95%E3%82%89%E3%81%AB%EF%BC%88%E3%81%99%E3%81%BF%E3%81%BE%E3%81%9B%E3%82%93%E3%80%81%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A6%EF%BC%89\">#</a></h3>\n<blockquote>\n<p>GitHub にホストされているものに関しては、むしろ、できないほうが驚く程度には一般的な印象です。</p>\n</blockquote>\n<p>との意見と以下の情報をコメントにていただきました。</p>\n<ul>\n<li><a href=\"https://babeljs.io/docs/en/index.html\">Babel</a> (右上に EDIT)</li>\n<li><a href=\"https://webpack.js.org/concepts/\">Webpack</a> (右上に EDIT DOCUMENT)</li>\n<li><a href=\"https://eslint.org/\">ESLint</a> (フッターに Edit this page)</li>\n<li><a href=\"https://vuejs.org/v2/guide/\">Vue.js</a> (フッターに Edit this page)</li>\n<li><a href=\"https://reactjs.org/tutorial/tutorial.html\">React</a> (フッターの上に Edit this page)</li>\n<li><a href=\"https://docs.npmjs.com/cli/install\">npm</a> (フッターに Send a pull request!)</li>\n</ul>\n<h2 id=\"%E3%81%93%E3%81%AE%E6%A9%9F%E8%83%BD%E3%82%92%E5%AE%9F%E7%8F%BE%E5%8F%AF%E8%83%BD%E3%81%AA%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%BB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2\">この機能を実現可能なサービス・ソフトウェア <a class=\"direct-link\" href=\"#%E3%81%93%E3%81%AE%E6%A9%9F%E8%83%BD%E3%82%92%E5%AE%9F%E7%8F%BE%E5%8F%AF%E8%83%BD%E3%81%AA%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%83%BB%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2\">#</a></h2>\n<h3 id=\"read-the-docs%2C-gitbook\">Read the Docs, GitBook <a class=\"direct-link\" href=\"#read-the-docs%2C-gitbook\">#</a></h3>\n<p><a href=\"https://readthedocs.org\">Read the Docs</a>、 <a href=\"https://www.gitbook.com/\">GitBook</a> というサービスもあるそうです、これらは我々がコンテンツを提供する側になれる SaaS ですね。</p>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://t.co/3nCVFfK0a3\">https://t.co/3nCVFfK0a3</a> とか <a href=\"https://t.co/Kxb2KwG0dF\">https://t.co/Kxb2KwG0dF</a> とか使えば気軽に実現できます。アイコンはないけど。 / “プロダクトのドキュメントにプルリクエストを送れる仕組みがすごい” <a href=\"https://t.co/Cq1YipcuHL\">https://t.co/Cq1YipcuHL</a></p>&mdash; ㈱にゃーん (@Kengo_TODA) <a href=\"https://twitter.com/Kengo_TODA/status/1006759972976381959?ref_src=twsrc%5Etfw\">2018年6月13日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>セルフホストできるようなプロダクトがあれば企業や団体の閉じた世界で使えそうです。</p>\n<p>[^gh]: ちなみにこの仕組みは GitHub 買収発表以前からあったものです、念の為。<br>\n[^hb]: Android や iOS のドキュメントもこんな風にすぐフィードバックできるようになって欲しい！</p>\n",
      "date_published": "2018-06-15T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/06/06/3e6e00c1b45fa5e37b5d/",
      "url": "https://blog.amay077.net/blog/2018/06/06/3e6e00c1b45fa5e37b5d/",
      "title": "Firebase を最新の環境で使用する【2018年6月版】",
      "content_html": "<p>Firebase Cloud Messaging を最新の開発環境で使おうとしたらいろいろハマったので手順をまとめてみました。</p>\n<!--more-->\n<p>だらだら長くなったので短くまとめると、</p>\n<ul>\n<li><code>com.google.firebase:firebase-messaging:17.0.0</code> と <code>apply plugin: 'com.google.gms.google-services'</code> が仲が悪い</li>\n<li>ので <code>apply plugin: 'com.google.gms.google-services'</code> を使わないようにした</li>\n<li>それに伴い <code>google-services.json</code> も使わないようにした</li>\n<li>Firebase のプロジェクト設定は環境変数から埋め込むようにした</li>\n</ul>\n<p>です。</p>\n<h2 id=\"1.-%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A-android-studio-%E3%81%A7%E6%96%B0%E8%A6%8F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">1. とりあえず Android Studio で新規プロジェクトを作る <a class=\"direct-link\" href=\"#1.-%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A-android-studio-%E3%81%A7%E6%96%B0%E8%A6%8F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<ul>\n<li>\n<p>Android Studio のバージョンは 3.1.2</p>\n</li>\n<li>\n<p>:heavy_check_mark: Include Kotlin support</p>\n</li>\n<li>\n<p>Targeting API 23 and later</p>\n</li>\n<li>\n<p>:heavy_check_mark: Backward Compatibility(AppCompat)</p>\n</li>\n</ul>\n<p><strong>プロジェクト削除直後の <code>app/build.gradle</code>:</strong></p>\n<pre><code>apply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 27\n    defaultConfig {\n        applicationId &quot;net.yourdomain.fcmsample&quot;\n        minSdkVersion 23\n        targetSdkVersion 27\n        versionCode 1\n        versionName &quot;1.0&quot;\n        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation&quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;\n    implementation 'com.android.support:appcompat-v7:27.1.1'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n}\n</code></pre>\n<h2 id=\"2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-firebase-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">2. プロジェクトに Firebase を追加する <a class=\"direct-link\" href=\"#2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-firebase-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<ul>\n<li><a href=\"https://firebase.google.com/docs/android/setup?hl=ja\">Android プロジェクトに Firebase を追加する  |  Firebase</a></li>\n</ul>\n<p>の手順をトレース。Firebase Cloud Messaging(FCM) が使いたかったので &quot;Cloud Messaging&quot; から開始。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/0a783607-0793-764b-9bed-0c350b788a9c.png\" alt=\"image.png\"></p>\n<p>「Connect to Firebase」と「Add FCM to your App」をやります。</p>\n<p><strong>「Add FCM to your App」したあとの <code>app/build.gradle</code> :</strong></p>\n<pre><code>apply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 27\n    defaultConfig {\n        applicationId &quot;net.yourdomain.fcmsample&quot;\n        minSdkVersion 23\n        targetSdkVersion 27\n        versionCode 1\n        versionName &quot;1.0&quot;\n        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;\n    implementation 'com.android.support:appcompat-v7:27.1.1'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.0'\n    implementation 'com.google.firebase:firebase-messaging:11.8.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n}\n\napply plugin: 'com.google.gms.google-services'\n</code></pre>\n<p><code>implementation 'com.google.firebase:firebase-messaging:11.8.0'</code> と <code>apply plugin: 'com.google.gms.google-services'</code> が追加された。<strong>後者は後で消します</strong>。</p>\n<p>その他、ルートの <code>build.gradle</code> に <code>classpath 'com.google.gms:google-services:3.1.1'</code> が、<code>app</code> ディレクトリに <code>google-services.json</code> が追加される、 <strong>どちらも後で消します</strong>。 特に <code>google-services.json</code> は、プロジェクトIDやAPI Keyなどの秘匿情報が含まれるので git にコミットしない方がよいです。</p>\n<p>gradle sync を行うと、なんか取り消し線が付いたり、赤線が付いたり、Warning が出たりするけど、synced successfully が出て成功はしました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/ba6d8bae-48eb-1eea-62bc-6fb28cedf374.png\" alt=\"image.png\"></p>\n<h2 id=\"3.-fcm-%E3%82%92%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%93%E3%82%8D%E3%81%BE%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">3. FCM をとりあえず使うところまで実装する <a class=\"direct-link\" href=\"#3.-fcm-%E3%82%92%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E4%BD%BF%E3%81%86%E3%81%A8%E3%81%93%E3%82%8D%E3%81%BE%E3%81%A7%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">#</a></h2>\n<ul>\n<li><a href=\"https://firebase.google.com/docs/cloud-messaging/android/client?hl=ja\">Android に Firebase Cloud Messaging クライアント アプリを設定する  |  Firebase</a></li>\n</ul>\n<p>に従い、必要なクラスを追加、 <code>AndroidManifest.xml</code> への設定を行います。</p>\n<p><strong>AndroidManifest.xml</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>          <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>net.yourdomain.fcmsample<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.INTERNET<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>roundIcon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@mipmap/ic_launcher_round<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>supportsRtl</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyFirebaseMessagingService<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.google.firebase.MESSAGING_EVENT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyFirebaseInstanceIDService<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.google.firebase.INSTANCE_ID_EVENT<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>service</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>MyFirebaseMessagingService.kt</strong></p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> net<span class=\"token punctuation\">.</span>yourdomain<span class=\"token punctuation\">.</span>fcmsample<br><br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>FirebaseMessagingService<br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>RemoteMessage<br><br><span class=\"token keyword\">class</span> MyFirebaseMessagingService <span class=\"token operator\">:</span> <span class=\"token function\">FirebaseMessagingService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onMessageReceived</span><span class=\"token punctuation\">(</span>remoteMessage<span class=\"token operator\">:</span> RemoteMessage<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// FCMメッセージを受信したときに呼び出される</span><br><br>        <span class=\"token comment\">// 通知メッセージの受信</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>remoteMessage<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>notification <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">val</span> notification <span class=\"token operator\">=</span> remoteMessage<span class=\"token punctuation\">.</span>notification<br>            <span class=\"token keyword\">val</span> title <span class=\"token operator\">=</span> notification<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>title <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span><br>            <span class=\"token keyword\">val</span> body <span class=\"token operator\">=</span> notification<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>body <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span><br><br>            android<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FCM-TEST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"メッセージタイプ: 通知\\nタイトル: <span class=\"token interpolation variable\">$title</span>\\n本文: <span class=\"token interpolation variable\">$body</span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>MyFirebaseInstanceIDService.kt</strong></p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> net<span class=\"token punctuation\">.</span>yourdomain<span class=\"token punctuation\">.</span>fcmsample<br><br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Log<br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>iid<span class=\"token punctuation\">.</span>FirebaseInstanceId<br><br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>iid<span class=\"token punctuation\">.</span>FirebaseInstanceIdService<br><br><span class=\"token keyword\">class</span> MyFirebaseInstanceIDService <span class=\"token operator\">:</span> <span class=\"token function\">FirebaseInstanceIdService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onTokenRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// トークンが更新されたときに呼び出される</span><br>        <span class=\"token keyword\">val</span> refreshedToken <span class=\"token operator\">=</span> FirebaseInstanceId<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span><br>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FCM-TEST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Refreshed token: <span class=\"token interpolation variable\">$refreshedToken</span>\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>MainActivity.kt</strong></p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> net<span class=\"token punctuation\">.</span>yourdomain<span class=\"token punctuation\">.</span>fcmsample<br><br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>v7<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity<br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle<br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>Log<br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>iid<span class=\"token punctuation\">.</span>FirebaseInstanceId<br><br><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><br><br>        <span class=\"token keyword\">val</span> refreshedToken <span class=\"token operator\">=</span> FirebaseInstanceId<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>token <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span><br>        Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"FCM-TEST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Refreshed token: <span class=\"token interpolation variable\">$refreshedToken</span>\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ビルドして実行します。<br>\nここから先は実機が必要でしょうか。<br>\nPlay services 入りのエミュレータでは、<code>E/FirebaseInstanceId: Token retrieval failed: SERVICE_NOT_AVAILABLE</code> というエラーが出てしまいました(Google Maps API は使えるんですけど…)。</p>\n<p>実機で動かすと、初回は <code>MyFirebaseInstanceIDService</code> 、次回以降は <code>MainActivity</code> で FCM のトークンが Logcat に出力されます。</p>\n<pre><code>D/FCM-TEST: token = dRkrWdZqARg:APA91bFXU0-Z7OdL4UfyLmbRHhBq2w4OTMNncbFeIgJuqWt6EJVsRgNKUrdGGG3LZRjT9PLTGokKqb7_w4iRm1gl0Vydy77kHkkdKy0lZvNr1uNDXkaMKaiWX5n1YaxlvFtZDNYtO2Eq\n</code></pre>\n<p>な感じのやたら長い文字列です(ちなみに上の文字はフィクションです)。<br>\nLogcat に出力されたトークンをコピーしておきます。</p>\n<h2 id=\"4.-%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E3%81%A3%E3%81%A6%E3%80%81%E5%8F%97%E4%BF%A1%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">4. メッセージを送って、受信してみる <a class=\"direct-link\" href=\"#4.-%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E3%81%A3%E3%81%A6%E3%80%81%E5%8F%97%E4%BF%A1%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>Android アプリは起動しっぱなしにしておいてください、とりあえず。</p>\n<p><a href=\"https://console.firebase.google.com/\">https://console.firebase.google.com/</a> からプロジェクト「FcmSample」を開き、「Notification」の「使ってみる」をクリックします（なんか別途 「Cloud Messaging」もありますがトラップ？）。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/4cdb45b4-8ef7-b950-bac2-4115040335bd.png\" alt=\"image.png\"></p>\n<p>さらに「最初のメッセージを送信する」をクリックして、</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/8a3ca86b-a07d-e028-6629-022c390445fa.png\" alt=\"image.png\"></p>\n<p>のように設定します。<br>\nターゲットは「単一の端末」にして、トークンの欄にコピーしておいた文字列を貼り付けます。</p>\n<p>で、「メッセージ送信」を押すと、ただちにメッセージが送信され、起動させておいた Androidアプリの <code>MyFirebaseMessagingService</code> が受信して、次のようなログを出力します。</p>\n<pre><code>D/FCM-TEST: メッセージタイプ: 通知\n    タイトル: \n    本文: はろー\n</code></pre>\n<h2 id=\"5.-firebase-%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E6%9C%80%E6%96%B0%E3%81%AB%E3%81%99%E3%82%8B\">5. Firebase のライブラリを最新にする <a class=\"direct-link\" href=\"#5.-firebase-%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E6%9C%80%E6%96%B0%E3%81%AB%E3%81%99%E3%82%8B\">#</a></h2>\n<ol start=\"2\">\n<li>で追加された Firebase のライブラリのバージョンは 11.8.0 でしたが、2018年6月現在の最新は <strong>17.0.0</strong> です。</li>\n</ol>\n<p>ので <code>app/build.gradle</code> に記述されているバージョンを <strong>17.0.0</strong> に変更して「Sync now」します。</p>\n<p>すると見事に <strong>Failed to resolve: com.google.firebase:firebase-core:17.0.0</strong> というエラーになります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/262c7f9c-fcfa-3f3e-446f-febffca87395.png\" alt=\"image.png\"></p>\n<p>小一時間ほど消費していろいろ調べた結果、最終行の <code>apply plugin: 'com.google.gms.google-services'</code> が無ければエラーにならない、ことが判りました（ついでに Warning されてた &quot;Configulation 'compile' is obsolete and ...&quot; も出なくなります）。</p>\n<p><code>apply plugin: 'com.google.gms.google-services'</code> は、</p>\n<ul>\n<li><a href=\"https://developers-jp.googleblog.com/2017/04/take-control-of-your-firebase-init-on.html\">Google Developers Japan: Android での Firebase の初期化を使いこなす</a></li>\n</ul>\n<p>によると、 <code>google-services.json</code> からプロジェクト情報を読み込んで、自動的にアプリに設定してくれるプラグイン、であると理解できます。<br>\nオーケー、ここで全部削除して設定は手動で行いましょう。</p>\n<p><strong>com.google.gms.google-services を削除した <code>app/build.gradle</code>:</strong></p>\n<pre><code>apply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 27\n    defaultConfig {\n        applicationId &quot;net.yourdomain.fcmsample&quot;\n        minSdkVersion 23\n        targetSdkVersion 27\n        versionCode 1\n        versionName &quot;1.0&quot;\n        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;\n    implementation 'com.android.support:appcompat-v7:27.1.1'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.0'\n    implementation 'com.google.firebase:firebase-messaging:17.0.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n}\n</code></pre>\n<p><strong>com.google.gms.google-services を削除したルートの <code>build.gradle</code>:</strong></p>\n<pre><code>// Top-level build file where you can add configuration options common to all sub-projects/modules.\n\nbuildscript {\n    ext.kotlin_version = '1.2.41'\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.1.2'\n        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&quot;\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n</code></pre>\n<p><code>google-services.json</code> から自動で読み込まれていた設定を手動で行うには、<code>FirebaseApp.initializeApp(Context, FirebaseOptions)</code> を起動時に呼び出します。<code>android.app.Application</code> クラスを拡張した <code>MyApplication</code> クラスを作って、 <code>onCreate</code> で行うのが一般的でしょう。<strong><code>MyApplication</code> を <code>AndroidManifest.xml</code> へ追加するのを忘れずに</strong></p>\n<p>ちなみに <code>FirebaseApp.initializeApp</code> の呼び出しがされないと、<code>FirebaseInstanceId.getInstance()</code> を使用したときに、</p>\n<pre><code>Default FirebaseApp is not initialized in this process net.yourdomain.fcmsample. Make sure to call FirebaseApp.initializeApp(Context) first.\n</code></pre>\n<p>という例外がでます。</p>\n<p>FCM を使うだけなら、次のように「ApplicationID」と「APIKey」を設定すればよいようです。</p>\n<p><strong>Firebaseの初期化を行う <code>MyApplication.kt</code>:</strong></p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> net<span class=\"token punctuation\">.</span>yourdomain<span class=\"token punctuation\">.</span>fcmsample<br><br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>Application<br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>FirebaseApp<br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>FirebaseOptions<br><br><span class=\"token keyword\">class</span> MyApplication <span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>        FirebaseApp<span class=\"token punctuation\">.</span><span class=\"token function\">initializeApp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> FirebaseOptions<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationId</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;application_id>\"</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">setApiKey</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;api_key>\"</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>「ApplicationID」と「APIKey」は <code>google-services.json</code> にも記述されていますが、それに頼らず Firebase のサイトからも確認できます。</p>\n<p><a href=\"https://console.firebase.google.com/\">https://console.firebase.google.com/</a> からプロジェクト「FcmSample」を開き、Project Overview → プロジェクトの設定 で表示されます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/51dcfd8e-7ba7-c589-875a-1dccb45b6436.png\" alt=\"image.png\"></p>\n<p>サイトから得た「ApplicationID」と「APIKey」をソースコードにベタ貼りすると、それもよくないので、外出ししましょう。</p>\n<p>いくつか方法がありますが、</p>\n<ul>\n<li><a href=\"https://developer.android.com/studio/build/gradle-tips#share-custom-fields-and-resource-values-with-your-app-code\">Gradle tips and recipes｜Android Developers</a></li>\n<li><a href=\"https://docs.microsoft.com/en-us/appcenter/build/custom/variables/#buildgradle-for-android\">Environment Variables - Visual Studio App Center | Microsoft Docs</a></li>\n<li><a href=\"https://qiita.com/tmiyamon/items/ed660dff7846f5ec95d3\">AndroidStudioに環境変数を渡す - Qiita</a></li>\n</ul>\n<p>に従ってみます。<br>\nこの仕組みは、</p>\n<p>A. システム環境変数に APP_ID と API_KEY を作成する<br>\nB. gradle を使って、 <strong>ビルド時</strong> に、1. の値をソースコード(の <code>BuildConfig</code> クラス)に埋め込む<br>\nC. 実装は <code>BuildConfig.APP_ID</code>, <code>BuildConfig.API_KEY</code> を使う</p>\n<p>です。</p>\n<h3 id=\"a.-%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%AB-app_id-%E3%81%A8-api_key-%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">A. システム環境変数に APP_ID と API_KEY を作成する <a class=\"direct-link\" href=\"#a.-%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0%E7%92%B0%E5%A2%83%E5%A4%89%E6%95%B0%E3%81%AB-app_id-%E3%81%A8-api_key-%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">#</a></h3>\n<p>mac の Terminal だと <code>launchctl setenv</code> を使います。<br>\n環境変数名はプロジェクト名を接頭辞にして <code>FCMSAMPLE_APP_ID</code>、<code>FCMSAMPLE_API_KEY</code> としました。</p>\n<pre><code>launchctl setenv FCMSAMPLE_APP_ID 1:7618378357:android:70bef98060071fe6\nlaunchctl setenv FCMSAMPLE_API_KEY xxxxxxxx\n</code></pre>\n<p>こんな感じで。<br>\n<strong>実行後、Android Studio を再起動します</strong>。しないと環境設定値が反映されませんでした。</p>\n<h3 id=\"b.-gradle-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%80%81buildconfig-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AB%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80\">B. gradle を使って、<code>BuildConfig</code> クラスに埋め込む <a class=\"direct-link\" href=\"#b.-gradle-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%80%81buildconfig-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AB%E5%9F%8B%E3%82%81%E8%BE%BC%E3%82%80\">#</a></h3>\n<p><code>app/build.gradle</code> を次のように編集し、<code>FCMSAMPLE_APP_ID</code>、<code>FCMSAMPLE_API_KEY</code> を埋め込みます。</p>\n<p><strong>環境変数を埋め込んだ <code>app/build.gradle</code>:</strong></p>\n<pre><code>apply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\nandroid {\n    compileSdkVersion 27\n    defaultConfig {\n        applicationId &quot;net.yourdomain.fcmsample&quot;\n        minSdkVersion 23\n        targetSdkVersion 27\n        versionCode 1\n        versionName &quot;1.0&quot;\n        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;\n    }\n    buildTypes {\n        debug {\n            buildConfigField(&quot;String&quot;, &quot;APP_ID&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_APP_ID}\\&quot;&quot;)\n            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_API_KEY}\\&quot;&quot;)\n        }\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            buildConfigField(&quot;String&quot;, &quot;APP_ID&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_APP_ID}\\&quot;&quot;)\n            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_API_KEY}\\&quot;&quot;)\n        }\n    }\n}\n\ndependencies {\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;\n    implementation 'com.android.support:appcompat-v7:27.1.1'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.0'\n    implementation 'com.google.firebase:firebase-messaging:17.0.0'\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n}\n</code></pre>\n<p><code>buildTypes</code> に <code>buildConfigField(&quot;String&quot;, &quot;APP_ID&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_APP_ID}\\&quot;&quot;)</code> などを追記しています。注意点は、<code>String</code> は大文字(Javaのクラス名なので)にすること、第二引数が文字列なら <code>\\&quot;</code> で囲むこと、です。特に後者を忘れると、ダブルコートなしの文字列リテラルが埋め込まれてエラーになります。</p>\n<h3 id=\"c.-%E5%AE%9F%E8%A3%85%E3%81%AF-buildconfig.app_id%2C-buildconfig.api_key-%E3%82%92%E4%BD%BF%E3%81%86\">C. 実装は <code>BuildConfig.APP_ID</code>, <code>BuildConfig.API_KEY</code> を使う <a class=\"direct-link\" href=\"#c.-%E5%AE%9F%E8%A3%85%E3%81%AF-buildconfig.app_id%2C-buildconfig.api_key-%E3%82%92%E4%BD%BF%E3%81%86\">#</a></h3>\n<p>最後に、この buildConfig を使用するように <code>MyApplication.kt</code> を変更します。</p>\n<p><strong>BuildConfigを使用するように変更した MyApplication.kt:</strong></p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> net<span class=\"token punctuation\">.</span>yourdomain<span class=\"token punctuation\">.</span>fcmsample<br><br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>Application<br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>FirebaseApp<br><span class=\"token keyword\">import</span> com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>firebase<span class=\"token punctuation\">.</span>FirebaseOptions<br><br><span class=\"token keyword\">class</span> MyApplication <span class=\"token operator\">:</span> <span class=\"token function\">Application</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>        FirebaseApp<span class=\"token punctuation\">.</span><span class=\"token function\">initializeApp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> FirebaseOptions<span class=\"token punctuation\">.</span><span class=\"token function\">Builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">setApplicationId</span><span class=\"token punctuation\">(</span>BuildConfig<span class=\"token punctuation\">.</span>APP_ID<span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">setApiKey</span><span class=\"token punctuation\">(</span>BuildConfig<span class=\"token punctuation\">.</span>API_KEY<span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>手順が成功していれば、<code>BuildConfig.APP_ID</code> や <code>BuildConfig.API_KEY</code> には、A. で設定した環境変数の値が入っているはずです。失敗していれば <code>null</code> になります。</p>\n<p>この仕組みは大抵の CIサービスでも対応しているので、リリース時には CIサービス の設定で環境変数を設定してあげれば埋め込まれるはずです。</p>\n<h2 id=\"databinding%E3%80%81kapt%2C-coroutine%2C-aac%2C-support-libs-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">DataBinding、kapt, coroutine, AAC, Support Libs を追加する <a class=\"direct-link\" href=\"#databinding%E3%80%81kapt%2C-coroutine%2C-aac%2C-support-libs-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ここまで来たらやってしまえ、ということで</p>\n<ul>\n<li>DataBinding</li>\n<li>kapt</li>\n<li>Kotlin coroutine - 0.22.5</li>\n<li>Android Architecture Components(AAC) - 1.1.0 〜 1.1.1</li>\n<li>Android Support Library - 27.1.1</li>\n</ul>\n<p>も追加してみた。</p>\n<p><strong>諸々追加した <code>app/build.gradle</code>:</strong></p>\n<pre><code>apply plugin: 'com.android.application'\n\napply plugin: 'kotlin-android'\n\napply plugin: 'kotlin-android-extensions'\n\napply plugin: 'kotlin-kapt'\n\nandroid {\n    compileSdkVersion 27\n    defaultConfig {\n        applicationId &quot;net.yourdomain.fcmsample&quot;\n        minSdkVersion 23\n        targetSdkVersion 27\n        versionCode 1\n        versionName &quot;1.0&quot;\n        testInstrumentationRunner &quot;android.support.test.runner.AndroidJUnitRunner&quot;\n    }\n    buildTypes {\n        debug {\n            buildConfigField(&quot;String&quot;, &quot;APP_ID&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_APP_ID}\\&quot;&quot;)\n            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_API_KEY}\\&quot;&quot;)\n        }\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\n            buildConfigField(&quot;String&quot;, &quot;APP_ID&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_APP_ID}\\&quot;&quot;)\n            buildConfigField(&quot;String&quot;, &quot;API_KEY&quot;, &quot;\\&quot;${System.env.FCMSAMPLE_API_KEY}\\&quot;&quot;)\n        }\n    }\n\n    dataBinding {\n        enabled = true\n    }\n}\n\ndependencies {\n    kapt 'com.android.databinding:compiler:3.1.2'\n\n    implementation fileTree(dir: 'libs', include: ['*.jar'])\n    implementation &quot;org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version&quot;\n\n    def coroutines_version = '0.22.5'\n    implementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version&quot;\n    implementation &quot;org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version&quot;\n\n    // Android Support Libraries\n    implementation 'com.android.support:design:27.1.1'\n    implementation 'com.android.support:appcompat-v7:27.1.1'\n    implementation 'com.android.support:cardview-v7:27.1.1'\n    implementation 'com.android.support.constraint:constraint-layout:1.1.0'\n\n    // AAC\n    implementation 'android.arch.lifecycle:extensions:1.1.1'\n    implementation 'android.arch.persistence.room:runtime:1.1.0'\n    annotationProcessor &quot;android.arch.lifecycle:compiler:1.1.1&quot;\n    annotationProcessor &quot;android.arch.persistence.room:compiler:1.1.0&quot;\n\n    // FCM\n    implementation 'com.google.firebase:firebase-messaging:17.0.0'\n\n    testImplementation 'junit:junit:4.12'\n    androidTestImplementation 'com.android.support.test:runner:1.0.2'\n    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'\n}\n</code></pre>\n<p>とりあえずエラーにはならなかったので、依存関係のトラブルは大丈夫みたいです。</p>\n<h2 id=\"%E6%9C%80%E5%BE%8C%E3%81%AB\">最後に <a class=\"direct-link\" href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\">#</a></h2>\n<p>プロジェクト全体は</p>\n<ul>\n<li><a href=\"https://github.com/amay077/FcmSample201806\">https://github.com/amay077/FcmSample201806</a></li>\n</ul>\n<p>に。</p>\n",
      "date_published": "2018-06-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/05/24/d4629f9d20ba36a1347e/",
      "url": "https://blog.amay077.net/blog/2018/05/24/d4629f9d20ba36a1347e/",
      "title": "MV* の「つなぎ」に RxJava を使うのをやめたい",
      "content_html": "<p>ここ数年、特にモバイルアプリ開発で流行ってるUIデザインパターンならなんでもですが、MVVM を例にすると、Usecase における Repository からの結果の受信、ViewModel における Usecase からの通知、あるいは View の変更の通知に RxJava の <code>Observable&lt;T&gt;</code> を使用する例は多いと思います（かくいう自分もそう作ってきました）。</p>\n<!--more-->\n<p>ここ数年、特にモバイルアプリ開発で流行ってるUIデザインパターンならなんでもですが、MVVM を例にすると、Usecase における Repository からの結果の受信、ViewModel における Usecase からの通知、あるいは View の変更の通知に RxJava の <code>Observable&lt;T&gt;</code> を使用する例は多いと思います（かくいう自分もそう作ってきました）。</p>\n<p>DroidKaigi 2018 のアプリもそうですね。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/4d3d0c3a-879d-dd05-b9f1-3bee35ff3e97.png\" alt=\"image.png\"></p>\n<p><a href=\"https://github.com/DroidKaigi/conference-app-2018/blob/master/README.md#architecture\">via DroidKaigi 2018 official Android app</a></p>\n<p>しかし最近、この「つなぎ」の役割に RxJava を使うのはやり過ぎでは？と思うようになっています。その理由を次に書きます。</p>\n<h2 id=\"rxjava-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%82%92%E3%82%84%E3%82%81%E3%81%9F%E3%81%84%E7%90%86%E7%94%B1\">RxJava を使うのをやめたい理由 <a class=\"direct-link\" href=\"#rxjava-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AE%E3%82%92%E3%82%84%E3%82%81%E3%81%9F%E3%81%84%E7%90%86%E7%94%B1\">#</a></h2>\n<h3 id=\"1.-rx-%E3%81%AF%E3%80%81%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E5%A4%9A%E3%81%99%E3%81%8E%E3%82%8B\">1. Rx は、できることが多すぎる <a class=\"direct-link\" href=\"#1.-rx-%E3%81%AF%E3%80%81%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E5%A4%9A%E3%81%99%E3%81%8E%E3%82%8B\">#</a></h3>\n<p>RxJava の学習コストが高いことは知られています。<br>\nつなぎの型が <code>Observable&lt;T&gt;</code> であるだけで、多くの機能が使えてしまい、利用者(=開発者)を混乱させるでしょう。</p>\n<p>Rx の真髄は豊富な Operator を組合せて、ストリーミングデータをエレガントに扱うことなので、たた単に「pub して sub するだけ」ならオレの出番じゃねぇよ、なんですよね。</p>\n<h3 id=\"2.-%E4%BE%9D%E5%AD%98%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AF%E6%9C%80%E5%B0%8F%E3%81%AB%E3%81%99%E3%81%B9%E3%81%8D%E3%81%A0\">2. 依存モジュールは最小にすべきだ <a class=\"direct-link\" href=\"#2.-%E4%BE%9D%E5%AD%98%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AF%E6%9C%80%E5%B0%8F%E3%81%AB%E3%81%99%E3%81%B9%E3%81%8D%E3%81%A0\">#</a></h3>\n<p>「つなぎ」に <code>Observable&lt;T&gt;</code> を使うことで、つながっている両者は RxJava に依存してしまいます。</p>\n<p><a href=\"https://developers-jp.googleblog.com/2018/05/google-io-2018-whats-new-in-android.html\">Google I/O 2018 で発表された Android App Bundle</a> では、機能をモジュール化して、モジュール毎の（オンデマンドな）動的配信が可能になります。[^1]</p>\n<p>[^1]: <a href=\"https://twitter.com/red_fat_daruma/status/999100409787674624\">@red_fat_daruma さんによると</a>、App Bundle はマルチモジュールとは違う性質を持つようです、ちょっとこの理由にはそぐわないのかもしれません。</p>\n<p>モジュール化するにあたり、各モジュールが依存するモジュールはできるだけ最小にすべきで、「つなぎ」の役割のためだけに決して小さくはない RxJava に依存することには疑問があります。</p>\n<h3 id=\"3.-java-%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E4%B8%8D%E5%AE%89%E3%80%81pure-kotlin-%E3%81%B8%E3%81%AE%E6%9C%9F%E5%BE%85\">3. Java に対する不安、Pure Kotlin への期待 <a class=\"direct-link\" href=\"#3.-java-%E3%81%AB%E5%AF%BE%E3%81%99%E3%82%8B%E4%B8%8D%E5%AE%89%E3%80%81pure-kotlin-%E3%81%B8%E3%81%AE%E6%9C%9F%E5%BE%85\">#</a></h3>\n<ul>\n<li><a href=\"https://jp.techcrunch.com/2018/03/28/2018-03-27-oracle-wins-appeal-against-google-in-copyright-case/\">OracleがJavaの著作権侵犯裁判でGoogleに勝利 / TechCrunch Japan</a></li>\n</ul>\n<p>の通り、今後の &quot;疑似Java&quot; の使用には幾ばくかの不安があります。</p>\n<p>一方で、もはや Android アプリ開発の標準言語となった Kotlin は、言語自体は JVM が必須ではありません。例えば <a href=\"https://blog.jetbrains.com/jp/2017/11/29/828\">Kotlinマルチプラットフォームプロジェクト</a> では、複数プラットフォームで使いまわせる「共有モジュール」は Kotlin の標準APIsのみを使って開発します。</p>\n<p>RxJava はその名の通り、Java向けのライブラリであり JVM に依存します。</p>\n<p>不安のあるJava成分を削除し、来るべきマルチプラットフォーム時代のためにモジュールを共通化しようと考えたら、JVM に依存している RxJava は足枷になるはずです（Pure Kotlin で書かれた Rx-Kotlin[^2] には期待したいですがそれは別な話で）。</p>\n<p>[^2]: <a href=\"https://twitter.com/shiraj_i/status/999095832354803712\">@shiraj_i さんのいわれる</a>通り、 <a href=\"https://github.com/ReactiveX/RxKotlin\">RxKotlin</a> というライブラリは既にあって、それは単なるRxJavaのKotlin向け拡張です。</p>\n<h2 id=\"%E3%81%A8%E3%81%AF%E3%81%84%E3%81%88%E4%B8%80%E7%95%AA%E3%83%9E%E3%83%83%E3%83%81%E3%81%97%E3%81%9F%E3%81%AE%E3%81%8C-rxjava-%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%93%E3%81%A7%E3%81%99\">とはいえ一番マッチしたのが RxJava だったんです <a class=\"direct-link\" href=\"#%E3%81%A8%E3%81%AF%E3%81%84%E3%81%88%E4%B8%80%E7%95%AA%E3%83%9E%E3%83%83%E3%83%81%E3%81%97%E3%81%9F%E3%81%AE%E3%81%8C-rxjava-%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%93%E3%81%A7%E3%81%99\">#</a></h2>\n<p>Java や Android の API にいわゆる Promise/Future や、ストリームを扱う共通インターフェースがなかったところに、「Rx(RxJava)なんか便利だぞ」って流行りだして、そのまま便利に使われちゃってる、というのが現状だと思います（自分も Android で Rx を使い始めたきっかけは Promise/Future の代わりでした）。</p>\n<p>それはそれでベストな選択だったわけで何も間違ってはいないです。<br>\nただ今はもっとベストな選択があるんじゃないか？と。</p>\n<h2 id=\"rxjava-%E3%82%92-kotlin-coroutines-%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%9F%E3%82%89%E8%89%AF%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%AA%EF%BC%9F\">RxJava を Kotlin Coroutines に置き換えたら良いんじゃないかな？ <a class=\"direct-link\" href=\"#rxjava-%E3%82%92-kotlin-coroutines-%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%9F%E3%82%89%E8%89%AF%E3%81%84%E3%82%93%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%AA%EF%BC%9F\">#</a></h2>\n<p>前述の通り Kotlin はもはや Android アプリ開発では必須ですし、もしかしたら私の知っている以上にサーバーサイドでも使われているのかも知れません。</p>\n<p>Kotlin には <a href=\"https://kotlinlang.org/docs/reference/coroutines.html\">Coroutines</a> という、非同期に特化したAPIセットがあります。まだ experimental(実験段階)だけど、プロダクトにぶっこんでる人も多いのではないかと。</p>\n<p>そしてこの記事</p>\n<ul>\n<li><a href=\"https://qiita.com/pljp/items/f748125934fd3f880565\">Kotlinコルーチンによるリアクティブストリームのガイド (日本語訳) - Qiita</a></li>\n</ul>\n<p>では、RxJava と Coroutines の対比が解説されているではありませんか。</p>\n<p>代表的なものにしぼって Rx → Coroutine の対応を挙げると、</p>\n<ul>\n<li>1件だけ値を受信する <code>Single&lt;T&gt;</code> → <code>Continuation&lt;T&gt;</code></li>\n<li>完了したかのみを受信する <code>Completable</code> → <code>Continuation&lt;Unit&gt;</code></li>\n<li>複数の値を通知する <code>Subject&lt;T&gt;</code> → <code>SendChannel&lt;T&gt;</code></li>\n<li>複数の値を受信する <code>Observable&lt;T&gt;/Flowable&lt;T&gt;</code> → <code>ReceiveChannel&lt;T&gt;</code></li>\n<li>処理を実行する疑似スレッド <code>Scheduler</code> → <code>CoroutineContext</code></li>\n</ul>\n<p>となります。<br>\nこのように置き換えれば RxJava への依存は切ることができそうです(ただし現在の Coroutines は JVM に依存してるみたいなので共通モジュールでは使えなさそう:cry:)。</p>\n<h2 id=\"rxjava-%E3%81%AF%E5%B1%80%E6%89%80%E7%9A%84%E3%81%AB%E3%80%81%E6%9C%AC%E5%BD%93%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E5%A0%B4%E6%89%80%E3%81%A0%E3%81%91%E3%81%A7%E4%BD%BF%E3%81%8A%E3%81%86\">RxJava は局所的に、本当に必要な場所だけで使おう <a class=\"direct-link\" href=\"#rxjava-%E3%81%AF%E5%B1%80%E6%89%80%E7%9A%84%E3%81%AB%E3%80%81%E6%9C%AC%E5%BD%93%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E5%A0%B4%E6%89%80%E3%81%A0%E3%81%91%E3%81%A7%E4%BD%BF%E3%81%8A%E3%81%86\">#</a></h2>\n<p>RxJava が完全に不要になるかといえばそうでもなく、そのオペレータはやっぱり便利です。</p>\n<p>例えば、</p>\n<ul>\n<li>大量に流れてくるデータを「間引き」する <code>debounce</code></li>\n<li><a href=\"https://qiita.com/amay077/items/fc075d4e777f8c7a2816\">複数のストリームの「どれか」が変わったら通知</a>する <code>combineLatest</code></li>\n</ul>\n<p>とか。</p>\n<p>これら「RxJava でしかできない機能」が必要なら使うべきで、ただし「局所的に」するのがよいと思います。<br>\nDDD よく知らないけどカッコつけて言うなら「<a href=\"https://www.ogis-ri.co.jp/otc/hiroba/technical/DDDEssence/chap3.html#CohesiveMechanisms\">Cohesive Mechanisms（凝集されたメカニズム）パターン</a>」でしょうか、Rx は What じゃなくて How の領域なのでそこだけ分離する、と。</p>\n<p>幸い、</p>\n<ul>\n<li><a href=\"https://github.com/Kotlin/kotlinx.coroutines/tree/master/reactive/kotlinx-coroutines-rx2\">kotlinx.coroutines/reactive/kotlinx-coroutines-rx2 at master · Kotlin/kotlinx.coroutines</a></li>\n</ul>\n<p>を使うと、 RxJava2 と Kotlin Coroutines の相互変更ができるようです。つなぎは <code>Continuation&lt;T&gt;</code> や <code>ReceiveChannel&lt;T&gt;</code> を使い、必要な箇所で <code>Single&lt;T&gt;</code> や <code>Flowable&lt;T&gt;</code> に変換して使えばよさそうです。</p>\n<h2 id=\"%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">実際にやってみた <a class=\"direct-link\" href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<p>冒頭の DroidKaigi 2018 のアプリから RxJava を追い出して、代わりに Kotlin Coroutine を使ってみました。はじめは「DroidKaigiApp から Rx 全部抜く！」の意気込みで取り掛かりましたが、意外と RxJava にガッツリ依存していたのであきらめ :sweat_smile: 、一つの画面だけやってみました。</p>\n<p>イメージ的にはこんな感じです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/b3c7c75d-582b-55a7-696a-88be6a689dce.png\" alt=\"image.png\"></p>\n<p>やってみたのはスタッフ一覧、NavDrawer → Staff で出てくる画面です。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/93a89096-60bd-7746-e169-7fbc613e2a77.png\" alt=\"image.png\"></p>\n<p>この画面は <code>StaffViewModel</code> が <code>StaffDataRepository</code> を使ってスタッフ一覧データを読み、それを画面に表示させています。</p>\n<h3 id=\"staffdatarepository-%E3%81%8B%E3%82%89-rxjava-%E3%82%92%E8%BF%BD%E3%81%84%E5%87%BA%E3%81%99\"><code>StaffDataRepository</code> から RxJava を追い出す <a class=\"direct-link\" href=\"#staffdatarepository-%E3%81%8B%E3%82%89-rxjava-%E3%82%92%E8%BF%BD%E3%81%84%E5%87%BA%E3%81%99\">#</a></h3>\n<p>こちらの修正前のソースが以下です。見やすさ向上のため関係のない一部のコードは省いています。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> StaffDataRepository <span class=\"token annotation builtin\">@Inject</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> schedulerProvider<span class=\"token operator\">:</span> SchedulerProvider<br><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> StaffRepository <span class=\"token punctuation\">{</span><br>    <br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">loadStaff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Completable <span class=\"token operator\">=</span> <span class=\"token function\">getStaff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span>schedulerProvider<span class=\"token punctuation\">.</span><span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">toCompletable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> staff<span class=\"token operator\">:</span> Flowable<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Staff<span class=\"token operator\">></span><span class=\"token operator\">></span><br>        <span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">getStaff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toFlowable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span>schedulerProvider<span class=\"token punctuation\">.</span><span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">getStaff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Single<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Staff<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> Single<span class=\"token punctuation\">.</span><span class=\"token function\">create</span> <span class=\"token punctuation\">{</span> emitter <span class=\"token operator\">-></span><br>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">val</span> asset <span class=\"token operator\">=</span> LocalJsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">loadJsonFromAsset</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"staff.json\"</span><span class=\"token punctuation\">)</span><br>                emitter<span class=\"token punctuation\">.</span><span class=\"token function\">onSuccess</span><span class=\"token punctuation\">(</span>StaffJsonMapper<span class=\"token punctuation\">.</span><span class=\"token function\">mapToStaffList</span><span class=\"token punctuation\">(</span>asset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                Timber<span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><br>                emitter<span class=\"token punctuation\">.</span><span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>staff: Flowable&lt;List&lt;Staff&gt;&gt;</code> が、読み出したスタッフリストを外部へ通知する Observable ですね。<br>\nそして <code>loadStaff()</code> が、読み出しを非同期で実行するメソッドです(これ自体も戻り値が <code>Completable</code> になっていますが、あまり関係ないので省略します)。</p>\n<p>ところで上記のコード、初見でも違和感があって、ちゃんと調べたら問題を2つほど見つけたのですが、どこかわかるでしょうか？ DroidKaigiApp の repo にプルリクを出してマージしてもらったので、気になる方はそちらを見てみてください。</p>\n<ul>\n<li><a href=\"https://github.com/DroidKaigi/conference-app-2018/pull/674\">fix: StaffDataRepository.staff getter returns new instance each calls by amay077 · Pull Request #674 · DroidKaigi/conference-app-2018</a></li>\n</ul>\n<p>さてここから RxJava をやめて代わりに Coroutine を使ってみたのが次です。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> StaffDataRepository <span class=\"token annotation builtin\">@Inject</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> context<span class=\"token operator\">:</span> Context<span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> schedulerProvider<span class=\"token operator\">:</span> SchedulerProvider<br><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> StaffRepository <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> sender <span class=\"token operator\">=</span> ConflatedBroadcastChannel<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Staff<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">val</span> staff<span class=\"token operator\">:</span> ReceiveChannel<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Staff<span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> sender<span class=\"token punctuation\">.</span><span class=\"token function\">openSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">loadStaff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>CommonPool<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">val</span> asset <span class=\"token operator\">=</span> LocalJsonParser<span class=\"token punctuation\">.</span><span class=\"token function\">loadJsonFromAsset</span><span class=\"token punctuation\">(</span><br>                        <span class=\"token keyword\">this</span><span class=\"token label symbol\">@StaffDataRepository</span><span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">,</span> <span class=\"token string\">\"staff.json\"</span><span class=\"token punctuation\">)</span><br>                sender<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span>StaffJsonMapper<span class=\"token punctuation\">.</span><span class=\"token function\">mapToStaffList</span><span class=\"token punctuation\">(</span>asset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">:</span> Exception<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                Timber<span class=\"token punctuation\">.</span><span class=\"token function\">e</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><br>                sender<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>まず <code>staff</code> プロパティが <code>ReceiveChannel&lt;List&lt;Staff&gt;&gt;</code> になりました。<br>\nそしてそれは <code>ConflatedBroadcastChannel</code> である <code>sender</code> を <code>openSubscription()</code> して得ています。<br>\n<code>sender : ConflatedBroadcastChannel</code> は値を送信する側、<code>staff: ReceiveChannel</code> は値を受信するためだけのインターフェースです。これは Rx の <code>Subject&lt;T&gt;</code> と <code>Observable&lt;T&gt;</code> に似ていますね。</p>\n<p><code>loadStaff()</code> は少し簡略化しました。<br>\n<code>launch(CommonPool) { }</code> で非同期処理を開始し、Json を読み出した後、<code>sender.offer()</code> でそれを送信します。<br>\n<strong>注目なのは、その次に <code>yield()</code> を呼び出している点で、これにより非同期処理を開始したコルーチンに処理を戻します。<code>yield()</code> を忘れると通知が受信できないので要注意です。</strong></p>\n<h3 id=\"staffviewmodel-%E3%81%8B%E3%82%89-rxjava-%E3%82%92%E8%BF%BD%E3%81%84%E5%87%BA%E3%81%99\"><code>StaffViewModel</code> から RxJava を追い出す <a class=\"direct-link\" href=\"#staffviewmodel-%E3%81%8B%E3%82%89-rxjava-%E3%82%92%E8%BF%BD%E3%81%84%E5%87%BA%E3%81%99\">#</a></h3>\n<p>次は ViewModel ですね。<code>StaffDataRepository</code> からスタッフリストを受信してそれを <code>LiveData&lt;T&gt;</code> に変換します。LiveData はリストとデータバインドされているので一覧に表示される仕組みです。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> StaffViewModel <span class=\"token annotation builtin\">@Inject</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> repository<span class=\"token operator\">:</span> StaffRepository<span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> schedulerProvider<span class=\"token operator\">:</span> SchedulerProvider<br><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LifecycleObserver <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> compositeDisposable<span class=\"token operator\">:</span> CompositeDisposable <span class=\"token operator\">=</span> <span class=\"token function\">CompositeDisposable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">val</span> staff<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Staff<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span><br>        repository<span class=\"token punctuation\">.</span>staff<br>                <span class=\"token punctuation\">.</span><span class=\"token function\">toResult</span><span class=\"token punctuation\">(</span>schedulerProvider<span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">toLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation builtin\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        repository<span class=\"token punctuation\">.</span><span class=\"token function\">loadStaff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeBy</span><span class=\"token punctuation\">(</span>onError <span class=\"token operator\">=</span> <span class=\"token function\">defaultErrorHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>compositeDisposable<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCleared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCleared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        compositeDisposable<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>staff: LiveData&lt;&gt;</code> の宣言で <code>StaffRepository.staff : Flowable&lt;&gt;</code> を LiveData に変換しています、宣言だけで完結する、いいコードですね。</p>\n<p>あとは画面の表示時である <code>onCreate</code> で <code>StaffRepository.loadStaff()</code> を呼び出します。</p>\n<p>で、こちらも RxJava をやめて代わりに Coroutine を使ってみたのが次です。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> StaffViewModel <span class=\"token annotation builtin\">@Inject</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> repository<span class=\"token operator\">:</span> StaffRepository<span class=\"token punctuation\">,</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> schedulerProvider<span class=\"token operator\">:</span> SchedulerProvider<br><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> LifecycleObserver <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> compositeDisposable<span class=\"token operator\">:</span> CompositeDisposable <span class=\"token operator\">=</span> <span class=\"token function\">CompositeDisposable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">val</span> staff<span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Staff<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span> <span class=\"token keyword\">by</span> lazy <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">val</span> liveData <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>Result<span class=\"token operator\">&lt;</span>List<span class=\"token operator\">&lt;</span>Staff<span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>        <span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>Unconfined<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">.</span><span class=\"token function\">inProgress</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            repository<span class=\"token punctuation\">.</span>staff<span class=\"token punctuation\">.</span><span class=\"token function\">consumeEach</span> <span class=\"token punctuation\">{</span><br>                liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>Result<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        liveData<br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation builtin\">@OnLifecycleEvent</span><span class=\"token punctuation\">(</span>Lifecycle<span class=\"token punctuation\">.</span>Event<span class=\"token punctuation\">.</span>ON_CREATE<span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        repository<span class=\"token punctuation\">.</span><span class=\"token function\">loadStaff</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCleared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCleared</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        compositeDisposable<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>staff: LiveData&lt;&gt;</code> の定義が少し長くなってしまいましたが、これは <code>.toResult()</code>、 <code>.toLiveData()</code> の拡張関数に頼れなかったためです。</p>\n<p><code>launch(Unconfined) { }</code> で、呼び出し元と同じスレッドで処理を開始し、<code>repository.staff.consumeEach { }</code> で値を受信しつづけます。値を受信したら <code>liveData.postValue(it)</code> で値をViewに通知します。</p>\n<p>この処理は <code>ReceiveChannel&lt;T&gt;.toLiveData()</code> な拡張関数が欲しいですね。</p>\n<p>さて、これらの修正で <code>StaffFragment</code> - <code>StaffViewModel</code> - <code>StaffDataRepository</code> のラインでは RxJava を使わず Kotlin の Coroutine で完結させることができました。</p>\n<p>修正前後の完全な差分は、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/conference-app-2018/commit/610d975c5642c95f304b9e3e64957d0241b31afe\">https://github.com/amay077/conference-app-2018/commit/610d975c5642c95f304b9e3e64957d0241b31afe</a></li>\n</ul>\n<p>を見てください。</p>\n<ul>\n<li>Channel を使うために kotlinx-coroutines-core を追加</li>\n<li><code>ConflatedBroadcastChannel</code> でデータを送信するとき、エラーが発生したら <code>.close(throwable)</code> を呼ぶ</li>\n<li><code>StaffDataRepository</code> クラスは <code>StaffRepository</code> インターフェースの実装なので、<code>StaffRepository</code> も修正</li>\n</ul>\n<p>などをしています。</p>\n<h2 id=\"%E7%96%91%E5%95%8F\">疑問 <a class=\"direct-link\" href=\"#%E7%96%91%E5%95%8F\">#</a></h2>\n<p>これでよいんだろか？と思う点、いくつもあります。</p>\n<h3 id=\"sender.offer()-%E3%81%AE%E5%BE%8C%E3%80%81-yield()-%E3%82%92%E5%91%BC%E3%81%B6%E3%81%97%E3%81%8B%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\"><code>sender.offer()</code> の後、 <code>yield()</code> を呼ぶしかないのか <a class=\"direct-link\" href=\"#sender.offer()-%E3%81%AE%E5%BE%8C%E3%80%81-yield()-%E3%82%92%E5%91%BC%E3%81%B6%E3%81%97%E3%81%8B%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\">#</a></h3>\n<p>通知を受信するために <code>yield()</code> が必須！とは言ったものの、絶対忘れそう…。<br>\nあと「スレッドを呼び出し元に戻す」ことで受信が可能になるという仕組みもなんだかハマりそうな予感。</p>\n<h3 id=\"sendchannel.opensubscription()-%E3%81%97%E3%81%9F%E3%82%89%E3%80%81%E8%AA%B0%E3%81%8C%E3%83%BB%E3%81%84%E3%81%A4-close-%E3%81%99%E3%82%8B%E3%81%AE%EF%BC%9F\"><code>SendChannel.openSubscription()</code> したら、誰が・いつ Close するの？ <a class=\"direct-link\" href=\"#sendchannel.opensubscription()-%E3%81%97%E3%81%9F%E3%82%89%E3%80%81%E8%AA%B0%E3%81%8C%E3%83%BB%E3%81%84%E3%81%A4-close-%E3%81%99%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h3>\n<p><code>SendChannel.openSubscription()</code> で得られる <code>ReceiverChannel</code> には <code>close</code> メソッドがあります。<br>\n<code>StaffDataRepository</code> で Open したんだから、<code>StaffDataRepository</code> で Close すべき？ なら <code>StaffDataRepository</code> は Disposable であるべき？</p>\n<h3 id=\"coroutinecontext-%E3%81%AE%E6%89%B1%E3%81%84\">CoroutineContext の扱い <a class=\"direct-link\" href=\"#coroutinecontext-%E3%81%AE%E6%89%B1%E3%81%84\">#</a></h3>\n<p><code>launch(xxx) { }</code> の xxx に与える CoroutineContext、Rx では Scheduler にあたるわけですが、これはアプリ全体で統一感を持たせて管理すべきでしょう。修正前のコードでは <code>SchedulerProvider</code> に <code>ui/computation/io</code> などが用意されていました。同じようにアプリ UI/計算実行用/IO処理 など個別に CoroutineContext を用意して、<code>SchedulerProvider</code> に持たせるとよいのかな、と思います。<br>\nすべて <code>CommonPool</code> に頼るとどこかで衝突・デッドロックが発生しそうです。</p>\n<h2 id=\"%E3%81%8A%E3%82%8F%E3%82%8A\">おわり <a class=\"direct-link\" href=\"#%E3%81%8A%E3%82%8F%E3%82%8A\">#</a></h2>\n<p>とりあえずこんな感じで、次に Android アプリをスクラッチで開発するときには、つなぎに RxJava を使わない方向でやってみようかなーと思っています。</p>\n<p>識者のコメント、お待ちしております。 :bow_tone3:</p>\n",
      "date_published": "2018-05-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/05/21/02e4e7c082014d22d08a/",
      "url": "https://blog.amay077.net/blog/2018/05/21/02e4e7c082014d22d08a/",
      "title": "Xamarin.Android でアプリの言語を動的に切り替える",
      "content_html": "<p>複数言語のリソースを用意しておいて、システムの言語を変えると、アプリで使用される言語リソースも変わるわけですが、システム設定に関係なく、アプリ内で言語選択をしたい。</p>\n<!--more-->\n<p>つまり、</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/39705739/android-n-change-language-programmatically/40849142#40849142\">java - Android N change language programmatically - Stack Overflow</a></li>\n</ul>\n<p>これ。<br>\nKotlin でもできたので、どうせならということで Xamarin.Android でもやってみました。</p>\n<h2 id=\"%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%82%8A\">できあがり <a class=\"direct-link\" href=\"#%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%82%8A\">#</a></h2>\n<p>こんな感じの成果になります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/9a6e1a7b-0acd-85a6-eb2f-7f63dfc0a1b2.gif\" alt=\"Untitled.gif\"></p>\n<h2 id=\"%E6%96%B9%E6%B3%95\">方法 <a class=\"direct-link\" href=\"#%E6%96%B9%E6%B3%95\">#</a></h2>\n<h3 id=\"1.-%E5%A4%9A%E8%A8%80%E8%AA%9E%E7%94%A8%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\">1. 多言語用のリソースファイルを用意する <a class=\"direct-link\" href=\"#1.-%E5%A4%9A%E8%A8%80%E8%AA%9E%E7%94%A8%E3%81%AE%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\">#</a></h3>\n<p>Android の仕様に従って <code>values/</code> や <code>values-ja-rJP/</code> に <code>String.xml</code> を用意します。<br>\nファイルを追加した後で、Build Action が「AndroidResource」になっている事を確認してください。</p>\n<p><strong>values/String.xml (英語ってかデフォルト):</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ResourceTest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>welcome<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>WELCOME<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>to_japanese<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>To Japanese<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>to_english<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>To English<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><strong>values-ja-rJP/String.xml (日本語):</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app_name<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ResourceTest<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>welcome<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>ようこそ<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>to_japanese<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>日本語にする<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>string</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>to_english<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>英語にする<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>string</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"2.-mainactivity-%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">2. MainActivity を実装する <a class=\"direct-link\" href=\"#2.-mainactivity-%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">#</a></h2>\n<p>とりあえずざっと。</p>\n<p><strong>MainActivity.cs:</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Widget</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>OS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">.</span>Res</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Java<span class=\"token punctuation\">.</span>Util</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ResourceTest</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"ResourceTest\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Icon <span class=\"token operator\">=</span> <span class=\"token string\">\"@mipmap/icon\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">AttachBaseContext</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> baseContext<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pref <span class=\"token operator\">=</span> baseContext<span class=\"token punctuation\">.</span><span class=\"token function\">GetSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mypref\"</span><span class=\"token punctuation\">,</span> FileCreationMode<span class=\"token punctuation\">.</span>Private<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> locale <span class=\"token operator\">=</span> pref<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newLocale <span class=\"token operator\">=</span> Locale<span class=\"token punctuation\">.</span><span class=\"token function\">GetAvailableLocales</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><br>                l <span class=\"token operator\">=></span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> locale<span class=\"token punctuation\">,</span> StringComparison<span class=\"token punctuation\">.</span>OrdinalIgnoreCase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                                  <span class=\"token operator\">??</span> Locale<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> configuration <span class=\"token operator\">=</span> baseContext<span class=\"token punctuation\">.</span>Resources<span class=\"token punctuation\">.</span>Configuration<span class=\"token punctuation\">;</span><br>            configuration<span class=\"token punctuation\">.</span>Locale <span class=\"token operator\">=</span> newLocale<span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ContextWrapper</span><span class=\"token punctuation\">(</span><br>                baseContext<span class=\"token punctuation\">.</span><span class=\"token function\">CreateConfigurationContext</span><span class=\"token punctuation\">(</span>configuration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">AttachBaseContext</span><span class=\"token punctuation\">(</span>newContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextView<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>textWelcome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> Resources<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>String<span class=\"token punctuation\">.</span>welcome<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pref <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSharedPreferences</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mypref\"</span><span class=\"token punctuation\">,</span> FileCreationMode<span class=\"token punctuation\">.</span>Private<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>buttonToEnglish<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> editor <span class=\"token operator\">=</span> pref<span class=\"token punctuation\">.</span><span class=\"token function\">Edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                editor<span class=\"token punctuation\">.</span><span class=\"token function\">PutString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"en_US\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                editor<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token function\">Restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>buttonToJapanese<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> editor <span class=\"token operator\">=</span> pref<span class=\"token punctuation\">.</span><span class=\"token function\">Edit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                editor<span class=\"token punctuation\">.</span><span class=\"token function\">PutString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"locale\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ja_JP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                editor<span class=\"token punctuation\">.</span><span class=\"token function\">Commit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token function\">Restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Restart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MainActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>簡単に説明すると 「<code>AttachBaseContext()</code> を override して、そこで任意の Locale に変えた <code>Context</code> にすげ替え」ています。</p>\n<p>「任意の Locale」は、2つのボタンを押したときにそれぞれ <code>ja_JP</code>、<code>en_US</code> を SharedPreference に保存しておき、Activity を再起動します。</p>\n<p>再起動直後に <code>AttachBaseContext()</code> が呼ばれるので、そこで SharedPreference に記憶された Locale を読み出しています。</p>\n<h2 id=\"%E3%81%8A%E3%81%BE%E3%81%91\">おまけ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">#</a></h2>\n<p>1st try では、SharedPref を使うのを面倒くさがって、<code>Application</code> クラスに記憶させとく作戦でしたが、失敗しました。その原因は <code>AttachBaseContext()</code> は <code>OnCreate()</code> よりも先に呼ばれ、さらに <code>AttachBaseContext()</code> の時点では <code>Activity.Application</code> が <code>null</code> になっているためでした。</p>\n",
      "date_published": "2018-05-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/05/07/333a5bbf4e5fa52512fb/",
      "url": "https://blog.amay077.net/blog/2018/05/07/333a5bbf4e5fa52512fb/",
      "title": "新しい Google Maps Platform では APIキーなしの呼び出しはサポートされなくなります",
      "content_html": "<p>Google Maps JavaScript API や Google Places API などを含む地図・位置情報関連API群が、 <strong>Google Maps Platform</strong> として、2018年6月にアップデートされます。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://jp.techcrunch.com/2018/05/03/2018-05-02-google-revamps-its-google-maps-developer-platform/\">Google MapsがそのAPIの構成と課金方式を抜本的に変えて単純化、月200ドルぶんまで無料 | TechCrunch Japan</a></li>\n<li><a href=\"https://mapsplatform.googleblog.com/2018/05/introducing-google-maps-platform.html\">Google Maps Platform: Introducing Google Maps Platform</a></li>\n</ul>\n<p>この変更では、主に課金体系の単純化がクローズアップされていますが、他の影響点として、</p>\n<ul>\n<li><a href=\"https://cloud.google.com/maps-platform/user-guide/\">User Guide ｜ Google Maps Platform ｜ Google Cloud</a></li>\n</ul>\n<p>にしれっと次のような記述があります。</p>\n<blockquote>\n<p>This will go into effect on June 11th, and keyless access will no longer be supported. At that time, keyless calls to the Maps JavaScript API and Street View API will return low-resolution maps watermarked with “for development purposes only.” Keyless calls to any of the following APIs will return an error: Maps Static API (including Static Street View), Directions API, Distance Matrix API, Geocoding API, Geolocation API, Places API, Roads API, and Time Zone API.</p>\n</blockquote>\n<p>これによると、 <strong>APIキー無しの呼び出しは2018/6/11以降サポートされなくなります</strong>。<br>\n具体的には、</p>\n<ul>\n<li>APIキーなしの Maps JavaScript API や Street View API は、 <strong>「低解像度」で「&quot;開発用&quot;と透かしの入った」 地図を返す</strong></li>\n<li>APIキーなしの Direction API, Places API(以下略)は、 <strong>エラーを返す</strong></li>\n</ul>\n<p>とのことです。<br>\nAPIキーなしの利用は 2016年 からサポートされなくなる旨がアナウンスされていましたが、それが実効されるということです。</p>\n<p>古くからメンテが滞っているWebアプリや、「とりあえず使ってみた」系のTipsなどは、影響を受けることになると思われるので、自身のプロダクトやコンテンツを確認してみることをおすすめします。</p>\n",
      "date_published": "2018-05-07T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/03/28/51c36e8ff65c90a7f43e/",
      "url": "https://blog.amay077.net/blog/2018/03/28/51c36e8ff65c90a7f43e/",
      "title": "Xamarin.Android で音声ファイルを順次再生する方法",
      "content_html": "<ul>\n<li><a href=\"https://teratail.com/questions/119209\">C# - 複数の音声ファイルを、別スレッドで重複しないように順次再生する処理(119209)｜teratail</a></li>\n</ul>\n<!--more-->\n<p>の回答で書いたやつなんですが。</p>\n<p>メディアファイル「a.mp3」「b.mp3」「c.mp3」があり、 a の再生が終わったら b を再生…とする方法です(<code>MediaPlayer</code> 使用)。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//using Android.App;</span><br><span class=\"token comment\">//using Android.Widget;</span><br><span class=\"token comment\">//using Android.OS;</span><br><span class=\"token comment\">//using Android.Media;</span><br><span class=\"token comment\">//using System.Threading.Tasks;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <br>        <span class=\"token punctuation\">{</span><br>            Resource<span class=\"token punctuation\">.</span>Raw<span class=\"token punctuation\">.</span>trumpet1<span class=\"token punctuation\">,</span><br>            Resource<span class=\"token punctuation\">.</span>Raw<span class=\"token punctuation\">.</span>trumpet2<br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> id <span class=\"token keyword\">in</span> sounds<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">await</span> <span class=\"token function\">PlayAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 再生が終了したら true を、エラーだったら false を返す</span><br>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">PlayAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> rscId<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> compSource <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mp <span class=\"token operator\">=</span> MediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> rscId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        mp<span class=\"token punctuation\">.</span>Completion <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>        <span class=\"token punctuation\">{</span><br>            compSource<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        mp<span class=\"token punctuation\">.</span>Error <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>        <span class=\"token punctuation\">{</span><br>            compSource<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        mp<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> compSource<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>MediaPlayer</code> は、再生が完了すると <code>onCompletion</code> を通知するので、それを受信して次の曲を再生開始すればよいのですが、普通に書くとコールバック地獄に陥るので、<code>Task&lt;T&gt;</code> 化して、フラットに書けるようにします。</p>\n<p>このような、「非同期処理で完了がイベントやコールバックで通知されるやつ」を <code>Task&lt;T&gt;</code> な非同期メソッドに変換するために <code>TaskCompletionSource&lt;T&gt;</code> を使う方法、は非常によく使うので覚えておくとよいと思います。過去にはダイアログボックスの表示について同様のテクニックで async/await 化する方法を書きました。</p>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/0a3fa3dfac7f29a2807d\">UIAlertController を async/await 対応させて便利に使う - Qiita</a></li>\n</ul>\n<p>この <code>Task&lt;T&gt;</code> を使ったテクニックは 「C# ならでは」 でしたが、Androidアプリ開発の公式言語である Kotlin でも同じようなことができます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> nepula<span class=\"token punctuation\">.</span>net<span class=\"token punctuation\">.</span>soundsample<br><br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>media<span class=\"token punctuation\">.</span>MediaPlayer<br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span>v7<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span>AppCompatActivity<br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span>Bundle<br><span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>synthetic<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">.</span><span class=\"token operator\">*</span><br><span class=\"token keyword\">import</span> kotlinx<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>experimental<span class=\"token punctuation\">.</span>launch<br><span class=\"token keyword\">import</span> kotlin<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>experimental<span class=\"token punctuation\">.</span>suspendCoroutine<br><br><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><br><br>        <span class=\"token keyword\">val</span> sounds <span class=\"token operator\">=</span> <span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span><br>            R<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>trumpet1<span class=\"token punctuation\">,</span><br>            R<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">.</span>trumpet2<br>        <span class=\"token punctuation\">)</span><br><br>        button<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span> <span class=\"token punctuation\">{</span><br>            launch <span class=\"token punctuation\">{</span><br>                sounds<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span> <span class=\"token punctuation\">{</span>id <span class=\"token operator\">-></span><br>                    <span class=\"token function\">playAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">playAsync</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> suspendCoroutine <span class=\"token punctuation\">{</span> cont <span class=\"token operator\">:</span> Continuation<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">></span> <span class=\"token operator\">-></span><br>            <span class=\"token keyword\">val</span> mp <span class=\"token operator\">=</span> MediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><br><br>            mp<span class=\"token punctuation\">.</span><span class=\"token function\">setOnCompletionListener</span> <span class=\"token punctuation\">{</span><br>                cont<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br><br>            mp<span class=\"token punctuation\">.</span><span class=\"token function\">setOnErrorListener</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> MediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">OnErrorListener</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> MediaPlayer<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Boolean <span class=\"token punctuation\">{</span><br>                    cont<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>            mp<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>TaskCompletionSource&lt;T&gt;</code> の代わりに <code>Continuation&lt;T&gt;</code> を使う感じで。<br>\n非同期処理でも、レスポンス(or エラー)が一発で終わるものは RxJava を使う必要はないので、上記のようなパターンもよく使いますね。</p>\n",
      "date_published": "2018-03-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/03/14/d8f35e94e2cb906d89aa/",
      "url": "https://blog.amay077.net/blog/2018/03/14/d8f35e94e2cb906d89aa/",
      "title": "Xamarin.Android でシステムボリュームが変更されたことを検知する",
      "content_html": "<p>teratail に投稿された質問への回答ですが、こちらにも貼っときます。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://teratail.com/questions/117267\">Android - Xamarin Android システムの音量のの値が変更されたことを知りたい．(117267)｜teratail</a></li>\n</ul>\n<p>Stackoverflow の回答にある Java-Android のコードを、 Xamarin.Android 用に少し「書き換え」ただけです。</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/6896746/is-there-a-broadcast-action-for-volume-changes/17398781#17398781\">android - Is there a broadcast action for volume changes? - Stack Overflow</a></li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// MainActivity.cs</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Widget</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>OS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">VolumeSample</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"VolumeSample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Icon <span class=\"token operator\">=</span> <span class=\"token string\">\"@mipmap/icon\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ApplicationContext<span class=\"token punctuation\">.</span>ContentResolver<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterContentObserver</span><span class=\"token punctuation\">(</span><br>                Android<span class=\"token punctuation\">.</span>Provider<span class=\"token punctuation\">.</span>Settings<span class=\"token punctuation\">.</span>System<span class=\"token punctuation\">.</span>ContentUri<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">VolumeObserver</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">internal</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">VolumeObserver</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Android<span class=\"token punctuation\">.</span>Database<span class=\"token punctuation\">.</span>ContentObserver</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">VolumeObserver</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Handler</span> handler<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> context<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnChange</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> selfChange<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnChange</span><span class=\"token punctuation\">(</span>selfChange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> audioManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Android<span class=\"token punctuation\">.</span>Media<span class=\"token punctuation\">.</span>AudioManager<span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">GetSystemService</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>AudioService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> volume <span class=\"token operator\">=</span> audioManager<span class=\"token punctuation\">.</span><span class=\"token function\">GetStreamVolume</span><span class=\"token punctuation\">(</span>Android<span class=\"token punctuation\">.</span>Media<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">.</span>System<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            Toast<span class=\"token punctuation\">.</span><span class=\"token function\">MakeText</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <br>                           <span class=\"token interpolation-string\"><span class=\"token string\">$\"Current System Vol: </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">volume</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">,</span> <br>                           ToastLength<span class=\"token punctuation\">.</span>Short<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>BroadcastReceiver</code> を使うことでも実現できるようですね。</p>\n",
      "date_published": "2018-03-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/03/01/dff88e7ce6868615a9bb/",
      "url": "https://blog.amay077.net/blog/2018/03/01/dff88e7ce6868615a9bb/",
      "title": "Xamarin と React Native と Flutter の違いを正しく理解しよう",
      "content_html": "<p>DroidKaigi2018 でもセッションがあった Flutter がβ版になりました。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://japan.cnet.com/article/35115358/\">グーグル、Android/iOS対応のUIフレームワーク「Flutter」ベータ版を公開 - CNET Japan</a></li>\n</ul>\n<p>これでまた、にわかにクロスプラットフォーム開発ツール(以下 &quot;X-Plat Tool&quot; と略)が盛り上がってる気がします。<br>\nFlutter が出たからと言って、Xamarin や React Native など、先行する様々な X-Plat Tools が死ぬわけでもなく、ただ選択肢が増えて嬉しいやら戸惑うやら、ということです。</p>\n<p>ここでは、Flutter と、先行する React Native、Xamarin を(独断を交えて)比較して、それらの違いを見てみたいと思います。</p>\n<h2 id=\"%E5%85%B1%E9%80%9A%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B(%E3%81%A8%E3%81%95%E3%82%8C%E3%82%8B)%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0\">共通化できる(とされる)プラットフォーム <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B(%E3%81%A8%E3%81%95%E3%82%8C%E3%82%8B)%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0\">#</a></h2>\n<p>X-Plat Tool がどのプラットフォームまでカバーするかを比べてみます。ツールそのものに加え、フレームワークや言語自体も含めた広範な考えです。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">Platform</th>\n<th style=\"text-align:center\">Xamarin/.NET</th>\n<th style=\"text-align:center\">ReactNative/JavaScript</th>\n<th style=\"text-align:center\">Flutter/Dart</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">iOS</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Android</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">デスクトップ(Windows)</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">デスクトップ(Mac)</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Web(フロントエンド)</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Web(バックエンド)</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n<td style=\"text-align:center\">:thumbsup:</td>\n</tr>\n</tbody>\n</table>\n<p>概ね、デスクトップアプリに対応するか、Webアプリに対応するかで選択肢が大きく変わります。</p>\n<h2 id=\"%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AB%E6%8F%90%E4%BE%9B%E3%81%95%E3%82%8C%E3%82%8B-api\">開発者に提供される API <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AB%E6%8F%90%E4%BE%9B%E3%81%95%E3%82%8C%E3%82%8B-api\">#</a></h2>\n<p>X-Plat Tool が開発者にどんな「API セット」を提供するかを比べてみましょう。<br>\nここでは２つに分類してみます。</p>\n<h3 id=\"a.-%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AF%E3%80%81x-plat-tool-%E3%81%AE-%E7%8B%AC%E8%87%AAapi-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">A. 開発者は、X-Plat Tool の 独自API を利用する <a class=\"direct-link\" href=\"#a.-%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AF%E3%80%81x-plat-tool-%E3%81%AE-%E7%8B%AC%E8%87%AAapi-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">#</a></h3>\n<p>この方式の X-Plat Tool は、それ専用のAPIセットを開発者に提供します。<br>\n例えば Flutter では <code>Stack</code> というレイアウトクラスを提供しますが、これは Android の <code>FrameLayout</code> に近いものと考えられます。<br>\nあるいは JSX や XAML などの DSL(Domain Specific Language) を使用する場合もあります。React Native では画面のデザインは JSX(return で HTML っぽいタグを返すアレ) を使用します。</p>\n<ul>\n<li>:no_good: 新たに API を学習する必要がある（＝プラットフォーム固有のAPI知識が活かせない）</li>\n<li>:no_good: プラットフォーム固有の機能を使用するには Kotlin や Swift などネイティブの開発言語をツールを使わなければならない(＝ <strong>APIの相互運用性が低い</strong> )</li>\n<li>:ok_woman: 複数のプラットフォームでコードを共通化できる(ｲﾏｻﾗﾅﾆｦｲｯﾃﾙﾝﾀﾞ)</li>\n<li>:no_good: &quot;共通API&quot; と言いながら iOS でしか(Android でしか)動作しないかも知れない[^5]</li>\n</ul>\n<p>[^5]: Titanium Mobile はこれが多かったという印象が深く心に刻まれています。。。</p>\n<h3 id=\"b.-%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AF%E3%80%81%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E5%9B%BA%E6%9C%89%E3%81%AE-(%E8%96%84%E3%81%84%E3%83%A9%E3%83%83%E3%83%91%E3%83%BC)api-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">B. 開発者は、プラットフォーム固有の (薄いラッパー)API を利用する <a class=\"direct-link\" href=\"#b.-%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AF%E3%80%81%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E5%9B%BA%E6%9C%89%E3%81%AE-(%E8%96%84%E3%81%84%E3%83%A9%E3%83%83%E3%83%91%E3%83%BC)api-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">#</a></h3>\n<p>こちらの方式は、プラットフォーム固有の API を、X-Plat Tool の言語でラップして提供します。Xamarin(Xamarin.Android)では、Android SDK の API が、ほとんどそのまま C# から呼び出せます。例えば Android SDK の <code>android.location.LocationManager</code> は、 Xamarin では <code>Android.Locations.LocationManager</code> として利用できます。</p>\n<ul>\n<li>:no_good: それ自体はコードの共通化にならない(言語の標準APIやフレームワークでしか共通化できない)</li>\n<li>:ok_woman: プラットフォーム固有のAPIが X-Plat Tool の言語からダイレクトに呼び出せる(＝ <strong>APIの相互運用性が高い</strong> )</li>\n<li>:ok_woman: (上記であることから)開発やデバッグが一つの環境でシームレスに行える</li>\n</ul>\n<h2 id=\"%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9\">できあがったアプリケーションのユーザーインターフェース <a class=\"direct-link\" href=\"#%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9\">#</a></h2>\n<p>アプリのUIは、エンドユーザーの反応に最も影響するため、特に注意が必要です。<br>\nこちらも２つに分類しています。</p>\n<h3 id=\"%E3%81%82.-%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E3%81%AEui%E3%83%91%E3%83%BC%E3%83%84%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">あ. ネイティブのUIパーツを利用する <a class=\"direct-link\" href=\"#%E3%81%82.-%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E3%81%AEui%E3%83%91%E3%83%BC%E3%83%84%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B\">#</a></h3>\n<p>この方式では、X-Plat Tool での UI定義は プラットフォーム固有の UIパーツ にマップされます。例えば React Native での <code>&lt;Text&gt;</code> タグは、Android では <code>TextView</code> 、iOS では <code>UITextField</code> が使用されます。</p>\n<ul>\n<li>:no_good: 複数のプラットフォームのUIパーツ群で、共通で存在する機能しか提供できない</li>\n<li>:ok_woman: エンドユーザーにネイティブの「忠実な」UIを提供できる</li>\n<li>:ok_woman: プラットフォーム固有OSSライブラリが比較的利用しやすい(基本的にはブリッジしてあげれば良い ＝ <strong>UIパーツの相互運用性が高い</strong>)</li>\n</ul>\n<h3 id=\"%E3%81%84.-x-plat-tool-%E3%81%8C%E8%87%AA%E5%8A%9B%E3%81%A7ui%E3%83%91%E3%83%BC%E3%83%84%E3%82%92%E6%8F%8F%E7%94%BB%E3%81%99%E3%82%8B\">い. X-Plat Tool が自力でUIパーツを描画する <a class=\"direct-link\" href=\"#%E3%81%84.-x-plat-tool-%E3%81%8C%E8%87%AA%E5%8A%9B%E3%81%A7ui%E3%83%91%E3%83%BC%E3%83%84%E3%82%92%E6%8F%8F%E7%94%BB%E3%81%99%E3%82%8B\">#</a></h3>\n<p>こちらの方式は、ネイティブのUIパーツは使わず、X-Plat Tool が持つレンダリングエンジンを使用して自力でUIパーツを描画し、マウスやキーボードのイベントも自力でハンドリングして操作感を提供します。<br>\n（インターネット老人会の皆さまには「Adobe の Flash アプリだよ」とでも言えば伝わるかと思います。）</p>\n<ul>\n<li>:no_good: ネイティブのUIパーツと見た目や操作感が微妙に異なる(かも知れない)</li>\n<li>:no_good: ネイティブのUIに比べて動作がもっさりする(かも知れない)[^7]</li>\n<li>:no_good: プラットフォーム固有OSSライブラリが比較的利用しにくい(独自レンダリングエンジンの影響を考慮する必要がある ＝ <strong>UIパーツの相互運用性が低い</strong>)[^14]</li>\n<li>:ok_woman: 「スタイル」を切り替えるだけで画面の Look and Feel を変更できる</li>\n<li>:ok_woman: 複数のプラットフォームに「完全に同一のUI」を提供できる[^10]</li>\n</ul>\n<p>[^7]: Flutter や DelphiXE(の FireMonkey) では GPU を利用した高速なレンダリングが可能になっているとのことです。<br>\n[^10]: <a href=\"https://twitter.com/najeira/status/968774727022948352\">https://twitter.com/najeira/status/968774727022948352</a> を見て、同じ理由で昔 Flash AIR を使ったのを思い出しました。<br>\n[^14]: <a href=\"https://twitter.com/najeira/status/969106318098223104\">https://twitter.com/najeira/status/969106318098223104</a> によると、現行の Flutter では実質行えない模様です。</p>\n<h2 id=\"%E6%AF%94%E8%BC%83%E8%A1%A8\">比較表 <a class=\"direct-link\" href=\"#%E6%AF%94%E8%BC%83%E8%A1%A8\">#</a></h2>\n<p>結局、言語もIDEも含めてモバイルネイティブアプリを主対象とした X-Plat Tools の比較表を作ってしまった。。。</p>\n<ul>\n<li>Xamarin</li>\n<li>React Native</li>\n<li>Flutter</li>\n<li>Titanium Mobile</li>\n<li>RubyMotion</li>\n<li>Qt</li>\n<li>Delphi</li>\n<li>Adobe AIR</li>\n<li>NativeScript</li>\n<li>RoboVM</li>\n<li>Kotlin X-Plat(予想)</li>\n</ul>\n<p>※ゲームエンジンやWebViewを使用するタイプの X-Plat Tools は、今回の比較軸とは変わってくると思うので載せていません（が、実際にはもちろんこれらも選択肢に加えるべきです）。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\"></th>\n<th style=\"text-align:center\">Xamarin</th>\n<th style=\"text-align:center\">ReactNative</th>\n<th style=\"text-align:center\">Flutter</th>\n<th style=\"text-align:center\">Titanium Mobile</th>\n<th style=\"text-align:center\">RubyMotion</th>\n<th style=\"text-align:center\">Qt</th>\n<th style=\"text-align:center\">Delphi</th>\n<th style=\"text-align:center\">Adobe Air</th>\n<th style=\"text-align:center\">Native Script</th>\n<th style=\"text-align:center\">RoboVM</th>\n<th style=\"text-align:center\">Kotlin X-Plat(予想)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">(主な)提供者</td>\n<td style=\"text-align:center\">Microsoft</td>\n<td style=\"text-align:center\">Facebook</td>\n<td style=\"text-align:center\">Google</td>\n<td style=\"text-align:center\">Appcelerator[^9]</td>\n<td style=\"text-align:center\">Scratchwork</td>\n<td style=\"text-align:center\">Qt Company</td>\n<td style=\"text-align:center\">Embarcadero Technologies[^8]</td>\n<td style=\"text-align:center\">Adobe</td>\n<td style=\"text-align:center\">Progress Software</td>\n<td style=\"text-align:center\">Xamarinが買収後死亡[^4]</td>\n<td style=\"text-align:center\">JetBrains</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">開発言語</td>\n<td style=\"text-align:center\">C#</td>\n<td style=\"text-align:center\">JavaScript</td>\n<td style=\"text-align:center\">Dart</td>\n<td style=\"text-align:center\">JavaScript</td>\n<td style=\"text-align:center\">Ruby</td>\n<td style=\"text-align:center\">C++</td>\n<td style=\"text-align:center\">Object Pascal</td>\n<td style=\"text-align:center\">Action Script</td>\n<td style=\"text-align:center\">JavaScript</td>\n<td style=\"text-align:center\">Java</td>\n<td style=\"text-align:center\">Kotlin</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">(主な)開発環境</td>\n<td style=\"text-align:center\">Visual Studio</td>\n<td style=\"text-align:center\">As you like</td>\n<td style=\"text-align:center\">IntelliJ/VSCode[^12]</td>\n<td style=\"text-align:center\">Titanium Studio</td>\n<td style=\"text-align:center\">As you like</td>\n<td style=\"text-align:center\">As you like</td>\n<td style=\"text-align:center\">RAD Studio</td>\n<td style=\"text-align:center\">Flash Builder</td>\n<td style=\"text-align:center\">As you like</td>\n<td style=\"text-align:center\">Eclipse</td>\n<td style=\"text-align:center\">CLion[^13]</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">対応Platform(言語含む)</td>\n<td style=\"text-align:center\">iOS, Android, Win, Mac, Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Web(Front), Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Web(Front), Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Web(Front), Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Win, Mac, Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Win, Mac</td>\n<td style=\"text-align:center\">iOS, Android, Win, Mac</td>\n<td style=\"text-align:center\">iOS, Android, Web(Front), Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Win, Mac, Web(Back)</td>\n<td style=\"text-align:center\">iOS, Android, Win, Mac, Web(Front), Web(Back)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">提供される API</td>\n<td style=\"text-align:center\">B.薄いラッパーAPI + A.独自API[^6]</td>\n<td style=\"text-align:center\">A.独自API</td>\n<td style=\"text-align:center\">A.独自API</td>\n<td style=\"text-align:center\">A.独自API</td>\n<td style=\"text-align:center\">B.薄いラッパーAPI</td>\n<td style=\"text-align:center\">A.独自API</td>\n<td style=\"text-align:center\">A.独自API + B.薄いラッパーAPI[^1]</td>\n<td style=\"text-align:center\">A.独自API</td>\n<td style=\"text-align:center\">A.独自API + B.薄いラッパーAPI[^3]</td>\n<td style=\"text-align:center\">B.薄いラッパーAPI</td>\n<td style=\"text-align:center\">B.薄いラッパーAPI</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UIの提供方式</td>\n<td style=\"text-align:center\">あ.ネイティブ</td>\n<td style=\"text-align:center\">あ.ネイティブ</td>\n<td style=\"text-align:center\">い.独自</td>\n<td style=\"text-align:center\">あ.ネイティブ</td>\n<td style=\"text-align:center\">あ.ネイティブ</td>\n<td style=\"text-align:center\">あ.ネイティブ？[^2]</td>\n<td style=\"text-align:center\">い.独自+あ.ネイティブ[^11]</td>\n<td style=\"text-align:center\">い.独自</td>\n<td style=\"text-align:center\">あ.ネイティブ</td>\n<td style=\"text-align:center\">あ.ネイティブ</td>\n<td style=\"text-align:center\">あ.ネイティブ</td>\n</tr>\n</tbody>\n</table>\n<p>[^1]: <a href=\"https://img.en25.com/Web/Embarcadero/%7B4cb125b3-1fd8-45eb-a0be-8beffb7702a6%7D_dcamp33-T4.pdf\">Delphiならここまでできる︕ iOS / Androidネイティブアプリ構築術</a> 参照。<br>\n[^2]: <a href=\"https://blog.qt.io/jp/2011/02/24/alien-widgets-on-mac/\">エイリアンウィジェット</a> と呼ばれるネイティブに依存しないViewも存在する模様。<br>\n[^3]: <a href=\"https://docs.nativescript.org/angular/tutorial/ng-chapter-6\">NativeScript Documentation Chapter 6—Accessing Native APIs</a> 参照。<br>\n[^4]: <a href=\"https://github.com/robovm\">https://github.com/robovm</a> にリポジトリはある模様。<br>\n[^6]: Xamarin.Android, Xamarin.iOS などは 「B」、Xamarin.Forms というフレームワークは 「A」 に該当します。<br>\n[^8]: Embarcadero Technologies は IDERA に買収され、現在は小会社となっています。<br>\n[^9]: Appcelerator は Axway に買収され、現在は小会社となっています。<br>\n[^11]: <a href=\"https://qiita.com/amay077/items/dff88e7ce6868615a9bb#comment-b01b9a057c67dc9dfa0f\">コメント</a> より。指定によりネイティブに描画させることもできるとのことです。<br>\n[^12]: <a href=\"https://flutter.io/get-started/editor/\">Get Started: Configure Editor - Flutter</a> では  IntelliJ と VS Code が紹介されています。<br>\n[^13]: <a href=\"https://kotlinlang.org/docs/reference/native-overview.html\">Kotlin/Native - Kotlin Programming Language</a></p>\n<p>月並みなまとめですが、クロスプラットフォーム開発ツールを選択するには、</p>\n<ul>\n<li>ターゲットにするプラットフォーム</li>\n<li>提供者の規模、サポート、継続性</li>\n<li>開発言語や開発ツール vs チームメンバのスキルセット(あるいは習得容易性)</li>\n</ul>\n<p>を評価し、さらに開発するアプリの性質に応じて、</p>\n<ul>\n<li>X-Plat Tool の標準機能で行えない機能がどのくらいあるか？</li>\n<li>X-Plat Tool の標準機能で行えない機能をどのように補完するか？(共通側で実装するか、ネイティブ側で実装するか、etc)</li>\n</ul>\n<p>を検討することになると思います。<br>\n(もちろん X-Plat Tool を「採用しない」という選択肢も含めて。<br>\nあるいは Cordova のようなWebViewベースのX-Plat開発ツールもあれば、Unityのようなゲームエンジン系のX-Plat開発ツールも場合によっては候補になり得ます。)</p>\n<p>例えば Flutter は美麗なアプリを迅速に開発できる、と謳われていますが、個人的には Webアプリプラットフォームの <a href=\"https://kintone.cybozu.co.jp/jp/\">kintone</a> をイメージさせます（筆者は kintone について、Flutter と同じく『美麗なWebアプリを迅速に開発できるツール』と(主観で)認識しています。対して Xamarin や React Native は Salesforce や SharePoint のように「なんでもできるが作るのはやや大変である」と相対的に思います）。<br>\nまた Flutter について、「標準UIだけでなく凝ったUIも容易に実現できる」との<a href=\"https://qiita.com/amay077/items/dff88e7ce6868615a9bb#comment-797c261e89cf45e10103\">ご意見をいただきました</a>。<br>\nさらに、 React Native も、「Webの技術(CSSやAnimated API)でカスタムUIを用意に実現できる」との<a href=\"https://twitter.com/Nkzn/status/1024488206916415488\">ツイートがあります</a>。<br>\nこの記事は推測も多く含んでいるので、事実は、経験者・識者の方の情報を信じるのが一番です。</p>\n<p>Kotlin Multi platform にはとても期待しています。うまく進化して流行ってくれれば、(現状での)モダンな言語で、プラットフォーム全方位な開発が実現できるんじゃないかなあ、と。</p>\n<p>単純な比較表には現れない得意・不得意点もあるはずなので、日頃からアンテナ高く、できればたくさんつまみ食いしておきたいですね。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://konifar.hatenablog.com/entry/2018/02/11/081031\">DroidKaigi2018で発表したFlutterアプリの話のスライド補足 - Konifar's WIP</a></li>\n<li><a href=\"https://note.mu/najeira/n/n8924408dd07b\">Android / iOS アプリの開発にクロスプラットフォームの Flutter を実戦投入した｜najeira｜note</a></li>\n<li>React Native Androidはなぜ動くのか -  <a href=\"http://blog.nkzn.info/entry/2018/02/09/230647\">DroidKaigi 2018で喋ってきました+α - ナカザンドットネット</a></li>\n<li><a href=\"https://img.en25.com/Web/Embarcadero/%7B4cb125b3-1fd8-45eb-a0be-8beffb7702a6%7D_dcamp33-T4.pdf\">Delphiならここまでできる︕iOS / Androidネイティブアプリ構築術</a></li>\n<li><a href=\"https://speakerdeck.com/amay077/xamarin-dot-android-teshi-merukurosuhuratutohuomumohairuahurikai-fa-number-droidkaigi-number-droidkaigi1\">Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発</a></li>\n<li><a href=\"https://www.slideshare.net/tdtsh/titanium-2016\">Titanium 最近の動向 (2016年)</a></li>\n<li><a href=\"https://qiita.com/amay077/items/45b1ad4b9c5d3a03cf9c\">Xamarin 使いが Kotlin のマルチプラットフォーム対応コードを読んだ感想 - Qiita</a></li>\n</ul>\n",
      "date_published": "2018-03-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/02/14/68ee7c8937507e6c6785/",
      "url": "https://blog.amay077.net/blog/2018/02/14/68ee7c8937507e6c6785/",
      "title": "DroidKaigi 2018 Apps のバグを爆速で直した話",
      "content_html": "<p><a href=\"https://droidkaigi.jp/2018/\">DroidKaigi 2018</a>、2日間おつかれさまでした＆ありがとうございました。<br>\nその感想は末尾に。</p>\n<!--more-->\n<p>ここでは、初日の午前に</p>\n<p>「DroidKaigiアプリからフィードバック送信するとぐるぐるが消えない」</p>\n<p>という不具合を修正した話をします（アプリリーダーの @takahirom さんから「爆速で修正してくれて─」と言っていただいたのでタイトル盛ってます）。</p>\n<h2 id=\"%E4%B8%8D%E5%85%B7%E5%90%88%E3%81%AE%E7%97%87%E7%8A%B6%E3%82%92%E7%A2%BA%E8%AA%8D\">不具合の症状を確認 <a class=\"direct-link\" href=\"#%E4%B8%8D%E5%85%B7%E5%90%88%E3%81%AE%E7%97%87%E7%8A%B6%E3%82%92%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>最初のセッションが終わったあとで TL から、</p>\n<ul>\n<li>「DroidKaigiアプリからフィードバック送信するとぐるぐるが消えない」</li>\n<li>「BACKで戻ってやり直そうとすると、送信済みになっている」</li>\n</ul>\n<p>といったツイートが見られました。<br>\nはじめは「すぐに直されるだろう」と思いつつ、アプリには軽微な修正でコントリビュートしていたこともあり、ソースは既に取得済みだったので、「ちょっと見てみるか」と軽い気持ちで Android Studio を立ち上げました。</p>\n<h2 id=\"%E3%81%A9%E3%81%93%E3%81%8B%E3%82%89%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%8B\">どこから調べるか <a class=\"direct-link\" href=\"#%E3%81%A9%E3%81%93%E3%81%8B%E3%82%89%E8%AA%BF%E3%81%B9%E3%82%8B%E3%81%8B\">#</a></h2>\n<p>アプリが <a href=\"https://github.com/DroidKaigi/conference-app-2018/blob/master/README.md#architecture\">MVVM(AAC の VM) パターンを採用している</a> ことは知っており、不具合は View(DataBinding) か ViewModel か それ以外(Model)  のどこかで発生していることは間違いないわけです。</p>\n<p>上記の症状「ぐるぐるは消えないが、送信はされているようだ」から想像するに、「View(DataBinding) で、 何らかの原因で ぐるぐる(ProgressBar) に <code>visible = false</code> ができていないのかな？」 と思い、まずそのソースを見てみました（ロジックの方から調査していくと、大抵はそちらの方が複雑なので、苦労して不具合を調べまくった後で DataBinding の簡単なミスであることが発覚すると精神が殺られます）。</p>\n<h2 id=\"view(databinding)%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B\">View(DataBinding)を調べる <a class=\"direct-link\" href=\"#view(databinding)%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B\">#</a></h2>\n<p>ぐるぐるの visible を変えているのは <a href=\"https://github.com/DroidKaigi/conference-app-2018/blob/22fefe8e4afcba0d77cc879c6a9816ccda89e86d/app/src/main/java/io/github/droidkaigi/confsched2018/presentation/sessions/feedback/SessionsFeedbackFragment.kt#L93\"><code>SessionsFeedbackFragment.kt</code></a> の次の箇所です。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">//SessionsFeedbackFragment.kt</span><br>sessionsFeedbackViewModel<span class=\"token punctuation\">.</span>isLoading<span class=\"token punctuation\">.</span><span class=\"token function\">observeNonNull</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>    binding<span class=\"token punctuation\">.</span>progress<span class=\"token punctuation\">.</span><span class=\"token function\">setVisible</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>うん、これだけのコードで <code>it</code> が <code>false</code> の時だけ動作しない、なんてありえない。<br>\nここはシロだ、と判断しました。(<code>setVisible()</code> はこのアプリでの拡張関数なので、一応そちらも見つつ)</p>\n<h2 id=\"viewmodel-%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B\">ViewModel を調べる <a class=\"direct-link\" href=\"#viewmodel-%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B\">#</a></h2>\n<p>では次に ViewModel、 <code>sessionsFeedbackViewModel.isLoading</code> が <code>false</code> にならないのではないか？ を疑います。</p>\n<p>それは <a href=\"https://github.com/DroidKaigi/conference-app-2018/blob/22fefe8e4afcba0d77cc879c6a9816ccda89e86d/app/src/main/java/io/github/droidkaigi/confsched2018/presentation/sessions/feedback/SessionsFeedbackViewModel.kt#L70-L71\"><code>SessionsFeedbackViewModel.kt</code></a> の次の箇所です。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">//SessionsFeedbackViewModel.kt</span><br><span class=\"token keyword\">fun</span> <span class=\"token function\">submit</span><span class=\"token punctuation\">(</span>session<span class=\"token operator\">:</span> Session<span class=\"token punctuation\">.</span>SpeechSession<span class=\"token punctuation\">,</span> sessionFeedback<span class=\"token operator\">:</span> SessionFeedback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    repository<span class=\"token punctuation\">.</span><span class=\"token function\">submitSessionFeedback</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> sessionFeedback<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">doOnSubscribe</span> <span class=\"token punctuation\">{</span> <br>                isLoading<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">doOnDispose</span> <span class=\"token punctuation\">{</span> <br>                isLoading<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span> <br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">doOnComplete</span> <span class=\"token punctuation\">{</span><br>                alertMessage<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">Alert</span><span class=\"token punctuation\">(</span>Alert<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Toast<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>submit_success<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">doOnError</span> <span class=\"token punctuation\">{</span> alertMessage<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token function\">Alert</span><span class=\"token punctuation\">(</span>Alert<span class=\"token punctuation\">.</span>Type<span class=\"token punctuation\">.</span>Toast<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>submit_failure<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeBy</span><span class=\"token punctuation\">(</span>onError <span class=\"token operator\">=</span> <span class=\"token function\">defaultErrorHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>compositeDisposable<span class=\"token punctuation\">)</span></code></pre>\n<p><code>repository.submitSessionFeedback()</code> は RxJava の Observable です（正確には Completable）。</p>\n<p><code>doOnSubScribe</code>(購読開始時) に <code>true</code> を、<code>doOnDispose</code>(購読終了？時)に <code>false</code> を設定しているので、なんだか問題なさそうです。</p>\n<p>ということをツイートしてみると、 @MoyuruAizawa さんから、</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">これってdoFinally案件じゃない？ <a href=\"https://t.co/RnGoOWWaKv\">https://t.co/RnGoOWWaKv</a></p>&mdash; Moyuru (@MoyuruAizawa) <a href=\"https://twitter.com/MoyuruAizawa/status/961427139168841728?ref_src=twsrc%5Etfw\">2018年2月8日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>というコメントがもらえました。ほうほう 「<code>doOnDispose</code> じゃなくて <code>doFinally</code> なのか！」と思いつつ、ここで初めてデバッグに取り掛かります。 <code>isLoading.value = false</code> の行にブレークポイントを置いて実行したら止まらないはずだ、と。</p>\n<p><code>doOnSubscribe</code>、 <code>doOnDispose</code> にブレークポイントを張って実行してみると、 <code>doOnSubscribe</code> では止まるけど <code>doOnDispose</code> では止まりません。<br>\n次に、 <code>doOnDispose</code> を <code>doFinally</code> に変えて再度チャレンジしてみると、状況は変わらず <code>doFinally</code> でも止まりません。</p>\n<p>ならば <code>doOnDispose</code> でも <code>doFinally</code> でもない何かならうまくいくのか？と考えるより、 「submitSessionFeedback() の返値が、 <strong>ちゃんと Observable しているか？</strong> 」 を調べるのが先です。</p>\n<h3 id=\"%E3%81%8A%E3%81%BE%E3%81%91%3A-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B\">おまけ: デバッグしやすくする <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91%3A-%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%97%E3%82%84%E3%81%99%E3%81%8F%E3%81%99%E3%82%8B\">#</a></h3>\n<p>フィードバック画面の「送信」ボタンは、一度処理が成功したとみなされると disable になってしまいます。その情報は端末内に保持している(ユーザー認証のないアプリだからそれしかない)ので、アプリのデータを消すとまた押せるようになりますが、それも面倒なので <a href=\"https://github.com/DroidKaigi/conference-app-2018/blob/22fefe8e4afcba0d77cc879c6a9816ccda89e86d/app/src/main/res/layout/fragment_sessions_feedback.xml#L271\">ボタンの enable/disable を切り替えている箇所</a> を一時的に削除しました。これも DataBinding を使っていると知っていれば箇所はだいたいわかります。</p>\n<h3 id=\"%E3%82%82%E3%81%86%E3%81%B2%E3%81%A8%E3%81%A4%E6%B0%97%E3%81%A5%E3%81%84%E3%81%9F%E4%BA%8B%3A-livedata-%E3%81%A8-ui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89\">もうひとつ気づいた事: LiveData と UIスレッド <a class=\"direct-link\" href=\"#%E3%82%82%E3%81%86%E3%81%B2%E3%81%A8%E3%81%A4%E6%B0%97%E3%81%A5%E3%81%84%E3%81%9F%E4%BA%8B%3A-livedata-%E3%81%A8-ui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89\">#</a></h3>\n<p>RxJava 関連の処理の他に、もう一つ気づいたことがありました。それは <code>isLoading</code> は <code>MutableLiveData&lt;Boolean&gt;</code> なのですが、 <code>isLoading.value = false</code> と、 value プロパティを使用していることです。</p>\n<p>どういうことかと言うと、 <strong>「MutableLiveData.setValue() は、UIスレッドから呼び出さないと例外を発生させる」</strong> ということです。</p>\n<p>これは、</p>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/6e1c94305420a41ff7ed#setvalue-%E3%81%AFui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%A7%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%95%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%91%E3%81%AA%E3%81%84postvalue-%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86\">LiveData について勘違いしていたことをいくつか - Qiita</a></li>\n</ul>\n<p>に書いたとおり、 @kkagurazaka さんから教わっていたことで知っていたことです。<br>\n加えて RxJava は非同期処理を行うライブラリであり、処理開始(<code>doOnSubscribe</code>)はUIスレッドでも、終了時(<code>doOnDispose</code>)にUIスレッドである保証はありません。</p>\n<p>ちょっと怪しげなので <code>isLoading.value = false</code> を <code>isLoading.postValue(false)</code> に直しました。</p>\n<h2 id=\"model(repository)-%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B\">Model(Repository) を調べる <a class=\"direct-link\" href=\"#model(repository)-%E3%82%92%E8%AA%BF%E3%81%B9%E3%82%8B\">#</a></h2>\n<p><code>repository.submitSessionFeedback()</code> をデバッグのステップインで掘っていくと、 <code>SessionDataRepository.kt</code> の <code>saveSessionFeedback()</code> までは到達していることが確認できます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">//SessionDataRepository.kt</span><br><span class=\"token annotation builtin\">@CheckResult</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">saveSessionFeedback</span><span class=\"token punctuation\">(</span>sessionFeedback<span class=\"token operator\">:</span> SessionFeedback<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Completable <span class=\"token operator\">=</span><br>        Completable<span class=\"token punctuation\">.</span><span class=\"token function\">create</span> <span class=\"token punctuation\">{</span> sessionDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">saveSessionFeedback</span><span class=\"token punctuation\">(</span>sessionFeedback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span>schedulerProvider<span class=\"token punctuation\">.</span><span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>この処理をしばらく眺めていて、「！！ッ」と問題に気づきました。</p>\n<p>それは、</p>\n<ol>\n<li><code>saveSessionFeedback</code> は Completable を返す</li>\n<li>Completable は Observable である</li>\n<li>Observable は、それの &quot;終了&quot; を示すために <code>onComplete()</code> を呼び出さなければならない（またはエラーを示す <code>onError()</code> を呼び出さなければならない）</li>\n<li>しかしこのコードは <strong><code>onComplete()</code> を呼び出していない</strong></li>\n</ol>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">これだ！！！</p>&mdash; takahirom (@new_runnable) <a href=\"https://twitter.com/new_runnable/status/961432446863486976?ref_src=twsrc%5Etfw\">2018年2月8日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>ということで確信の同意も得られ、実際に修正していきます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">//SessionDataRepository.kt</span><br><span class=\"token annotation builtin\">@CheckResult</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">saveSessionFeedback</span><span class=\"token punctuation\">(</span>sessionFeedback<span class=\"token operator\">:</span> SessionFeedback<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Completable <span class=\"token operator\">=</span><br>        Completable<span class=\"token punctuation\">.</span><span class=\"token function\">create</span> <span class=\"token punctuation\">{</span> emitter <span class=\"token operator\">-></span><br>            sessionDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">saveSessionFeedback</span><span class=\"token punctuation\">(</span>sessionFeedback<span class=\"token punctuation\">)</span><br>            emitter<span class=\"token punctuation\">.</span><span class=\"token function\">onComplete</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span>schedulerProvider<span class=\"token punctuation\">.</span><span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>こんな感じで。「Observable を返すのに onComplete または onError を呼ばない」というのは RxJava プログラミングのあるあるなミスなのですが、Kotlin では引数一つの匿名関数は <code>{ }</code> と書けてしまう(明示的に引数を宣言しなくてもよい)ので、忘れる可能性が高くなっているのかも知れませんね。</p>\n<p>その後、 @yanzm さんから、</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">この場合だと fromAction() の方がよいかもです。どっちでもこの場合挙動は同じですけど。</p>&mdash; Yuki Anzai (@yanzm) <a href=\"https://twitter.com/yanzm/status/962134194943025152?ref_src=twsrc%5Etfw\">2018年2月10日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>という意見もいただきました。なるほど <code>Completable.fromAction()</code>、 <code>Completable.fromCallable()</code> は、自動的に <code>onComplete()</code> を呼び出してくれるのですね。</p>\n<p>上記の修正は、</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">//SessionDataRepository.kt</span><br><span class=\"token annotation builtin\">@CheckResult</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">saveSessionFeedback</span><span class=\"token punctuation\">(</span>sessionFeedback<span class=\"token operator\">:</span> SessionFeedback<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Completable <span class=\"token operator\">=</span><br>        Completable<span class=\"token punctuation\">.</span><span class=\"token function\">fromAction</span> <span class=\"token punctuation\">{</span> sessionDatabase<span class=\"token punctuation\">.</span><span class=\"token function\">saveSessionFeedback</span><span class=\"token punctuation\">(</span>sessionFeedback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span>schedulerProvider<span class=\"token punctuation\">.</span><span class=\"token function\">io</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre>\n<p>と書いた方がよりスッキリします。<code>.create()</code> を使っている箇所は、代替メソッドを検討してみた方がよいでしょう(Lint で検出してもよいのかも)。</p>\n<h2 id=\"%E4%BF%AE%E6%AD%A3%E7%82%B9%E3%81%BE%E3%81%A8%E3%82%81\">修正点まとめ <a class=\"direct-link\" href=\"#%E4%BF%AE%E6%AD%A3%E7%82%B9%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>以上の修正をまとめると、</p>\n<ol>\n<li><code>doOnDispose</code> を <code>doFinally</code> に</li>\n<li><code>isLoading.value = false</code> を <code>isLoading.postValue(false)</code> に</li>\n<li><code>saveSessionFeedback()</code> で <code>onComplete()</code> を呼ぶように</li>\n</ol>\n<p>の3点です。<br>\nすべての修正を含んだ状態で試して、問題が解消されていることが確認できました。<br>\n本来なら、 1. と 2. の修正が本当に必要かを確認してからコミットするべきなのですが、今回は時間がなかった（ランチの時間に突入していた）ので、このまま PR を送りました。</p>\n<ul>\n<li><a href=\"https://github.com/DroidKaigi/conference-app-2018/pull/653\">Fix dismiss loading progress when feedback submitted by amay077 · Pull Request #653 · DroidKaigi/conference-app-2018</a></li>\n</ul>\n<p>さっそくマージしてもらいアプリも更新され、</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">アプリ更新して、フィードバックを送信してみました。<br>グルグル表示後、送信しましたというトーストが表示されました。挙動に問題は有りません。修正ありがとうございます。<br>Android7.1.1 ZenFone4 Max</p>&mdash; ニースト@中ウサギ工房（仮） (@MiddleSizeRabbi) <a href=\"https://twitter.com/MiddleSizeRabbi/status/961595405220769795?ref_src=twsrc%5Etfw\">2018年2月8日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>問題なさそうだったので 「Yesッッ!!!」 と喜びました。<br>\nソースを見始めたのが AM11:20頃、PR を送ったのが 12:00、約40分間の出来事でした。</p>\n<p>スタッフや登壇者のみなさんは本業で忙しかっただろうし、会場はセッションを聴くのに集中していた人が多かったと思うので、そういう状況でなければどなたかがもっと爆速で修正されていたと思います。</p>\n<p>とはいえ、今回予定外の3つ目のPRが役に立てて嬉しかったです。ちょっとツイートするとすぐに反応がもらえ、一人で考えるよりも効率的だったと思います。</p>\n<h2 id=\"droidkaigi-2018-%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6\">DroidKaigi 2018 に参加して <a class=\"direct-link\" href=\"#droidkaigi-2018-%E3%81%AB%E5%8F%82%E5%8A%A0%E3%81%97%E3%81%A6\">#</a></h2>\n<p>なんだかんだで皆勤賞してました。<br>\n今年も、</p>\n<ul>\n<li>今までできないと思っていたことができると分かったこと</li>\n<li>明日から使ってみたいと思ったこと</li>\n<li>明日からはムリだけど、半年後使いそうなこと</li>\n<li>今のところ予定はないけど、知っておいて損はないと思えること</li>\n<li>自分が知っている事でも、他の参加者の人は知らない(またはウケる)んだなーということ</li>\n<li>ID でしか交流のなかった方々にごあいさつできたこと(地方エンジニアにとっては貴重)</li>\n</ul>\n<p>などなど、価値のある体験ができました、本当にありがとうございました。<br>\n今年は CFP 採択されず割引価格で気楽にオーディエンスできましたが、次回は登壇返り咲きを目指そうと思います:muscle_tone2:</p>\n",
      "date_published": "2018-02-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/01/31/04925765982893eeab7f/",
      "url": "https://blog.amay077.net/blog/2018/01/31/04925765982893eeab7f/",
      "title": "RxProperty で最初にボタンを押すまでバリデーションしない方法",
      "content_html": "<p>こちらの件です。</p>\n<!--more-->\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">雑にかいた<br>すでに議論され尽くされてる感はあるので他の人の考えも聞いてみたいです<br><br>フォームバリデーションと送信ボタンの状態の最適解 - Konifar&#39;s ZATSU <a href=\"https://t.co/YvPhkM05gg\">https://t.co/YvPhkM05gg</a></p>&mdash; こにふぁー (@konifar) <a href=\"https://twitter.com/konifar/status/957806094713217024?ref_src=twsrc%5Etfw\">2018年1月29日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"%E7%A7%81%E8%A6%8B\">私見 <a class=\"direct-link\" href=\"#%E7%A7%81%E8%A6%8B\">#</a></h2>\n<p>自分がよく関わっている業務アプリの世界では、UIパーツの非活性(disabled)はあまり好まれません（度々 Reject されます）。その一番の理由は、「なぜボタンが押せないのかが分からない」ことです（利用ユーザーがIT機器に疎い人が多いのでそれだけでパニクることも）。ならばその理由を画面上のどこかに表示してやろうと策を練るよりも、単純に「エラーがあったら DialogBox でその理由と対処方法を表示させたろう」という方法が、実装コストが最も低く、業務アプリ利用者にもわかりやすい、というのが経験・感覚的にあります。</p>\n<p>しかしそれではあまりにもモダンでないとも感じるので、個人的には、次点として採用したいのは↓の手法です。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">最初の１回は間違いがあってもとりあえず送信ボタンを押させてあげて、その後はリアルタイムチェックを有効にする派 / “フォームバリデーションと送信ボタンの状態の最適解 - Konifar&#39;s ZATSU” <a href=\"https://t.co/yWaszGdAkH\">https://t.co/yWaszGdAkH</a></p>&mdash; なかざん＠ジャバスクリプトニュービー (@Nkzn) <a href=\"https://twitter.com/Nkzn/status/958138755298111488?ref_src=twsrc%5Etfw\">2018年1月30日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">実際にやってみた <a class=\"direct-link\" href=\"#%E5%AE%9F%E9%9A%9B%E3%81%AB%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<p>実際にそれを実装してみました、 <a href=\"https://github.com/k-kagurazaka/rx-property-android\">RxProperty</a> を使って。<br>\n最近ちょうどフォームバリデーションのサンプルを実装した例↓</p>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/fc075d4e777f8c7a2816\">RxProperty でイケてる入力フォームをもっとスッキリ実装する - Qiita</a></li>\n</ul>\n<p>があるので、これをカスタマイズしてみます。</p>\n<h2 id=\"%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%82%8A\">できあがり <a class=\"direct-link\" href=\"#%E3%81%A7%E3%81%8D%E3%81%82%E3%81%8C%E3%82%8A\">#</a></h2>\n<p>こんな感じのものを作ります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/a770dd8c-9fc8-f1f4-b220-156e1ff4d1f2.gif\" alt=\"Untitled.gif\"></p>\n<h2 id=\"%E4%BF%AE%E6%AD%A3%E7%AE%87%E6%89%80\">修正箇所 <a class=\"direct-link\" href=\"#%E4%BF%AE%E6%AD%A3%E7%AE%87%E6%89%80\">#</a></h2>\n<p>RxProperty は、ViewModel が公開するプロパティとして利用するものですが、それに Validator を持たせることができます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> nickname <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">setValidator</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ニックネームは2文字以上にしてください\"</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>のようにプロパティの定義と共に設定すれば、画面表示直後からValidatorは作動しますが、ボタンが押されるまではバリデーションしないのであれば、設定のタイミングを遅らせるだけです。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> nickname <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">val</span> nickNameValidator <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>String<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ニックネームは2文字以上にしてください\"</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">var</span> isFirstExecute <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><br><br><span class=\"token comment\">/** 登録ボタンを押したとき */</span><br><span class=\"token keyword\">val</span> register <span class=\"token operator\">=</span> canRegistration<span class=\"token punctuation\">.</span>toRxCommand<span class=\"token operator\">&lt;</span>NoParameter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 最初にボタンが押されたときに、Validator を設定する(フラグを使っているのがなんかダサい)</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isFirstExecute<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        isFirstExecute <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><br><br>        nickname<span class=\"token punctuation\">.</span><span class=\"token function\">setValidator</span><span class=\"token punctuation\">(</span>nickNameValidator<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">canExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token label symbol\">@subscribe</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    _toast<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RegistrationCompleteActivity へ移動するよ\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>完全な修正差分はこちら → <a href=\"https://github.com/amay077/RxPropertyFormSample/commit/b743a4b187f7c05a1847637c2bfc4371a47a4ab3?diff=split\">https://github.com/amay077/RxPropertyFormSample/commit/b743a4b187f7c05a1847637c2bfc4371a47a4ab3?diff=split</a></li>\n<li>修正したサンプルのコードはこちら → <a href=\"https://github.com/amay077/RxPropertyFormSample/tree/20180131_skip_valid_on_first_time\">https://github.com/amay077/RxPropertyFormSample/tree/20180131_skip_valid_on_first_time</a></li>\n</ul>\n<p>ちなみに</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> nickname <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">setValidator</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"ニックネームは2文字以上にしてください\"</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span></code></pre>\n<p>とする(<code>setValidator</code> の第2引数を <code>false</code> にする)と、画面表示直後の初回のバリデーションを行わない、すなわち、「最初から登録ボタンは押せるが、リアルタイムにバリデーションも行う」ようにもできます。</p>\n<p>RxProperty に限らないんですけど、プロパティ／バリデータ／活性非活性判定・変更処理が適切に分離されていれば、それらの組み合わせを変えるだけなのでいかようにでもできますね。急な仕様変更にも割と容易に対応できるということで。</p>\n",
      "date_published": "2018-01-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/01/30/ab48993f50c8239b62a6/",
      "url": "https://blog.amay077.net/blog/2018/01/30/ab48993f50c8239b62a6/",
      "title": "自ディレクトリ以下から bin, obj ディレクトリを全て削除するスクリプト",
      "content_html": "<p>おそらく3億人の .NET プログラマが書いたであろうスクリプト、 PowerShell で書いてみました。</p>\n<!--more-->\n<pre class=\"language-powershell\"><code class=\"language-powershell\"><span class=\"token comment\"># clean.ps1</span><br><span class=\"token variable\">$dirs</span> = <span class=\"token function\">Get-ChildItem</span> <span class=\"token operator\">-</span>Recurse <span class=\"token operator\">*</span> <span class=\"token punctuation\">|</span> ? <span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>PSIsContainer<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">|</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">{</span> <span class=\"token variable\">$_</span><span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">}</span> `<br> <span class=\"token punctuation\">|</span> grep <span class=\"token operator\">-</span>e bin$ <span class=\"token operator\">-</span>e obj$ <br><br><span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$dir</span> in <span class=\"token variable\">$dirs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\"># echo $dir</span><br>    <span class=\"token function\">rm</span> <span class=\"token operator\">-</span>rf <span class=\"token variable\">$dir</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"mac-%E3%81%A7%E3%82%82%E5%8B%95%E3%81%8F%E3%81%9E!\">Mac でも動くぞ! <a class=\"direct-link\" href=\"#mac-%E3%81%A7%E3%82%82%E5%8B%95%E3%81%8F%E3%81%9E!\">#</a></h2>\n<p><a href=\"https://docs.microsoft.com/en-us/powershell/scripting/setup/installing-powershell-core-on-macos-and-linux?view=powershell-5.1\">PowerShell Core</a> を入れると、 macOS でも動きます。 Visual Studio for Mac と併せてどうぞ(Linux でも動くはｚ)。</p>\n<pre><code>#!/bin/sh\n\ncd `dirname $0`\npwsh clean.ps1 \n</code></pre>\n<p>※実は、 Xamarin.Android のビルド出力には <code>obj/Release/android/bin</code> みたいなのが含まれることがあるので、完全に <code>obj</code>, <code>bin</code> を抹消するには <code>clean.ps1</code> を2回実行します。</p>\n",
      "date_published": "2018-01-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2018/01/27/542f1bf5ba5bc0b85b84/",
      "url": "https://blog.amay077.net/blog/2018/01/27/542f1bf5ba5bc0b85b84/",
      "title": "MonoDevelop をビルドするまで on macOS",
      "content_html": "<p>Visual Studio for Mac を更新すると、IME が動作しない（例:日本語が入力できない、IMEのON/OFFができない、など）ことが、まあまあ良くある。</p>\n<!--more-->\n<p>↓<br>\nまあ元が OSS の MonoDevelop だし、日本語入力環境を使っているコントリビューターなんて稀なのでは？<br>\n↓<br>\nじゃあ、その辺直せるようになったらコントリビューターワンチャンあるで！<br>\n↓<br>\nまずは MonoDevelop を自力でビルドしてみよう！</p>\n<p>というわけで。</p>\n<h2 id=\"steps\">Steps <a class=\"direct-link\" href=\"#steps\">#</a></h2>\n<p>（かなり高い確率の）たぶんですが、先に Xcode Command Line Tools がインストールできていれば、 6. 〜 12. くらいまで全部 3. のスクリプトがやってくれると思いますお。</p>\n<ol>\n<li><a href=\"http://www.monodevelop.com/developers/articles/development-getting-started/\">Development - Getting Started | MonoDevelop</a> を見る</li>\n<li>&quot;If you’re on OS X you can also try @dvdsgl’s one step install: <a href=\"https://github.com/dvdsgl/monodevelop-build\">https://github.com/dvdsgl/monodevelop-build</a>&quot; をハケーン</li>\n<li>適当なディレクトリを作って Terminal で <code>ruby -e &quot;$(curl -fsSL bit.ly/1zCQCam)&quot;</code> を実行</li>\n<li>途中で macOS のパスワードを聞かれるので入力する</li>\n<li>また待つ</li>\n<li>「<strong>Error</strong>: You must have `automake' installed to compile MonoDevelop.」 が出る</li>\n<li><code>brew install automake</code> を実行する</li>\n<li>「Error: Xcode alone is not sufficient on Sierra. Install the Command Line Tools: xcode-select --install」 が出る</li>\n<li><code>xcode-select --install</code> を実行する</li>\n<li>なんかダイアログボックスが出てくるのでそれに従い Xcode Command Line Tools をインストールする</li>\n<li>もう一度 <code>brew install automake</code> を実行する → 成功</li>\n<li><code>monodevelop</code> ディレクトリに移動して <code>./configure --profile=mac</code> を実行する(<a href=\"http://www.monodevelop.com/developers/building-monodevelop/#macosx\">参照</a>) → 成功</li>\n<li><code>make</code> を実行する → 待つ → 待つ → 待つ → 成功</li>\n<li><code>make run</code> を実行する → MonoDevelop が起動する(↓ババーン)</li>\n</ol>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/a1a0165a-e8c0-c5e9-2f31-c09ab9ca14e6.png\" alt=\"image.png\"></p>\n<p>おーこれが素の MonoDevelop かー（初めて見たｗ）。<br>\nソリューション作成はできたけど、実行したら IDE もろとも落ちたけど、これからこれから。</p>\n<h2 id=\"%E3%81%8A%E3%81%BE%E3%81%91\">おまけ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">#</a></h2>\n<p>Visual Studio for Mac で <code>monodevelop/main/Main.sln</code> を開いて config を <code>DebugMac</code> にして実行したら、 MonoDevelop がビルドされて起動した。</p>\n",
      "date_published": "2018-01-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/19/314732b049aaa810750a/",
      "url": "https://blog.amay077.net/blog/2017/12/19/314732b049aaa810750a/",
      "title": "Mapbox GL JS の描画の仕組み",
      "content_html": "<p>ベクトルタイルと言えば MapBox、MapBox といえば ベクトルタイル。</p>\n<!--more-->\n<p>というわけで、以前こんな↓記事を書きました。</p>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/5b2cbde9e06184166f35\">Mapbox GL JS をデバッグするまで - Qiita</a></li>\n</ul>\n<p>Google Maps や Apple のマップアプリでは、もはや自然にベクトルタイルが採用されているわｋですが、あれらは当然ながらプロプライエタリ・ソフトウェアであり、ソースは公開されていません。</p>\n<p>MapBox は多くのソースコードを公開してくれていて、プログラマにはありがたいかぎりです。</p>\n<ul>\n<li><a href=\"https://github.com/mapbox\">Mapbox - github</a></li>\n</ul>\n<p>最近では、Android 向け Google Maps で、Web版のような「<a href=\"http://appllio.com/google-maps-embedded-two-fingers-touch-scroll\">２本指スクロール</a>」を実現しようとしたのですが、Google Maps SDK にはそのような機能はないので、 <a href=\"https://github.com/mapbox/mapbox-gl-native/tree/master/platform/android/MapboxGLAndroidSDK/src/main/java/com/almeros/android/multitouch/gesturedetectors\">MapBox のソースコード</a>を一部改造して実現してみたり。</p>\n<h2 id=\"mapbox-gl-js-%E3%81%AE%E6%8F%8F%E7%94%BB%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">MapBox GL JS の描画処理を追ってみる <a class=\"direct-link\" href=\"#mapbox-gl-js-%E3%81%AE%E6%8F%8F%E7%94%BB%E5%87%A6%E7%90%86%E3%82%92%E8%BF%BD%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>ということで、前回デバッグ環境を作ったので、今回は地図の描画処理を追ってみたいと思います。<br>\n描画のアルゴリズム自体は、必ずしもベクトルタイル特有のものではありませんが、その高速な描画処理は、他へも活かせるノウハウであると思っています。</p>\n<p>さて、いろいろすっ飛ばして本題に入りますが、描画に係る主要なソースコードは <a href=\"https://github.com/mapbox/mapbox-gl-js/tree/master/src\">./src</a> ディレクトリに点在しています。主な登場人物は、次のとおりです。</p>\n<ul>\n<li>Mapbox</li>\n<li>Tile</li>\n<li>Bucket</li>\n<li>Layer</li>\n<li>Painter</li>\n<li>WebGL</li>\n</ul>\n<p><code>Mapbox</code> は、画面に張り付いている「ビュー」です。<br>\n<code>Tile</code> はみなさんご存知の「タイル」です。データはほとんど保持していなくて空間インデックスで使われる概念的なものです。<br>\n<code>Bucket</code> が、<code>Tile</code> のデータを表す存在です。<a href=\"https://qiita.com/hfu/items/69fbe24be92654f634da\">前日の記事</a>で @hfu さんが言われている <code>.mvt</code> や <code>.pbf</code> のようなベクトルタイルファイルそのものと言ってもよいです。<br>\n<code>Layer</code> はGISでおなじみの地図のレイヤですが、GISでのレイヤほど縛りが強くないというか、地物に付いているタグのような印象を受けました（外しているかもです）。<br>\n<code>Painter</code> は「描画者」で、実際に「WebGL」を使って<code>Bucket</code>のデータを描画するのが仕事です。<br>\nそして WebGL が描画に使用されています。</p>\n<p>これらの仕事をシーケンス図風に乱暴に描くと次のようになります。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/2b056303-f802-4eee-6316-9753d5ae41dd.png\" alt=\"image.png\"></p>\n<ol>\n<li>ユーザーの操作などで地図の表示範囲が変更されると、その範囲に触れる <code>Tile</code> 群を計算して得ます。</li>\n<li>得られた <code>Tile</code> 群のデータをロードします。これは即ち <code>.mvt</code> ファイルをダウンロードして読み込み、内容を <code>Bucket</code> に変換することです。ここで WebGL ならではの重要なことは、図形の座標データの実体は <code>Bucket</code> が持つのではなく、WebGL の（<strong>GPU上の</strong>）「頂点バッファ」と呼ばれる領域にコピーすることです。そして <code>Bucket</code> は、各図形の座標群として、この「頂点バッファへのインデックス」を持ちます。</li>\n<li><code>Bucket</code> のロードは非同期で行われるため、ロードが完了したときに Mapbox 側に通知を出し、再描画を促します。</li>\n<li><code>Mapbox</code> の描画命令が呼ばれると、ロード済みの <code>Tile</code> 群が対象になります。</li>\n<li><code>Mapbox</code> は <code>Painter</code> に <code>Tile</code> の描画を依頼します。</li>\n<li><code>Painter</code> は、<code>Layer</code> から描画に必要なスタイル情報を得て、それを使用し <code>Tile</code> 内のすべての図形を WebGL を使って描画します。座標データはすでに GPU の頂点バッファにあります。ただしこれは画面座標ではなく、タイル内の相対座標?なので、画面座標へ変換して描画します。この変換処理も WebGL で、つまり GPU で行わせています。</li>\n</ol>\n<p>このように、GISのライブラリを作ったことがある人ならば、普通のシーケンスであると思われるでしょう。<br>\nただ 「WebGL を使う＝GPUの性能をフル活用する」ための工夫が見られます。再度抜き出すと次のようになります。</p>\n<ul>\n<li>データの実体を GPU 上に持ち、ムダなコピーを持たない</li>\n<li>座標変換などの計算もなるべく GPU にやらせる</li>\n</ul>\n<p>これらのノウハウは、ガチな描画系のプログラムを描く人には常識でも、私のような「にわか」には得られてよかったことです。</p>\n<p>例えば GIS アプリケーションで必要な「投影法」や「座標系」などの変換を、GPU に行わせることはできないだろうかという興味が湧いてきます。<br>\nそれがデータ変換プログラムなら、変換にかかる時間が短くなることが期待できるし、QGIS のようなデスクトップアプリならば、オンザフライでの投影法変換を行ってもサクサクと動くかも知れません。</p>\n<p>今後もベクトルタイルならびに MapBox GL JS/Native の理解を進めて、C# に移植してみたいというのが目下の大きな関心ごとのひとつです。</p>\n<h2 id=\"%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E5%9B%B3%E5%BD%A2%E6%95%B0%E3%81%8C%E5%B0%91%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84%E3%81%8B%E8%AA%AC\">そもそも図形数が少ないのではないか説 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82%E5%9B%B3%E5%BD%A2%E6%95%B0%E3%81%8C%E5%B0%91%E3%81%AA%E3%81%84%E3%81%AE%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84%E3%81%8B%E8%AA%AC\">#</a></h2>\n<p>おまけです。</p>\n<p>ソースコードを対象改造して、描画した図形の数をカウントしてみたところ、下図の見た目で <strong>約4500個</strong> でした。ホントかなあ(もっと多そう)という感じがしますが、美麗なスタイルのせいで精度が高い＝図形数が多いと錯覚させるのかも知れません。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/aeb62af8-6a9c-1bc6-c9c7-8a60d27a6f7b.png\" alt=\"image004.png\"></p>\n",
      "date_published": "2017-12-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/10/f8ddea2324cc7d149969/",
      "url": "https://blog.amay077.net/blog/2017/12/10/f8ddea2324cc7d149969/",
      "title": "PowerShell の既定の配色がキツ過ぎたので変えてみた",
      "content_html": "<p>SourceTree for Windows があまりにももっさりしているので、「git はもうコマンドでやろう！」と思い、Git for Windows を入れたら一緒に入ってた Git Shell というものを使うことにしました。</p>\n<!--more-->\n<p>どうもこれは PowerShell らしく、まあ便利に使うことができていましたが、ところどころ配色がおかしくて、場合によっては全然読めない！</p>\n<p>例えば <code>git status</code> の内容が、こんな風に、全然読めません :sweat:</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/cf3a0bcf-9dba-317e-94ca-8d7af678bbe3.png\" alt=\"image.png\"></p>\n<p>Twitter でポツリと呟いておりましたら、詳しい方から教えていただけました（毎度のことながら皆さまありがとうございます）。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">色設定の実態はレジストリに保存されていて、WindowsのGUIからアクセスする場合はpowershellウィンドウのタイトルバーを右クリックしてプロパティを表示して……ってやるんですけど、とにかく面倒です。</p>&mdash; Kentaro Inomata (@matarillo) <a href=\"https://twitter.com/matarillo/status/939359788911050752?ref_src=twsrc%5Etfw\">2017年12月9日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/search?q=%24host.UI&amp;src=ctag&amp;ref_src=twsrc%5Etfw\">$host.UI</a>.RawUI にフォアグラウンド、バックグラウンドの色が、$host.privatedata <br>にエラー等の特別な場合の色の設定があります。例えば、$host.UI.RawUI.BackgroundColor=&quot;Black&quot; とすると背景が黒になります。</p>&mdash; Takekazu Omi (@takekazuomi) <a href=\"https://twitter.com/takekazuomi/status/939358803664912384?ref_src=twsrc%5Etfw\">2017年12月9日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>教えていただいた情報から、最終的に、</p>\n<ul>\n<li><a href=\"https://github.com/neilpa/cmd-colors-solarized\">neilpa/cmd-colors-solarized: Solarized color settings for Windows command prompt</a></li>\n</ul>\n<p>というサイトにたどり着きました。[^1]</p>\n<p>[^1]: これは <a href=\"http://ethanschoonover.com/solarized\">SOLARIZED</a> という、「いろいろなエディタで配色を統一しよう？」というサイトの Windows 向け Fork のようです。</p>\n<p>ここにある <code>solarized-dark.reg</code> というファイルを実行してレジストリを書き換えたら、PowerShell の配色をイイ感じに(solarized)してくれるというもののようです。</p>\n<p>実行してみたら、配色がこう↓なりました。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/aab3e2db-ddc7-db1f-308b-dbc9e9fb2ec6.png\" alt=\"image.png\"></p>\n<p>まあまあ見やすい配色になったので満足です。<br>\n次に Windows をクリーンインストールしたときにまた忘れずに導入するよう、ここに :pencil: っておきます。</p>\n",
      "date_published": "2017-12-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/08/fc075d4e777f8c7a2816/",
      "url": "https://blog.amay077.net/blog/2017/12/08/fc075d4e777f8c7a2816/",
      "title": "RxProperty でイケてる入力フォームをもっとスッキリ実装する",
      "content_html": "<p>また来てしまいました...。こんにちわ、 RxProperty エヴァンジェリズムアドボケイトの @amay077 です。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://developers.eure.jp/tech/android_cool_form\">RxJava,Kotlin,Databindingでイケてる入力フォームをスッキリ実装する / eureka tech blog</a></li>\n</ul>\n<p>興味深く読ませていただきました。</p>\n<p>こちらの記事における <code>ViewProperties</code> の要点は次の箇所かと。</p>\n<ol>\n<li><code>ObservableField</code> を公開することにより Android DataBinding を活用する</li>\n<li>RxJava の <code>BehaviorSubject.onNext</code> で View -&gt; ViewProperties への値の更新通知</li>\n<li>RxJava のオペレータ(<code>map</code> や <code>combineLatest</code> など)を使うことで、 「入力項目が valid か？」 を通知する仕組みが簡単に作れる</li>\n</ol>\n<p>これらは、 <a href=\"https://github.com/k-kagurazaka/rx-property-android\">RxProperty</a> を使うともっとスッキリと実装できます！</p>\n<ol>\n<li><a href=\"https://qiita.com/amay077/items/58e589780ccea6fd5470\">先日も書いた</a> 通り、 RxProperty は <code>.value</code> で <strong><code>ObservableField</code> に変換できます</strong></li>\n<li><code>RxProperty&lt;T&gt;</code> 自体は RxJava の <code>Observable&lt;T&gt;</code> からの派生であり、また最新の値を保持し設定もできます。 <code>subscribe</code> した時に保持されている値がすぐに notify されるかも選択できるので、 <strong>実質ほぼ <code>BehaviorSubject&lt;T&gt;</code> です</strong>。</li>\n<li><code>RxProperty&lt;T&gt;</code> は、バリデータも内蔵しており、 <code>setValidator((T)-&gt;String?)</code> に <strong>「値 → エラー文字列への変換関数」 を渡してやるだけで validation ができます</strong>。</li>\n<li>「実行された時の処理」と「それが実行できるか？」がセットになった <code>RxCommand</code> というクラスがあり、これをボタンにバインドしてやるだけで、<code>Button.enabled</code> と <code>Button.onClick</code> が連動します。</li>\n</ol>\n<h2 id=\"rxproperty-%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%81%9F\">RxProperty で書いてみた <a class=\"direct-link\" href=\"#rxproperty-%E3%81%A7%E6%9B%B8%E3%81%84%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<p>というわけで、元記事の <code>FormProperties</code> を、RxProperty を使って書いてみました。うずうずしてガマンできなかった :pray:  。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> FormProperties <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">enum</span> <span class=\"token keyword\">class</span> <span class=\"token function\">Gender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> id <span class=\"token operator\">:</span>Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <br>        <span class=\"token function\">MAN</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">WOMAN</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">OTHER</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">NOT_SET</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> disposables <span class=\"token operator\">=</span> <span class=\"token function\">CompositeDisposable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">/** ニックネーム */</span><br>    <span class=\"token keyword\">val</span> nickname <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">setValidator</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token comment\">// エラーの場合はその説明を、エラーなしの場合は null を返却</span><br>                    <span class=\"token string\">\"ニックネームは2文字以上10文字以下にしてください\"</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">/** 誕生日(Rawデータ) */</span><br>    <span class=\"token keyword\">val</span> birthday <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>Calendar<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">setValidator</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">>=</span> Calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>Calendar<span class=\"token punctuation\">.</span>YEAR<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">18</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token string\">\"18歳以上が必要です\"</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span><br>            <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">/** 誕生日(表示用文字列) */</span><br>    <span class=\"token keyword\">val</span> birthdayText <span class=\"token operator\">=</span> birthday<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy/MM/dd\"</span><span class=\"token punctuation\">,</span> Locale<span class=\"token punctuation\">.</span>JAPAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toReadOnlyRxProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">/** 性別(Rawデータ) */</span><br>    <span class=\"token keyword\">val</span> gender <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>Gender<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>Gender<span class=\"token punctuation\">.</span>NOT_SET<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">setValidator</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> Gender<span class=\"token punctuation\">.</span>NOT_SET<span class=\"token punctuation\">)</span> <span class=\"token string\">\"性別を何か選択してください\"</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">/** 性別(表示用文字列) */</span><br>    <span class=\"token keyword\">val</span> genderTextResId <span class=\"token operator\">=</span> gender<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            Gender<span class=\"token punctuation\">.</span>MAN <span class=\"token operator\">-></span> R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>male<br>            Gender<span class=\"token punctuation\">.</span>WOMAN <span class=\"token operator\">-></span> R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>female<br>            Gender<span class=\"token punctuation\">.</span>OTHER <span class=\"token operator\">-></span> R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>other<br>            <span class=\"token keyword\">else</span> <span class=\"token operator\">-></span> R<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>empty<br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toReadOnlyRxProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">/** 利用規約同意 */</span><br>    <span class=\"token keyword\">val</span> isAgreed <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">/** Toast を通知するためだけの LiveData */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> _toast <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">val</span> toast <span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> _toast<br><br>    <span class=\"token comment\">/** 登録ボタンが実行できるか */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> canRegistration <span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Observable<br>            <span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><br>                    nickname<span class=\"token punctuation\">.</span><span class=\"token function\">onHasErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">!</span>it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                    gender<span class=\"token punctuation\">.</span><span class=\"token function\">onHasErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">!</span>it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                    birthday<span class=\"token punctuation\">.</span><span class=\"token function\">onHasErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">!</span>it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                    isAgreed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token punctuation\">{</span> anyList <span class=\"token operator\">-></span> anyList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it <span class=\"token keyword\">as</span> Boolean <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span> <span class=\"token punctuation\">{</span> it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">/** 登録ボタンを押したときのコマンド */</span><br>    <span class=\"token comment\">// canRegistration が true の時だけ実行可能なコマンド</span><br>    <span class=\"token keyword\">val</span> register <span class=\"token operator\">=</span> canRegistration<span class=\"token punctuation\">.</span>toRxCommand<span class=\"token operator\">&lt;</span>NoParameter<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// RxCommand の subscribe が呼ばれた時 = ボタンが押された時</span><br>                <span class=\"token comment\">// とりあえずトースト投げる</span><br>                _toast<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RegistrationCompleteActivity へ移動するよ\"</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>disposables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">fun</span> <span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        disposables<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E8%A6%81%E7%82%B9%E3%82%92%E3%81%84%E3%81%8F%E3%81%A4%E3%81%8B\">要点をいくつか <a class=\"direct-link\" href=\"#%E8%A6%81%E7%82%B9%E3%82%92%E3%81%84%E3%81%8F%E3%81%A4%E3%81%8B\">#</a></h2>\n<h3 id=\"%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%81%A8%E3%81%93%E3%82%8D\">基本的なところ <a class=\"direct-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%81%A8%E3%81%93%E3%82%8D\">#</a></h3>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/** ニックネーム */</span><br><span class=\"token keyword\">val</span> nickname <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">setValidator</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span> <span class=\"token operator\">||</span> it<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>                <span class=\"token comment\">// エラーの場合はその説明を、エラーなしの場合は null を返却</span><br>                <span class=\"token string\">\"ニックネームは2文字以上10文字以下にしてください\"</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>これはニックネームを入力する EditText がバインドするプロパティです。<br>\nAndroid DataBinding の場合は、レイアウトXMLで <code>android:text=&quot;@={prop.nickname.value}&quot;</code> なんて書きます。</p>\n<p><code>.setValidator()</code> でバリデータを設定しています。ここでは入力値が 2文字未満または10文字より長い場合はエラーメッセージを返し、そうでない場合はエラーがない事を示す <code>null</code> を返します。[^1]</p>\n<p>[^1]: 実は標準の <code>.setValidator</code> は引数が <code>(T)-&gt;String</code> になっていて <code>null</code> が返せないので、アプリ内で拡張関数を定義して使っていま、したが RxProperty v4.0.0 で対応してもらえました :tada:</p>\n<p>このエラー値もデータバインドできるようになっていて、 <code>android:text=&quot;@{props.nickname.error}&quot;</code> と書いてバインドできます。</p>\n<h3 id=\"%E8%A1%A8%E7%A4%BA%E7%94%A8%E3%81%AB%E5%80%A4%E3%82%92%E5%A4%89%E6%8F%9B\">表示用に値を変換 <a class=\"direct-link\" href=\"#%E8%A1%A8%E7%A4%BA%E7%94%A8%E3%81%AB%E5%80%A4%E3%82%92%E5%A4%89%E6%8F%9B\">#</a></h3>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/** 誕生日(表示用文字列) */</span><br><span class=\"token keyword\">val</span> birthdayText <span class=\"token operator\">=</span> birthday<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy/MM/dd\"</span><span class=\"token punctuation\">,</span> Locale<span class=\"token punctuation\">.</span>JAPAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">toReadOnlyRxProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre>\n<p><code>RxProperty&lt;Calendar&gt;</code> 型である <code>birthday</code> プロパティを Binding や View 側で文字列に変換するのもできるのですが、せっかくなので Rx ライクにいきましょう。 <code>.map {}</code> でよしなに変換してやるだけです。最後に <code>.toReadOnlyRxProperty()</code> としているのは、このプロパティは読み取り専用、つまり OneWay Bind しか許可しないことを示しています。</p>\n<h3 id=\"%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">コマンド <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">#</a></h3>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">/** 登録ボタンが実行できるか */</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> canRegistration <span class=\"token operator\">:</span> Observable<span class=\"token operator\">&lt;</span>Boolean<span class=\"token operator\">></span> <span class=\"token operator\">=</span> Observable<br>        <span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span><span class=\"token function\">listOf</span><span class=\"token punctuation\">(</span><br>                nickname<span class=\"token punctuation\">.</span><span class=\"token function\">onHasErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">!</span>it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                gender<span class=\"token punctuation\">.</span><span class=\"token function\">onHasErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">!</span>it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                birthday<span class=\"token punctuation\">.</span><span class=\"token function\">onHasErrorsChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">!</span>it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                isAgreed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                <span class=\"token punctuation\">{</span> anyList <span class=\"token operator\">-></span> anyList<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it <span class=\"token keyword\">as</span> Boolean <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span> <span class=\"token punctuation\">{</span> it <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">/** 登録ボタンを押したときのコマンド */</span><br><span class=\"token comment\">// canRegistration が true の時だけ実行可能なコマンド</span><br><span class=\"token keyword\">val</span> register <span class=\"token operator\">=</span> canRegistration<span class=\"token punctuation\">.</span>toRxCommand<span class=\"token operator\">&lt;</span>Nothing<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// RxCommand の subscribe が呼ばれた時 = ボタンが押された時</span><br>            <span class=\"token comment\">// とりあえずトースト投げる</span><br>            _toast<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RegistrationCompleteActivity へ移動するよ\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">addTo</span><span class=\"token punctuation\">(</span>disposables<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>登録ボタンは、「ニックネーム」、「性別」、「誕生日」がすべて valid であり、さらに 「利用規約に同意」 が <code>true</code> である場合にだけ押すことができる仕様です。<br>\nそれを定義しているのが <code>canRegistration : Observable&lt;Boolean&gt;</code> です。 「valid かどうか？」 は、 <code>nickname.onHasErrorsChanged().map { !it }</code> のように、「エラーがあるか？」を「エラーがないか？」に反転するだけで表せます。これらを元記事のように <code>Observable.combineLatest</code> でまとめてあげて「入力項目が全て <code>true</code>なら登録ボタンは押せる」となります。</p>\n<p>登録ボタンが押されたときの処理は、 <code>register : RxCommand&lt;T&gt;</code> の <code>.subscribe</code> に書きます。ここでは Kotlin の便利な <code>.apply</code> 関数を使って、プロパティの定義とともに書けますね。<br>\n実際のボタンが押された処理は、「xxxへ移動するよ」というトーストを表示させるために LiveData に通知を送っています。Activity 側で LiveData を <code>observe</code> して <code>Toast.show</code> を呼んでいます。[^2]</p>\n<p>ボタンを RxCommand にバインドするには、レイアウトXMLに <code>app:rxCommandOnClick=&quot;@{props.register}&quot;</code> と書きます。これだけで、登録ボタンは、入力項目が全てvalidになるまでは disabled になります。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p><code>ViewProperties</code> を RxProperty を使って書き直してみたところ、行数は 88 から 68 に減りました :thumbsup: 。<br>\n行数の削減というよりも、「値を保持する Subject」、「エラー通知用の <code>Observable&lt;bool&gt;</code>」、「データバインディング用の ObservableField」 をそれぞれ用意しなくてもすべて <code>RxProperty&lt;T&gt;</code> の宣言だけでできてしまう事が最大のメリットです。</p>\n<p>今回のできあがり品はこちらです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/de1f7c2b-6ed4-f273-aaf6-a8e5cf67d737.gif\" alt=\"Untitled.gif\"></p>\n<p>ソースも公開してるので是非動かして RxProperty の凄さを体験してみてくださいね。 12/8 にリリースされた <a href=\"https://github.com/k-kagurazaka/rx-property-android/releases/tag/4.0.0\">RxProperty 4.0.0</a> にも超速で対応 :exclamation:</p>\n<ul>\n<li><a href=\"https://github.com/amay077/RxPropertyFormSample\">amay077/RxPropertyFormSample</a></li>\n</ul>\n<p>[^2]: MVVM だと、 ViewModel の中で View に依存する処理（画面遷移とか、Toast/DialogBoxの表示など）を行うのは抵抗がありますが、MVP ならまあやってもいいかもですね。今回は Toast の表示は Activity 側に任せることにして、 <code>ViewProperties</code> からは EventBus ライクに、 <code>LiveData&lt;String&gt;</code> で通知をするようにしてみました。</p>\n",
      "date_published": "2017-12-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/06/0994ebe8e5c815823c97/",
      "url": "https://blog.amay077.net/blog/2017/12/06/0994ebe8e5c815823c97/",
      "title": "リストの中から、条件にマッチした最初のアイテムが何番目かを返すやつ",
      "content_html": "<p>Kotlin で、「リストの中から、条件にマッチした最初のアイテムが何番目かを知りたい」のだけど、既定のコレクションクラスにはそんな機能はないみたいだったので、作ってみた。</p>\n<!--more-->\n<h2 id=\"%E6%8B%A1%E5%BC%B5%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89\">拡張メソッド <a class=\"direct-link\" href=\"#%E6%8B%A1%E5%BC%B5%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89\">#</a></h2>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Iterable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">firstIndexOrNull</span><span class=\"token punctuation\">(</span>predicate<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> Boolean<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Int<span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapIndexed</span> <span class=\"token punctuation\">{</span> index<span class=\"token punctuation\">,</span> item <span class=\"token operator\">-></span> <span class=\"token function\">Pair</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">firstOrNull</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token function\">predicate</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>first<br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>.mapIndexed</code> でインデックス付きの要素に変換して、ヒットしたらそのインデックスを返してるだけですね。</p>\n<h2 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h2>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> arr <span class=\"token operator\">=</span> <span class=\"token function\">arrayListOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">)</span><br><br>arr<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndexOrNull</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">==</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> 1</span><br>arr<span class=\"token punctuation\">.</span><span class=\"token function\">firstIndexOrNull</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">==</span> <span class=\"token string\">\"z\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// -> null</span></code></pre>\n<p>ヒットしなかったら <code>-1</code> というのは悪手だと思う。 nullable があるのだから使おう。</p>\n",
      "date_published": "2017-12-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/06/56149cfdf84004418d5d/",
      "url": "https://blog.amay077.net/blog/2017/12/06/56149cfdf84004418d5d/",
      "title": "C# 使いが Kotlin を使ってみて「いいな」と思ったトコ",
      "content_html": "<p>最近 Kotlin をよく使っているので、 C# とくらべて「お、これはイイな！」と思ったところを挙げてみました、今後足してく予定。</p>\n<!--more-->\n<p>これ↓も似たような話かな。</p>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/37e1032f2a8f30138284\">C# + ReactiveProperty vs Kotlin + RxProperty : Command 編 - Qiita</a></li>\n</ul>\n<h2 id=\"%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9\">データクラス <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%AF%E3%83%A9%E3%82%B9\">#</a></h2>\n<p>C#</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressCard</span> <br><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Phone <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>  <br>  <span class=\"token keyword\">public</span> <span class=\"token function\">AddressCard</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> phone<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Phone <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">data</span> <span class=\"token keyword\">class</span> <span class=\"token function\">AddressCard</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> phone<span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>   <span class=\"token keyword\">val</span> card <span class=\"token operator\">=</span> <span class=\"token function\">AddressCard</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"phone\"</span><span class=\"token punctuation\">)</span><br>   <span class=\"token keyword\">val</span> copied <span class=\"token operator\">=</span> card<span class=\"token punctuation\">.</span><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指定したプロパティだけ値を変えて複製してくれる</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>圧倒的短さ！ &amp; <code>copy</code> メソッドなにこれすごい！<br>\nJson のモデルクラスを作る時にはほんと便利。</p>\n<h2 id=\"%E5%9E%8B%E5%AE%9A%E7%BE%A9%E3%81%AE%E7%9C%81%E7%95%A5\">型定義の省略 <a class=\"direct-link\" href=\"#%E5%9E%8B%E5%AE%9A%E7%BE%A9%E3%81%AE%E7%9C%81%E7%95%A5\">#</a></h2>\n<p>C#</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressCard</span> <br><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ObservableField<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ObservableField<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">IDictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> Map <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> AddressCard <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> ObservableField<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br>  <span class=\"token keyword\">val</span> map <span class=\"token operator\">=</span> HashMap<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// これは悪手。public ならちゃんと map:Map&lt;String, String> と基本抽象型にすべき</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>圧倒的短さ！<br>\nこれが型を後ろに書く言語の強みなのか？？？</p>\n<h2 id=\"%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E5%BC%95%E6%95%B0%E3%82%92%E3%83%A1%E3%83%B3%E3%83%90%E5%A4%89%E6%95%B0%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%8B%E3%82%84%E3%81%A4\">コンストラクタ引数をメンバ変数に入れるやつ <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%B3%E3%82%B9%E3%83%88%E3%83%A9%E3%82%AF%E3%82%BF%E5%BC%95%E6%95%B0%E3%82%92%E3%83%A1%E3%83%B3%E3%83%90%E5%A4%89%E6%95%B0%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%8B%E3%82%84%E3%81%A4\">#</a></h2>\n<p>C#</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressCard</span> <br><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _name<span class=\"token punctuation\">;</span><br>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _phone<span class=\"token punctuation\">;</span><br>  <br>  <span class=\"token keyword\">public</span> <span class=\"token function\">AddressCard</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> phone<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">{</span><br>    _name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>    _phone <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><br>  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">ToFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_phone</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> <span class=\"token function\">AddressCard</span><span class=\"token punctuation\">(</span><br>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> <br>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> phone<span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <br>  <span class=\"token keyword\">fun</span> <span class=\"token function\">toFullName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>name<span class=\"token delimiter variable\">}</span></span>:{phone}\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>代入の必要ナシ！<br>\nそもそもプライマリコンストラクタの引数はそのままプロパティになる模様（<code>val</code> を付けない場合はイニシャライザ <code>init {}</code> の中でのみ参照可能な変数になるとのことです、コメントで教えていただきました）。</p>\n<h2 id=\"%E8%AA%AD%E3%81%BF%E5%8F%96%E3%82%8A%E5%B0%82%E7%94%A8%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B\">読み取り専用かどうか <a class=\"direct-link\" href=\"#%E8%AA%AD%E3%81%BF%E5%8F%96%E3%82%8A%E5%B0%82%E7%94%A8%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B\">#</a></h2>\n<p>C#</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AddressCard</span> <br><span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 読み取り専用プロパティ</span><br>  <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Phone <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// 書き込み可プロパティ</span><br><br>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _fullName<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 読み取り専用フィールド</span><br>  <br>  <span class=\"token keyword\">public</span> <span class=\"token function\">AddressCard</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> phone<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Phone <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">;</span><br>    _fullName <span class=\"token operator\">=</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">_phone</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> AddressCard <span class=\"token punctuation\">{</span><br><br>  <span class=\"token keyword\">val</span> name<span class=\"token operator\">:</span>String   <span class=\"token comment\">// 読み取り専用プロパティ</span><br>  <span class=\"token keyword\">var</span> phone<span class=\"token operator\">:</span>String  <span class=\"token comment\">// 書き込み可プロパティ</span><br><br>  <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> _fullName<span class=\"token operator\">:</span>String <span class=\"token comment\">// 非公開読み取り専用プロパティ</span><br><br>  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> phone<span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 敢えてのコンストラクタ</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>phone <span class=\"token operator\">=</span> phone<br>    _fullName <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>name<span class=\"token delimiter variable\">}</span></span>:{phone}\"</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>いかなるケースでも <code>val</code> と <code>var</code> の使い分けだけで済むのがイイ！</p>\n<h2 id=\"%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A7%E3%82%82-null-%E3%82%92%E6%8E%92%E9%99%A4%E3%81%A7%E3%81%8D%E3%82%8B\">クラスでも <code>null</code> を排除できる <a class=\"direct-link\" href=\"#%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%A7%E3%82%82-null-%E3%82%92%E6%8E%92%E9%99%A4%E3%81%A7%E3%81%8D%E3%82%8B\">#</a></h2>\n<p>C#</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">HogeClass</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span><br><span class=\"token keyword\">struct</span> <span class=\"token class-name\">HogeStruct</span> <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span><br><br><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>   <span class=\"token class-name\">HogeClass</span> hogeClass <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null にできる   </span><br>   <span class=\"token class-name\">HogeStruct</span> hogeStruct <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null にできない</span><br>   <span class=\"token class-name\">HogeStruct<span class=\"token punctuation\">?</span></span> nullableHoge <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null にできる</span><br>   <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span></span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null にできる</span><br>   <br>   <span class=\"token comment\">// null条件/合体演算子</span><br>   Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>hogeClass<span class=\"token punctuation\">?.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>   Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">?.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> HogeClass <span class=\"token punctuation\">{</span>  <span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">fun</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>   <span class=\"token keyword\">val</span> hogeClass<span class=\"token operator\">:</span>HogeClass <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null にできない</span><br>   <span class=\"token keyword\">val</span> nullableHoge<span class=\"token operator\">:</span>HogeClass<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null にできる</span><br>   <span class=\"token keyword\">val</span> num<span class=\"token operator\">:</span>Int<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// null にできる</span><br>   <br>   <span class=\"token comment\">// null条件/合体演算子</span><br>   System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>nullableHoge<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>   System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token string\">\"empty\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>末端関数において、 <code>null</code> になる可能性を排除して実装できる安心感パない。<br>\n(C# でも構造体を多用すればできるけど、目的が違うし実質ムリ)</p>\n<h2 id=\"%22%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E5%BC%95%E6%95%B0%22-%E3%82%92%E6%98%8E%E7%A4%BA%E3%81%A7%E3%81%8D%E3%82%8B\">&quot;使用しない引数&quot; を明示できる <a class=\"direct-link\" href=\"#%22%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%AA%E3%81%84%E5%BC%95%E6%95%B0%22-%E3%82%92%E6%98%8E%E7%A4%BA%E3%81%A7%E3%81%8D%E3%82%8B\">#</a></h2>\n<p>C#</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">button<span class=\"token punctuation\">.</span>Clicked <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token comment\">// _ は２度使えない</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge1 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 変数名が _ なだけ</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> hoge2 <span class=\"token operator\">=</span> __<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 変数名が __ なだけ</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Kotlin</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\">button<span class=\"token punctuation\">.</span><span class=\"token function\">setOnHoverListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> _<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">-></span>  <span class=\"token comment\">// _ は何度でも使える！</span><br>    <span class=\"token keyword\">val</span> hoge1 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラー</span><br>    <span class=\"token keyword\">val</span> hoge2 <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// エラー</span><br>    <span class=\"token boolean\">true</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre>\n<p>主にイベントリスナーで、ラムダ式の「引数を使わない」ことを示すために、 C# では「引数名を <code>_</code> にする」という文化があります。<br>\nが、あくまで文化でしかないので、変数 <code>_</code> が存在しているだけであり、引数が２個あったら両者に <code>_</code> は使えないし、関数内で <code>_</code> は変数として普通に使えてしまいます。</p>\n<p>一方で Kotlin の <code>_</code> は「使用しない変数名」として特別視されており?、複数の引数に割り当てられるし、関数内で <code>_</code> を使うとエラーにしてくれます。</p>\n<p>C# でラムダ式をネストせざるを得ないときに、まあまあな頻度で <code>_</code> を複数回使いたいなーと感じることがあるので、Kotlin の <code>_</code> は便利だなー、と思います。</p>\n<h2 id=\"%E9%80%86%E3%81%AB-kotlin-%E3%81%AE%E3%80%8C%E3%81%93%E3%82%8C%E3%81%AF%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AB%E3%81%AF%E5%A5%BD%E3%81%8B%E3%82%93%E3%80%8D%E3%81%A8%E3%81%93%E3%82%8D\">逆に Kotlin の「これは個人的には好かん」ところ <a class=\"direct-link\" href=\"#%E9%80%86%E3%81%AB-kotlin-%E3%81%AE%E3%80%8C%E3%81%93%E3%82%8C%E3%81%AF%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AB%E3%81%AF%E5%A5%BD%E3%81%8B%E3%82%93%E3%80%8D%E3%81%A8%E3%81%93%E3%82%8D\">#</a></h2>\n<h3 id=\"%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7-public\">デフォルトで public <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%81%A7-public\">#</a></h3>\n<p>API設計は、慎重派なんですよ。<br>\n気持ちよさにかまけて非公開とすべきAPIに private を付け忘れそう。</p>\n<h3 id=\"smart-cast\">Smart cast <a class=\"direct-link\" href=\"#smart-cast\">#</a></h3>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">doWork</span><span class=\"token punctuation\">(</span>card<span class=\"token operator\">:</span>AddressCard<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>  <span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> card<span class=\"token punctuation\">.</span>name  <span class=\"token comment\">// nullableだからエラー</span><br>  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>card <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// null をチェックすれば…</span><br>    <span class=\"token keyword\">val</span> name2 <span class=\"token operator\">=</span> card<span class=\"token punctuation\">.</span>name  <span class=\"token comment\">// 大丈夫だ、nullの可能性は無い</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>まあ便利で使いもするんだけど、 <code>card?.let{ }</code> で代用できるし(これも Smart Cast だとコメントで教えてもらいました)。</p>\n<p>C# でも <code>Nullable&lt;T&gt;</code> なら 「スコープ内は null でないことを保証できる」 <code>Let</code> 拡張関数が書けるので、参考までに載せときます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">R<span class=\"token punctuation\">?</span></span> <span class=\"token generic-method\"><span class=\"token function\">Let</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">T<span class=\"token punctuation\">?</span></span> self<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Func<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">,</span> R<span class=\"token punctuation\">?</span><span class=\"token punctuation\">></span></span> mapper<span class=\"token punctuation\">)</span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">T</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">struct</span></span> <span class=\"token keyword\">where</span> <span class=\"token class-name\">R</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token keyword\">struct</span></span> <br>    <span class=\"token operator\">=></span> <span class=\"token return-type class-name\">self<span class=\"token punctuation\">.</span>HasValue <span class=\"token punctuation\">?</span></span> mapper<span class=\"token punctuation\">.</span><span class=\"token function\">Invoke</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">?</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ret1 <span class=\"token operator\">=</span> num<span class=\"token punctuation\">?.</span><span class=\"token function\">Let</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nonNullNum<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nonNullNum <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> 6</span><br><br>num <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ret2 <span class=\"token operator\">=</span> num<span class=\"token punctuation\">?.</span><span class=\"token function\">Let</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> nonNullNum<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> nonNullNum <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">??</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -> -1</span></code></pre>\n<h3 id=\"non-local-return\">Non-local return <a class=\"direct-link\" href=\"#non-local-return\">#</a></h3>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token function\">upperJoin</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> zip<span class=\"token operator\">:</span>String<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> String <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> nameUpper <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> x<span class=\"token operator\">-></span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span>      <span class=\"token comment\">// upperJoin を抜けちゃう！</span><br><span class=\"token comment\">//          return@let \"\"  // この let {} スコープを抜けるだけ</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">val</span> zipUpper <span class=\"token operator\">=</span> zip<span class=\"token punctuation\">.</span><span class=\"token function\">let</span> <span class=\"token punctuation\">{</span> it<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$nameUpper</span>:<span class=\"token interpolation variable\">$zipUpper</span>\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>上のコードは <code>name</code> が空文字の場合、<code>zip</code> を無視して空文字を返してしまいます。<br>\nいつかハマりそうで、オドオドしてます。</p>\n<p>Smart-cast も Non-local return も、自分が知ってる言語にない機構に拒否反応を示してるだけですね。慣れたらガンガン使いそうです。</p>\n<p>C# にしかない機能や、これから新たに追加される機能もあると思いますが、あくまで自分が使用する範囲で感じたこと、ということで。</p>\n<p>C# の方ももちろん進化は続いていて、</p>\n<ul>\n<li><a href=\"https://blogs.msdn.microsoft.com/dotnet/2017/11/15/nullable-reference-types-in-csharp/\">Introducing Nullable Reference Types in C# | .NET Blog</a></li>\n</ul>\n<p>に代表されるように、モダンと呼ばれる仕様も次々と取り込まれていく雰囲気が好きです。</p>\n",
      "date_published": "2017-12-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/05/58e589780ccea6fd5470/",
      "url": "https://blog.amay077.net/blog/2017/12/05/58e589780ccea6fd5470/",
      "title": "RxJava の Observable と LiveData と ObservableField をいい感じで使おう",
      "content_html": "<p><a href=\"./6e1c94305420a41ff7ed/\">LiveData について勘違いしていたことをいくつか</a> からの続きです。</p>\n<!--more-->\n<p>前記事では LiveData は、</p>\n<ul>\n<li>購読解除を自動でやってくれるので便利</li>\n<li>DataBinding(=ObservableField)としては使えない</li>\n<li>最低限の合成しかできないので物足りない</li>\n</ul>\n<p>という事を書きました。</p>\n<p>今回の記事では、上で挙げた微妙な３つの点を解消すべく、RxJava と LiveData と DataBinding をいい感じで併用してみたいと思います。今回もコードは Kotlin です。</p>\n<h2 id=\"rxjava-with-android-databinding\">RxJava with Android DataBinding <a class=\"direct-link\" href=\"#rxjava-with-android-databinding\">#</a></h2>\n<p>RxProperty を使おう！</p>\n<ul>\n<li><a href=\"https://qiita.com/k-kagurazaka@github/items/3fc1fc19ea608cac9913\">RxPropertyでRxJavaとAndroid Data Bindingを連携する - Qiita</a></li>\n</ul>\n<p>はい終了。</p>\n<p>RxProperty について書くの何度目なんだ、自分。<br>\n作者の @k-kagurazaka@github さんにもお世話になりっぱなしだし、サイコーです、大好きです <a href=\"https://github.com/k-kagurazaka/rx-property-android\">RxProperty</a>、もっと :star2: を！！</p>\n<p><code>RxProperty&lt;T&gt;</code> は基本的には <code>Observable&lt;T&gt;</code>(というか <code>Subject&lt;T&gt;</code>)なのですが、 <code>.value</code> プロパティで <code>ObservableField&lt;T&gt;</code> に変換できます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// MainViewModel.kt</span><br><span class=\"token keyword\">class</span> MainViewModel <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token comment\">// GitHub ユーザー名。EditText.text から双方向(TwoWay)バインドされる。</span><br>    <span class=\"token keyword\">val</span> user <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">init</span> <span class=\"token punctuation\">{</span><br>        user<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hogehoge\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><strong>activity_main.xml</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>app</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tools</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/tools<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>net.amay077.livedatasample.view.MainActivity<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EditText</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>hint</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GitHub user name<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@={viewModel.user.value}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>  ←-- user.value とすることで ObservableField に！<br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>このように レイアウトXMLに、<code>viewModel.user.value</code> と記述するとデータバインディングできちゃいます。上記例ではちゃんと双方向バインディングも効きます。</p>\n<h2 id=\"rxjava-with-livedata\">RxJava with LiveData <a class=\"direct-link\" href=\"#rxjava-with-livedata\">#</a></h2>\n<p>これは 「RxJava の <code>Observable&lt;T&gt;</code> から <code>LiveData&lt;T&gt;</code> に変換する拡張メソッド」を作ってやりましょう。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// ObservableExtensions.kt</span><br><br><span class=\"token comment\">/**<br> * Observable&lt;T> を LiveData&lt;T> に変換<br> */</span><br><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> Observable<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">toLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> MutableLiveData<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">var</span> disposable <span class=\"token operator\">:</span> Disposable<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// ライフサイクルがActiveになったときに購読開始</span><br>        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onActive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>            <span class=\"token comment\">// Observable -> LiveData</span><br>            disposable <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token label symbol\">@toLiveData</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">// ライフサイクルが非Activeになったら購読停止</span><br>        <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onInactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            disposable<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onInactive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ライフサイクルが非アクティブ(具体的には onPause)になったときに購読停止してあげればきっと大丈夫なはず。</p>\n<p>次のような感じで使えます。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// MainActivity.kt</span><br><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><br><br>        ＜いろいろ省略＞<br><br>        <span class=\"token comment\">// RxProperty を LiveData に変換。</span><br>        <span class=\"token keyword\">val</span> liveDataUser <span class=\"token operator\">=</span> viewModel<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">toLiveData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>        <span class=\"token comment\">// LiveData を購読</span><br>        liveDataUser<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>lifecycleOwner<span class=\"token punctuation\">,</span> Observer <span class=\"token punctuation\">{</span> <br>            editUserName<span class=\"token punctuation\">.</span><span class=\"token function\">setTextKeepState</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>通常は <code>RxProperty.value</code> で、DataBinding すればよいと思うんですが、 BindingAdapter を作るのが面倒とか、View側でちょっと手の込んだことをしたい場合には <code>.toLiveData()</code> で LiveData に変換して、安全な購読管理を享受できます。</p>\n<h2 id=\"livedata-%E3%82%92%E7%9B%B4%E6%8E%A5%E4%BD%BF%E3%81%A3%E3%81%9F%E6%96%B9%E3%81%8C%E3%82%88%E3%81%84%E3%82%B1%E3%83%BC%E3%82%B9\">LiveData を直接使った方がよいケース <a class=\"direct-link\" href=\"#livedata-%E3%82%92%E7%9B%B4%E6%8E%A5%E4%BD%BF%E3%81%A3%E3%81%9F%E6%96%B9%E3%81%8C%E3%82%88%E3%81%84%E3%82%B1%E3%83%BC%E3%82%B9\">#</a></h2>\n<p>RxProperty -&gt; LiveData する時の注意点として、値が変更時しか通知されない、というものがあります。<br>\n<a href=\"https://qiita.com/amay077/items/6e1c94305420a41ff7ed\">昨日書いた</a> ように、 LiveData の特性は、同値チェックは特になく値が設定されれば <code>onChanged</code> を通知するのですが、 RxProperty は「<strong>変更</strong>通知プロパティ」なので(<code>RxJava 風に言うと distinctUntilChanged なので</code>)、同じ値を連続で設定しても最初しか通知されません。</p>\n<p>そのため、Model-&gt;ViewModel-&gt;Viewの方向へ、値をただ垂れ流して、View側で受信して何かしたい場合は、LiveData をそのまま使うのがよいでしょう。これは EventBus(Messenger) 的な使い方です。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// MainViewModel.kt</span><br><span class=\"token keyword\">class</span> MainViewModel <span class=\"token operator\">:</span> <span class=\"token function\">ViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token comment\">// View 側から購読して Toast を表示するための LiveData。</span><br>    <span class=\"token comment\">// 変更通知が必要ない(=EventBus的に使う)なら、LiveData をそのまま使うのがいいんじゃなイカ。</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">val</span> _toast <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">val</span> toast <span class=\"token operator\">:</span> LiveData<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> <span class=\"token operator\">=</span> _toast<br><br>    <span class=\"token keyword\">fun</span> <span class=\"token function\">showToast</span><span class=\"token punctuation\">(</span>view<span class=\"token operator\">:</span>View<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        toast<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"トーストだよ\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// MainActivity.kt</span><br><span class=\"token keyword\">class</span> MainActivity <span class=\"token operator\">:</span> <span class=\"token function\">AppCompatActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token operator\">:</span> Bundle<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><br><br>        ＜いろいろ省略＞<br><br>        <span class=\"token comment\">// Toast を表示するために、 toast:LiveData を購読する。</span><br>        viewModel<span class=\"token punctuation\">.</span>toast<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Observer <span class=\"token punctuation\">{</span> message <span class=\"token operator\">-></span><br>            Toast<span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> Toast<span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>上記の例は、トーストを表示するために <code>LiveData&lt;String&gt;</code> を使用しています。<br>\n他にはダイアログボックスの表示や、画面遷移の要求メッセージを View 側に通知するためには LiveData をそのまま使うのが良いと思います（というかそこを Observable にする必要を感じない）。</p>\n<h2 id=\"%E5%AE%8C%E6%88%90%E7%B3%BB\">完成系 <a class=\"direct-link\" href=\"#%E5%AE%8C%E6%88%90%E7%B3%BB\">#</a></h2>\n<p><a href=\"https://qiita.com/amay077/items/6e1c94305420a41ff7ed#%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA\">前回</a>、サンプルとして GitHub のリポジトリ一覧を検索するアプリを作っていたんでしたね。</p>\n<p>それを、</p>\n<ul>\n<li>DataBinding</li>\n<li>LiveData</li>\n<li>RxJava</li>\n<li>RxProperty</li>\n</ul>\n<p>全部使って書いてみたコードがこちら↓です。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/LiveDataSample\">amay077/LiveDataSample: ViewModel, DataBinding, LiveData, RxJava, RxProperty 全部使ってみたサンプル</a></li>\n</ul>\n<p>スクリーンショットはこんなの。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/579172f5-898c-7dac-e8ac-52dd545f1f07.gif\" alt=\"Untitled.gif\"></p>\n<p>AAC 時代でも Observable centric な考えでいいんじゃないでしょうか。<br>\n図にまとめるとこんな感じです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/1bf05d3f-d884-4f56-d56a-3dedc7961a0c.png\" alt=\"snap.png\"></p>\n<p>RxProperty が流行らない理由が分からないのです。みなさん使ってみてくださいね！</p>\n",
      "date_published": "2017-12-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/04/6e1c94305420a41ff7ed/",
      "url": "https://blog.amay077.net/blog/2017/12/04/6e1c94305420a41ff7ed/",
      "title": "LiveData について勘違いしていたことをいくつか",
      "content_html": "<p><a href=\"https://developer.android.com/topic/libraries/architecture/index.html\">Android Architecture Components</a>(以下 AAC) に含まれる 「LiveData」 のサンプルを Kotlin で書いてみました。</p>\n<!--more-->\n<h2 id=\"livedata-%E3%81%A8%E3%81%AF\">LiveData とは <a class=\"direct-link\" href=\"#livedata-%E3%81%A8%E3%81%AF\">#</a></h2>\n<p><a href=\"https://developer.android.com/topic/libraries/architecture/livedata.html\">LiveData</a> とは、「ライフサイクルに応じて自動的に購読解除してくれる通知プロパティ」です。</p>\n<p>モダン(と呼ぶにはもはや古い？)なUIパターンでは、UI側はデータの変更を検知して自身を書き換えます。<br>\nすなわちUI側では、「データを購読する」というコードを書くわけですが、「購読をやめる」というコードも合わせて考えなければなりません。しかし Android の Activity や Fragment はライフサイクルが複雑で、購読を管理するのも一苦労であり、不具合の温床になりがちです。</p>\n<p>LiveData は AAC に含まれる Lifecycle と深く結びつき、この「購読解除」をほとんど自動的に行なってくれます。</p>\n<h2 id=\"%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA\">作ってみたアプリ <a class=\"direct-link\" href=\"#%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA\">#</a></h2>\n<p>いったい何人が、何回つくったのだろうと思われる GitHub のレポジトリ一覧を表示するやつです。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/d7c89507-94b6-b618-49ec-f90d83f353e1.png\" alt=\"Screenshot_1509709626.png\"></p>\n<p>主な要素は次の通りです。</p>\n<ul>\n<li>依存関係は MainActivity -&gt; MainViewModel -&gt; GithubRepository -&gt; GithubService(Retrofit)</li>\n<li>MainViewModel は「ユーザー名」と「リポジトリリスト」を LiveData として公開。あと load メソッドも。</li>\n<li>MainActivity は自身の EditText や ListView と、MainViewModel の LiveData をデータバインド(自作)</li>\n<li>MainViewModel は load が呼ばれたら、GithubRepository を使用してリポジトリ一覧を <strong>非同期で</strong> 要求し、取得できたら自身の LiveData を更新する。</li>\n<li>GithubRepository では、 Retrofit を使ってるだけ。 <strong>コールバックをUIスレッドで受けないように</strong> <code>callbackExecutor</code> を設定してます。</li>\n<li>coroutine(async/await) や RxJava、 DataBinding は使ってないです。なるべく LiveData のみのシンプルな方針で。</li>\n</ul>\n<p>LiveData はライフサイクルと結びついて購読管理をしてくれるモノ、ということは ViewModel で使うのが自然かなと。Google のサンプルもそうなってたし。</p>\n<h2 id=\"livedata-%E3%81%A7%E5%8B%98%E9%81%95%E3%81%84%E3%81%97%E3%81%A6%E3%81%9F%E3%81%93%E3%81%A8\">LiveData で勘違いしてたこと <a class=\"direct-link\" href=\"#livedata-%E3%81%A7%E5%8B%98%E9%81%95%E3%81%84%E3%81%97%E3%81%A6%E3%81%9F%E3%81%93%E3%81%A8\">#</a></h2>\n<p>さて、 LiveData を実際に使ってみたところ「マジか・・・」と思った点がいくつかあったので挙げてみます。</p>\n<h3 id=\"%E3%80%8C%E5%A4%89%E6%9B%B4%E9%80%9A%E7%9F%A5%E3%80%8D%E3%81%98%E3%82%83%E3%81%AA%E3%81%8F%E3%81%A6%E3%80%81%E3%81%9F%E3%81%A0%E3%81%AE%E3%80%8C%E5%9E%82%E3%82%8C%E6%B5%81%E3%81%97%E3%80%8D%E3%81%A0%E3%81%A3%E3%81%9F\">「変更通知」じゃなくて、ただの「垂れ流し」だった <a class=\"direct-link\" href=\"#%E3%80%8C%E5%A4%89%E6%9B%B4%E9%80%9A%E7%9F%A5%E3%80%8D%E3%81%98%E3%82%83%E3%81%AA%E3%81%8F%E3%81%A6%E3%80%81%E3%81%9F%E3%81%A0%E3%81%AE%E3%80%8C%E5%9E%82%E3%82%8C%E6%B5%81%E3%81%97%E3%80%8D%E3%81%A0%E3%81%A3%E3%81%9F\">#</a></h3>\n<p>私が期待していたのは「DataBinding の ObservableFieldのように使える、且つ、購読管理が楽」というモノだったんですけど、ObservableField と決定的に違うのがここでした。</p>\n<p>ObservableField は、値が <strong>変更された時</strong> に通知を行います。<br>\nLiveData は、値が <strong>変更されていなくても設定されれば</strong> 通知を行います。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> observableFld <span class=\"token operator\">=</span> ObservableField<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>observableFld<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>observableFld<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>observableFld<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最初の１回しか通知されない(=onChangedは呼ばれない)</span><br><br><span class=\"token keyword\">val</span> liveData <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 3回とも通知される(=onChangedが呼ばれる)</span></code></pre>\n<p>ViewModel が持つプロパティは、値が変わった時に通知し、View側はそれを検知して更新する。<br>\nが常識なので、LiveData もてっきりそうなってるのかと思ってましたが、違いました（だって on <code>Changed</code> だったし…）。</p>\n<p>この事を知っておかないと、以下のようなリスクがあります。</p>\n<ul>\n<li>ムダな画面の更新が発生する</li>\n<li>TwoWay バインディングを何も考えずに作ると無限ループで死ぬ</li>\n</ul>\n<p>後者は、このサンプル作成で体験しました。<br>\n画面の EditText と ViewModel の <code>LiveData&lt;String&gt;</code> の TwoWay バインディングを次のように「何も考えず」実装しました。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token comment\">// viewModel.user の TwoWay バインド</span><br><span class=\"token comment\">// EditText -> LiveData</span><br>editUserName<span class=\"token punctuation\">.</span><span class=\"token function\">addTextChangedListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> TextWatcher <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onTextChanged</span><span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> CharSequence<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> p3<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">val</span> userName <span class=\"token operator\">=</span> editUserName<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">;</span><br>        viewModel<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span>userName<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">beforeTextChanged</span><span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> CharSequence<span class=\"token operator\">?</span><span class=\"token punctuation\">,</span> p1<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> p2<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">,</span> p3<span class=\"token operator\">:</span> Int<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">afterTextChanged</span><span class=\"token punctuation\">(</span>p0<span class=\"token operator\">:</span> Editable<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// LiveData -> EditText</span><br>viewModel<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Observer <span class=\"token punctuation\">{</span> userName <span class=\"token operator\">-></span><br>    editUserName<span class=\"token punctuation\">.</span><span class=\"token function\">setTextKeepState</span><span class=\"token punctuation\">(</span>userName <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>editUserName<span class=\"token punctuation\">.</span><span class=\"token function\">setTextKeepState</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">.</span>user<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">?:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span></code></pre>\n<p>このコードは、初回の <code>editUserName.setTextKeepState</code> をトリガーに、TextWatcher.onTextChanged と  LiveData.observe が無限に繰り返されます。</p>\n<p>今回は、TextWatcher.onTextChanged で同値チェックを行って回避しましたが、予期せぬトラブルの元になりそうです。</p>\n<h3 id=\"setvalue-%E3%81%AFui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%A7%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%95%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%91%E3%81%AA%E3%81%84(postvalue-%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86)\">setValue はUIスレッドで呼び出さないといけない(postValue を使おう) <a class=\"direct-link\" href=\"#setvalue-%E3%81%AFui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%A7%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%95%E3%81%AA%E3%81%84%E3%81%A8%E3%81%84%E3%81%91%E3%81%AA%E3%81%84(postvalue-%E3%82%92%E4%BD%BF%E3%81%8A%E3%81%86)\">#</a></h3>\n<p><code>LiveData&lt;T&gt;</code> の実際に値を設定できるクラスである <code>MutableLiveData&lt;T&gt;</code> には、 <code>setValue()</code> と <code>postValue()</code> の２つの値更新メソッドがあります。</p>\n<p>はじめは <code>setValue()</code> しか知らなくてそれを使っていたのですが、非UIスレッドで（Retrofitのコールバックスレッドで） <code>setValue()</code> を使用したら IllegalなんとかException が出ました。<br>\nLiveData のコードを追ってみると、次図のようにUIスレッドかどうかをチェックして例外を出していました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">えー、 LiveData の setValue、 メインスレッドから呼ばないとエラーなのかー。それは observe 側（つまりView−Binding側）でマネージするもんじゃ・・・。 ReactiveProperty みてくれー。 <a href=\"https://t.co/jSkXT4LK8w\">pic.twitter.com/jSkXT4LK8w</a></p>&mdash; あめい@ハイドラ待ち (@amay077) <a href=\"https://twitter.com/amay077/status/926055527997566977?ref_src=twsrc%5Etfw\">2017年11月2日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>しかしその後、 @kkagurazaka さんに <code>postValue()</code> もあるよ！ と教えてもらいました。</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">MutableLiveData#postValueじゃだめですかね？</p>&mdash; Keita Kagurazaka (@kkagurazaka) <a href=\"https://twitter.com/kkagurazaka/status/926338659539853312?ref_src=twsrc%5Etfw\">2017年11月3日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"https://developer.android.com/reference/android/arch/lifecycle/MutableLiveData.html#postValue(T)\"><code>postVata</code></a> は、値の更新と通知をUIスレッド上で行ってくれるメソッドです。</p>\n<p>モデル側の処理は大抵は非同期すなわち非UIスレッドで行われることを前提にすると思うので、<code>setValue</code> は事実上使えないでしょう。</p>\n<p>そして、LiveData は UIスレッドに強く依存しているので、ViewModel から「向こう側」では使うべきではないでしょう。</p>\n<p>逆に <code>LiveData</code> の <code>observe</code> は、UIスレッドで行われることが保証されているので、わざわざ <code>runOnUiThread</code> などをする必要はなさそうです。</p>\n<h3 id=\"observablefield-%E3%81%A8%E4%BD%B5%E7%94%A8%E4%B8%8D%E5%8F%AF%EF%BC%9F\">ObservableField と併用不可？ <a class=\"direct-link\" href=\"#observablefield-%E3%81%A8%E4%BD%B5%E7%94%A8%E4%B8%8D%E5%8F%AF%EF%BC%9F\">#</a></h3>\n<p>さて DataBinding には <code>BaseObservale</code> の基底クラスまたは <code>ObservavleField</code> が必要です。 AAC を使う＝ <code>ViewModel</code> を基底クラスにすることが多いと想定されるので前者は実質死亡。となれば DataBinding したければ ObservableField を使うしかありません。しかし ObservableField と LiveData は現在はなんの関係もないクラスなので、</p>\n<ul>\n<li>DataBinding したいなら ObservableField</li>\n<li>Lifecycle aware なコードを書きたいなら LiveData</li>\n</ul>\n<p>という使い分けをしなければなりません。目的が違うとは言え、なんだか微妙です。</p>\n<h3 id=\"2017%2F12%2F21-%E8%BF%BD%E8%A8%98\">2017/12/21 追記 <a class=\"direct-link\" href=\"#2017%2F12%2F21-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>なんと LiveData が DataBinding に対応するようです。つまり <code>ObservableField&lt;T&gt;</code> は要らない子になる可能性？</p>\n<ul>\n<li><a href=\"https://medium.com/@star_zero/databinding%E3%81%A7livedata%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F-d74b3d267ad2\">DataBindingでLiveDataが使えるようになった – Kenji Abe – Medium</a></li>\n<li><a href=\"https://androidstudio.googleblog.com/2017/12/android-studio-31-canary-6-is-now.html\">Android Studio Release Updates: Android Studio 3.1 Canary 6 is now available</a></li>\n</ul>\n<blockquote>\n<p>You can now use a LiveData object as an observable field in data binding expressions.(続く)</p>\n</blockquote>\n<p>変更通知でなく「値を垂れ流すだけ」である LiveData をデータバインディングできるって、どうなっちゃうのか、すごく興味ありますね。続報を追っかけましょう。</p>\n<h2 id=\"solutions%EF%BC%9F\">Solutions？ <a class=\"direct-link\" href=\"#solutions%EF%BC%9F\">#</a></h2>\n<p>文句言ってるだけでは何の解決にもならないので、現状打てる手を模索してみます。<br>\nKotlin ならば拡張メソッドが使えるので、便利な拡張メソッドを作って使えばいいんじゃないかと。</p>\n<h3 id=\"%E3%80%8C%E5%80%A4%E3%81%8C%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E6%99%82%E3%81%A0%E3%81%91%E3%80%8D%E9%80%9A%E7%9F%A5%E3%82%92%E8%A1%8C%E3%81%86-livedata-%E3%81%AE%E6%8B%A1%E5%BC%B5%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%9C%E3%82%8B\">「値が変わった時だけ」通知を行う LiveData の拡張メソッドを作る <a class=\"direct-link\" href=\"#%E3%80%8C%E5%80%A4%E3%81%8C%E5%A4%89%E3%82%8F%E3%81%A3%E3%81%9F%E6%99%82%E3%81%A0%E3%81%91%E3%80%8D%E9%80%9A%E7%9F%A5%E3%82%92%E8%A1%8C%E3%81%86-livedata-%E3%81%AE%E6%8B%A1%E5%BC%B5%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>まず、「LiveData は値の変更に関係なく通知されてしまう」については、値が変わったかをチェックして、変わっていた時だけ通知を行うような拡張メソッドを作ってみました。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">fun</span> <span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> LiveData<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">.</span><span class=\"token function\">observeOnChanged</span><span class=\"token punctuation\">(</span>owner<span class=\"token operator\">:</span> LifecycleOwner<span class=\"token punctuation\">,</span> observer<span class=\"token operator\">:</span> Observer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> Unit <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">var</span> prev <span class=\"token operator\">:</span> T<span class=\"token operator\">?</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">observe</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> Observer<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>prev<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span> <span class=\"token operator\">?:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            observer<span class=\"token punctuation\">.</span><span class=\"token function\">onChanged</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><br>        prev <span class=\"token operator\">=</span> it<br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 使う方</span><br><span class=\"token keyword\">val</span> liveData <span class=\"token operator\">=</span> MutableLiveData<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>liveData<span class=\"token punctuation\">.</span><span class=\"token function\">observeOnChanged</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> Observer <span class=\"token punctuation\">{</span><br>    Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$it</span>\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>liveData<span class=\"token punctuation\">.</span><span class=\"token function\">postValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 最初の1回しか onChanged は呼ばれない</span></code></pre>\n<h2 id=\"%E3%82%84%E3%81%A3%E3%81%B1%E3%82%8A-observable%3Ct%3E-%E3%81%8C%E3%82%A4%E3%82%A4%EF%BC%81\">やっぱり <code>Observable&lt;T&gt;</code> がイイ！ <a class=\"direct-link\" href=\"#%E3%82%84%E3%81%A3%E3%81%B1%E3%82%8A-observable%3Ct%3E-%E3%81%8C%E3%82%A4%E3%82%A4%EF%BC%81\">#</a></h2>\n<p>LiveData の購読管理が楽になるところは良いんですけど、 <code>map</code> や <code>switchMap(flatMap かな)</code> など最低限の合成メソッドしかない点や、DataBinding との併用が面倒そうな点は微妙です。</p>\n<p>ViewModel の向こう側(Usecase層や Repository層)からの I/F は <code>Observable&lt;T&gt;</code> あるいは、それと相互変換可能なモノにしたいと考えると、ViewModel でも <code>Observable&lt;T&gt;</code> を使いたいものです。</p>\n<p>ということで、ObservableField と LiveData と RxJava をイイ感じで一緒に使う方法を考えてみたので、明日の 「<a href=\"https://qiita.com/advent-calendar/2017/rxjava\">RxJava Advent Calendar 2017 day 5</a>」 に書きます！</p>\n",
      "date_published": "2017-12-04T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/12/01/6a6d5855b3d0c46de126/",
      "url": "https://blog.amay077.net/blog/2017/12/01/6a6d5855b3d0c46de126/",
      "title": "Xamarin を使えば iPhone 端末が要らない、ワケがない",
      "content_html": "<p>今年も Advent Calendar 1番手、よろしくおねがいします。</p>\n<!--more-->\n<p>さて、Windows + Visual Studio 2017 を使った iOS アプリの開発でも、</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/cross-platform/windows/ios-simulator/\">Remoted iOS Simulator</a></li>\n<li><a href=\"https://www.xamarin.com/live\">Xamarin Live Player</a></li>\n</ul>\n<p>などの登場で、「おっ、これなら iPhone 端末なしで（Mac なしで) iOS アプリ開発できるんじゃね？」 という風説がチラホラ聞かれます。</p>\n<p>私は「んなことはない」と考えているのですが、実際どの辺が「ほら iPhone 実機必要でしょ？」なのかを検証してみようと思います。</p>\n<p>そして、 <strong>iPhone 実機が必要だということは Mac も必要だということになりますからね。Mac がないとアプリをビルドして実機に転送できないので。</strong></p>\n<p>今回は、 「iPhone 実機は必須」 → 「iPhone 実機がないと困ったことが起きる可能性がある」 → 「iPhone 実機でしか発生しないトラブルがある」 という観点で、「iPhone 実機でしか発生しないトラブル」は本当に実在するのかを調査しましょう。</p>\n<h2 id=\"xamarin.ios-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%8B%95%E4%BD%9C%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\">Xamarin.iOS アプリの動作の仕組み <a class=\"direct-link\" href=\"#xamarin.ios-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%8B%95%E4%BD%9C%E3%81%AE%E4%BB%95%E7%B5%84%E3%81%BF\">#</a></h2>\n<ul>\n<li><a href=\"http://www.buildinsider.net/mobile/insidexamarin/05\">Xamarin.iOSの仕組みとアプリケーションの構成 - Build Insider</a></li>\n</ul>\n<p>Xamarin.iOS のアプリ開発について、最初に知っておくべきことは、 <strong>「iPhone 実機向けと、iOS シミュレータ向けで、配布されるアプリケーションはまったく違う」</strong> ということです。</p>\n<p>iPhone 実機向けのビルドでは、 AOT(Ahead-Of-Time) コンパイラによって、 <strong>事前に</strong> プログラムをマシン語に変換されたものを配布します。Apple の制約で iOS 端末上では、動的なプログラムの実行が許可されていないためです。</p>\n<p>一方、 iOS シミュレータ向けのビルドでは、AOT ではなく JIT でアプリが動作します。なので AOT で生じる特有の「制約」が iOS シミュレータでは適用されないのです。</p>\n<p>しょせん、simulation は &quot;ニセモノ、まがい物&quot;、本物とは違うのです。<br>\n普通の思考なら、この時点で 「あっ、iPhone 実機要るわ」 となります、はい終了ー。</p>\n<h2 id=\"xamarin.ios---aot-%E3%81%AE%E5%88%B6%E7%B4%84%E3%82%92%E4%BD%93%E9%A8%93%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">Xamarin.iOS - AOT の制約を体験してみる <a class=\"direct-link\" href=\"#xamarin.ios---aot-%E3%81%AE%E5%88%B6%E7%B4%84%E3%82%92%E4%BD%93%E9%A8%93%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>これで終わってもアレなので、もうちょっと突っ込んでみましょう。<br>\nじゃあ AOT で生じる特有の「制約」って具体的には何よ？ということで、それを体験してみましょう。</p>\n<p>AOT での制限事項は次に書いてあります。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/ios/advanced_topics/limitations/\">Limitations - Xamarin</a></li>\n</ul>\n<p>ここに書いてある制限事項をトレースしてみましょう。</p>\n<h3 id=\"generic-subclasses-of-nsobjects-are-limited-%E2%86%92-%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D%3Aquestion%3A\">Generic Subclasses of NSObjects are limited → 実機だけで発生するか？=:question: <a class=\"direct-link\" href=\"#generic-subclasses-of-nsobjects-are-limited-%E2%86%92-%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D%3Aquestion%3A\">#</a></h3>\n<p>えーと、「<code>NSObjects</code> を基底クラスにして Generic クラスを作るのには制限がある」と書いてありますかね。<br>\nん？ 続いて &quot;While generic subclasses of NSObjects are possible, there are a few limitations. &quot; とあるので、なんかできるようになったっぽいです。わずかな制約はまだあるので油断は禁物、とも。</p>\n<p>試しにここに書いてある <code>class Foo&lt;T&gt; : UIView { }</code> というクラスを作って使ってみたのですが、実機でも特に問題なかったです。でも few limitations を確認してないので &quot;実機だけで発生するか？&quot; の評価は :question: で。</p>\n<h3 id=\"p%2Finvokes-in-generic-types---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D%3Ax%3A\">P/Invokes in Generic Types - 実機だけで発生するか？=:x: <a class=\"direct-link\" href=\"#p%2Finvokes-in-generic-types---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D%3Ax%3A\">#</a></h3>\n<p>「Generic なクラス内で <code>P/Invoke</code> は使えない」と書いてありますね。</p>\n<p>Xamarin.iOS プロジェクトで、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericType<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DllImport</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"System\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">extern</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> getpid <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>というクラスを定義すると、</p>\n<blockquote>\n<p>The DllImport attribute cannot be applied to a method that is generic or contained in a generic type. (CS7042)</p>\n</blockquote>\n<p>というエラーがビルド時に出て進めません。これはシミュレータ向けでも実機向けでも同じです。また PCL プロジェクトでは <code>DllImport</code> 自体が使用できません。</p>\n<p>よって、この件について「実機だけで発生するか？」の問いには &quot;No&quot; の回答、:x: です。</p>\n<h3 id=\"property.setinfo-on-a-nullable-type-is-not-supported---%E8%A9%95%E4%BE%A1%E3%81%A7%E3%81%8D%E3%81%9A\">Property.SetInfo on a Nullable Type is not supported - 評価できず <a class=\"direct-link\" href=\"#property.setinfo-on-a-nullable-type-is-not-supported---%E8%A9%95%E4%BE%A1%E3%81%A7%E3%81%8D%E3%81%9A\">#</a></h3>\n<p>Nullable Type どころか、Xamarin.iOS どころか、Xamarin.Android でも、普通のオブジェクトに対しても <code>Property.SetInfo</code> を機能させることができませんでしたー。ちょっと時間切れで割愛。</p>\n<h3 id=\"value-types-as-dictionary-keys---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D-%3Aquestion%3A\">Value types as Dictionary Keys - 実機だけで発生するか？= :question: <a class=\"direct-link\" href=\"#value-types-as-dictionary-keys---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D-%3Aquestion%3A\">#</a></h3>\n<p>「値型を <code>Dictionary</code> のキーにすると実機でクラッシュする」と書いてあるように見えます、ほうほう。</p>\n<p><code>ValueType</code> から直接派生させる方法を知らないので、次のような struct を作って <code>Dictionary</code> のキーに突っ込んでみました。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">MyKey</span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Id <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Register</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"AppDelegate\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppDelegate</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>iOS<span class=\"token punctuation\">.</span>FormsApplicationDelegate<br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">FinishedLaunching</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> app<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSDictionary</span> options<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>MyKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyKey</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"aaa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyKey</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"bbb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyKey</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ccc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">.</span><span class=\"token function\">ContainsKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyKey</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            dic<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyKey</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>dic<span class=\"token punctuation\">.</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        ＜以下省略＞</code></pre>\n<p>特にクラッシュはしないですね、シミュレータでも実機でも。<br>\nしかしこんな簡単なケースだったらもっと大事になってる気がするし、この症状の再現方法に不安があるので :question: で。</p>\n<p>**2017/12/01 PM 追記 **</p>\n<p>この制限、もうないそうですｗ</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Dictionaryの制約はもう無いってさ <a href=\"https://t.co/XSSsRAwUBo\">pic.twitter.com/XSSsRAwUBo</a></p>&mdash; Atsushi Eno (@atsushieno) <a href=\"https://twitter.com/atsushieno/status/936421845527646208?ref_src=twsrc%5Etfw\">2017年12月1日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"no-dynamic-code-generation\">No Dynamic Code Generation <a class=\"direct-link\" href=\"#no-dynamic-code-generation\">#</a></h2>\n<p>本題っぽくなってきました。<br>\n<code>Reflection.Emit</code> とか動的言語ランタイム(DLR)、Remoting は動きませんよー、と書いてあります。Remoting は調査してませんのであしからず。</p>\n<h3 id=\"refrection.emit---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D-%3Ax%3A\">Refrection.Emit - 実機だけで発生するか？= :x: <a class=\"direct-link\" href=\"#refrection.emit---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D-%3Ax%3A\">#</a></h3>\n<p>実は使ったことないので、精鋭が書いたネットのコピペを元にやってみたんですが、どうも必要なクラスやメンバが Xamarin.iOS では公開されてない（あるいは実装されてない）っぽくて、シミュレータでも実機でも動作しませんでした。</p>\n<h3 id=\"dynamic-%E5%9E%8B---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D-%3Ax%3A\">dynamic 型 - 実機だけで発生するか？= :x: <a class=\"direct-link\" href=\"#dynamic-%E5%9E%8B---%E5%AE%9F%E6%A9%9F%E3%81%A0%E3%81%91%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F%3D-%3Ax%3A\">#</a></h3>\n<p>DLR が提供する代表的な機能である <code>dynamic</code> 型はどうでしょう？</p>\n<p>DLR を使用するには <code>Microsoft.CSharp</code> を nuget や参照の追加で Xamarin.iOS プロジェクトに追加する必要があります。</p>\n<p>その上で、次のような(<a href=\"http://ufcpp.net/study/csharp/sp4_dynamic.html\">&quot;C# でぐぐれ！&quot;の人のサイトからの</a>)コードを実行してみました。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">dynamic</span></span> <span class=\"token function\">GetX</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> obj<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">FinishedLaunching</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> app<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSDictionary</span> options<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ret <span class=\"token operator\">=</span> <span class=\"token function\">GetX</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Point</span> <span class=\"token punctuation\">{</span> X <span class=\"token operator\">=</span> <span class=\"token number\">999</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    ＜以下省略＞</code></pre>\n<p>このコードも、シミュレータでは当然動作しますが、なんと実機で動作します。どうなっとるんじゃい。<br>\nというわけでこれも :x:</p>\n<p>これについては、2014年にリリースされた Mono 3.2.7 で、</p>\n<ul>\n<li><a href=\"http://www.mono-project.com/docs/about-mono/releases/3.2.7/\">New in Mono 3.2.7 | Mono</a></li>\n</ul>\n<blockquote>\n<p>System.Core now has an interpreter for LINQ expressions and dynamic statements that can be used by FullAOT runtimes.</p>\n</blockquote>\n<p>と書かれているので、それの恩恵かなと推測されます。<br>\nまた、最近でも、</p>\n<ul>\n<li><a href=\"http://www.mono-project.com/news/2017/11/13/mono-interpreter/\">Mono's New .NET Interpreter | Mono</a></li>\n</ul>\n<p>という話題があり、 <code>Reflection.Emit</code> もイケちゃうかもみたいな記述もあります。この辺りが好きな方は是非「<a href=\"https://qiita.com/advent-calendar/2017/aot\">AOT技術 Advent Calendar 2017</a>」へ投稿をお願いします。 :pray:</p>\n<h3 id=\"reverse-callbacks\">Reverse Callbacks <a class=\"direct-link\" href=\"#reverse-callbacks\">#</a></h3>\n<p>よくわからないので、割愛 :bow:</p>\n<h2 id=\"%E3%81%93%E3%81%93%E3%81%BE%E3%81%A7%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">ここまでのまとめ <a class=\"direct-link\" href=\"#%E3%81%93%E3%81%93%E3%81%BE%E3%81%A7%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>さて <a href=\"https://developer.xamarin.com/guides/ios/advanced_topics/limitations/\">Limitations - Xamarin</a> を辿ってきましたが、明確に 「iPhone実機でのみ動作しないという制限」 は確認できませんでした。</p>\n<p>しかし、制限そのものが確認できなかったり、細かい制約はあるので、安心して「実機のみ動作しないことはない」とは言い切れません。</p>\n<h2 id=\"%E3%83%AA%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%AE%E3%81%8A%E4%BB%95%E4%BA%8B---%E3%81%BF%E3%81%AA%E3%81%95%E3%82%93%E3%81%8C%E3%80%8Caot-%E3%81%AE%E3%81%9B%E3%81%84%E3%80%8D%E3%81%A8%E6%99%AE%E6%AE%B5%E8%A8%80%E3%81%A3%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%AF%E3%81%9F%E3%81%B6%E3%82%93%E3%81%93%E3%81%A3%E3%81%A1\">リンカーのお仕事 - みなさんが「AOT のせい」と普段言ってるのはたぶんこっち <a class=\"direct-link\" href=\"#%E3%83%AA%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%AE%E3%81%8A%E4%BB%95%E4%BA%8B---%E3%81%BF%E3%81%AA%E3%81%95%E3%82%93%E3%81%8C%E3%80%8Caot-%E3%81%AE%E3%81%9B%E3%81%84%E3%80%8D%E3%81%A8%E6%99%AE%E6%AE%B5%E8%A8%80%E3%81%A3%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%AF%E3%81%9F%E3%81%B6%E3%82%93%E3%81%93%E3%81%A3%E3%81%A1\">#</a></h2>\n<p>とは言え、iPhone 実機でのみ動作しないコードに遭遇するという体験は確かにあります。</p>\n<p>例えば次のコード</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> typeName <span class=\"token operator\">=</span> <span class=\"token string\">\"System.Net.WebClient, System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e\"</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> type <span class=\"token operator\">=</span> Type<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span>typeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> Activator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInstance</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>client<span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>AssemblyQualifiedName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>厳密名で指定してるから長いけど、要は「型を示す文字列からインスタンスを生成する」という処理。できる限り実装を外部から注入できるようにするとどこかで使うやつですね。</p>\n<p>このコード、iOSシミュレータでは動作しますが、iPhone 実機では動作しません（<code>type</code> が <code>null</code>、つまりそんな型はない、と言われます）。</p>\n<p>.NETフレームワークのクラスのひとつである「System.Net.WebClient」は確かに存在しているはずなのに、「ない」と言われる、なぜか？<br>\nそこで気にすべき存在が「リンカー」です。</p>\n<h3 id=\"%E3%80%8Cxamarin.ios-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%AA%E3%83%B3%E3%82%AB%E3%83%BC%E3%80%8D%E3%81%A8%E3%81%AF%E3%81%AA%E3%81%AB%E3%81%8B%EF%BC%9F\">「Xamarin.iOS におけるリンカー」とはなにか？ <a class=\"direct-link\" href=\"#%E3%80%8Cxamarin.ios-%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%AA%E3%83%B3%E3%82%AB%E3%83%BC%E3%80%8D%E3%81%A8%E3%81%AF%E3%81%AA%E3%81%AB%E3%81%8B%EF%BC%9F\">#</a></h3>\n<p>リンカー(linker)とは、ソースコードを最終的に実行可能プログラムにするまでに登場するツールの一つですが、その辺のはなしは「compiler, linker」などとググればたくさん出てくるのでそちらで。</p>\n<p>Xamarin.iOS の文脈での「リンカー」のお仕事は、</p>\n<ul>\n<li>アプリケーションには不要な（=使用されないと判断した)クラスやメンバーを削除すること</li>\n</ul>\n<p>だと思っておけばよいでしょう。 Android だと ProGuard、.NET だと DotFuscator などの「難読化ツール」が持つ副次的な機能に「<a href=\"https://www.agtech.co.jp/products/preemptive/dotfuscator/featuresinfo.html#fet05\">不要コードの除去</a>」がありますが、それと同じようなものだと理解できます。</p>\n<p>つまり、先のコードに出てきた <code>System.Net.WebClient</code> は、静的なソースコード解析によって「不要だと判断されて」削除されてしまいました。文字列の中に記述されているとはリンカーは知る由もありません。</p>\n<p>では、なぜ iOSシミュレータでは動作するのでしょう？<br>\nとここで Xamarin.iOS プロジェクトの設定を見てみましょう。</p>\n<p><strong>実機向けビルドの設定</strong></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/7e56bf75-0b66-7987-0376-f8b0757d3f4a.png\" alt=\"image.png\"></p>\n<p><strong>iOSシミュレータ向けビルドの設定</strong></p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/c6b363ef-dcfb-2eeb-8e30-849c48381915.png\" alt=\"image.png\"></p>\n<p>はい、このように</p>\n<ul>\n<li>実機向けの場合は「フレームワークSDKのみをリンクする」</li>\n<li>シミュレータ向けの場合は「リンクしない」</li>\n</ul>\n<p>となっていました。つまりシミュレータ向けのアプリは「不要なコードを削除する処理が行われていない」ということになり、すべてのクラスが使用できていました。</p>\n<p>逆に言えば、 <strong>シミュレータ向けのビルド設定を「フレームワークSDKのみをリンクする」にすれば、実機と同じように上記コードは動作しなくなります</strong> 。</p>\n<p>シミュレータでは AOT は使用されないのに、実機と同じ症状を発生させられるのだから、これは 「AOT のせい」ではないことがわかります。</p>\n<p>おそらく一般的に「AOT のせいで iOS 実機で動作しない」と言われている事象のほとんどは「実はリンカーのせい」だと思われます。</p>\n<p>例えばこれ↓とか</p>\n<ul>\n<li><a href=\"https://qiita.com/amay077/items/3a6f50cede3425fc9f3f\">Xamarin.iOS の AOT に気をつけろ！Rx の FromEventPattern を使うときの注意点</a></li>\n</ul>\n<p>書いたのオマエかよw</p>\n<p>なので、このトラブルは、iOSシミュレータ向けのビルド設定を「リンクする」に変更することで発見可能です。あれ、ここでも iPhone 実機必要なくなっちゃった。:sweat_smile:</p>\n<p>（実機向けのビルド設定を「リンクしない」にしても同様に動作しますが、配布する <code>.ipa</code> にデータサイズが巨大になってしまうので現実解ではないです。）</p>\n<h3 id=\"%E3%83%AA%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%AB%E6%B6%88%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF%EF%BC%9F\">リンカーに消されないようにするには？ <a class=\"direct-link\" href=\"#%E3%83%AA%E3%83%B3%E3%82%AB%E3%83%BC%E3%81%AB%E6%B6%88%E3%81%95%E3%82%8C%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E3%81%AB%E3%81%AF%EF%BC%9F\">#</a></h3>\n<p>次の３つの方法があります。</p>\n<ol>\n<li>どこか1箇所でいいから、型を明示的にソースコード中に書く</li>\n<li>消されたくないクラスに <code>Preserve</code> 属性を付ける</li>\n<li>ビルド設定で「除外するアセンブリ」を指定する</li>\n</ol>\n<p>1 が一番よく行う方法です。アプリの static コンストラクタに</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token function\">AppDelegate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dummy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>WebClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>などと書いておくだけでOKです。デメリットは、使用する実装クラスが予めわかっている必要があること、インスタンス生成のコストが発生することです。</p>\n<p>ライブラリでも、「とりあえずアプリ起動時に <code>MyLib.Init()</code> を呼べ」みたいなものがありますが、それもリンカー対策のために必須としていると思ってもよいでしょう。</p>\n<p>2 はライブラリ開発者側の話で、これは、消されるとまずいぞとわかっているクラスやメンバに <code>[Preserve]</code> という属性を付けておくと、リンカーさんは、それがついているクラスを無視してくれるというものです。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/ios/advanced_topics/linker/#Preserving_Code\">Preserving Code ｜ Linking on iOS - Xamarin</a></li>\n</ul>\n<p>デメリットは、ライブラリ開発者しか使えないということです。ライブラリ使用者つまりアプリ開発者は、問題が発生したライブラリに対して、この方法は適用できません。</p>\n<p>3 はビルド設定で、リンカーの対象外にするアセンブリを指定する、というものです。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/ios/advanced_topics/linker/#Skipping_Assemblies\">Skipping Assemblies ｜ Linking on iOS - Xamarin</a></li>\n</ul>\n<p>デメリットというか、どこに何を設定すれば機能するのか分からないんですよね、IDEでは。。。</p>\n<h2 id=\"%E3%81%95%E3%81%84%E3%81%94%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">さいごのまとめ <a class=\"direct-link\" href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>AOT の制限 -&gt; 実機でのみ再現する事象は確認できなかった(未確認な制限あり)</li>\n<li>リンカーによるトラブル -&gt; iOSシミュレータでもビルド設定を「リンクする」に変えれば未然に防げる</li>\n</ul>\n<p>あれ？ iOSシミュレータだけでも結構イケる？？？</p>\n<p>ままま、まあシミュレータは所詮シミュレータなんで！いつも実機で開発してないと、いざデプロイするときに絶対問題起こるんで！！:cold_sweat::sweat_drops:</p>\n<p>しかし会社の方針？とかでiPhone実機が提供されず、シミュレータしか使えない環境の人は、せめてビルド設定だけは変えておきましょう。</p>\n<p>ただし「Xamarin Live Playerだけ使えばOK」その考えはダメ。なぜならこれは「あなたのコードを、iOS アプリっぽい画面にインタラクティブに表示させるアプリ」だからです。</p>\n<h3 id=\"%E3%81%9D%E3%81%93%E3%81%A7-visual-studio-app-center-%E3%81%A7%E3%81%99%E3%82%88%EF%BC%88%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F%EF%BC%89\">そこで Visual Studio App Center ですよ（ですか？） <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%93%E3%81%A7-visual-studio-app-center-%E3%81%A7%E3%81%99%E3%82%88%EF%BC%88%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F%EF%BC%89\">#</a></h3>\n<p>Visual Studio Mobile Center から名称変更して正式リリースとなった <a href=\"https://azure.microsoft.com/ja-jp/services/app-center/\">Visual Studio App Center</a> は、 <a href=\"https://www.xamarin.com/test-cloud\">Xamarin Test cloud</a> のサブセット？を内包しており、雲の向こう側にある「実際の端末」を使ってテストができます。継続的に実機でテストが実施できるとしたら、それはとても恵まれた環境でしょう。けど、開発時に常時使うもんじゃないよね。</p>\n",
      "date_published": "2017-12-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/11/30/b04427aeab4f10ec24f6/",
      "url": "https://blog.amay077.net/blog/2017/11/30/b04427aeab4f10ec24f6/",
      "title": "RxJava の combineLatest のコード例",
      "content_html": "<p>RxJava の combineLatest、overload がたくさんあって一発で書けた試しがないので、うまく書けた例を置いておきます。</p>\n<!--more-->\n<p><code>name</code> と <code>age</code> のいずれかの <code>Observable&lt;T&gt;</code> が変化したときに、 &quot;name - 歳:age&quot; な文字列を push するというものです。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> name <span class=\"token operator\">=</span> PublishSubject<span class=\"token punctuation\">.</span>create<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">val</span> age <span class=\"token operator\">=</span> PublishSubject<span class=\"token punctuation\">.</span>create<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// 型引数指定と BiFunction は省略できないみたい</span><br>Observable<span class=\"token punctuation\">.</span>combineLatest<span class=\"token operator\">&lt;</span>String<span class=\"token punctuation\">,</span> Int<span class=\"token punctuation\">,</span> String<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><br>        name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> BiFunction <span class=\"token punctuation\">{</span> n<span class=\"token punctuation\">,</span> a <span class=\"token operator\">-></span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$n</span> - 歳:<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>a<span class=\"token delimiter variable\">}</span></span>\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"combineLatest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onNext - <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// RxKotlin を導入すると型推論が効くとコメントで教えてもらいました</span><br>Observables<span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> n<span class=\"token punctuation\">,</span> a <span class=\"token operator\">-></span> <span class=\"token string\">\"<span class=\"token interpolation variable\">$n</span> - 歳:<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>a<span class=\"token delimiter variable\">}</span></span>\"</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"combineLatest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onNext - <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><span class=\"token comment\">// Observable&lt;T> を配列で渡せるけど、第2引数の combiner が Any な配列になっちゃう</span><br>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span><span class=\"token function\">arrayOf</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> n <span class=\"token operator\">=</span> it<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> String<br>    <span class=\"token keyword\">val</span> a <span class=\"token operator\">=</span> it<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> Int<br>    <span class=\"token string\">\"<span class=\"token interpolation variable\">$n</span> - age:<span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>a<span class=\"token delimiter variable\">}</span></span>\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>            Log<span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"combineLatest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onNext - <span class=\"token interpolation\"><span class=\"token delimiter variable\">${</span>it<span class=\"token delimiter variable\">}</span></span>\"</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br><br>name<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"saito\"</span><span class=\"token punctuation\">)</span><br>age<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><br>name<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yoshida\"</span><span class=\"token punctuation\">)</span></code></pre>\n",
      "date_published": "2017-11-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/11/28/37e1032f2a8f30138284/",
      "url": "https://blog.amay077.net/blog/2017/11/28/37e1032f2a8f30138284/",
      "title": "C# + ReactiveProperty vs Kotlin + RxProperty : Command 編",
      "content_html": "<p>ボタンを押したら、数値が１ずつ加算されていく、というやつの ViewModel 側</p>\n<!--more-->\n<h2 id=\"c%23-%2B-reactiveproperty-%E3%81%AE%E5%A0%B4%E5%90%88\">C# + ReactiveProperty の場合 <a class=\"direct-link\" href=\"#c%23-%2B-reactiveproperty-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p><code>Counter</code> がラベルにバインドする数値、 <code>Increment</code> がボタンにバインドするコマンド。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewModel</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> Counter <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveCommand</span> Increment <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <br><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Increment コマンドは、 Counter が 10 未満の間、使用可能</span><br>        Increment <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// Increment コマンドが実行されたら Counter を +1 してく</span><br>        Increment<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Counter<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> Counter<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"kotlin-%2B-rxproperty-%E3%81%AE%E5%A0%B4%E5%90%88\">Kotlin + RxProperty の場合 <a class=\"direct-link\" href=\"#kotlin-%2B-rxproperty-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p><code>counter</code> がラベルにバインドする数値、 <code>increment</code> がボタンにバインドするコマンド。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">class</span> MainViewModel <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">val</span> counter <span class=\"token operator\">=</span> RxProperty<span class=\"token operator\">&lt;</span>Int<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br><br>    <span class=\"token comment\">// Increment コマンドは、 Counter が 10 未満の間、使用可能</span><br>    <span class=\"token keyword\">val</span> increment <span class=\"token operator\">=</span> RxCommand<span class=\"token operator\">&lt;</span>Unit<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span> <span class=\"token punctuation\">{</span> it <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Increment コマンドが実行されたら Counter を +1 してく</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> counter<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>counter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!!</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>C# は言語の仕様？で、読み取り専用プロパティの定義のなかで他のプロパティを参照できない。のでコンストラクタに書く。</p>\n<p>Kotlin はその辺のしがらみが少ないので、思った通りに書ける感じ。<br>\nさらに <code>.apply</code> 関数で Command の subscribe 処理も定義できるので、結果コンストラクタに書くことがなくなりました、スッキリ。</p>\n<p>Android + Kotlin な人は、 RxProperty もっと使っていきましょー</p>\n<ul>\n<li><a href=\"https://qiita.com/k-kagurazaka@github/items/3fc1fc19ea608cac9913\">RxPropertyでRxJavaとAndroid Data Bindingを連携する - Qiita</a></li>\n</ul>\n<p>コードの短さだと Kotlin だし、この C# の <code>MainViewModel.cs</code> は、Xamarin(Android, iOS, Mac) や Windows など全部共通実装でいけちゃう。</p>\n<p>どちらも良い。</p>\n",
      "date_published": "2017-11-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/11/22/getting_started_reactiveproperty_with_xamarin_forms_in_winter_2017/",
      "url": "https://blog.amay077.net/blog/2017/11/22/getting_started_reactiveproperty_with_xamarin_forms_in_winter_2017/",
      "title": "2017年冬から始める ReactiveProperty + Xamarin.Forms",
      "content_html": "<p>つい最近まで PCL な Xamarin.Forms では、 ReactiveProperty の 2.x 系しか使えないと思っていたのですが、いろいろな方の協力で使える方法が分かったので示しておく。</p>\n<!--more-->\n<p>今から ReactiveProperty を（Xamarin で）使ってみたいぞ、という人向けのクイックスタートも兼ねております。</p>\n<h2 id=\"1.-%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B\">1. ソリューションを作る <a class=\"direct-link\" href=\"#1.-%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>Visual Studio for Mac で行きます。</p>\n<p>新しいソリューションから、 アプリ - 空白フォームのアプリ を選んで、適当な名前で作成します。ここでは 「ReactivePropertySample」 としますね。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/8cfdeb53-c9d5-1134-b9d7-042a3a9f5536.png\" alt=\"image.png\"></p>\n<h2 id=\"2.-pcl-%E3%81%AE%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-%2244%22-%E3%81%AB%E5%A4%89%E3%81%88%E3%82%8B\">2. PCL のプロファイルを &quot;44&quot; に変える <a class=\"direct-link\" href=\"#2.-pcl-%E3%81%AE%E3%83%97%E3%83%AD%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-%2244%22-%E3%81%AB%E5%A4%89%E3%81%88%E3%82%8B\">#</a></h2>\n<p>ソリューションが作成できたら、３つあるプロジェクトの中のコアプロジェクト(.Droid や .iOS のついてないもの)を選択して右クリック → 「オプション」を開きます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/7d58f3ae-6641-a079-8fe1-08770a6c3bdd.png\" alt=\"image.png\"></p>\n<p>ダイアログから、「ビルド」 → 「全般」を選択して、Target Framework の 「.NET ポータブル」の横にある「変更」を押し、プロファイルを <strong>「PCL 4.6 - Profile44」</strong> に変更して OK を押します。対応プラットフォームから Windows Phone のチェックが外れますが <strong>まったく問題ありません</strong> 。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/62a20ef9-1a16-41f9-8c4d-7be50d4a3c31.png\" alt=\"snap1.png\"></p>\n<h2 id=\"3.-system.runtime.interopservices.runtimeinformation-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">3. System.Runtime.InteropServices.RuntimeInformation の nuget パッケージを追加する <a class=\"direct-link\" href=\"#3.-system.runtime.interopservices.runtimeinformation-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>@yamachu さんが書かれた、</p>\n<ul>\n<li><a href=\"http://teitoku-window.hatenablog.com/entry/2017/11/18/185501\">XamarinなどのPCLプロジェクトにSystem.Reactiveを導入しようとすると失敗することへの対策 - 窓を作っては壊していた人のブログ</a></li>\n</ul>\n<p>の通りです。ReactiveProperty 3.x が依存している System.Reactive をインストールするには、まず<br>\nSystem.Runtime.InteropServices.RuntimeInformation を入れる必要があります。</p>\n<p>コアプロジェクトを選択して、 メニュー → プロジェクト → Nuget パッケージの追加 とし、右上検索ボックスに &quot;System.Runtime.InteropServices.RuntimeInformation&quot; をタイプして絞り込みます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/8d61fc47-b069-a850-873b-824c8c1c2bf2.png\" alt=\"snap2.png\"></p>\n<p>見つかったら、右下の追加ボタンでインストールします。現在の最新バージョンは 4.3.0 です。</p>\n<h2 id=\"4.-system.reactive-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">4. System.Reactive の nuget パッケージを追加する <a class=\"direct-link\" href=\"#4.-system.reactive-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>次に、ReactiveProperty 3.x が依存している System.Reactive をインストールします（いきなり ReactiveProperty を入れてもよいのかもだけど、まあ順番にやってみましょう）。</p>\n<p>方法は 3. と同じです。 nuget のダイアログボックスで System.Reactive とタイプして、結果から選択して追加します（雑になってきたｗ）。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/52afd47b-5998-6ac3-90d8-c38c47fa6afe.png\" alt=\"snap3.png\"></p>\n<h2 id=\"5.-reactiveproperty-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">5. ReactiveProperty の nuget パッケージを追加する <a class=\"direct-link\" href=\"#5.-reactiveproperty-%E3%81%AE-nuget-%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ついに ReactiveProperty のインストールです。 3. 4. と同じ方法で追加しましょう（雑）。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/42902eb0-9f29-0e3b-e9b0-5d00d0ab7021.png\" alt=\"snap4.png\"></p>\n<p>バージョン 3.x 系をついにいれる事ができました。現在の最新stableは 3.6.0 です。</p>\n<p>できてしまえば簡単ですが、この方法に辿りつくまでに多くの労力と時間とご協力をいただきました。みなさまありがとうございました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">うーん，なんというか微妙なハックですけど，System.Runtime.InteropServices.RuntimeInformation 4.0.0(Reactive 3.1.1が依存しているバージョン)の依存にMicrosoft.NETCore.Platformsが含まれていて，そのせいでPCLのでの展開が出来ないんじゃないかなぁと睨んでいます．</p>&mdash; 留まり奈緒 (@y_chu5) <a href=\"https://twitter.com/y_chu5/status/931805975878582274?ref_src=twsrc%5Etfw\">2017年11月18日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">PCL Profile111 が Windows Phone を含んでるならそのせいですね</p>&mdash; かずき@66.8kg (@okazuki) <a href=\"https://twitter.com/okazuki/status/932919102351450112?ref_src=twsrc%5Etfw\">2017年11月21日</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"reactiveproperty-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">ReactiveProperty を使ってみよう <a class=\"direct-link\" href=\"#reactiveproperty-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">#</a></h2>\n<p>せっかくいれたのでちゃちゃっと使ってみましょう。<br>\nぜんぶコアプロジェクトでやります。</p>\n<h3 id=\"i.-mainviewmodel-%E3%82%92%E4%BD%9C%E3%82%8B\">I. MainViewModel を作る <a class=\"direct-link\" href=\"#i.-mainviewmodel-%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p><code>MainViewModel</code> というクラスを作って、次のように書きます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Reactive<span class=\"token punctuation\">.</span>Bindings</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ReactivePropertySample</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewModel</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">></span></span> Counter <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            Counter <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Interval</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>Counter</code> という変更通知プロパティを ReactiveProperty を使ってつくります。<br>\nReactive Extensions の機能を使って、「１秒おきに１ずつカウントアップ」していきます。</p>\n<h3 id=\"ii.-%E7%94%BB%E9%9D%A2(page)%E3%81%A8%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B\">II. 画面(Page)とバインドする <a class=\"direct-link\" href=\"#ii.-%E7%94%BB%E9%9D%A2(page)%E3%81%A8%E3%83%90%E3%82%A4%E3%83%B3%E3%83%89%E3%81%99%E3%82%8B\">#</a></h3>\n<p>プロジェクトを作った時に <code>ReactivePropertySamplePage.xaml</code> という画面ができていると思うので、それを編集します。 XAML の編集だけでいきましょう。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage</span> <br>    <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xamarin.com/schemas/2014/forms<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/winfx/2009/xaml<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>local</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clr-namespace:ReactivePropertySample<span class=\"token punctuation\">\"</span></span> <br>    <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ReactivePropertySample.ReactivePropertySamplePage<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage.BindingContext</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">local:</span>MainViewModel</span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ContentPage.BindingContext</span><span class=\"token punctuation\">></span></span><br>    <br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding Counter.Value}<span class=\"token punctuation\">\"</span></span> <br>        <span class=\"token attr-name\">VerticalOptions</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Center<span class=\"token punctuation\">\"</span></span> <br>        <span class=\"token attr-name\">HorizontalOptions</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Center<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ContentPage</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code>&lt;ContentPage.BindingContext&gt;</code> で、 <code>MainViewModel</code> をバインド対象としています。<br>\nそして、ラベルの Text に <code>&quot;{Binding Counter.Value}&quot;</code> と書くことで、 Counter 値をデータバインドしています。 <strong>.Value を付けるのを忘れずに！</strong>（と言っても忘れるんだよ、分かる。みんなやってる。）</p>\n<h3 id=\"iii.-%E5%8B%95%E3%81%8B%E3%81%99\">III. 動かす <a class=\"direct-link\" href=\"#iii.-%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h3>\n<p>OK, これで完成です。 Android でも iOS でも動きます。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/0166bdbd-c0e0-4c6f-8289-49fec91335bf.gif\" alt=\"Untitled2.gif\"></p>\n<p>文字ちっさ！</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>最新の環境で ReactiveProperty を使う方法を紹介しました。</p>\n<p>ReactiveProperty は、Reactive Extension のパワーを View とのデータバインディングにそのまま活用できる、現代においては必須のライブラリです。<br>\nもちろん、変更通知プロパティを手書きする手間をなくす目的で使うのもよいですね。</p>\n<p>「ReactiveProperty のここがすごい！」というのをもう少し、別記事で紹介していきたいと思います。</p>\n<p>ちなみに、コアプロジェクトが PCL でなく .NET Standard なら、もうちょっといろいろ楽…なハズ！それについては誰かが書いてくれることを望みます :pray:</p>\n<h2 id=\"%E3%81%8A%E3%81%BE%E3%81%91\">おまけ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">#</a></h2>\n<p>これだけなのにインストールされたパッケージ群がえらいことになった。。。。</p>\n<p><img src=\"https://qiita-image-store.s3.amazonaws.com/0/8227/cf41f313-9ab7-2bd1-5736-f8551d701029.png\" alt=\"snap5.png\"></p>\n",
      "date_published": "2017-11-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/10/18/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center/",
      "url": "https://blog.amay077.net/blog/2017/10/18/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center/",
      "title": "Kotlin製のAndroidアプリを Visual Studio Mobile Center でビルドして DeployGate にアップロードする",
      "content_html": "<p>タイトル長いｗ</p>\n<!--more-->\n<h2 id=\"vsmc-%E3%81%A8%E3%81%AF\">VSMC とは <a class=\"direct-link\" href=\"#vsmc-%E3%81%A8%E3%81%AF\">#</a></h2>\n<p>Visual Studio Mobile Center(以下 VSMC) は Microsoft が提供している CI サービスです。</p>\n<ul>\n<li><a href=\"https://codezine.jp/article/detail/10095\">iOS／Androidアプリの開発を支援する「Visual Studio Mobile Center （preview）」を使ってみよう (1/5)：CodeZine（コードジン）</a></li>\n</ul>\n<p>あまり知られていないでしょうが、 Java/Kotlin で書かれた普通の Android アプリもビルドできます。（そしてもちろん Swift 製の iOS アプリも対応してます。あと React Native もな。）</p>\n<p>Kotlin/Java な Android Studio プロジェクトのレポジトリを VSMC に設定してやるだけでビルドまではできるのでなんにも難しいことはないです。</p>\n<ul>\n<li><a href=\"https://dev.classmethod.jp/smartphone/visual-studio-mobile-center-ios-app-build/\">Visual Studio Mobile CenterでiOSアプリをビルドしてみた ｜ Developers.IO</a></li>\n</ul>\n<p>今日のメインは、VSMC でもようやくビルド後にスクリプトを実行させることができるようになったので、その紹介です。</p>\n<h2 id=\"vsmc-%E3%81%8C%E3%83%93%E3%83%AB%E3%83%89%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F\">VSMC がビルドスクリプトに対応した <a class=\"direct-link\" href=\"#vsmc-%E3%81%8C%E3%83%93%E3%83%AB%E3%83%89%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%81%AB%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%9F\">#</a></h2>\n<ul>\n<li><a href=\"https://docs.microsoft.com/en-us/mobile-center/build/custom/scripts/\">Build Scripts ｜ Visual Studio Mobile Center ｜ Microsoft Docs</a></li>\n</ul>\n<p>これによると、プロジェクトのレポジトリに、特定のスクリプトファイルを入れておくと、ビルド後（やビルド前）に、そのスクリプトファイルを実行してくれる、というものです。</p>\n<p>現在は、３つのトリガに対応していて、それぞれ次に示すファイル名のスクリプトファイルをリポジトリのプロジェクトディレクトリにおいておきます。</p>\n<ul>\n<li>Post-clone(クローン後) - <code>mobile-center-post-clone.sh</code></li>\n<li>Pre-build(ビルド前) - <code>mobile-center-pre-build.sh</code></li>\n<li>Post-build(ビルド後) - <code>mobile-center-post-build.sh</code></li>\n</ul>\n<p>プロジェクトディレクトリとは、Android Studio プロジェクトの場合、プロジェクトの <code>build.gradle</code> がある場所、大抵は <code>app</code> ディレクトリになります（下図参照）。</p>\n<p><img src=\"/img/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_01.png\" alt=\"01\"></p>\n<p>試しにビルドされた apk ファイルを DeployGate にアップロードする、というのをやってみます。<br>\nVSMC にもアプリの配信機能はありますが、社内で既に DeployGate を使っているし、DeployGate の方が専用アプリが用意されていてβテストサービスとしては勝っているので、今回例としました。</p>\n<p>まず、当然ながら DeployGate 側の準備が必要です。ユーザー登録をして、手動でビルドした apk を DeployGate にアップロードしておきます。</p>\n<p>そして、次のようなファイルを <code>mobile-center-post-build.sh</code> というファイル名で <code>app</code> ディレクトリの中に入れておきます。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/env bash</span><br><br><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"Upload to DeployGate\"</span><br><br><span class=\"token function\">curl</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"token={deploygateのAPI key}\"</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"file=@<span class=\"token variable\">$MOBILECENTER_OUTPUT_DIRECTORY</span>/app-release.apk\"</span> <span class=\"token punctuation\">\\</span><br>  -F <span class=\"token string\">\"message=build by Visual Studio Mobile Center - #<span class=\"token variable\">$MOBILECENTER_BUILD_ID</span>\"</span> <span class=\"token punctuation\">\\</span><br>  https://deploygate.com/api/users/<span class=\"token punctuation\">{</span>deploygateのユーザーID<span class=\"token punctuation\">}</span>/apps</code></pre>\n<p><code>{deploygateのAPI key}</code> には、DeployGate のアカウント設定のページから API key の値を転記します。<br>\n<code>{deploygateのユーザーID}</code> には、DeployGate に作成したユーザーのユーザーID を転記します（正しければ上記のURLが存在するはず）。<br>\n<code>file=</code> に記述した <code>app-release.apk</code> は、ビルド構成（Build Variant）が release の場合です。デバッグの場合は <code>app-debug.apk</code> になるはずです（未確認）。</p>\n<p><code>mobile-center-post-build.sh</code> をコミット、プッシュして VSMC の Build Configulation を見ると「Build scripts」 の項目に <strong>Post-build</strong> とチェックされ、正しく認識できていることがわかります。</p>\n<p><img src=\"/img/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_02.png\" alt=\"02\"></p>\n<p>あとは、 apk への署名を忘れないようにしましょう。Sign builds を On にして、 keystore ファイルなどを指定します。<br>\n社内配布であればデバッグ時と同じいいやってことで、開発用PCに入っている(Mac なら <code>~/.android/</code> にある) <code>debug.keystore</code> をアップロード、入力項目は次のとおりです。</p>\n<ul>\n<li>Keystore password: android</li>\n<li>Key alias: androiddebugkey</li>\n<li>Key password: android</li>\n</ul>\n<p><img src=\"/img/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_03.png\" alt=\"03\"></p>\n<p>設定できたら、「Save &amp; Build」 を押すと、ビルドが開始され、ビルドログを見るとスクリプトが実行されていることが確認できます。</p>\n<p><img src=\"/img/posts/upload_android_apps_made_by_kotlin_to_deploygate_using_visual_studio_mobile_center_04.png\" alt=\"04\"></p>\n<h2 id=\"%E3%81%93%E3%82%8C%E3%81%A7%E5%8B%9D%E3%81%A4%E3%82%8B%EF%BC%9F\">これで勝つる？ <a class=\"direct-link\" href=\"#%E3%81%93%E3%82%8C%E3%81%A7%E5%8B%9D%E3%81%A4%E3%82%8B%EF%BC%9F\">#</a></h2>\n<p>よっしゃー！これでスクリプトさえ書けば Bitrise や CircleCI 並みになんでもできるぞー、と思いました。</p>\n<p>が、 <strong>スクリプトファイルをリポジトリに含める</strong> のが作動条件なので、今回試したような 「DeployGate へのアップロード」というシナリオでは DeployGate の API key をリポジトリに含めることになってしまい、これは推奨されることではありません（公開リポジトリではご法度モノ）。</p>\n<p>なんという「Microsoft、分かってない」感。なんでこんな仕様にしたのでしょう。<br>\nVSMC はプライベートリポジトリ推奨なのでしょうか…。私はプライベートなアプリのビルドを、Bitrise の無料プランでぶん回していたらビルド時間制限の上限に達してしまったので VSMC に移行してきたのですが、そういうシナリオなのでしょうか。</p>\n<p>早いとこカスタムな Environment variables を作れるようにして欲しいところです。</p>\n",
      "date_published": "2017-10-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/10/01/renuew_jetbrains_opensource_lisence_2017/",
      "url": "https://blog.amay077.net/blog/2017/10/01/renuew_jetbrains_opensource_lisence_2017/",
      "title": "JetBrains OpenSource License を更新しました",
      "content_html": "<p>２年目ありがとうございます。</p>\n<!--more-->\n<p><a href=\"https://www.jetbrains.com/buy/opensource/\">JetBrains OpenSource License</a> は、オープンソースソフトウェア開発者に、JetBrains の製品群のライセンスを提供してもらえるプログラムで、提供される製品は <a href=\"https://www.jetbrains.com/store/\">All Products Pack</a>、つまり次に挙げる全ての製品がOSS開発のために利用できます。価格にすると年間649ドル(/1ユーザー）相当になります。</p>\n<ul>\n<li>IntelliJ IDEA Ultimate</li>\n<li>ReSharper</li>\n<li>ReSharper C++</li>\n<li>dotTrace</li>\n<li>dotMemory</li>\n<li>dotCover</li>\n<li>AppCode</li>\n<li>CLion</li>\n<li>PhpStorm</li>\n<li>PyCharm</li>\n<li>RubyMine</li>\n<li>WebStorm</li>\n<li>DataGrip</li>\n<li>Rider</li>\n</ul>\n<p>JetBrains OpenSource License に申請できる条件は、</p>\n<ul>\n<li>プロジェクトのリードまたはコアコミッターであること</li>\n<li>プロジェクトの開発(生存)期間が３ヶ月以上であること</li>\n<li>プロジェクトの開発がアクティブであること</li>\n<li>企業や団体などからスポンサードされていないこと</li>\n<li>プロジェクトがコマーシャルソフトウェアでないこと</li>\n</ul>\n<p>です(意訳)。</p>\n<p>私は Xamarin.Forms.GoogleMaps というオープンソースライブラリを開発しており、昨年(2016年)申請して無事、ライセンスが提供されました。</p>\n<ul>\n<li><a href=\"/blog/2016/09/29/got-jetbrains-opensource-License/\">JetBrains の Open Source License をいただきました</a></li>\n</ul>\n<p>最初に申請したときは、開発開始してから３ヶ月でした。偶然私の他にコミットしてくれてる人が数名居たので、「コミッターの数」を「3」として申請したら、3人分のライセンスをもらえました（そのライセンスはそれぞれコミッターの人に使ってもらっています）。</p>\n<p>このライセンスは1年間有効なものなので、1年毎に更新が必要です。今回更新(Update)の申請をして、無事に受理されまた1年間のライセンスを受領しました。</p>\n<p>ありがたいことに、この1年間でコミッターの数が15人ほどに増えてきたので、更新時に「コミッターの数」を「15」として申請したのですが、もらえたライセンスは変わらず「3」でした（汗）。まあコアコミッターと呼べる人は私以外にまだ居ないので妥当ではあります。</p>\n<p>ということで、OSS開発をしている人は JetBrains 全製品が使用できるライセンスをもらえるチャンスがありますので、応募してみるとよいと思います。</p>\n<p>なお、このプログラムで支給されるライセンスは</p>\n<blockquote>\n<p>Licenses can be used for non-commercial OS development only. Please consider purchasing separate licenses to work on commercial projects.</p>\n</blockquote>\n<p>ということで、非商用のオープンソースソフトウェア開発目的でのみ使用可能です。商用で使用する場合は <a href=\"https://twitter.com/yusuke/status/1144116495871434753\">ライセンスを購入</a> しましょう。</p>\n",
      "date_published": "2017-10-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/09/21/how_to_debugging_mapbox_gl_js/",
      "url": "https://blog.amay077.net/blog/2017/09/21/how_to_debugging_mapbox_gl_js/",
      "title": "Mapbox GL JS をデバッグするまで",
      "content_html": "<p>オープンソースのベクトル地図ライブラリ Mapbox GL JS のデバッグがしたいので調べました。</p>\n<!--more-->\n<h2 id=\"mapbox-%E3%81%AA%E3%81%AB%E3%81%9D%E3%82%8C%EF%BC%9F\">Mapbox なにそれ？ <a class=\"direct-link\" href=\"#mapbox-%E3%81%AA%E3%81%AB%E3%81%9D%E3%82%8C%EF%BC%9F\">#</a></h2>\n<ul>\n<li>Google Maps JavaScript API みたいなもん</li>\n<li>こういうの → <a href=\"https://www.mapbox.com/mapbox-gl-js/examples/\">Display a map / Mapbox</a></li>\n<li>要は地図を表示・操作するためのオープンソース JavaScript ライブラリ</li>\n<li>類似のライブラリとして OpenLayers, leaflet などがある</li>\n<li>上記との違いは「ベクトルタイル」を「WebGL」で描画するものであるということ</li>\n<li>&quot;GL&quot; とは WebGL を差しており、姉妹ライブラリとして Mapbox GL Native がある（こちらはモバイルやデスクトップの &quot;ネイティブ&quot; アプリ用であり、OpenGL を使用している）。</li>\n</ul>\n<p>つまり、 Google Maps JavaScript API 以外の方法で、Google Maps のようなベクトル地図レンダリングをしたければ、Mapbox GL JS を使うのが現在の事実上唯一の方法である。</p>\n<h2 id=\"%E4%BD%95%E3%82%92%E3%81%97%E3%82%89%E3%81%B9%E3%81%9F%E3%81%84%E3%81%AE%EF%BC%9F%EF%BC%88%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF%E4%BD%95%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%AA%E3%81%84%E3%81%AE%EF%BC%9F%EF%BC%89\">何をしらべたいの？（あるいは何を調べてないの？） <a class=\"direct-link\" href=\"#%E4%BD%95%E3%82%92%E3%81%97%E3%82%89%E3%81%B9%E3%81%9F%E3%81%84%E3%81%AE%EF%BC%9F%EF%BC%88%E3%81%82%E3%82%8B%E3%81%84%E3%81%AF%E4%BD%95%E3%82%92%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%AA%E3%81%84%E3%81%AE%EF%BC%9F%EF%BC%89\">#</a></h2>\n<ul>\n<li>ライブラリの使い方は調べてない（ってか Google Maps とそんなに変わらないはず）</li>\n<li>Mapbox GL JS の（非同期な）地図データ取得の仕組み</li>\n<li>Mapbox GL JS の高速な描画の仕組み</li>\n</ul>\n<p>今回は、その足がかりとして、Mapbox GL JS のデバッグ環境を作ります。</p>\n<h2 id=\"%E8%AA%BF%E3%81%B9%E3%81%9F%E3%82%8F%E3%81%9F%E3%81%97%E3%81%AF\">調べたわたしは <a class=\"direct-link\" href=\"#%E8%AA%BF%E3%81%B9%E3%81%9F%E3%82%8F%E3%81%9F%E3%81%97%E3%81%AF\">#</a></h2>\n<ul>\n<li>JavaScript 力はあんまりない</li>\n<li>WebGL やったことない</li>\n<li>OpenGL もない</li>\n<li>Mapbox GL Native のソースを追ってみたが C++14 が分からずあきらめた</li>\n</ul>\n<p>大丈夫か・・・？</p>\n<h2 id=\"%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%82%8B\">デバッグ環境を作る <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<h3 id=\"%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE(%E3%81%A8%E3%81%84%E3%81%86%E3%81%8B%E7%A7%81%E3%81%AE%E7%92%B0%E5%A2%83)\">用意するもの(というか私の環境) <a class=\"direct-link\" href=\"#%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B%E3%82%82%E3%81%AE(%E3%81%A8%E3%81%84%E3%81%86%E3%81%8B%E7%A7%81%E3%81%AE%E7%92%B0%E5%A2%83)\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/mapbox/mapbox-gl-js\">https://github.com/mapbox/mapbox-gl-js</a> のローカルクローン</li>\n<li>macOS</li>\n<li>Xcode（入ってた)</li>\n<li>homebrew</li>\n<li>yarn とかいうやつ（homebrew で入れる）</li>\n<li>node.js(v4.0以上)</li>\n<li>Visual Studio Code (デバッグするのに使う。VSCodeと略すかも)</li>\n<li>Debugger for Chrome (Visual Studio Code の拡張機能)</li>\n</ul>\n<p>すでに「yarn って何？」というレベルです・・・。</p>\n<h3 id=\"%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%82%8B%E6%89%8B%E9%A0%861(mapbox%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97)\">デバッグ環境を作る手順1(mapboxのセットアップ) <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%82%8B%E6%89%8B%E9%A0%861(mapbox%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97)\">#</a></h3>\n<p><a href=\"https://github.com/mapbox/mapbox-gl-js/blob/master/CONTRIBUTING.md\">https://github.com/mapbox/mapbox-gl-js/blob/master/CONTRIBUTING.md</a> に丁寧に書いてあることの写しだけど。</p>\n<ol>\n<li>Xcode Command Line Tools を入れる(入ってた。けど一度 Xcode を起動て License に agree しないといけなかった）</li>\n<li><code>brew install node</code> で node をインストール（以前 anyenv/ndenv で入れてあったので余裕）</li>\n<li><code>brew install yarn</code> で yarn というやつを入れる</li>\n<li><code>cd mapbox-gl-js</code> でクローンしたリポジトリに移動して、 <code>yarn install</code> で何かをインストールする（何？）</li>\n<li><a href=\"https://www.mapbox.com/studio/account/tokens/\">https://www.mapbox.com/studio/account/tokens/</a> で、 Mapbox の API キーを生成する。Mapbox アカウントがなければ同じく作る</li>\n<li><a href=\"https://github.com/mapbox/mapbox-gl-js/blob/master/CONTRIBUTING.md#serving-the-debug-page\">Serving the Debug Page</a> にあるように <code>MAPBOX_ACCESS_TOKEN=pk.iEkc36fR… yarn run start-debug</code> を実行する</li>\n</ol>\n<p>んでブラウザで <a href=\"http://localhost:9966/debug\">http://localhost:9966/debug</a> にアクセスすると、地図が表示されるはずである。</p>\n<p>この状態で、 Chrome のデベロッパーツールでデバッグできるけど、効率上げるために Visual Studio Code を使う。その手順が以下。</p>\n<h3 id=\"%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%82%8B%E6%89%8B%E9%A0%862(vscode%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97)\">デバッグ環境を作る手順2(VSCodeのセットアップ) <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E7%92%B0%E5%A2%83%E3%82%92%E4%BD%9C%E3%82%8B%E6%89%8B%E9%A0%862(vscode%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97)\">#</a></h3>\n<ul>\n<li><a href=\"https://ics.media/entry/11356\">Visual Studio Codeを使いこなせ！ Chromeと接続してJSをデバッグする方法 - ICS MEDIA</a></li>\n<li><a href=\"https://github.com/Microsoft/vscode-chrome-debug#launch\">https://github.com/Microsoft/vscode-chrome-debug#launch</a></li>\n</ul>\n<p>を参考に。</p>\n<ol>\n<li>VSCode で mapbox-gl-js のフォルダを開く</li>\n<li>メニュー → デバッグ → 構成の追加 とすると <code>.vscode/launch.json</code> が生成されるので、下記の <code>launch.json</code> のように記述する</li>\n<li>前述の <code>MAPBOX_ACCESS_TOKEN=pk.iEkc36fR… yarn run start-debug</code> をしたまま、VSCode のメニュー → デバッグ → デバッグの開始（F5 でもおｋ）すると、新しいタブに地図が表示される。</li>\n</ol>\n<pre class=\"language-json\"><code class=\"language-json\"><span class=\"token comment\">// launch.json</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"0.2.0\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token property\">\"configurations\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chrome\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"request\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"launch\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Launch Chrome against localhost\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"http://localhost:9966/debug/\"</span><span class=\"token punctuation\">,</span><br>            <span class=\"token property\">\"webRoot\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"${workspaceRoot}\"</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"/img/posts/how_to_debugging_mapbox_gl_js_01.png\" alt=\"how_to_debugging_mapbox_gl_js_01.png\"></p>\n<h3 id=\"%E8%A9%A6%E3%81%97%E3%81%AB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">試しにデバッグしてみる <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%AB%E3%83%87%E3%83%90%E3%83%83%E3%82%B0%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h3>\n<p><code>src/render/draw_line.js</code> の 14行目あたりにブレークポイントを置いてみる（F9 で）。F5 でデバッグ開始する。</p>\n<p>地図が表示される過程でブレークポイントで一時停止し、その箇所の「変数」「ウオッチ」「コールスタック」などが見られる。下図は、 <code>drawLine</code> 関数の <code>coords</code> 変数の中身を表示しているところ。描画するラインの頂点が確認できる。</p>\n<p><img src=\"/img/posts/how_to_debugging_mapbox_gl_js_02.png\" alt=\"how_to_debugging_mapbox_gl_js_02.png\"></p>\n<p>ちなみに、この <code>drawLine</code> 関数をスキップ（すぐに <code>return</code>）すると、次図のようにラインが描画されない地図になる。</p>\n<p><img src=\"/img/posts/how_to_debugging_mapbox_gl_js_03.png\" alt=\"how_to_debugging_mapbox_gl_js_03.png\"></p>\n<p>「デバッグするまで」としてはこんな感じで。</p>\n",
      "date_published": "2017-09-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/",
      "url": "https://blog.amay077.net/blog/2017/09/17/joined_iosdc_2017/",
      "title": "iOSDC 2017 に参加してきました",
      "content_html": "<p>iOSDC 2017 に参加してきましたよっと。</p>\n<!--more-->\n<p><img src=\"/img/posts/joined_iosdc_2017_01.png\" alt=\"\"></p>\n<ul>\n<li><a href=\"https://iosdc.jp/2017/\">iOSDC Japan 2017</a></li>\n</ul>\n<p>ふだんは「クロスプラットフォーマーなら、Java も Swift もできなきゃダメだぜ☆」なんて言ってる割には、実は Swift で iOS アプリを書いたことはなくて、Android の勉強会にはちょいちょい参加してて DroidKaigi2017 では登壇もさせてもらったわけですが、iOS/Swift 系のコミュニティにはよく分かってませんでした。</p>\n<p>「外国語を学ぶことはその国の文化を学ぶこと」なんてよく言われますけど、プログラミング言語やプラットフォームも同じだと思っていて、iOS/Swift アプリ開発者さん達の文化というか空気を感じたくて参加しました。</p>\n<h2 id=\"%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3\">セッション <a class=\"direct-link\" href=\"#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3\">#</a></h2>\n<p>こういうイベントって、50分セッションが多いと思うんですけど、iOSDC は 15分または30分で、いろいろな話を聞くことができました。<br>\n「もっと聞きたい！」と思うこともありましたがこのスタイルもいいなと思います。</p>\n<p>Swift や iOS SDK を題材にしたものが中心でありつつ、とは言えサーバーサイドのネタでは Firebase が登場することが多かったように見えました（自分が聞いたセッションがそうだっただけかも）。DroidKaigi よりもネタの多様性があったように見えました。</p>\n<p>数学ネタも多かったですね。<br>\n高校からほとんど「数学」をやってないので、式や用語の意味は分かりませんが、丁寧な解説やコードがあったので「何をしているのか」はわかりました。</p>\n<p>特に、</p>\n<ul>\n<li><a href=\"https://iosdc.jp/2017/node/1445\">Swift で数学のススメ 〜 プログラミングと数学を同時に学べ ｜ iOSDC Japan 2017</a></li>\n</ul>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">14:20 から「Swift で数学のススメ 〜 プログラミングと数学は同時に学べ」で発表します👍数学の難しさにどう立ち向かって行くか、エンジニアの視点からの提案です💪群・環・体から代数拡大まで15分で頑張る💨<a href=\"https://t.co/1yfrRHF5OP\">https://t.co/1yfrRHF5OP</a><a href=\"https://twitter.com/hashtag/iOSDC?src=hash\">#iOSDC</a> <a href=\"https://twitter.com/hashtag/b?src=hash\">#b</a></p>&mdash; Taketo Sano (@taketo1024) <a href=\"https://twitter.com/taketo1024/status/908919531157962753\">2017年9月16日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>がとてもよかった。</p>\n<p>なんというかスピーカーさんの情熱が発表に溢れていて</p>\n<p>「あーこの人は本当に数学のことが大好きなんだなあ」</p>\n<p>というのがひしひしと伝わってきました。<br>\n会場大学だったし、こんな教授の講義で自分が異性だったら惚れるレベル。<br>\n動画が公開されたら是非見て欲しいです。</p>\n<p>ベストスピーカー賞で４位か５位だったと思います。会場が広く聴講者も多い room A のセッションが上位を占めるなかで、votes per atendees ではトップだったんではないかと思います。</p>\n<p>他には、クロスプラットフォームのセッションや MVC や MVVM などのUIアプリ設計手法の話は iOSDC でも人気でした。Android では公式の Data Binding サポートや Archtecture Components での ViewModel サポートなどがあるので、iOS にもデファクトなライブラリが出てくれば、より一般化するのでしょうね。</p>\n<h2 id=\"lt\">LT <a class=\"direct-link\" href=\"#lt\">#</a></h2>\n<p>やばい。<br>\nday2 も day3 もレベルが高すぎた。登壇者の方、通常セッションよりプレッシャーあったんではないかと思います(心中お察しします)。</p>\n<p>周りがみんなビールだらけで「みんなビール好きすぎだろ」と若干引き気味だったのですが、みなさんのトークが楽しすぎたので盛り上がれました。</p>\n<p><a href=\"https://csugjp.connpass.com/event/50930/\">今年3月の C# の勉強会</a>で、bitflyer さんのブロックチェーンの発表を聞いた直後、興味持って ￥50,000 をチャージしたものの買い時を見失って放置してしまった、あの時買っておけばあるいは僕もｗ</p>\n<h2 id=\"%E3%82%B4%E3%83%BC%E3%82%B8%E3%83%A3%E3%82%B9\">ゴージャス <a class=\"direct-link\" href=\"#%E3%82%B4%E3%83%BC%E3%82%B8%E3%83%A3%E3%82%B9\">#</a></h2>\n<p>個人スポンサー(1.5k yen)チケットを購入したわけだけど、そうでなくてもノベルティがとてもゴージャスでした、スポンサー企業さまに感謝！</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/iosdc?src=hash\">#iosdc</a> のノベルティをベッドに広げてみたわけだけどゴージャス！（これ以外に個人スポンサー向けのTシャツとパーカーも） <a href=\"https://t.co/SeJDOg1nWK\">pic.twitter.com/SeJDOg1nWK</a></p>&mdash; あめい@バレデコ待ち (@amay077) <a href=\"https://twitter.com/amay077/status/908683878126166016\">2017年9月15日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>個人スポンサー特典で頂けたパーカー含めてデザイン的にもイケてて、これでようやく Google I/O Tシャツを引退させられるし、パーカーもヘビロテすると思います（カミさんからは「おっさんがそのデザインはどうよ？」と言われたけど、負けないっ）。</p>\n<h2 id=\"xamarin\">Xamarin <a class=\"direct-link\" href=\"#xamarin\">#</a></h2>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">【最終結果発表】<a href=\"https://twitter.com/hashtag/iosdc?src=hash\">#iosdc</a> 参加者のみなさん、「何で開発していますか？」 <a href=\"https://t.co/LSAUVIuKMn\">pic.twitter.com/LSAUVIuKMn</a></p>&mdash; CyberAgentDevelopers (@ca_developers) <a href=\"https://twitter.com/ca_developers/status/909329406979481601\">2017年9月17日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>この場でこんだけ vote されてるのスゴくないすか？！</p>\n<p>なんか iOS な人たちは Web 系とのつながりが深くて、 X-Plat なら React の方を使ってると勝手に思い込んでました。</p>\n<h2 id=\"%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E3%82%A2%E3%83%97%E3%83%AA\">カンファレンスアプリ <a class=\"direct-link\" href=\"#%E3%82%AB%E3%83%B3%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9%E3%82%A2%E3%83%97%E3%83%AA\">#</a></h2>\n<p>iOS のイベントだから、iOS版しか作らないのはわかってました。<br>\n普段使いがAndroidだから仕方ないなーと思いつつ、Webサイトのタイムテーブルが、BACKする度に初日に戻っちゃうから使いづらかったのでネイティブアプリは欲しかったですね。</p>\n<p>そんなときこそ X-Plat な Xamarin でしょ！！<br>\nとは自分は思っていなくて、今ならカンファレンス用のチャットボットを作ってみたい。タイムテーブルのような情報俯瞰は難しいけど、検索とかfavとか通知なら問題ないし、参加者との双方向コミュニケーションもやりやすいかもしれない（Twitterに比べて）。もちろんプラットフォーム問わないしね。</p>\n<h2 id=\"next%3F\">Next? <a class=\"direct-link\" href=\"#next%3F\">#</a></h2>\n<p>今回は懇親会は参加せず、そんなに他の人とコミュニケーション取れたわけではなかたけど、まあ焦らず（DroidKaigi も、初参加から初登壇まで３年かかってるしな）やっていこうと思います。</p>\n<p>知り合いが多いコミュニティに参加するのは心地よいけど、そこだけで満足してちゃもったいないと自分は思っていて、ましてや現在ではひとつのテクノロジーだけでプロダクトが &quot;ビルド&quot; できるわけでは無いのだから、自分も人見知りだけど、積極的に他のコミュニティにも参加して、その文化を学んでいきたいと思います。久しぶりに「知り合いがほぼ居ない場」に参加して、技術コミュニティに参加してみようと思ったきっかけとか、初心に戻れた気がします。</p>\n<p>最後に、僕も <a href=\"https://www.youtube.com/watch?v=AC7C5CY1Meo\">ミサトさんじゃなくてマリューさん</a> だな。</p>\n",
      "date_published": "2017-09-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/08/21/should_set_region_of_googlemaps_javascript_api/",
      "url": "https://blog.amay077.net/blog/2017/08/21/should_set_region_of_googlemaps_javascript_api/",
      "title": "Google Maps JavaScript API を使うときには必ず region の設定をしてくださいおねがいします",
      "content_html": "<p>3年くらい前に</p>\n<!--more-->\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/979dfc858a21c8bbb7a9\">Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない - Qiita</a></li>\n</ul>\n<p>という記事を書きました。</p>\n<p>これはGoogleマップにて、「竹島や北方領土などが政府方針と反する名称で表記されているケース」があることに対して、ならば「地理院地図」を使えばいいじゃん？という内容でした。</p>\n<p>その後、Googleマップ側でも対応がなされ、「ローカライズ」という機能を使うことで、「その国の法律に準拠した地図」にすることができるようになりました（これについても前述の記事の「2013.10.17 追記」に書きました）。</p>\n<p>このローカライズについて、もう一度書きます。</p>\n<p><strong>日本向けのWebサービスでGoogleマップを使う場合は、必ず「ローカライズ」の機能を使用してください</strong></p>\n<p>具体的には、 次の通りです。</p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/javascript/localization?hl=ja\">Google Maps JavaScript API / マップのローカライズ</a></li>\n</ul>\n<p>Google Maps JavaScript API の埋め込みスクリプトタグで、</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&amp;language=ja&amp;region=JP<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>のように <code>region=JP</code> を付けてください、これだけです。</p>\n<h2 id=\"%E5%AF%BE%E5%BF%9C%E3%81%A9%E3%81%86%E3%81%A7%E3%81%97%E3%82%87%E3%81%86%EF%BC%9F\">対応どうでしょう？ <a class=\"direct-link\" href=\"#%E5%AF%BE%E5%BF%9C%E3%81%A9%E3%81%86%E3%81%A7%E3%81%97%E3%82%87%E3%81%86%EF%BC%9F\">#</a></h2>\n<p>さて著名なWebサービスではちゃんと設定してくれてますよね？<br>\n※Google Maps のスクショを貼るのは規約で禁止されているのでボカしてます（これでクリアできているとも思いませんが）。</p>\n<h3 id=\"%E6%9C%9F%E5%BE%85%E3%81%95%E3%82%8C%E3%82%8B%E8%A1%A8%E8%A8%98\">期待される表記 <a class=\"direct-link\" href=\"#%E6%9C%9F%E5%BE%85%E3%81%95%E3%82%8C%E3%82%8B%E8%A1%A8%E8%A8%98\">#</a></h3>\n<p>いわゆる「政府方針の通りの表記」のみがされている状態</p>\n<p><img src=\"/img/posts/should_set_region_jp_to_googlemaps_01.png\" alt=\"\"></p>\n<h3 id=\"%E6%A5%BD%E5%A4%A9%E3%83%88%E3%83%A9%E3%83%99%E3%83%AB\">楽天トラベル <a class=\"direct-link\" href=\"#%E6%A5%BD%E5%A4%A9%E3%83%88%E3%83%A9%E3%83%99%E3%83%AB\">#</a></h3>\n<p>あぼーん</p>\n<p><img src=\"/img/posts/should_set_region_jp_to_googlemaps_02.png\" alt=\"\"></p>\n<h3 id=\"%E3%81%98%E3%82%83%E3%82%89%E3%82%93\">じゃらん <a class=\"direct-link\" href=\"#%E3%81%98%E3%82%83%E3%82%89%E3%82%93\">#</a></h3>\n<p>ぐえぇぇ</p>\n<p><img src=\"/img/posts/should_set_region_jp_to_googlemaps_03.png\" alt=\"\"></p>\n<h3 id=\"%E3%81%90%E3%82%8B%E3%81%AA%E3%81%B3\">ぐるなび <a class=\"direct-link\" href=\"#%E3%81%90%E3%82%8B%E3%81%AA%E3%81%B3\">#</a></h3>\n<p>ぎゃあぁぁあ</p>\n<p><img src=\"/img/posts/should_set_region_jp_to_googlemaps_04.png\" alt=\"\"></p>\n<h3 id=\"%E3%81%9F%E3%81%B9%E3%82%8D%E3%81%90\">たべろぐ <a class=\"direct-link\" href=\"#%E3%81%9F%E3%81%B9%E3%82%8D%E3%81%90\">#</a></h3>\n<p>お、おぅ</p>\n<p><img src=\"/img/posts/should_set_region_jp_to_googlemaps_05.png\" alt=\"\"></p>\n<p>ぜ、全滅だと・・・・。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>お願いですからGoogleマップを使うときは「ローカライズ」をしてください。<br>\n私自身はそんなに気にしないのですが、へんなツイートみちゃったか<a href=\"https://twitter.com/yamazogaikuzo/status/899396971433086976\">ら</a>。こういうことに税金使われたい？</p>\n",
      "date_published": "2017-08-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/07/28/be_careful_because_googlemap_get_projection_is_not_singleton/",
      "url": "https://blog.amay077.net/blog/2017/07/28/be_careful_because_googlemap_get_projection_is_not_singleton/",
      "title": "Google Maps Android API の GoogleMap.getProjection はシングルトンじゃないから注意",
      "content_html": "<p>Android で Google Maps を使用するときに使用する Google Maps Android API の話です。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/android-api/?hl=ja\">Google Maps Android API / Google Developers</a></li>\n</ul>\n<p>この SDK の機能の一つに「地図座標（緯度経度）と画面座標の相互変換」というものがあります。<br>\nこれを使うと、</p>\n<ul>\n<li>画面中心の緯度経度を取得して、任意の外部APIを呼び出す（カーナビみたく中心位置の住所を検索するとか）</li>\n<li>地図上のマーカーの位置に任意の View を吹き出しのように配置する</li>\n</ul>\n<p>で、これを行うには <code>GoogleMap.getProjection()</code> で <code>Projection</code> クラスのインスタンスを使用して、<code>fromScreenLocation</code> または <code>toScreenLocation</code> を呼び出します。</p>\n<ul>\n<li><a href=\"https://developers.google.com/android/reference/com/google/android/gms/maps/Projection?hl=ja\">Projection  /  Google APIs for Android</a></li>\n</ul>\n<p>この <code>GoogleMap.getProjection()</code> で取得できるインスタンス、シングルトンというか、いつ取得しても同じインスタンスな気がしませんか？ <code>GoogleMap.getUiSettings()</code> がそうであるように。 <code>map.getProjection().fromScreenLocation</code>と書くのはダルいので地図の生成時に一度だけ取得して使いまわしたいと思いませんか？</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Projection</span> _proj<span class=\"token punctuation\">;</span><br><br><span class=\"token annotation punctuation\">@Override</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> onMapReady <span class=\"token punctuation\">(</span><span class=\"token class-name\">GoogleMap</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 最初に取得して使い回せばいいよねー、そう思っていた時期が私にもありました・・・</span><br>    _proj <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getProjection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ところがこれが間違いです。</p>\n<p>ためしに「地図の位置が変わったら、画面の左上(0, 0)の緯度経度を得る」というのを書いてみます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Projection</span> _proj<span class=\"token punctuation\">;</span><br><br><span class=\"token annotation punctuation\">@Override</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> onMapReady <span class=\"token punctuation\">(</span><span class=\"token class-name\">GoogleMap</span> map<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 最初に取得して使い回せばいいよねー、そう思っていた時期が私にもありました・・・</span><br>    _proj <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getProjection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// カメラの移動が完了してアイドル状態になったときのイベント（RetroLambda使用） </span><br>    map<span class=\"token punctuation\">.</span><span class=\"token function\">setOnCameraIdleListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 画面原点の緯度経度を得る</span><br>        <span class=\"token class-name\">LatLng</span> latlng <span class=\"token operator\">=</span> _proj<span class=\"token punctuation\">.</span><span class=\"token function\">fromScreenLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Point</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TEST\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lat:\"</span> <span class=\"token operator\">+</span> latlng<span class=\"token punctuation\">.</span>latitude <span class=\"token operator\">+</span> <span class=\"token string\">\", long:\"</span> <span class=\"token operator\">+</span> latlng<span class=\"token punctuation\">.</span>longitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>地図をスクロールさせると <code>setOnCameraIdleListener</code> のハンドラが呼び出されますが、期待した結果が得られません。たぶんマイナスとかゼロに近い値になっていると思います。</p>\n<p>正しい結果を得るには、</p>\n<pre><code>map.setOnCameraIdleListener(() -&gt; {\n    // 画面原点の緯度経度を得る\n    Projection prj = map.getProjection();\n    LatLng latlng = prj.fromScreenLocation(new Point(0, 0));\n    Log.d(&quot;TEST&quot;, &quot;lat:&quot; + latlng.latitude + &quot;, long:&quot; + latlng.longitude); \n});\n</code></pre>\n<p>のように、「その時点での」 <code>Projection</code> インスタンスを得る必要があります。</p>\n<p>さてではここで API Reference の説明を見てみましょう。</p>\n<ul>\n<li><a href=\"https://developers.google.com/android/reference/com/google/android/gms/maps/GoogleMap.html?hl=ja#getProjection()\">GoogleMap.getProjection / Google APIs for Android</a></li>\n</ul>\n<blockquote>\n<p>The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves. As this operation is expensive, you should get the projection only once per screen. Google Maps uses the Mercator projection to create its maps from geographic data and convert points on the map into geographic coordinates.</p>\n</blockquote>\n<p><em>The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves.</em></p>\n<p><em>現在の投影のスナップショットを返します。カメラの移動で自動的に更新されません！！！</em></p>\n<p>しっかり書いてあったー！</p>\n<p>Projection とは投影法（メルカトル図法）を示すもの、その投影法（＝投影を行う公式）は不変なものだから取得の度にスナップショットが作られるとは思いませんでした。<br>\nこの挙動に気づけなくて、３時間くらい悩みつづけました。</p>\n<p>悩んだら、固定概念を捨ててキホンを見直そうぜ、という教訓になりました。が敢えて言わせてもらえれば、 <code>getCurrentProjection()</code> のようなメソッド名だったら、「最初に取得して使いまわす」という発想にはならなかったかも知れません。SDK作る身として、命名にも配慮したいと思いました。</p>\n",
      "date_published": "2017-07-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/07/24/concat_animations_with_kotlin/",
      "url": "https://blog.amay077.net/blog/2017/07/24/concat_animations_with_kotlin/",
      "title": "Androidでアニメーションを連続で実行するのが面倒なのを Kotlin で便利にした話",
      "content_html": "<p>Android で「浮いてるように見える」アニメーションを実装する機会がありまして。次の画像のようなものなんですが。</p>\n<!--more-->\n<p><img src=\"/img/posts/concat_animations_with_kotlin_01.gif\" alt=\"\"></p>\n<p>このアニメーションは、</p>\n<ol>\n<li>2秒かけて上へ少し移動する</li>\n<li>2秒かけて下へ少し移動する</li>\n</ol>\n<p>を「連続で」「繰り返し」実行させることで実現しています。<br>\n「連続で」とは、 1. のアニメーションが終わったら 2. のアニメーションを開始する、という意味です。</p>\n<h2 id=\"java-android-%E3%81%A7%E3%81%AF%E2%80%A6\">Java-Android では… <a class=\"direct-link\" href=\"#java-android-%E3%81%A7%E3%81%AF%E2%80%A6\">#</a></h2>\n<p>これを Android の View のアニメーションAPI で実現すると、普通にひどいコードになります。次がそれ。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 2秒かけて上へ移動するアニメーション</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">TranslateAnimation</span> anim1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TranslateAnimation</span><span class=\"token punctuation\">(</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>anim1<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 2秒かけて下へ移動するアニメーション</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">TranslateAnimation</span> anim2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TranslateAnimation</span><span class=\"token punctuation\">(</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.1f</span><span class=\"token punctuation\">,</span><br>        <span class=\"token class-name\">Animation</span><span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span>  <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>anim2<span class=\"token punctuation\">.</span><span class=\"token function\">setDuration</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>anim1<span class=\"token punctuation\">.</span><span class=\"token function\">setAnimationListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Animation<span class=\"token punctuation\">.</span>AnimationListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationStart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animation</span> animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animation</span> animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        anim2<span class=\"token punctuation\">.</span><span class=\"token function\">setAnimationListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Animation<span class=\"token punctuation\">.</span>AnimationListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationStart</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animation</span> animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationEnd</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animation</span> animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// 3. 下へのアニメーションが終わったら、上へ移動するアニメーションをまた開始</span><br>                view<span class=\"token punctuation\">.</span><span class=\"token function\">startAnimation</span><span class=\"token punctuation\">(</span>anim1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationRepeat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animation</span> animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 2. 上へのアニメーションが終わったら、下へ移動するアニメーションを開始</span><br>        view<span class=\"token punctuation\">.</span><span class=\"token function\">startAnimation</span><span class=\"token punctuation\">(</span>anim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onAnimationRepeat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Animation</span> animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 1. 上へ移動するアニメーションを開始</span><br>view<span class=\"token punctuation\">.</span><span class=\"token function\">startAnimation</span><span class=\"token punctuation\">(</span>anim1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>コールバックのネストに、行いたい処理とコードの記述順が逆という二重苦、これはやってられません。</p>\n<p>これだけで Kotlin を使いたい案件です（Java でも Deferred が使えるライブラリ＜RxJava でも可＞を使えばマシにはなります）。</p>\n<h2 id=\"%E3%81%93%E3%82%8C%E3%81%8C-kotlin-%E3%81%A0%E3%81%A8%E2%80%A6\">これが Kotlin だと… <a class=\"direct-link\" href=\"#%E3%81%93%E3%82%8C%E3%81%8C-kotlin-%E3%81%A0%E3%81%A8%E2%80%A6\">#</a></h2>\n<p>というわけで Kotlin でやってみました。</p>\n<p>まず、「アニメーションを実行して、アニメーションが終わったら次へ継続する関数」を作成します。<br>\nここでは <code>View</code> の拡張関数として定義してみました。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">package</span> net<span class=\"token punctuation\">.</span>amay077<span class=\"token punctuation\">.</span>animsample<br><br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>View<br><span class=\"token keyword\">import</span> android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span>animation<span class=\"token punctuation\">.</span>Animation<br><span class=\"token keyword\">import</span> kotlin<span class=\"token punctuation\">.</span>coroutines<span class=\"token punctuation\">.</span>experimental<span class=\"token punctuation\">.</span>suspendCoroutine<br><br><span class=\"token keyword\">suspend</span> <span class=\"token keyword\">fun</span> View<span class=\"token punctuation\">.</span><span class=\"token function\">startAnimationAsync</span><span class=\"token punctuation\">(</span>anim<span class=\"token operator\">:</span> Animation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">return</span> suspendCoroutine <span class=\"token punctuation\">{</span> continuation <span class=\"token operator\">-></span><br>        anim<span class=\"token punctuation\">.</span><span class=\"token function\">setAnimationListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">object</span> <span class=\"token operator\">:</span> Animation<span class=\"token punctuation\">.</span><span class=\"token function\">AnimationListener</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onAnimationStart</span><span class=\"token punctuation\">(</span>animation<span class=\"token operator\">:</span> Animation<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onAnimationEnd</span><span class=\"token punctuation\">(</span>animation<span class=\"token operator\">:</span> Animation<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                continuation<span class=\"token punctuation\">.</span><span class=\"token function\">resume</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token keyword\">override</span> <span class=\"token keyword\">fun</span> <span class=\"token function\">onAnimationRepeat</span><span class=\"token punctuation\">(</span>animation<span class=\"token operator\">:</span> Animation<span class=\"token operator\">?</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">startAnimation</span><span class=\"token punctuation\">(</span>anim<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>呼び出し側は次のような感じ。<br>\nコールバック地獄の Java に比べて天国かよここは…。<br>\nアニメーションはUIスレッドから呼び出す必要があるので <code>async() { }</code> ではなく <code>launch(UI) { }</code> を使う必要があるようです。</p>\n<pre class=\"language-kotlin\"><code class=\"language-kotlin\"><span class=\"token keyword\">val</span> button1 <span class=\"token operator\">=</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span>R<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">val</span> anim1 <span class=\"token operator\">=</span> <span class=\"token function\">TranslateAnimation</span><span class=\"token punctuation\">(</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><br>anim1<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><br><br><span class=\"token keyword\">val</span> anim2 <span class=\"token operator\">=</span> <span class=\"token function\">TranslateAnimation</span><span class=\"token punctuation\">(</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span><br>        Animation<span class=\"token punctuation\">.</span>RELATIVE_TO_SELF<span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><br>anim2<span class=\"token punctuation\">.</span>duration <span class=\"token operator\">=</span> <span class=\"token number\">2000</span><br><br><span class=\"token function\">launch</span><span class=\"token punctuation\">(</span>UI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// メインスレッドから async するよ</span><br>    <span class=\"token comment\">// ずっとくりかえし</span><br>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        button1<span class=\"token punctuation\">.</span><span class=\"token function\">startAnimationAsync</span><span class=\"token punctuation\">(</span>anim1<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1. 2秒かけて上へ移動するアニメーションを実行</span><br>        button1<span class=\"token punctuation\">.</span><span class=\"token function\">startAnimationAsync</span><span class=\"token punctuation\">(</span>anim2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2. 2秒かけて下へ移動するアニメーションを実行</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin をまともに使うのが初めてなのでまだ改善できるかも。。<br>\nよいコードがありましたらご指摘ください。</p>\n<p>※Kotlin の coroutine(async/await) は 2017年7月現在、正式リリースされていません(experimental 版です)。</p>\n<p>Kotlin での実装には、次のサイトを参考にさせていただきました</p>\n<ul>\n<li><a href=\"http://qiita.com/Kogarasi/items/4bd0a37763b057e9d796\">Android開発ではじめるKotlin - Qiita</a></li>\n<li><a href=\"http://qiita.com/ke__kyukyun1828/items/c4c321650d888765140e\">Kotlin覚書-環境構築 - Qiita</a></li>\n<li><a href=\"http://qiita.com/k-kagurazaka@github/items/702c92bc3381af36db12\">Kotlin+Androidでasync/await - Qiita</a></li>\n<li><a href=\"https://stackoverflow.com/questions/37805860/how-to-instantiate-an-anonymous-class-that-implements-an-interface-in-kotlin\">How to instantiate an anonymous class that implements an interface in Kotlin - Stack Overflow</a></li>\n<li><a href=\"https://github.com/gildor/kotlin-coroutines-retrofit\">gildor/kotlin-coroutines-retrofit: Kotlin Coroutines await() extension for Retrofit Call</a></li>\n</ul>\n<h2 id=\"%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB-c%23-%E3%81%A7%E3%82%82%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99\">ちなみに C# でもできます <a class=\"direct-link\" href=\"#%E3%81%A1%E3%81%AA%E3%81%BF%E3%81%AB-c%23-%E3%81%A7%E3%82%82%E3%81%A7%E3%81%8D%E3%81%BE%E3%81%99\">#</a></h2>\n<p>C#（つまり Xamarin.Android）でも <code>async/await(つまり Task)</code> と <code>TaskCompletionSource</code> を組み合わせて実現できます。</p>\n<p>C# にも拡張メソッドがあり、次のように定義することができます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ViewAnimationExtensions</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">StartAnimationAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Animation</span> anim<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> source <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">EventHandler<span class=\"token punctuation\">&lt;</span>Animation<span class=\"token punctuation\">.</span>AnimationEndEventArgs<span class=\"token punctuation\">></span></span> handler <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><br>        handler <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>        <span class=\"token punctuation\">{</span><br>            anim<span class=\"token punctuation\">.</span>AnimationEnd <span class=\"token operator\">-=</span> handler<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 購読解除を忘れずに</span><br>            source<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// kotlin の continuation.resume(Unit) にあたるトコ</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        anim<span class=\"token punctuation\">.</span>AnimationEnd <span class=\"token operator\">+=</span> handler<span class=\"token punctuation\">;</span> <span class=\"token comment\">// イベントを購読</span><br><br>        view<span class=\"token punctuation\">.</span><span class=\"token function\">StartAnimation</span><span class=\"token punctuation\">(</span>anim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> source<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>よびだし側はこう。<br>\n呼び出し時に <code>await</code> キーワードをつけ、それが含まれるメソッド(ここでは <code>OnCreate</code>)に <code>async</code> キーワードをつけます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">/* 省略 */</span><br><br>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">await</span> button1<span class=\"token punctuation\">.</span><span class=\"token function\">StartAnimationAsync</span><span class=\"token punctuation\">(</span>anim1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">await</span> button1<span class=\"token punctuation\">.</span><span class=\"token function\">StartAnimationAsync</span><span class=\"token punctuation\">(</span>anim2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Kotlin は同一プロジェクト内に Java と混ぜて使うことができるのがよいですね。</p>\n",
      "date_published": "2017-07-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/07/19/nintendo_switch_online_is_made_by_xamarin_forms/",
      "url": "https://blog.amay077.net/blog/2017/07/19/nintendo_switch_online_is_made_by_xamarin_forms/",
      "title": "Nintendo Switch Online アプリは Xamarin(Xamarin.Forms)製です",
      "content_html": "<p><a href=\"https://www.nintendo.co.jp/hardware/switch/onlineservice/\">ニンテンドースイッチのオンラインサービス</a>用のアプリ「Nintendo Switch Online」が、なんと <strong>Xamarin 製</strong> でした。</p>\n<!--more-->\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">きたな！ Nintendo Switch Online アプリ(Android/iOS) は Xamarin(Xamarin.Forms)製です！ <a href=\"https://t.co/lJX5CBckgt\">pic.twitter.com/lJX5CBckgt</a></p>&mdash; あめい@バレル待ち (@amay077) <a href=\"https://twitter.com/amay077/status/887610194947067904\">2017年7月19日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Android アプリと iOS アプリの権利表記の画面から使用されているライブラリを整理してみました。使用されているライブラリを見るとアプリは Xamarin.Forms 製のようです。</p>\n<h2 id=\"xamarin-%E3%81%A8%E3%81%8B-android%2Fios%2F.net-%E3%81%A8%E3%81%8B%E9%96%A2%E4%BF%82%E3%81%AA%E3%81%95%E3%81%9D%E3%81%86%E3%81%AA%E3%82%84%E3%81%A4\">Xamarin とか Android/iOS/.NET とか関係なさそうなやつ <a class=\"direct-link\" href=\"#xamarin-%E3%81%A8%E3%81%8B-android%2Fios%2F.net-%E3%81%A8%E3%81%8B%E9%96%A2%E4%BF%82%E3%81%AA%E3%81%95%E3%81%9D%E3%81%86%E3%81%AA%E3%82%84%E3%81%A4\">#</a></h2>\n<h3 id=\"echo-cancellation-program-by-nippon-telegraph-and-telecom-corp\">Echo Cancellation Program by Nippon Telegraph and Telecom Corp <a class=\"direct-link\" href=\"#echo-cancellation-program-by-nippon-telegraph-and-telecom-corp\">#</a></h3>\n<ul>\n<li>NTT やん</li>\n<li>ボイスチャットのエコーキャンセラっぽいですね</li>\n</ul>\n<h2 id=\"libsrtp-by-cisco-systems%2C-inc\">libSRTP by Cisco Systems, Inc <a class=\"direct-link\" href=\"#libsrtp-by-cisco-systems%2C-inc\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/cisco/libsrtp\">https://github.com/cisco/libsrtp</a></li>\n<li>Secure Realtime Transport Protocol とのこと、これもボイチャ関連ですかね</li>\n</ul>\n<h3 id=\"opus-by-xiph.org%2C-skype-limited\">Opus by <a href=\"http://Xiph.Org\">Xiph.Org</a>, Skype Limited <a class=\"direct-link\" href=\"#opus-by-xiph.org%2C-skype-limited\">#</a></h3>\n<ul>\n<li><a href=\"http://opus-codec.org/\">http://opus-codec.org/</a></li>\n<li>音声コーデックでした</li>\n</ul>\n<h3 id=\"webrtc-audioprocessing-by-google-inc\">WebRTC AudioProcessing by Google Inc <a class=\"direct-link\" href=\"#webrtc-audioprocessing-by-google-inc\">#</a></h3>\n<ul>\n<li><a href=\"https://webrtc.org/\">https://webrtc.org/</a></li>\n<li>WebRTC で音声関連ですねー</li>\n</ul>\n<h3 id=\"breakpad-by-google-inc\">BreakPad by Google Inc <a class=\"direct-link\" href=\"#breakpad-by-google-inc\">#</a></h3>\n<ul>\n<li><a href=\"https://chromium.googlesource.com/breakpad/breakpad/\">https://chromium.googlesource.com/breakpad/breakpad/</a></li>\n<li>クラッシュレポーティングシステムらしいです</li>\n</ul>\n<h3 id=\"curl-by-deniel-stenberg\">Curl by Deniel Stenberg <a class=\"direct-link\" href=\"#curl-by-deniel-stenberg\">#</a></h3>\n<ul>\n<li><a href=\"https://ja.wikipedia.org/wiki/CURL\">https://ja.wikipedia.org/wiki/CURL</a></li>\n<li>cURL のことですよね？</li>\n</ul>\n<h3 id=\"libdisasm\">Libdisasm <a class=\"direct-link\" href=\"#libdisasm\">#</a></h3>\n<ul>\n<li><a href=\"http://bastard.sourceforge.net/libdisasm.html\">http://bastard.sourceforge.net/libdisasm.html</a> ？</li>\n<li>ディスアセンブラ？よくわかりません</li>\n</ul>\n<h3 id=\"gflags-by-google-inc\">gflags by Google Inc <a class=\"direct-link\" href=\"#gflags-by-google-inc\">#</a></h3>\n<ul>\n<li><a href=\"https://gflags.github.io/gflags/\">https://gflags.github.io/gflags/</a></li>\n<li>コマンドラインツール？</li>\n</ul>\n<h3 id=\"linux-syscall-support-by-google-inc\">Linux Syscall Support by Google Inc <a class=\"direct-link\" href=\"#linux-syscall-support-by-google-inc\">#</a></h3>\n<ul>\n<li><a href=\"https://chromium.googlesource.com/linux-syscall-support/\">https://chromium.googlesource.com/linux-syscall-support/</a> ？</li>\n<li>わかりません</li>\n</ul>\n<h3 id=\"musl-by-rich-felker\">musl by Rich Felker <a class=\"direct-link\" href=\"#musl-by-rich-felker\">#</a></h3>\n<ul>\n<li><a href=\"https://www.musl-libc.org/\">https://www.musl-libc.org/</a></li>\n<li>C++ 関連はわからんなー</li>\n</ul>\n<h2 id=\"android-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">Android 関連のやつ <a class=\"direct-link\" href=\"#android-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">#</a></h2>\n<h3 id=\"lottie-by-airbnb\">Lottie by AirBnB <a class=\"direct-link\" href=\"#lottie-by-airbnb\">#</a></h3>\n<ul>\n<li><a href=\"https://airbnb.design/lottie/\">https://airbnb.design/lottie/</a></li>\n<li>アニメーションライブラリですね。</li>\n</ul>\n<h3 id=\"square-bindings\">square-bindings <a class=\"direct-link\" href=\"#square-bindings\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/mattleibow/square-bindings\">https://github.com/mattleibow/square-bindings</a></li>\n<li>Androidアプリ開発者の御用達、Square社のAndroid向けライブラリをXamarin.Androidから呼べるようにしたラッパーです</li>\n</ul>\n<h3 id=\"okio\">Okio <a class=\"direct-link\" href=\"#okio\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/square/okio\">https://github.com/square/okio</a></li>\n<li>これも Square の。通信ライブラリですね。</li>\n</ul>\n<h2 id=\"ios-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">iOS 関連のやつ <a class=\"direct-link\" href=\"#ios-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">#</a></h2>\n<h3 id=\"lottie-by-airbnb-2\">Lottie by AirBnB <a class=\"direct-link\" href=\"#lottie-by-airbnb-2\">#</a></h3>\n<ul>\n<li>Android と同じ〜</li>\n</ul>\n<h3 id=\"webp.touch\">WebP.Touch <a class=\"direct-link\" href=\"#webp.touch\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/luberda-molinet/WebP.Touch\">https://github.com/luberda-molinet/WebP.Touch</a></li>\n<li>画像フォーマット「WebP」のデコーダです</li>\n</ul>\n<h2 id=\"xamarin.forms-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">Xamarin.Forms 関連のやつ <a class=\"direct-link\" href=\"#xamarin.forms-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">#</a></h2>\n<h3 id=\"xamarin-sdk\">Xamarin SDK <a class=\"direct-link\" href=\"#xamarin-sdk\">#</a></h3>\n<ul>\n<li><a href=\"https://www.xamarin.com/\">https://www.xamarin.com/</a></li>\n<li>はい出ました</li>\n</ul>\n<h3 id=\"plugins-for-xamarin-by-james-montemagno-%2F-refractored-llc\">Plugins for Xamarin by James Montemagno / Refractored LLC <a class=\"direct-link\" href=\"#plugins-for-xamarin-by-james-montemagno-%2F-refractored-llc\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/xamarin/XamarinComponents\">https://github.com/xamarin/XamarinComponents</a></li>\n<li>Xamarin の機能を拡張するライブラリ群です</li>\n</ul>\n<h3 id=\"share-plugin-by-jakob-gurtl\">Share Plugin by Jakob Gurtl <a class=\"direct-link\" href=\"#share-plugin-by-jakob-gurtl\">#</a></h3>\n<ul>\n<li><a href=\"http://guertl.me/post/136407883480/share-plugin-for-xamarin-and-windows\">http://guertl.me/post/136407883480/share-plugin-for-xamarin-and-windows</a></li>\n<li>「他のアプリで開く」的な機能を提供するやつ</li>\n</ul>\n<h3 id=\"hockey-sdk\">Hockey SDK <a class=\"direct-link\" href=\"#hockey-sdk\">#</a></h3>\n<ul>\n<li><a href=\"https://hockeyapp.net/\">https://hockeyapp.net/</a></li>\n<li>クラッシュレポートとか配布自動化とかユーザーメトリクス収集とか（被ってるライブラリがあるけど）</li>\n</ul>\n<h3 id=\"carouselview.formsplugin-by-alexrainman\">CarouselView.FormsPlugin by alexrainman <a class=\"direct-link\" href=\"#carouselview.formsplugin-by-alexrainman\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/alexrainman/CarouselView\">https://github.com/alexrainman/CarouselView</a></li>\n<li>横にスワイプして画面切り替えるやつ</li>\n</ul>\n<h3 id=\"xamarin-forms-lab\">Xamarin Forms Lab <a class=\"direct-link\" href=\"#xamarin-forms-lab\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/XLabs/Xamarin-Forms-Labs\">https://github.com/XLabs/Xamarin-Forms-Labs</a></li>\n<li>Xamarin.Forms の機能を拡張するライブラリ（もうメンテ終了してて、作者は Xamarin に JOIN したけど）</li>\n</ul>\n<h3 id=\"current-activity-plugin-by-james-montemagno\">Current Activity Plugin by James Montemagno <a class=\"direct-link\" href=\"#current-activity-plugin-by-james-montemagno\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/jamesmontemagno/CurrentActivityPlugin\">https://github.com/jamesmontemagno/CurrentActivityPlugin</a></li>\n<li>Android 向けと思われるが…</li>\n</ul>\n<h3 id=\"ffimageloading-by-fabien-molinet\">FFImageLoading by Fabien Molinet <a class=\"direct-link\" href=\"#ffimageloading-by-fabien-molinet\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/luberda-molinet/FFImageLoading\">https://github.com/luberda-molinet/FFImageLoading</a></li>\n<li>画像読み込みライブラリ。まあ Picasso や Glide みたいなやつですわ。</li>\n</ul>\n<h3 id=\"skiasharp\">SkiaSharp <a class=\"direct-link\" href=\"#skiasharp\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/mono/SkiaSharp\">https://github.com/mono/SkiaSharp</a></li>\n<li>出ました、クロスプラットフォームの２Dグラフィックス描画ライブラリ</li>\n</ul>\n<h2 id=\".net-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">.NET 関連のやつ <a class=\"direct-link\" href=\"#.net-%E9%96%A2%E9%80%A3%E3%81%AE%E3%82%84%E3%81%A4\">#</a></h2>\n<h3 id=\"modernhttpclient-by-paul-betts\">ModernHttpClient by Paul Betts <a class=\"direct-link\" href=\"#modernhttpclient-by-paul-betts\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/paulcbetts/ModernHttpClient\">https://github.com/paulcbetts/ModernHttpClient</a></li>\n<li>各プラットフォームの通信ライブラリと .NET の HttpClient の橋渡しをします</li>\n</ul>\n<h3 id=\"json.net-by-james-newton-king\"><a href=\"http://Json.NET\">Json.NET</a> by James Newton-King <a class=\"direct-link\" href=\"#json.net-by-james-newton-king\">#</a></h3>\n<ul>\n<li><a href=\"http://www.newtonsoft.com/json\">http://www.newtonsoft.com/json</a></li>\n<li>いわずとしれた Json を扱うライブラリ</li>\n</ul>\n<h3 id=\"pclcrypto\">PCLCrypto <a class=\"direct-link\" href=\"#pclcrypto\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/AArnott/PCLCrypto\">https://github.com/AArnott/PCLCrypto</a></li>\n<li>暗号化ライブラリです</li>\n</ul>\n<h3 id=\"math.net-numerics-by-math.net\"><a href=\"http://Math.NET\">Math.NET</a> Numerics by <a href=\"http://Math.NET\">Math.NET</a> <a class=\"direct-link\" href=\"#math.net-numerics-by-math.net\">#</a></h3>\n<ul>\n<li><a href=\"https://numerics.mathdotnet.com/\">https://numerics.mathdotnet.com/</a></li>\n<li>Math というくらいなので数学系のライブラリなのでしょう</li>\n</ul>\n<h3 id=\"p%2Finvoke-by-andrew-arnott-and-more\">P/Invoke by Andrew Arnott and more <a class=\"direct-link\" href=\"#p%2Finvoke-by-andrew-arnott-and-more\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/AArnott/pinvoke\">https://github.com/AArnott/pinvoke</a></li>\n<li>Win32DLLを簡単に呼び出せるようにするライブラリっぽいですが、一体何のために？</li>\n</ul>\n<h3 id=\"validation\">Validation <a class=\"direct-link\" href=\"#validation\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/aarnott/Validation\">https://github.com/aarnott/Validation</a></li>\n<li>メソッドでバリデーションして例外投げるのを簡単にしてくれるっぽい</li>\n</ul>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Xamarin の事例としては久しぶりのビッグネームじゃあないでしょうか、しかもワールドクラス(Microsoft がプレスリリースだせば良いのに)。</p>\n<p>Xamarin.Forms製のようなので、Windows 10 や macOS 向けのアプリも(Nintendo にやる気があれば)開発できる気がしますね！</p>\n<p>とはいえ推測ですが、WebRTCでボイスチャットみたいなコアな機能は C/C++ でやってるだろうし、ゲームの紹介的な画面は HTML だろうし、いろんな「クロスプラットフォームアプリ開発技法」を組み合わせて使っているのでしょうね。</p>\n<p>権利表記に <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">自作ライブラリ</a> が載るの、ワンチャンあるで！</p>\n",
      "date_published": "2017-07-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/07/18/how_to_troubleshoots_about_xamarin_programming/",
      "url": "https://blog.amay077.net/blog/2017/07/18/how_to_troubleshoots_about_xamarin_programming/",
      "title": "Xamarin を使用したアプリ開発での、問題解決の方法",
      "content_html": "<p>Xamarin はクロスプラットフォームアプリ開発ツールで、しかも「ネイティブAPI をラップする\bだけ」のタイプなので、トラブルの解決方法は、ネイティブアプリ開発の情報やノウハウの中にある場合が多いです。</p>\n<!--more-->\n<p><img src=\"/img/posts/how_to_troubleshoots_about_xamarin_programming_01.png\" alt=\"\"></p>\n<p>私が Xamarin.Forms でアプリ開発をしていて、書いたコードが期待通り動作しない場合、以下のような手順で問題解決を試みていますよーというのを紹介します（環境面のトラブルではなく書いたコードの問題についてです）。</p>\n<p>ひとつ最初に言いたいのは、問題が発生したときにまず行うことは、 <strong>問題が発生する最小の環境を作り出す</strong> ことです。修正のためにコードを書き換えたり、人に聞いたりするのはその後です。これは Xamarin に限らず、いやプログラミングに限らず、問題解決する際にはいつも心がけている事です。</p>\n<h2 id=\"1.-%E3%81%9D%E3%82%8C%E3%81%AF%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%EF%BC%88java-android-%E3%82%84-swift-ios%EF%BC%89%E3%81%A7%E3%82%82%E8%B5%B7%E3%81%93%E3%82%8A%E5%BE%97%E3%82%8B%E4%BA%8B%E8%B1%A1%E3%81%8B%E5%88%87%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B\">1. それはネイティブ（Java-Android や Swift-iOS）でも起こり得る事象か切り分ける <a class=\"direct-link\" href=\"#1.-%E3%81%9D%E3%82%8C%E3%81%AF%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%EF%BC%88java-android-%E3%82%84-swift-ios%EF%BC%89%E3%81%A7%E3%82%82%E8%B5%B7%E3%81%93%E3%82%8A%E5%BE%97%E3%82%8B%E4%BA%8B%E8%B1%A1%E3%81%8B%E5%88%87%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B\">#</a></h2>\n<p>まずは、直面している問題は Java での Android アプリ開発や Swift での iOS アプリ開発でも起こり得るかを考えてみましょう。とりあえず「Android + Java + あなたが直面している問題」をキーワードにググってみても良いかもしれません。</p>\n<p>画面のUIパーツの挙動、GPSなどセンサー類の使い方、通知や課金周りのトラブルなどは、ここに該当する場合が多いです。</p>\n<p>もっと大雑把に言うと、 Xamarin.Forms を使っている人は、何か問題が起こったら、Xamarin.Forms ではなく、Xamarin.Android や Xamarin.iOS で試しにアプリを作ってみて、同様の問題に直面するか切り分けてみてください(Java や Swift で再現コードを書くなら、それがベストです)。</p>\n<p>もしそれが Xamarin.Android や Xamarin.iOS でも起こる問題ならば、解決方法はネイティブ（Java-Android や Swift-iOS）アプリ開発の情報の中にあります。ネイティブアプリ開発に詳しい人に聞くのもよいでしょう（逆に Xamarin.Forms のソースコードを Java や Swift でのアプリ開発に詳しい人に見せても、お互いよい結果にはならないでしょう）。</p>\n<h2 id=\"2.-%E3%81%9D%E3%82%8C%E3%81%AF-xamarin%E5%9B%BA%E6%9C%89%E3%81%AE%E4%BA%8B%E8%B1%A1%E3%81%8B%E3%80%81.net%E5%85%A8%E8%88%AC%E3%81%A7%E8%B5%B7%E3%81%93%E3%82%8A%E3%81%88%E3%82%8B%E3%81%8B%E5%88%87%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B\">2. それは Xamarin固有の事象か、.NET全般で起こりえるか切り分ける <a class=\"direct-link\" href=\"#2.-%E3%81%9D%E3%82%8C%E3%81%AF-xamarin%E5%9B%BA%E6%9C%89%E3%81%AE%E4%BA%8B%E8%B1%A1%E3%81%8B%E3%80%81.net%E5%85%A8%E8%88%AC%E3%81%A7%E8%B5%B7%E3%81%93%E3%82%8A%E3%81%88%E3%82%8B%E3%81%8B%E5%88%87%E3%82%8A%E5%88%86%E3%81%91%E3%82%8B\">#</a></h2>\n<p>ネイティブが原因である可能性を排除できたら、次は Xamarin 固有の事象かどうかを切り分けます。</p>\n<p>Xamarin 固有とは、言い換えればほとんど <a href=\"https://developer.xamarin.com/guides/xamarin-forms/\">Xamarin.Forms</a> の機能に関する問題かどうかです。</p>\n<ul>\n<li>Xamarin.Forms の画面レイアウト(ContentPage, MasterDetailPage, ContentView, …)</li>\n<li>Xamarin.Forms の画面ナビゲーション(NavigationPage, PushAsync, PushModalAsync, …)</li>\n<li>(Xamarin.Forms の)XAML</li>\n<li>(Xamarin.Forms の)データバインディング</li>\n<li>カスタムレンダラー</li>\n<li>Effects, Behavior</li>\n</ul>\n<p>などはここに該当するでしょう。</p>\n<p>解決方法を探るには Xamarin.Forms + あなたが直面している問題 をキーワードにググる（英語の方が見つかりやすい）、 <a href=\"https://teratail.com/\">teratail</a> や <a href=\"https://www.facebook.com/groups/xm.jxug/\">JXUG の Facebook ページ</a>に、 Xamarin.Forms のタグを付けて、聞いてみるのもよいです。</p>\n<p>ちなみに現在日本で発売されている Xamarin に関する書籍は、マイクロソフト公式である</p>\n<ul>\n<li><a href=\"http://amzn.to/2vcXNGb\">プログラミングXamarin 上 Xamarin.FormsとC#によるクロスプラットフォームモバイルアプリ開発</a></li>\n</ul>\n<p>を筆頭に、ほとんどが Xamarin.Forms に関するものです。書籍から解決方法が得られるかも知れません。<br>\n日本で発売済、または発売予定の書籍一覧は</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/38ee79b3e3e88cf751b9#%E6%9B%B8%E7%B1%8D\">Xamarin(ザマリン) とはなんぞや - 日本語情報について - 書籍</a></li>\n</ul>\n<p>でも紹介しています。</p>\n<p>Xamarin.Forms 向けと誤解されやすいのですが <a href=\"https://github.com/xamarin/XamarinComponents\">Plugins for Xamarin（Xamarin Plugins）</a> と呼ばれるライブラリ群があります。<br>\nここでトラブルに遭遇した場合、それは Xamarin固有 ですが Xamarin.Forms には依存しません。つまり 1. に戻って「Xamarin.Android、Xamarin.iOS で試してみる」ことが可能になります。さらにこれらはオープンソースなので、デバッグも可能です。ソースコードを追えば、Xamarin Plugins は各ネイティブのAPIを使った実装に対して、共通なインターフェースを与えているだけであることが分かると思います。</p>\n<h2 id=\"3.-.net%E5%85%A8%E8%88%AC%E3%81%A7%E8%B5%B7%E3%81%93%E3%82%8A%E3%81%88%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%A7%E3%81%82%E3%82%8C%E3%81%B0%E3%80%81.net%E7%B3%BB%E3%81%AE%E6%83%85%E5%A0%B1%E6%BA%90%E3%81%8B%E3%82%89%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95%E3%82%92%E6%8E%A2%E3%81%99\">3. .NET全般で起こりえる問題であれば、.NET系の情報源から解決方法を探す <a class=\"direct-link\" href=\"#3.-.net%E5%85%A8%E8%88%AC%E3%81%A7%E8%B5%B7%E3%81%93%E3%82%8A%E3%81%88%E3%82%8B%E5%95%8F%E9%A1%8C%E3%81%A7%E3%81%82%E3%82%8C%E3%81%B0%E3%80%81.net%E7%B3%BB%E3%81%AE%E6%83%85%E5%A0%B1%E6%BA%90%E3%81%8B%E3%82%89%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95%E3%82%92%E6%8E%A2%E3%81%99\">#</a></h2>\n<p>ここまで来ると、「Android/iOSネイティブが原因ではない」「Xamarin固有の機能(≒Xamarin.Forms)が原因でもない」となっているはずです。</p>\n<p>ここであり得る問題は、</p>\n<ol>\n<li>C# の言語機能に関すること</li>\n<li>.NET Framework(や Mono)クラスライブラリの使い方や仕様に関すること</li>\n<li>.NETプラットフォームを対象とした有償やOSSのライブラリに関すること</li>\n</ol>\n<p>くらいしか想定される原因がないと思います。</p>\n<p>1 は言語の知識を得れば解決すると思いますが、言語の最新バージョンが使用できるか否かに関わるトラブルはあり得ます。</p>\n<p>2 も、.NET Framework のクラスライブラリの使い方の（新しめの）情報を当たれば、単純な How to であれば解決します。</p>\n<p>ちょっと複雑な問題である場合もあります。<br>\n例えば 「.NET Framework のクラスを使用した通信処理が Android では正しく動作しない、使い方は正しいはずである。」という問題が起こった場合、次のように切り分けていく必要があります。</p>\n<ul>\n<li>そのコードは iOS でも動作するか？</li>\n<li>そのコードは Windows(コンソールアプリ) でも動作するか？</li>\n</ul>\n<p>.NET Framework は、プラットフォームによって実装が異なるため、同じコードでも「あるプラットフォームだけ動作しない」可能性はあり得ます。そのような場合、動作させたい全てのプラットフォームで期待通り動作するコードに辿りつければよいですが、そうでない場合、プラットフォーム固有の回避（ワークアラウンド）コードを埋め込む必要があるかもしれません。</p>\n<p>AOT(Ahead Of Time)コンパイルを使用するiOS固有の事象として「iOSシミュレータでは動作するが、端末では動作しない」というものがあります。<a href=\"https://developer.xamarin.com/guides/ios/advanced_topics/limitations/\">Limitations - Xamarin</a> に引っかかってないか確認しましょう（Android でも端末による挙動の違いはありますが、主旨がズレるので割愛します）。</p>\n<p>3 は、有名どころだと <a href=\"http://www.newtonsoft.com/json\">Json.NET</a> のような、主に nuget で配布されているライブラリです。これらに関する問題であれば、発生している事象と、再現に必要な最小限の情報を突き止めて、 GitHub の issue や開発元へコンタクトを取るなどを行いましょう。ソースコードが公開されているので、大抵の場合、自分でデバッグして問題点を特定し、修正のパッチを投げることも可能です。</p>\n<p>中には（<a href=\"https://github.com/PrismLibrary/Prism\">Prism.Forms</a> のように）、Xamarin.Forms を対象としたライブラリもあります(Prism はその他のプラットフォームにも対応していますが)。そのような場合でも、まずは問題が Xamarin.Forms にあるのか Prism.Forms にあるのかを切り分けて、適切な質問をしましょう。</p>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h1>\n<p>もう一度言います。</p>\n<p><strong>問題が発生する最小の環境を作り出し</strong> てから、解決方法を探ったり、人に聞きましょう。</p>\n<p>【おまけ】<br>\n他のクロスプラットフォーム開発ツールに比べて Xamarin が秀でているのは 1. の<br>\n「ネイティブ（Java-Android や Swift-iOS）でも起こり得る事象かの切り分けが簡単」<br>\nなことです。なぜなら Xamarin は「ネイティブAPI をラップする\bだけ」だから。<br>\nここで紹介したトラブルシューティングの手間が面倒だ(＝メリットよりデメリットの方が大きい)と感じるのであれば、Xamarin は使わない方がよいでしょう。</p>\n",
      "date_published": "2017-07-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/07/15/avoid_secrets_from_github_in_your_bot_application_project/",
      "url": "https://blog.amay077.net/blog/2017/07/15/avoid_secrets_from_github_in_your_bot_application_project/",
      "title": "Bot Application のソースコードを GitHub で公開する時に秘匿情報を含めない方法",
      "content_html": "<p>別に Bot Application に限った話ではないのですけどね。</p>\n<!--more-->\n<p>Microsoft の Bot Framework を使った Bot Application の作成方法は、いくつかWebで公開されていますが、それらに沿って作成したソースコードを GitHub などの誰でも閲覧できるリポジトリで管理・公開すると、本来公開すべきでない以下の情報が含まれてしまいます。</p>\n<ul>\n<li>Bot Directory へ登録する際に発行される「Bot ID」, 「App ID」, 「App Password」</li>\n<li>Azure へ発行する際の設定情報</li>\n</ul>\n<p>これらをソースコード管理に含めないようにする方法を紹介します。</p>\n<h2 id=\"%E3%80%8Cbot-id%E3%80%8D%2C-%E3%80%8Capp-id%E3%80%8D%2C-%E3%80%8Capp-password%E3%80%8D-%E3%82%92%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E7%AE%A1%E7%90%86%E3%81%AB%E5%90%AB%E3%82%81%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\">「Bot ID」, 「App ID」, 「App Password」 をソースコード管理に含めないようにする <a class=\"direct-link\" href=\"#%E3%80%8Cbot-id%E3%80%8D%2C-%E3%80%8Capp-id%E3%80%8D%2C-%E3%80%8Capp-password%E3%80%8D-%E3%82%92%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E7%AE%A1%E7%90%86%E3%81%AB%E5%90%AB%E3%82%81%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\">#</a></h2>\n<p>たとえば、</p>\n<ul>\n<li><a href=\"https://blogs.msdn.microsoft.com/bluesky/2016/11/15/5-step-tutorial-smilescorebot-bot-framework-cognitive-services-ja/\">5ステップでズバリ！笑顔判定BOT を作成しよう by Microsoft Bot Framework and Cognitive Services – 青い空の向こうへ</a></li>\n</ul>\n<p>では、BotのIDやパスワードなどを、<code>Web.config</code> の <code>&lt;app key=&quot;BotId&quot;</code> などに設定するよう書かれています。<br>\n実際プロジェクト作成直後の <code>Web.config</code> を見ても &quot;YourBotID&quot; などと書かれており、「ここに書くのが当然」感を醸し出しています。これがよくない！</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- Web.config --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appsettings</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token comment\">&lt;!-- update these with your BotId, Microsoft App Id and your Microsoft App Password--></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BotId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>YourBotID<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MicrosoftAppId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MicrosoftAppPassword<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>appsettings</span><span class=\"token punctuation\">></span></span><br>: (略)</code></pre>\n<p><code>Web.config</code> 及び <code>Web.Debug.config</code>, <code>Web.Release.config</code> は、 <a href=\"http://ASP.NET\">ASP.NET</a> の Webアプリケーションに関する設定を記述するもので、ソースコード管理に含めるべき情報です。<br>\n<strong>ここにIDやパスワードを記述してはいけません</strong></p>\n<p>ではどこに記述するかというと、</p>\n<ul>\n<li><a href=\"http://devadjust.exblog.jp/20400427/\">ASP.NET Web アプリで、APIキーなどの &quot;秘密のキー&quot; をどこに保存するべきか? : @jsakamoto</a></li>\n</ul>\n<p>で紹介されている方法を使って、別のファイルに逃します。</p>\n<p>具体的には、</p>\n<ol>\n<li>新たに <code>Web.local.config</code> というファイル（ファイル名は何でもよい）をプロジェクトに追加し、秘匿情報を含む XML のブロックはそちらに記述する</li>\n<li><code>Web.config</code> に上記ファイルへの参照を記述する</li>\n</ol>\n<p>とします。</p>\n<p><code>Web.local.config</code> は、 <code>Web.config</code> などと同じディレクトリに追加し、ビルドアクションを「コンテンツ」とします。</p>\n<p><img src=\"/img/posts/avoid_secrets_from_github_in_your_bot_application_project_01.png\" alt=\"\"></p>\n<p><code>Web.local.config</code> の内容は以下です。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- Web.local.config --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appSettings</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BotId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>＜あならのBOTID＞<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MicrosoftAppId<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>＜あなたのMicrosoftAppId＞<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>add</span> <span class=\"token attr-name\">key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MicrosoftAppPassword<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>＜あなたのMicrosoftAppPassword＞<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>appSettings</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code>Web.config</code> に記述していた <code>&lt;appSettings&gt;</code> 要素を切り出してきた感じですね。</p>\n<p>そして、 <code>Web.config</code> を次のように修正します。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- Web.config --></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>configuration</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>appSettings</span> <span class=\"token attr-name\">file</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Web.local.config<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token comment\">&lt;!-- 秘匿でない設定情報があればここに書く --></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>appSettings</span><span class=\"token punctuation\">></span></span><br>: (略)</code></pre>\n<p><code>&lt;appSettings file=&quot;Web.local.config&quot;&gt;</code> と記述することで、<code>Web.local.config</code> の内容をここに注入できます。</p>\n<p>あとは <code>Web.local.config</code> を <code>.gitignore</code> に追加するなどしてソースコード管理対象から除外します。<br>\n<code>Web.local.config</code> が存在しなくてもビルドや実行はできるようですが、初見の人には不親切なので、 <code>README.md</code> で補足説明をしておくのがよいでしょう。</p>\n<h2 id=\"%E9%96%8B%E7%99%BA%E7%94%A8%E3%81%A8%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E7%94%A8%E3%81%A7-%E3%80%8Cbot-id%E3%80%8D%2C-%E3%80%8Capp-id%E3%80%8D%2C-%E3%80%8Capp-password%E3%80%8D-%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B\">開発用とプロダクト用で 「Bot ID」, 「App ID」, 「App Password」 を切り替える <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E7%94%A8%E3%81%A8%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E7%94%A8%E3%81%A7-%E3%80%8Cbot-id%E3%80%8D%2C-%E3%80%8Capp-id%E3%80%8D%2C-%E3%80%8Capp-password%E3%80%8D-%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B\">#</a></h2>\n<p>前の手順で設定したID、パスワードなどは「開発用」の情報です。<br>\nAzureに配置した本番環境では、別のID、パスワードを使用したいケースは普通にあります。<br>\n本番環境の設定はAzureポータルから行えます。</p>\n<p><img src=\"/img/posts/avoid_secrets_from_github_in_your_bot_application_project_02.png\" alt=\"\"></p>\n<p>この図のように、</p>\n<ol>\n<li>Azure ポータル（<a href=\"https://portal.azure.com/%EF%BC%89\">https://portal.azure.com/）</a> で、配布した Bot Application（App Service） を開き、さらに「アプリケーション設定」を開きます</li>\n<li>「アプリ設定」で、 本番用の「Bot ID」, 「App ID」, 「App Password」を追加します</li>\n<li>最後に「保存」を押します</li>\n</ol>\n<p>ここで設定した内容は、配布した <code>Web.config</code> にある <code>&lt;appSettings&gt;</code> の内容を上書きします。</p>\n<h2 id=\"azure-%E3%81%B8%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%83%85%E5%A0%B1%E3%82%92%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E7%AE%A1%E7%90%86%E3%81%AB%E5%90%AB%E3%82%81%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\">Azure へ発行する際の設定情報をソースコード管理に含めないようにする <a class=\"direct-link\" href=\"#azure-%E3%81%B8%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E8%A8%AD%E5%AE%9A%E6%83%85%E5%A0%B1%E3%82%92%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E7%AE%A1%E7%90%86%E3%81%AB%E5%90%AB%E3%82%81%E3%81%AA%E3%81%84%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Visual Studio 2017 は、IDE から Azure への発行ができてとても便利なのですが、発行のための情報も保持してしまうので、その際の情報もソースコード管理に含めるべきではありません。</p>\n<p><img src=\"/img/posts/avoid_secrets_from_github_in_your_bot_application_project_03.png\" alt=\"\"></p>\n<p>これらの情報はプロジェクトのディレクトリの <code>Properties\\PublishProfiles</code> というサブディレクトリに、 <code>*.pubxml</code>, <code>*.pubxml.user</code> というファイル名で保存されるようなので、このディレクトリ毎、あるいは個別のファイルを <code>.gitignore</code> に追加すればよいです。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li><code>Web.config</code> には秘匿情報を書かない</li>\n<li><code>Web.local.config</code> を作って、そちらに書く、このファイルはソースコード管理しない</li>\n<li>本番用のIDやパスワードはAzureポータルで設定する</li>\n<li>Azureへ発行する際の設定情報もソースコード管理しない</li>\n</ul>\n<p>結果、 <code>.gitignore</code> に次の２行を追加するとよいです。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># .gitignore</span><br>＜省略＞<br><br>*.local.config<br>PublishProfiles/</code></pre>\n<p>手前味噌ですが、上記以外の <code>.gitignore</code> の設定は <a href=\"https://www.gitignore.io/\">https://www.gitignore.io/</a> で &quot;VisualStudio&quot; と検索して生成されるものを使用すると便利です（上の2行が含まれているわけではありません）。</p>\n",
      "date_published": "2017-07-15T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/07/13/solution_created_vs4mac_does_not_running_on_vs2017/",
      "url": "https://blog.amay077.net/blog/2017/07/13/solution_created_vs4mac_does_not_running_on_vs2017/",
      "title": "Visual Studio for Mac で作ったプロジェクトを Visual Studio 2017 で実行する時気をつけること",
      "content_html": "<p>小ネタです。</p>\n<!--more-->\n<p>Xamarin でのモバイルアプリ開発では、 Mac の方が（主に iOS 関連で）都合がよいことが多いので、Visual Studio for Mac を使っています。</p>\n<p>そんなわけなので新規ソリューション作成も Visual Studio for Mac（以前は Xamarin Studio） で行っているのですが、これらで作成したソリューションを Windows の Visual Studio 2017 で開いてビルドし、いざ実行しようと「デバッグの開始(F5)」を押しても、一向にアプリが起動しません。それどころかAndroidエミュレータも起動しません。</p>\n<p>こんなこと初めてだなー、と思っていろいろみていたら、ふとソリューションの構成マネージャーに、「配置」をいう項目が増えているのに気づきました。</p>\n<p><img src=\"/img/posts/solution_created_vs4mac_does_not_running_on_vs2017_01.png\" alt=\"\"></p>\n<p>「キミ、いつからそこに居たの・・・」、完全にこれが犯人じゃん。<br>\nということで、この「配置」にチェックを入れて、再度 F5 で実行すると、無事、エミュレータが起動してアプリが実行できました。</p>\n<p>ちなみに下は Visual Studio for Mac の構成マネージャー的な画面ですが、「配置」なんてないんですよね。。。</p>\n<p><img src=\"/img/posts/solution_created_vs4mac_does_not_running_on_vs2017_02.png\" alt=\"\"></p>\n<p>Win と Mac で同じ機能はまったく期待してない Visual Studio ですが、細かいところ（可能なところ）は統一してほしいなあと思います。</p>\n",
      "date_published": "2017-07-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/07/08/sending_message_from_console_app_using_bot_framework/",
      "url": "https://blog.amay077.net/blog/2017/07/08/sending_message_from_console_app_using_bot_framework/",
      "title": "コンソールアプリからBot Frameworkを使ってBotからクライアントにメッセージを送る",
      "content_html": "<p><a href=\"https://docs.microsoft.com/en-us/Bot-Framework/index\">Microsoft の Bot Framework</a> を使った Botアプリケーションの開発にハマっています（楽しい方の意味で）。</p>\n<!--more-->\n<h2 id=\"%E8%87%AA%E4%BD%9Cbot%E3%82%92azure%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%97%E3%81%A6skype%E3%81%A7%E5%AF%BE%E8%A9%B1\">自作BotをAzureにデプロイしてSkypeで対話 <a class=\"direct-link\" href=\"#%E8%87%AA%E4%BD%9Cbot%E3%82%92azure%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%97%E3%81%A6skype%E3%81%A7%E5%AF%BE%E8%A9%B1\">#</a></h2>\n<p>まず、</p>\n<ul>\n<li><a href=\"http://qiita.com/Shinji-Hashimoto/items/80515f26c5b07b71b600\">Visual Studio2017でBot Frameworkを試す - Qiita</a></li>\n<li><a href=\"https://blogs.msdn.microsoft.com/bluesky/2016/11/15/5-step-tutorial-smilescorebot-bot-framework-cognitive-services-ja/\">5ステップでズバリ！笑顔判定BOT を作成しよう by Microsoft Bot Framework and Cognitive Services – 青い空の向こうへ</a></li>\n<li><a href=\"http://dorapon2000.hatenablog.com/entry/2016/09/04/031821\">Microsoft Bot Frameworkを使ってSkypeボットを作る - dorapon2000’s diary</a></li>\n</ul>\n<p>このあたりの情報を元に、</p>\n<ul>\n<li>簡単な Bot アプリをビルドして Botエミュレータで実行してみる</li>\n<li>その Bot を Azure にデプロイする</li>\n<li>Azure に配置した Bot を Skype と繋げる</li>\n<li>自分の Skype アカウントと Bot で対話する</li>\n</ul>\n<p>まで行うことができました。</p>\n<p><img src=\"/img/posts/my_first_bot_app_01.jpg\" alt=\"\"></p>\n<h2 id=\"%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8B%E3%82%89-skype-%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%EF%BC%88%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%EF%BC%89%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B\">コンソールアプリから Skype のユーザー（クライアント）へメッセージを送信する <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%B3%E3%82%BD%E3%83%BC%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8B%E3%82%89-skype-%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%EF%BC%88%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%EF%BC%89%E3%81%B8%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E4%BF%A1%E3%81%99%E3%82%8B\">#</a></h2>\n<p>さて、私が本当にやりたいのは「定期的にBotからユーザーへメッセージを送る（時報とか）」ことです。<br>\nが、 Visual Studio の Bot Application のプロジェクトテンプレートでは?（あるいは「Botアプリケーション」では）、処理の起点は必ずユーザー(クライアント)からBotへのメッセージ送信をBotが受信するところから始まるようです（違ってたら教えてください）。</p>\n<p>Bot Framework の REST API には <a href=\"https://docs.microsoft.com/en-us/bot-framework/rest-api/bot-framework-rest-connector-send-and-receive-messages\">Send and receive messages</a> もあるので、任意のタイミングでメッセージを送信することも可能なはず。</p>\n<p>いろいろ探していたら</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/39274159/3309589\">Starting a conversation with Microsoft bot builder and microsoft bot framework - Stack Overflow</a></li>\n</ul>\n<p>という情報を発見。おお、コンソールアプリからメッセージを送信できれば、これをcron的なものやAzure Functionsで定期的に実行させられそうです。</p>\n<p>コード例を元に悪戦苦闘した結果、下のようなコードでメッセージ送信ができました。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Program.cs</span><br><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> serviceUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"https://smba.trafficmanager.net/apis/\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> appId <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;APP_ID>\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> appPassword <span class=\"token operator\">=</span> <span class=\"token string\">\"&lt;APP_PASSWORD>\"</span><span class=\"token punctuation\">;</span><br><br>    MicrosoftAppCredentials<span class=\"token punctuation\">.</span><span class=\"token function\">TrustServiceUrl</span><span class=\"token punctuation\">(</span>serviceUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ※これがないと認証エラーになる</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> connector <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConnectorClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Uri</span><span class=\"token punctuation\">(</span>serviceUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> appId<span class=\"token punctuation\">,</span> appPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> botAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ChannelAccount</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"28:8734b597-b313-2457-bda6-d7c342245fea\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信元(Botの)ユーザー ※IDは適当だけどこんな感じの文字列だった</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> userAccount <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ChannelAccount</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">id</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"29:2WLwfakXxSbEze4gfeGxeS31nXfELePLX3deELoxHw\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 送信先ユーザー ※IDは適当だけどこんな感じの文字列だった</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> res <span class=\"token operator\">=</span> connector<span class=\"token punctuation\">.</span>Conversations<span class=\"token punctuation\">.</span><span class=\"token function\">CreateDirectConversation</span><span class=\"token punctuation\">(</span>botAccount<span class=\"token punctuation\">,</span> userAccount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">IMessageActivity</span> message <span class=\"token operator\">=</span> Activity<span class=\"token punctuation\">.</span><span class=\"token function\">CreateMessageActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    message<span class=\"token punctuation\">.</span>From <span class=\"token operator\">=</span> botAccount<span class=\"token punctuation\">;</span><br>    message<span class=\"token punctuation\">.</span>Recipient <span class=\"token operator\">=</span> userAccount<span class=\"token punctuation\">;</span><br>    message<span class=\"token punctuation\">.</span>Conversation <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ConversationAccount</span><span class=\"token punctuation\">(</span><span class=\"token named-parameter punctuation\">id</span><span class=\"token punctuation\">:</span> res<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    message<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"こんにちわ\"</span><span class=\"token punctuation\">;</span><br>    message<span class=\"token punctuation\">.</span>Locale <span class=\"token operator\">=</span> <span class=\"token string\">\"ja-Jp\"</span><span class=\"token punctuation\">;</span><br>    connector<span class=\"token punctuation\">.</span>Conversations<span class=\"token punctuation\">.</span><span class=\"token function\">SendToConversation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>Activity<span class=\"token punctuation\">)</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>以下、ポイント</p>\n<ul>\n<li>コンソールアプリプロジェクトを作ったら、ターゲットフレームワークを .NET Framework 4.6 に上げる（４．５ だと Bot.Builder が入れられなかった）</li>\n<li>Nugetパッケージマネージャから「Microsoft.Bot.Builder」を入れる（ここで入れたのは v3.8.0 です）</li>\n<li>＜APP_ID＞、＜APP_PASSWORD＞は、Botを <a href=\"https://dev.botframework.com/\">https://dev.botframework.com/</a> に登録する仮定で得られるやつ</li>\n<li><code>MicrosoftAppCredentials.TrustServiceUrl(serviceUrl)</code> をしないと、<code>CreateDirectConversation</code> で認証(401)エラーになりました。 <a href=\"https://codedump.io/share/43fLSEl1kzYX/1/bot-framework-unauthorized-when-creating-a-conversation\">Bot Framework Unauthorized when creating a conversation (C#) - Codedump.io</a> が大変役に立ちました。</li>\n<li><code>serviceUrl</code> は、なんかよく分からんけどこれらしい</li>\n<li><code>serviceUrl</code>、 <code>botAccount</code> のId、 <code>userAccount</code> のIdは、<a href=\"https://github.com/Microsoft/BotBuilder-Samples/tree/master/CSharp/core-GetConversationMembers\">BotBuilder-Samples/CSharp/core-GetConversationMembers</a> も参考にして、Bot ApplicationのHelloWorldを改造して取得しました。</li>\n</ul>\n<p>このプログラムを実行すると、 <code>userAccount</code> が示すSkypeユーザー(ここでは私)に「こんにちわ」のメッセージが送信されます、やった！</p>\n<p><img src=\"/img/posts/my_first_bot_app_02.png\" alt=\"\"></p>\n<p>今作りたいと思っているのは「タイムカード打刻BOT」で、月末に EXCEL に退勤時間を書くのが面倒なので、毎日、18:00 になったら、Botに「仕事おわった？」と聞いて欲しいのです。「はい」と回答すればその時刻を打刻、「いいえ」と答えたら１時間後にまた聞いてくる・・・、という感じで（弊社は Skype 常時起動させてるから Skype で試してるけど Bot Connector により Slack などの別ツールにも対応できるはず）。</p>\n<p>これを行うには、クライアント起点の対話でなく、BOT起点の対話が必要で、コンソールアプリからメッセージ送信することができたので、次はAzure Functionでやってみようかと思います。</p>\n<p>BOT開発、しばらく楽しめそうです。</p>\n",
      "date_published": "2017-07-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/06/17/had_a_session_about_xamarin_forms_googlemaps_in_jxug_nagoya/",
      "url": "https://blog.amay077.net/blog/2017/06/17/had_a_session_about_xamarin_forms_googlemaps_in_jxug_nagoya/",
      "title": "学生でもわかるXamarin勉強会で「Xamarin.Forms.GoogleMaps について」という話をしました",
      "content_html": "<p>JXUG\b名古屋支部の勉強会で Xamarin Day してきました。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://jxug.connpass.com/event/57324/\">[なごや]学生でもわかるXamarin勉強会 - connpass</a></li>\n</ul>\n<h2 id=\"%E8%B3%87%E6%96%99\">資料 <a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99\">#</a></h2>\n<ul>\n<li><a href=\"https://speakerdeck.com/amay077/xamarin-dot-forms-dot-googlemaps-nituite\">Xamarin.Forms.GoogleMaps について // Speaker Deck</a></li>\n</ul>\n<h2 id=\"%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">感想とか <a class=\"direct-link\" href=\"#%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">#</a></h2>\n<p>ほぼほぼ Google Maps API/SDK の紹介でしたね。<br>\nとは言え、<a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Xamarin\b.Forms.GoogleMaps</a> については、リファレンス的なドキュメント作成をサボっているので、\b（なにかキッカケを作って）作成したいと思っています。</p>\n<p>Google Maps API の機能自体が、どこまで Android/iOS/.NET開発者に知られているかも分からないし、需要はあるのかもしれないですね。</p>\n",
      "date_published": "2017-06-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/05/09/first_install_apps_on_mac/",
      "url": "https://blog.amay077.net/blog/2017/05/09/first_install_apps_on_mac/",
      "title": "macOS 初期セットアップ時にインストールするアプリ",
      "content_html": "<p>Mac をクリーンインストールするときに\b入れるアプリ一覧。</p>\n<!--more-->\n<ul>\n<li>Chrome</li>\n<li>Google IME</li>\n<li>Xcode</li>\n<li>Xcode command lie tools</li>\n<li>Homebrew</li>\n<li>VMware Fusion</li>\n<li>Android Studio</li>\n<li>Dropbox</li>\n<li>Skype</li>\n<li>Java8 - JDK</li>\n<li>VSCode</li>\n<li>anyenv</li>\n<li>ndenv</li>\n<li>rbenv</li>\n<li>peco</li>\n<li>adb-peco</li>\n<li>Xamarin Studio</li>\n<li>JetBrains Rider</li>\n<li>JetBrains DataGrip</li>\n<li>ClipMenu</li>\n<li>FreeMemory</li>\n<li>WinMacZipper</li>\n<li>Skitch</li>\n<li>.NET Core</li>\n<li>ESET Security</li>\n<li>SourceTree</li>\n<li>ImageOptim</li>\n<li>Pngyu</li>\n</ul>\n<h2 id=\"%E7%A7%BB%E8%A1%8C%E5%85%83%E3%81%8C%E3%81%82%E3%82%8B%E3%81%A8%E3%81%8D%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\">移行元があるときやること <a class=\"direct-link\" href=\"#%E7%A7%BB%E8%A1%8C%E5%85%83%E3%81%8C%E3%81%82%E3%82%8B%E3%81%A8%E3%81%8D%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8\">#</a></h2>\n<ul>\n<li>.bash_profile の移行</li>\n<li>DataGrip のDB接続設定の移行</li>\n<li>VPN ルーティング設定の移行</li>\n</ul>\n<h3 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h3>\n<ul>\n<li><a href=\"http://sig9.hatenablog.com/entry/2015/03/05/115736\">OS X での VPN 時に特定経路のみ、VPN にルーティングするには - らくがきちょう</a></li>\n</ul>\n",
      "date_published": "2017-05-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/04/19/rider_supports_xamarin_android_project/",
      "url": "https://blog.amay077.net/blog/2017/04/19/rider_supports_xamarin_android_project/",
      "title": "JetBrains Rider で Xamarin.Android プロジェクトのデバッグが行えるようになりました",
      "content_html": "<p>クロスプラットフォーム対応の.NET向けIDE、JetBrains Rider の EAP(Early Access Program) ver.20 で、ついに Xamarin.Android の「実行」がサポートされました（今までも「ビルドだけ」はできたのですが）。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://blog.jetbrains.com/dotnet/2017/04/14/rider-eap-20-xamarin-android-node-js-net-core-improvements/\">Rider EAP 20: Xamarin Android, Node.js, .NET Core improvements, and more - .NET Tools Blog.NET Tools Blog</a></li>\n</ul>\n<p>たとえば <a href=\"https://developer.xamarin.com/samples/\">Xamarin Samples</a> の</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/samples/xamarin-forms/ButtonCode/\">ButtonCode - Xamarin</a></li>\n</ul>\n<p>を Rider で開いてビルド、デバッグ実行してみます。<br>\nこれは Xamarin.Forms のソリューションですが、その中の Android プロジェクトは実行できます。</p>\n<p><img src=\"/img/posts/rider_supports_xamarin_android_project_01.png\" alt=\"\"></p>\n<p>上図のように、エミュレータも起動でき、ブレークポイントを置いてのステップイン・ステップオーバーなども実行できます。<br>\nデバッグ画面のルック＆フィールは JetBrains 製品らしくなっており、Android Studio を使っている人にとっても馴染みがあります。</p>\n<p>また、Rider で Xamarin.Android プロジェクトを新規作成することも可能です。<br>\nが、Rider で作成したプロジェクトをXamarin Studioなどで開くとエラーになってしまいます。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">JetBrains Rider  Xamarin Android プロジェクト作成→Run→エミュ起動→アプリ実行、までできたけど、その .sln/csproj を Visual Studio for Mac で開くとエラー <a href=\"https://t.co/u0HXb4dVSr\">pic.twitter.com/u0HXb4dVSr</a></p>&mdash; あめい@超技術書典4/30 あ-12 (@amay077) <a href=\"https://twitter.com/amay077/status/852912306056863744\">2017年4月14日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>こちらは今後の開発進行に伴い改善されていくでしょう。</p>\n",
      "date_published": "2017-04-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/04/15/had_a_session_about_xamarin_android_in_jaghama/",
      "url": "https://blog.amay077.net/blog/2017/04/15/had_a_session_about_xamarin_android_in_jaghama/",
      "title": "日本Androidの会 浜松支部さんの勉強会で「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」という話をしました",
      "content_html": "<p>日本Androidの会 浜松支部さんの勉強会で Xamarin Day してきました。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://jaghama.connpass.com/event/54228/\">はじめてのXamarin with D - connpass</a></li>\n</ul>\n<h2 id=\"%E8%B3%87%E6%96%99\">資料 <a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99\">#</a></h2>\n<p>資料は例によって DroidKaigi で発表したもののヘッダとフッタを変えただけです。</p>\n<ul>\n<li><a href=\"https://speakerdeck.com/amay077/xamarin-dot-android-teshi-merukurosuhuratutohuomumohairuahurikai-fa-number-jaghama\">Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発 #jaghama // Speaker Deck</a></li>\n</ul>\n<h2 id=\"%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">感想とか <a class=\"direct-link\" href=\"#%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">#</a></h2>\n<p>前週の名古屋での勉強会でも参加者の人に聞いたんですけど、Kotlin 使ったことある人はゼロで… DroidKaigi ではもはやデファクトスタンダードくらいの勢いだったのに、これが地域格差か…。</p>\n<p>技術書典で販売した <a href=\"https://atsushieno.github.io/xamaritans/tbf2.html\">Essential Xamarin Yin/Yang</a> の著者確保分３冊を持っていきました。すべて買っていただいてありがとうございます！これで私の在庫はなくなりました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Essential Xamarin Yin/Yang x 3 完売ありがとうございまーす。 <a href=\"https://twitter.com/hashtag/jaghama?src=hash\">#jaghama</a></p>&mdash; あめい@超技術書典4/30 あ-12 (@amay077) <a href=\"https://twitter.com/amay077/status/853121825403830272\">2017年4月15日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>発表の後は、ハンズオンという名目でもくもく会でした。</p>\n<p>ハンズオンのテキストは前日つぶやいたらたくさんのひとが教えてくれて、 <a href=\"https://twitter.com/ytabuchi\">@ytabuchi</a> さんはエントリまで書いて頂いて、ありがとうございます。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Xamarin 勉強会で行うことができるハンズオンの Lineup ってどんなのがあります？（明日のまだ決めてない）</p>&mdash; あめい@超技術書典4/30 あ-12 (@amay077) <a href=\"https://twitter.com/amay077/status/852780051183525889\">2017年4月14日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<ul>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/XamarinHandsOn\">Xamarin ハンズオン資料まとめ - Xamarin 日本語情報</a></li>\n</ul>\n<p>当日は、 <a href=\"https://twitter.com/chomado\">@chomado</a> さんの <a href=\"https://github.com/chomado/SimpleList\">chomado/SimpleList: 簡単な Xamarin.Forms アプリハンズオン資料</a> を選択される方が多かったように見えました。</p>\n<p>私もそれを改造して、<a href=\"/blog/2017/04/13/creating_mastodon_client_using_dot_net_core/\">Masto.NET を使って</a>  mastodon のユーザー一覧を表示するアプリを Xamarin.Forms で作って遊んでました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://t.co/5jbGKktQtX\">https://t.co/5jbGKktQtX</a> をちょっと改造して、 Xamarin.Forms で mastodon .cloud のユーザーを取得して表示するやつ <a href=\"https://t.co/WF0C3CxNLF\">pic.twitter.com/WF0C3CxNLF</a></p>&mdash; あめい@超技術書典4/30 あ-12 (@amay077) <a href=\"https://twitter.com/amay077/status/853157026561536001\">2017年4月15日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>あ、 Visual Studio 2017 でも Xamarin.Forms プロジェクトの初回ビルド時に nuget パッケージ群のダウンロードで 800MB くらいもっていかれるようです。</p>\n<h2 id=\"%E6%87%87%E8%A6%AA%E4%BC%9A\">懇親会 <a class=\"direct-link\" href=\"#%E6%87%87%E8%A6%AA%E4%BC%9A\">#</a></h2>\n<p>刺し身も焼き魚も寿司もおいしかった！泣いた(ワサビの辛さで)！</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">某打ち上げに参加できないので、廻らない寿司食べられてよかった <a href=\"https://t.co/iEck2evKvZ\">pic.twitter.com/iEck2evKvZ</a></p>&mdash; あめい@超技術書典4/30 あ-12 (@amay077) <a href=\"https://twitter.com/amay077/status/853196748428201984\">2017年4月15日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"https://tabelog.com/en/shizuoka/A2202/A220201/22001004/\">ラーメン三太</a> はまた次回行きましょう！</p>\n",
      "date_published": "2017-04-15T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/04/13/creating_mastodon_client_using_dot_net_core/",
      "url": "https://blog.amay077.net/blog/2017/04/13/creating_mastodon_client_using_dot_net_core/",
      "title": "Mastodon のクライアントアプリを .NET Core で作ってみた",
      "content_html": "<p>Mastodon という「自由で」「オープンソースな」（Twitter のような） SNS がなんか流行りだして、もともとあった <a href=\"https://mastodon.cloud/\">mastodon.cloud</a> や <a href=\"https://twitter.com/nullkal\">@nullkal</a> 氏が立てたインスタンス <a href=\"https://mstdn.jp/\">mstdn.jp</a> に日本人が多くあつまって祭りみたいになってる。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://ascii.jp/elem/000/001/465/1465842/\">ASCII.jp：Twitterのライバル？　実は、新しい「マストドン」（Mastodon）とは！｜遠藤諭のプログラミング＋日記</a></li>\n</ul>\n<p>API ももちろんあって、 .NET 製の APIライブラリもあった。 @kagasu さん :ok_hand:</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"tl\" dir=\"ltr\">glacasa/Mastonet: C# Library for Mastodon<a href=\"https://t.co/BwR9n1Eqbd\">https://t.co/BwR9n1Eqbd</a></p>&mdash; ♣ ♥ ♠ ♦🍍 (@kagasu) <a href=\"https://twitter.com/kagasu/status/852206484347912192\">2017年4月12日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>で、試しにこの「<a href=\"https://github.com/glacasa/Mastonet\">Musto.NET</a>」を使って、 mastodon.cloud の連邦？タイムラインを表示するだけのコンソールアプリを作ってみた。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/MastoConsoleNetStandard\">amay077/MastoConsoleNetStandard: Mastodon クライアントのサンプルコンソールアプリ for .NET Standard</a></li>\n</ul>\n<p>API はとってもシンプルで、次のような単純なコードでTOOTのストリーミング受信ができる。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RunAsync</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> email<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> password<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> instanceUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"mastodon.cloud\"</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// MastodonClient.CreateApp で得たものを保存しとく必要があるけど面倒だから UnitTest(MastodonClientTests)のを使わせてもらった</span><br>    <span class=\"token comment\">//var appRegistration = await MastodonClient.CreateApp(instanceUrl, \"MastoConsoleStandard\", Scope.Read);</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> appRegistration <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AppRegistration</span> <br>    <span class=\"token punctuation\">{</span><br>        ClientId <span class=\"token operator\">=</span> <span class=\"token string\">\"ぎっはぶをみてね\"</span><span class=\"token punctuation\">,</span><br>        ClientSecret <span class=\"token operator\">=</span> <span class=\"token string\">\"ぎっはぶをみてね\"</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MastodonClient</span><span class=\"token punctuation\">(</span>instanceUrl<span class=\"token punctuation\">,</span> appRegistration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> auth <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span>email<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> streaming <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">GetPublicStreaming</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// Register events</span><br>    streaming<span class=\"token punctuation\">.</span>OnUpdate <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>    <span class=\"token punctuation\">{</span><br>        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"--\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">.</span>CreatedAt<span class=\"token punctuation\">.</span><span class=\"token function\">ToLocalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\"> - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">e<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">.</span>Account<span class=\"token punctuation\">.</span>AccountName</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">:\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>Status<span class=\"token punctuation\">.</span>Content<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// Start streaming</span><br>    streaming<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>アプリは、まず mastodon のインスタンスに<code>MastodonClient.CreateApp</code>で「アプリを登録」して、<code>AppRegistration</code>を得る必要がある。<br>\nこれは実際には <code>ClientId</code> と <code>ClientSecret</code> で、一度登録したら保存して使う。<br>\nmastodon の既定の実装では、特に制限なくすぐにレスポンスが返ってくるが、コードを変更してインスタンス管理者の承認制などにすることもできるのだろう。</p>\n<p>そしてアプリの登録は mastodon のインスタンス毎に行わなければならないので、たとえば現在出回っているクライアントアプリは、 mastodon.cloud では使えるが <a href=\"http://mstdn.jp\">mstdn.jp</a> では使えない、ということもある。</p>\n<p>「アプリをインスタンスに登録する」仕組みまで備えたクライアントアプリも作成可能で、<a href=\"https://itunes.apple.com/us/app/amaroq-for-mastodon/id1214116200\">Amaroq for Mastodon</a> というアプリはそのひとつだと<a href=\"https://mastodon.cloud/@fk2000/519030\">教えてもらった</a>。</p>\n<p>mastodon のユーザーはインスタンス毎に違うので、そのインスタンスで作った email/password で <code>connect</code> する。<br>\nあとは、 <code>OnUpdate</code> でストリームを受信しておいて、 <code>Start</code> すればよい、と。</p>\n<p><a href=\"http://Masto.NET\">Masto.NET</a> が .NET Standard に対応しているので、 .NET Standard な実行環境,<br>\nMac/Linux なら .NET Core がインストールされた環境なら動作する。</p>\n<p>適切に責務分割された Twitter クライアントなら、それほど手間なく mastodon クライアントアプリになれるかも。<br>\n前述のとおり複数インスタンス対応は必要だけど。アプリが対応するインスタンスとその<code>ClientId</code> と <code>ClientSecret</code>の保存のために、サーバーサイド(mBaaS)が必要になると思う。</p>\n<p>一応わたしもアカウントつくりました→ <a href=\"https://mastodon.cloud/@amay077\">https://mastodon.cloud/@amay077</a><br>\n<a href=\"http://mstdn.jp\">mstdn.jp</a> にも作ったけど、メインはこっちで。頑張ってる人は <a href=\"https://mastodon.cloud/@login/508935\">応援したい</a> し <a href=\"https://mstdn.jp/@nullkal/37086\">応援した</a> 。</p>\n",
      "date_published": "2017-04-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/04/09/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2/",
      "url": "https://blog.amay077.net/blog/2017/04/09/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2/",
      "title": "技術書典2 で Essential Xamarin Yin(陰)/Yang(陽) を頒布しました",
      "content_html": "<p>といっても私は一般参加でしたが。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://techbookfest.org/event/tbf02\">技術書典２｜技術書典</a></li>\n</ul>\n<h2 id=\"xamaritians-%E3%81%AE%E3%83%96%E3%83%BC%E3%82%B9\">Xamaritians のブース <a class=\"direct-link\" href=\"#xamaritians-%E3%81%AE%E3%83%96%E3%83%BC%E3%82%B9\">#</a></h2>\n<p>頒布しましたのは以前にも告知したこちらです。</p>\n<ul>\n<li><a href=\"/blog/2017/04/07/wrote_for_techbookfes2/\">技術書典2に Xamarin 本を出します！</a></li>\n</ul>\n<p>前日勉強会に参加してた名古屋から豪華夜行バスで東京に。早朝に着いたので時間つぶしで温泉を楽しみながら、開場の15分前くらいに現地入り。既に100人くらい並んでました。順番としては早いほうだったので、少し待っただけで会場内に入ることができました。</p>\n<p>我らのブースの売り子は「Xamarin.Macペア」の <a href=\"https://twitter.com/ailen0ada\">@ailen0ada</a> さんと <a href=\"https://twitter.com/Takkiii0204\">@Takkiii0204</a> さん。ブースの手伝いを─と思ってましたが特に刷ることもなかったです、ありがとうございました。</p>\n<p>ブースの前には、たまに人だかりもできて売れ行きも好調だったようです。</p>\n<p><img src=\"/img/posts/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2_02.jpg\" alt=\"\"></p>\n<p>結果的に開始から2時間ほどで用意しておいた部数は完売してしまって、後はPDFダウンロードカードのみの販売に切り替えたとのこと。</p>\n<p><img src=\"/img/posts/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2_03.jpg\" alt=\"\"></p>\n<p>著者の一人として初めてのイベントだったので期待も不安もありましたが、うまくいってとても良かったです。ブースが角で目立つ位置だったのも良かったですね。</p>\n<p>次は 4/30、 <a href=\"http://www.chokaigi.jp/2017/booth/cho_gijutsusyoten.html\">超技術書典</a> にも出展します。そのために増刷しました。是非、お見逃しなく！</p>\n<h2 id=\"%E5%8F%82%E5%8A%A0%E8%80%85%E3%81%A8%E3%81%97%E3%81%A6\">参加者として <a class=\"direct-link\" href=\"#%E5%8F%82%E5%8A%A0%E8%80%85%E3%81%A8%E3%81%97%E3%81%A6\">#</a></h2>\n<p>こういう同人イベントは初めてだったのでちょっとキョドってしまいました。もっとブースの人とトークしてけばよかった。</p>\n<p>買った本はこんな感じです。</p>\n<p><img src=\"/img/posts/distributed_a_essential_xamarin_yin_yang_in_tech_book_fest2_01.jpg\" alt=\"\"></p>\n<p>全て楽しく読ませていただいております。</p>\n<p>事前にサークルチェックしていたのに買うのを忘れる本もあったりしてちょっと後悔。<br>\n多くのサークルさんは後に電子版や別なイベントで再入手の機会がありますが、中には特殊な事情で?その場限りの書籍もあったようで「なるほどこれが同人誌か」と感じました。</p>\n<p>帰り、あいにくの雨だったのでせっかくの本たちが塗れないようにするのが大変、あと重い！<br>\nいろんな意味で手持ちで帰路を行くのは早々にあきらめてアキバのクロネコヤマト営業所から自宅に配送しました。</p>\n<p>総じて、本を書いた側としても参加者としてもとても楽しかった。<br>\n次回も参加できるように頑張ります！</p>\n",
      "date_published": "2017-04-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/04/08/had_a_session_about_xamarin_android_in_jxug_nagoya/",
      "url": "https://blog.amay077.net/blog/2017/04/08/had_a_session_about_xamarin_android_in_jxug_nagoya/",
      "title": "Xamarin 勉強会 in 名古屋で「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」という話をしました",
      "content_html": "<p>JXUG学生支部さん主催の名古屋での勉強会で、Xamarin について話しました。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://jxug.connpass.com/event/52683/\">Xamarin 勉強会 in 名古屋 with JXUG, MSP, JXUG学生支部 - connpass</a></li>\n</ul>\n<h2 id=\"%E8%B3%87%E6%96%99\">資料 <a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99\">#</a></h2>\n<p>資料はこちらです。 DroidKaigi での発表から何も変わってないです。</p>\n<ul>\n<li><a href=\"https://speakerdeck.com/amay077/xamarin-dot-android-teshi-merukurosuhuratutohuomumohairuahurikai-fa-number-jxug\">Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発 #jxug // Speaker Deck</a></li>\n</ul>\n<h2 id=\"%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">感想とか <a class=\"direct-link\" href=\"#%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">#</a></h2>\n<p>サブウェイおいしかったです。</p>\n<p><img src=\"/img/posts/had_a_session_about_xamarin_android_in_jxug_nagoya_01.png\" alt=\"\"></p>\n<p>DroidKaigi はバリバリの Androidネイティブ開発者揃いの場で、それ用の資料だったので、MS系の多い？今回の勉強会では少し分かりづらいところがあったかも知れません。</p>\n<p>それでもアンケートでは概ね好評だったようで良かったです。</p>\n<p>実はマイクロソフト中部支社さんへ行ったのは今回が初めてでした。<br>\n最近は特にXamarin関係で、東京のマイクロソフト品川本社でのイベントに参加することが多かったので。</p>\n<p>中部支社はとてもきれいなオフィスでした。会議室３つはそれぞれ「IEUYASU」「NOBUNAGA」「HIDEYOSHI」って命名されてて、中部っぽさがありました。</p>\n<p>ルーセントタワーには、Aチームさんが居られた頃に、よく勉強会で会場提供されていたので、何度もお邪魔させてもらった事はあったのですが。</p>\n<p>中部地方はBtoCよりBtoB企業が多いので、業務アプリ開発に特に強いXamarinはよく「刺さる」と思います。</p>\n",
      "date_published": "2017-04-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/04/07/wrote_for_techbookfes2/",
      "url": "https://blog.amay077.net/blog/2017/04/07/wrote_for_techbookfes2/",
      "title": "技術書典2に Xamarin 本を出します！",
      "content_html": "<p>4/9(日) に開催される <a href=\"https://techbookfest.org/event/tbf02\">技術書典２</a> に、 Xamaritans（ざまりたんず） が Xamarin 本を２冊！出します。ブースは「 <strong>う-13</strong> 」です。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://atsushieno.github.io/xamaritans/tbf2.html\">技術書典2/超技術書典 出展情報 - Xamaritans</a></li>\n</ul>\n<p><img src=\"/img/posts/wrote_for_techbookfes2_01.png\" alt=\"\"></p>\n<p>2冊の本はそれぞれ「Essential Xamarin - Yin/陰」、「Essential Xamarin - Yang/陽」というタイトルで、それぞれ 1000円 となっています。2冊揃わないと完全体じゃないのでもちろん両方買ってください。</p>\n<p>私はその一員として <strong>「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」</strong> という章を書きました。こちらは「Essential Xamarin - Yang/陽」に収録されています。</p>\n<p>目次はこんな感じです。</p>\n<p><img src=\"/img/posts/wrote_for_techbookfes2_02.png\" alt=\"\"></p>\n<p>タイトルが <a href=\"/blog/2017/03/10/had_a_session_about_xamarin_android_in_droidkaigi2017/\">DroidKaigi2017 でのセッション</a> と一緒！<br>\nそうです、DroidKaigi の完全版がこの本、いや原稿の方が先に出来上がっていたのであちらがダイジェストだったのです。</p>\n<p>セッションと流れは同じですが、それぞれをより詳しく解説しています。蛇足なコラムも多いです。</p>\n<p>同じアプリを Android ネイティブと Xamarin(.Forms) で作成したらこうなるよ、という解説も、MVVM や Rx(RxJava) と絡めて載せています（GitHub でソースも公開予定）。</p>\n<p>ほんの少しですが、 Kotlin や Clean Architecture などにも触れています。</p>\n<p>話が前後しましたが、この本は Androidアプリ開発者の人が Xamarin を理解する事を目的としています。<br>\nしかし Xamarin の目的は複数プラットフォームでのコードの共通化なので、iOS アプリ開発の話題もあり、 Xamarin.Forms の話題もありです。</p>\n<p>逆にマイクロソフト系の開発者の人が、「へー Android ネイティブってこうなんだー」という目で読んでも良いかと思います。</p>\n<p>この本の内容自体が、私が現在 Xamarin を選ぶ理由にもなっていますので、是非読んでみてください。</p>\n<p>当日、店番の主担当ではありませんが会場内には居ると思いますので、お声がけしてもらえると嬉しいです。</p>\n<p>Xamaritans の他のメンバーも章も非常に強力で、本当に「世界的に見ても唯一無二」の濃い内容となっています。繰り返しますが「2冊で完全体」です。</p>\n<h3 id=\"%E4%BB%96%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E7%B4%B9%E4%BB%8B\">他のメンバーによるイベント紹介 <a class=\"direct-link\" href=\"#%E4%BB%96%E3%81%AE%E3%83%A1%E3%83%B3%E3%83%90%E3%83%BC%E3%81%AB%E3%82%88%E3%82%8B%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E7%B4%B9%E4%BB%8B\">#</a></h3>\n<ul>\n<li><a href=\"http://atsushieno.hatenablog.com/entry/2017/03/30/193527\">Essential Xamarin -at- 技術書典2 -and- 超技術書典 - ものがたり</a></li>\n<li><a href=\"http://www.nuits.jp/entry/2017/03/19/214905\">技術書典2 &amp; 超技術書典でXamarin本出します - nuits.jp blog</a></li>\n</ul>\n<p>技術書典2の後は、超技術書典にも出展します（こちらは私は不参加なのが残念）。<br>\n私は愛知県在住なので中部地方の勉強会やミートアップなどへは持っていくことができますので、 <a href=\"https://twitter.com/amay077\">twitter</a> などでメンションください。</p>\n",
      "date_published": "2017-04-07T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/03/10/had_a_session_about_xamarin_android_in_droidkaigi2017/",
      "url": "https://blog.amay077.net/blog/2017/03/10/had_a_session_about_xamarin_android_in_droidkaigi2017/",
      "title": "DroidKaigi2017で「Xamarin.Android で始めるクロスプラットモバイルアプリ開発」という話をしました",
      "content_html": "<p>登壇したのが既に２ヶ月前の事に感じるくらい余韻に浸っています。</p>\n<!--more-->\n<p><img src=\"/img/posts/had_a_session_about_xamain_android_in_droidkaigi_2017_01.jpg\" alt=\"\"></p>\n<h2 id=\"%E8%B3%87%E6%96%99\">資料 <a class=\"direct-link\" href=\"#%E8%B3%87%E6%96%99\">#</a></h2>\n<script async class=\"speakerdeck-embed\" data-id=\"592959beb9de46fcb6d0e51652b20e23\" data-ratio=\"1.33333333333333\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n<h2 id=\"%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">感想とか <a class=\"direct-link\" href=\"#%E6%84%9F%E6%83%B3%E3%81%A8%E3%81%8B\">#</a></h2>\n<p>DroidKaigi は3年連続の参加で、登壇は初めてです。</p>\n<p>前日まではのほほんとしていたのですけど、当日になると緊張しますね。トップ登壇で良かったです。<br>\n登壇終わった後の虚脱感がハンパなくて、次のセッション聞けませんでした（普段人前で話すのが職業な人マジリスペクト）。</p>\n<p>Xamarin に関して、伝えたいことはある程度伝えられたと思ってはいますが、継続的に発信していくのが大事かなと思いました。</p>\n<p>普段 Android をやっていて、iOS もやる事になったら、こんなツールもあるよと思い出して欲しいです。</p>\n<p>一番伝えたかったのは、<br>\n<strong>「Android でも iOS でも MVVM+Rx でやるよね、Xamarin なら大部分共通化できるよー」</strong><br>\nだったのですが、Twitter とかでの反応を見てるとあまりピンと来てなさそうな感じでしたかね？<br>\n他の MVVM や Rx セッションが盛り上がってるのを見ると、まだ知らない層が多いのかなーと。<br>\nXamarin とはなんぞや、から始めて Rx まで説明するのも難しいし、まあ仕方ないですね。</p>\n<p>でも、質問タイムでたくさん聞いて頂いて嬉しかったです。（えいごりょく欲しい…）</p>\n<p>オフィスアワーやアフターパーティで、Twitter でしか知らない人とお話しできたり、同郷のすごい人たちと会えたり、とても楽しかったです。</p>\n<p><img src=\"/img/posts/had_a_session_about_xamain_android_in_droidkaigi_2017_02.jpg\" alt=\"\"></p>\n<p>Xamarin 然り、RxJava 然り、 Qiita などでチマチマと情報発信してきた些細なネタが誰かの役に立っていたと知れてとても嬉しかった。</p>\n<p>普段 Xamarin を使ってる人が、 Android の最新動向を知るきっかけにもなってくれたみたいで、それも狙ってた事なので良かったです。</p>\n<p>翌日は .NET系のイベントの <a href=\"https://metro.connpass.com/event/50917/?utm_source=t.co&amp;utm_medium=referral\">まどすた #2</a> に行きました。<br>\nHoloLens やばいし、Bitcoin/ブロックチェーンも抑えとかないといけないし、Visual Studio 2017 はやっぱり最強だったし、にゃーんがにゃーんでした。</p>\n<p>try!Swift には行けなかったので、 <a href=\"https://iosdc.jp/2017/\">iOSDC Japan 2017</a> には必ず行きたいと思います。</p>\n<p>将来のことを考えて生きてはいませんが、こうした経験が脳にインプットされて、なんとなく無意識の内に自分の行きたい方向に自分を導いてくれると思っています。</p>\n<p>運営スタッフの皆さま、参加された皆さま、ありがとうございました。</p>\n<h2 id=\"%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%EF%BC%92-%EF%BC%86-%E8%B6%85%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8\">技術書典２ ＆ 超技術書典 <a class=\"direct-link\" href=\"#%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%EF%BC%92-%EF%BC%86-%E8%B6%85%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8\">#</a></h2>\n<p>あっ、次は 4/9(日)に、 <a href=\"https://techbookfest.org/event/tbf02\">技術書典２</a> がありますね。</p>\n<p><img src=\"/img/posts/had_a_session_about_xamain_android_in_droidkaigi_2017_03.png\" alt=\"\"></p>\n<p>Xamarin に関する技術書を配布します！<br>\n代表の @atsushieno さん以下5名で絶賛執筆中です。<br>\n今回話した Xamarin.Android ネタの完全版を掲載します。というか DroidKaigi のスライドの原稿と言うべきものです。</p>\n<p>技術書典２または <a href=\"https://techbookfest.org/event/cho01\">超技術書典</a> でお会いしましょう(^o^)／</p>\n",
      "date_published": "2017-03-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/02/13/we_had_a_meetup_aboud_send_pull_request_to_Xamarin_forms_googlemaps/",
      "url": "https://blog.amay077.net/blog/2017/02/13/we_had_a_meetup_aboud_send_pull_request_to_Xamarin_forms_googlemaps/",
      "title": "Xamarin.Forms.GoogleMaps にプルリクエストを送る会、を開催しました",
      "content_html": "<p>2017/2/12、 <a href=\"http://www.fenrir-inc.com/jp/corporate/\">フェンリル株式会社 名古屋支社</a> さまの会議室をお借りして、</p>\n<ul>\n<li><a href=\"https://jxug.connpass.com/event/49852/\">Xamarin.Forms.GoogleMaps にプルリクを送る会 - connpass</a></li>\n</ul>\n<p>を開催しました。</p>\n<!--more-->\n<p>もともとは、 <a href=\"https://www.facebook.com/groups/xm.jxug/\">JXUG の Facebook グループ</a> で、「拙作の OSS ライブラリ <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Xamarin.Forms.GoogleMaps</a> へのコントリビュートを通じて、GitHub でプルリクの送り方を学ぶ勉強会とか興味ある？」 とつぶやいたのを、 <a href=\"https://twitter.com/Fumiya_Kume\">くぅ君</a> が拾ってくれて名古屋で開催できるはこびになったものです(くぅ君、ありがとう！)。</p>\n<p>資料はこちらです。</p>\n<ul>\n<li><a href=\"https://speakerdeck.com/amay077/xamarin-dot-forms-dot-googlemaps-nipururikuwosong-rou-number-jxug\">Xamarin.Forms.GoogleMaps にプルリクを送ろう #jxug // Speaker Deck</a></li>\n</ul>\n<p>GitHub のどこかの OSS に貢献したいと思っても、 git/gitクライアントの使い方、GitHubの使い方、英語、修正したコードの内容とか、小さな壁が積み重なってなんか躊躇してしまう、という経験が自分にもあって、その練習台として自分のライブラリを使ってもらえたらなーと思っていました。</p>\n<p>参加していただいた皆さんには、初めてプルリクを送るということを体験してもらえたので、少しでもそのカベが低くなってもらえれば幸いです。<br>\n勉強会後の振り返りで、そんな感想も頂けたので個人的にも満足です。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">今日の「Xamarin.Forms.GoogleMaps にプルリクを送ろう」の成果です <a href=\"https://twitter.com/hashtag/JXUG?src=hash\">#JXUG</a> <a href=\"https://t.co/PVlQDposzS\">pic.twitter.com/PVlQDposzS</a></p>&mdash; あめい@DroidKaigi&amp;技術書展2 (@amay077) <a href=\"https://twitter.com/amay077/status/830685147963854848\">2017年2月12日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">おお、会が終わってからもPRくれた、嬉しいなあ / Pull Request # 229 (Add Padding Property Support (Android / iOS)) Xamarin.Forms.GoogleMaps <a href=\"https://t.co/Hij9KWzeex\">https://t.co/Hij9KWzeex</a></p>&mdash; あめい@DroidKaigi&amp;技術書展2 (@amay077) <a href=\"https://twitter.com/amay077/status/830764733611401220\">2017年2月12日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">昨日フェンリルさんで AirPlay 使わせてもらってめちゃ便利だったので、MS品川にも導入してくだしあ。</p>&mdash; あめい@DroidKaigi&amp;技術書展2 (@amay077) <a href=\"https://twitter.com/amay077/status/830981848637411328\">2017年2月13日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>こんな感じの会でよかったら、また簡単な issue 溜めとくので、またできたらいいなと思います。<br>\nありがとうございました。</p>\n",
      "date_published": "2017-02-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/02/03/google_amp_in_jekyll_blog/",
      "url": "https://blog.amay077.net/blog/2017/02/03/google_amp_in_jekyll_blog/",
      "title": "Jekyll で作ったブログを Google AMP に対応させた",
      "content_html": "<p>自分のブログは Jekyll を使って Markdown から生成し、それを GitHub pages でホストしている。<br>\nGitHub 側でのページ生成はしてなくて、ローカルで Jekyll を実行して、その結果を push している。</p>\n<!--more-->\n<p>特につよい興味があったわけでもないけど、 Jekyll のテーマに AMP 対応をうたうものがあったから使ってみたら、それだけではダメで、いろいろ四苦八苦した（してる）という事を書きます。</p>\n<h2 id=\"jekyll-%E3%83%86%E3%83%BC%E3%83%9E\">Jekyll テーマ <a class=\"direct-link\" href=\"#jekyll-%E3%83%86%E3%83%BC%E3%83%9E\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/ageitgey/amplify\">ageitgey/amplify: A Jekyll html theme in the vague style of Medium.com built using Google AMP</a></li>\n</ul>\n<p>という AMP 対応とされるテーマを使っている。</p>\n<p><code>&lt;html lang=&quot;en&quot;&gt;</code> になってたので、 <code>&lt;html lang=&quot;ja&quot;&gt;</code> に直したりした。<br>\nテンプレートのタグは AMP 対応になってたので、まあ便利、余計なプラグインなどは入ってなくてシンプルなのもよい。</p>\n<h2 id=\"%E7%94%BB%E5%83%8F\">画像 <a class=\"direct-link\" href=\"#%E7%94%BB%E5%83%8F\">#</a></h2>\n<p>AMP では、<code>&lt;amp-img&gt;</code> というタグを使わないといけなくて、しかも <code>width</code> と <code>height</code> が必須だと言う。<br>\nMarkdown から HTML の変換は <code>&lt;img&gt;</code> タグを出力するので、その結果を <code>&lt;amp-img&gt;</code> に置換するようにしたが、Markdown では画像のサイズは指定できない。<br>\nMarkdown の方言でサイズが指定できるものもあるようだが、書きたくないし。</p>\n<p>仕方がないので、Markdown から変換された HTML のタグを置換しつつ、画像を読み込んで縦横のサイズを取得し、 <code>&lt;amp-img width=? height=?</code> に変換するツールを作った。<br>\nなぜか Mono 製ｗ</p>\n<ul>\n<li><a href=\"https://github.com/amay077/AmpImgnizer\">amay077/AmpImgnizer: img タグを amp-img タグに置換する mono コンソールアプリ</a></li>\n</ul>\n<p>ビルドしてできた <code>AmpImgnizer.exe</code> を以下のようにして使う。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">find</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span> -type f -name <span class=\"token string\">\"*.html\"</span> -print <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -0 mono <span class=\"token punctuation\">..</span>/AmpImgnizer/AmpImgnizer.exe</code></pre>\n<p>相対URLと絶対URL、あと SVG にも対応してたりするし、一度サイズを取得したら、そのURLをキーにキャッシュして、時間は画像を読み直さず処理するようになっている。<br>\n（副次的な効果として、 404 な画像を発見できる。）</p>\n<p>Markdown から生成された HTML を対象にしているので、 HTML パーサなんぞは使ってなくて、テキストとして1行ずつ回していくテキトーな実装。<br>\nでもこれで十分使えてる。</p>\n<h2 id=\"%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%81%AE%E8%B2%BC%E3%82%8A%E4%BB%98%E3%81%91\">ツイートの貼り付け <a class=\"direct-link\" href=\"#%E3%83%84%E3%82%A4%E3%83%BC%E3%83%88%E3%81%AE%E8%B2%BC%E3%82%8A%E4%BB%98%E3%81%91\">#</a></h2>\n<p>自分や誰かのツイートをブログに貼り付ける時、 Twitter の Webサイトから生成できるスクリプトをそのまま貼り付けるのが楽で使っている。<br>\nそのタグはこう↓</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>blockquote</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>twitter-tweet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ja<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ja<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">dir</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ltr<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>うおおおお！ <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://twitter.com/hashtag/jxug?src=hash<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>#jxug<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://t.co/lc7x6vaNWl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>pic.twitter.com/lc7x6vaNWl<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token entity named-entity\" title=\"&mdash;\">&amp;mdash;</span> これがあめいの選択だよ (@amay077) <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://twitter.com/amay077/status/802320470204788737<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>2016年11月26日<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>blockquote</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>//platform.twitter.com/widgets.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>が、 AMP は外部のスクリプトを実行できないので、 <code>&lt;script&gt;</code> タグは使えない。</p>\n<p>ツイートを埋め込むためには、 <a href=\"https://www.ampproject.org/ja/docs/reference/components/amp-twitter\">amp-twitter</a> という &quot;許可された&quot; スクリプトを定義し、 <code>&lt;amp-twitter&gt;</code> タグを使う必要がある。</p>\n<p>いちいちこのタグを書くのも面倒だし、AMP が廃れて使えなくなった時も考えて、オリジナル(Markdown)は Twitter 公式の埋め込みにしておきたい。</p>\n<p>なので、これも前述の <code>AmpImgnizer</code> で変換した。<br>\n上の <code>&lt;blockquote 〜 /script&gt;</code> は、以下のように変換される。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>amp-twitter</span> <span class=\"token attr-name\">data-tweetid</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>802320470204788737<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>800<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>600<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">layout</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>responsive<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>amp-twitter</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- うおおおお！ &lt;a href=\"https://twitter.com/hashtag/jxug?src=hash\">#jxug&lt;/a> &lt;a href=\"https://t.co/lc7x6vaNWl\">pic.twitter.com/lc7x6vaNWl&lt;/a> by @amay077 --></span></code></pre>\n<p>こっちもテキトーな実装なので、変換出来ないケースがあるかも。</p>\n<h2 id=\"%E5%BA%83%E5%91%8A\">広告 <a class=\"direct-link\" href=\"#%E5%BA%83%E5%91%8A\">#</a></h2>\n<p>Amazon の広告を各ページに配置している。もともとの広告タグは <code>&lt;iframe&gt;</code> だが、AMP では <code>&lt;amp-iframe&gt;</code> を使う必要がある。</p>\n<p>これはもともと</p>\n<ul>\n<li><a href=\"http://okzk.org/blog/jekyll-amazon-gem\">Jekyllでamazonアソシエイトリンクを作るためのgem ”jekyll-amazon”</a></li>\n</ul>\n<p>を使っていたので、そのソースを少し改造して <code>&lt;amp-iframe</code> を吐くようにした。結果は以下のようなものだ。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>amp-iframe</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://rcm-fe.amazon-adsystem.com/e/cm?t=oku2008-22&amp;o=9&amp;p=48&amp;l=st1&amp;mode=books-jp&amp;search=Xamarin%7C%E5%8B%89%E5%BC%B7%E4%BC%9A&amp;lt1=_blank&amp;lc1=469AF6&amp;bg1=FFFFFF&amp;f=ifr<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>728<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>90<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">frameborder</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scrolling</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>no<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>amp-iframe</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"disqus\">DISQUS <a class=\"direct-link\" href=\"#disqus\">#</a></h2>\n<p>コメントシステムに <a href=\"https://disqus.com/\">DISQUS</a> を採用している。</p>\n<ul>\n<li><a href=\"https://blog.disqus.com/disqus-now-compatible-with-google-amp\">Disqus now compatible with Google AMP</a></li>\n</ul>\n<p>ってことで「Disqus も AMP 対応したぜ！」って言ってるけど、実体は <code>&lt;amp-iframe</code> を使っているだけだ。<br>\nしかも amp-iframe の src に指定するコンテンツは自分でホストしなければならない。ちょっと面倒だったので、</p>\n<ul>\n<li><a href=\"http://dangoldin.com/2016/09/13/supporting-disqus-in-amp/\">Supporting Disqus in AMP</a></li>\n</ul>\n<p>で Dan Goldin さんが使用している s3 を間借りしちゃってる、怒られたら謝る。</p>\n<h2 id=\"css-%E3%81%A8%E3%81%8B-analytics\">CSS とか Analytics <a class=\"direct-link\" href=\"#css-%E3%81%A8%E3%81%8B-analytics\">#</a></h2>\n<p>これらは何も特殊なことはしてなくて、CSS はリンクせずに各ページに Jekyll で埋め込んじゃってる。</p>\n<pre class=\"language-html\"><code class=\"language-html\">  <span class=\"token comment\">&lt;!--head.html--></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">amp-custom</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><br>  ｛％ capture include_to_scssify ％｝<br>    ｛％ include styles.scss ％｝<br>  ｛％ endcapture ％｝<br>  ｛｛ include_to_scssify | scssify ｝｝<br><br>  ｛％ include syntax.css ％｝<br>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>シンタックスハイライトに使う CSS も毎ページに埋め込まれてるので、冗長と言えば冗長。</p>\n<p>Google Anaytics は、 <code>&lt;/amp-analytics&gt;</code> を使ってる。</p>\n<h2 id=\"%E3%83%93%E3%83%AB%E3%83%89%E3%81%A8%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">ビルドとデプロイ <a class=\"direct-link\" href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%81%A8%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4\">#</a></h2>\n<p>下のような感じで、 Jekyll でビルドした後、例の AmpImgnizer で img と twitter を変換して、サイトに push してる。</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">jekyll build<br><span class=\"token builtin class-name\">cd</span> _site<br><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><br><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"site update\"</span><br><span class=\"token function\">find</span> <span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token builtin class-name\">pwd</span><span class=\"token variable\">)</span></span> -type f -name <span class=\"token string\">\"*.html\"</span> -print <span class=\"token operator\">|</span> <span class=\"token function\">xargs</span> -0 mono <span class=\"token punctuation\">..</span>/AmpImgnizer/AmpImgnizer.exe<br><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span><br><span class=\"token function\">git</span> commit -m <span class=\"token string\">\"replace img to amp-img\"</span><br><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"press enter to deploy\"</span><br><span class=\"token builtin class-name\">read</span><br><span class=\"token function\">git</span> push<br><span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span></code></pre>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>ここまで対応して、ほとんどのページを AMP 対応にする事ができた。<br>\n2017/2/3現在では、まだ AMP として認識されているページは少ないけど、放っておけば更新されてくのかな？</p>\n<p>AMP 対応した方が SEO 的にも効く、との情報もあるけど、まあそのへんは期待してないです。</p>\n<p>何の役にたつかわからないけど、このサイトの Jekyll プロジェクトと、github page のリポジトリは以下です。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/blog.vNext\">amay077/blog.vNext</a></li>\n<li><a href=\"https://github.com/amay077/amay077.github.com\">amay077/amay077.github.com: My blog powered by jekyll.</a></li>\n</ul>\n",
      "date_published": "2017-02-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/01/28/camera_changed_event_on_google_maps_android_api/",
      "url": "https://blog.amay077.net/blog/2017/01/28/camera_changed_event_on_google_maps_android_api/",
      "title": "Google Maps Android API のカメラ変更イベントについて",
      "content_html": "<p>Android 向けの Google Maps ライブラリには、カメラの変更（＝位置、回転、チルトのヘ変更）時に発生するイベント <code>GoogleMap.OnCameraChangeListener</code> があります。</p>\n<!--more-->\n<p>が、2016年８月のリリースで <code>OnCameraChangeListener</code> は非推奨になっており、代わりに４つのイベントが新たに追加されました。</p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/android-api/releases?hl=ja#august_1_2016\">Release Notes - August 1, 2016 ｜  Google Maps Android API</a></li>\n</ul>\n<blockquote>\n<p>This release introduces a set of new camera change listeners for camera motion start, ongoing, and end events. You can also see why the camera is moving, whether it's caused by user gestures, built-in API animations or developer-controlled movements. Below is a summary of the new listeners. For details, see the guide to camera change events. (Issue 4636)</p>\n<ul>\n<li>The onCameraMoveStarted() callback of the OnCameraMoveStartedListener is invoked when the camera starts moving. The callback method receives a reason for the camera motion.</li>\n<li>The onCameraMove() callback of the OnCameraMoveListener is invoked multiple times while the camera is moving or the user is interacting with the touch screen.</li>\n<li>The OnCameraIdle() callback of the OnCameraIdleListener is invoked when the camera stops moving and the user has stopped interacting with the map.</li>\n<li>The OnCameraMoveCanceled() callback of the OnCameraMoveCanceledListener is invoked when the current camera movement has been interrupted.</li>\n</ul>\n</blockquote>\n<h3 id=\"oncameramovestarted---%E3%82%AB%E3%83%A1%E3%83%A9%E3%81%AE%E7%A7%BB%E5%8B%95%E3%81%8C%E9%96%8B%E5%A7%8B%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82\">onCameraMoveStarted - カメラの移動が開始された時 <a class=\"direct-link\" href=\"#oncameramovestarted---%E3%82%AB%E3%83%A1%E3%83%A9%E3%81%AE%E7%A7%BB%E5%8B%95%E3%81%8C%E9%96%8B%E5%A7%8B%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82\">#</a></h3>\n<p>カメラの移動が開始された直後に１回発生します。 <code>updateCamera</code> や <code>animateCamera</code> などのメソッドによるカメラ移動でも、ドラッグ、ピンチなどのジェスチャによる場合でも同様です。</p>\n<h3 id=\"oncameramoveidle---%E3%82%AB%E3%83%A1%E3%83%A9%E3%81%AE%E7%A7%BB%E5%8B%95%E3%81%8C%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%9F%E6%99%82\">onCameraMoveIdle - カメラの移動が終わった時 <a class=\"direct-link\" href=\"#oncameramoveidle---%E3%82%AB%E3%83%A1%E3%83%A9%E3%81%AE%E7%A7%BB%E5%8B%95%E3%81%8C%E7%B5%82%E3%82%8F%E3%81%A3%E3%81%9F%E6%99%82\">#</a></h3>\n<p>カメラの移動が完了した直後に１回発生します。 つまりなんらかのビューの変化が起こるときには、最後に<code>onCameraMoveIdle</code> が必ず１回呼ばれます。アニメーションがキャンセルされたときも、<code>onCameraMoveIdle</code> は呼ばれます。<br>\n非推奨となった <code>onCameraChange</code> と立ち位置的には同じようです。ちなみに <code>onCameraChange</code> が呼ばれたあとで、<code>onCameraMoveIdle</code> が呼ばれます。</p>\n<p><code>onCameraMoveStarted</code> と <code>onCameraMoveIdle</code> は必ず対になるかというと、 <strong>そうでないケースが存在</strong> します。 <code>animateCamera</code> による地図の移動中に、地図をドラッグして地図を移動させた場合です。これについては後述します。</p>\n<h3 id=\"oncameramove---%E3%82%AB%E3%83%A1%E3%83%A9%E3%81%8C%E7%A7%BB%E5%8B%95%E3%81%97%E3%81%9F%E6%99%82\">onCameraMove - カメラが移動した時 <a class=\"direct-link\" href=\"#oncameramove---%E3%82%AB%E3%83%A1%E3%83%A9%E3%81%8C%E7%A7%BB%E5%8B%95%E3%81%97%E3%81%9F%E6%99%82\">#</a></h3>\n<p>カメラが移動したときに発生します。 <code>moveCamera</code> によるダイレクトなカメラ位置への移動では、このイベントは <strong>発生したり、しなかったりします</strong> 。 <code>animateCamera</code> によるアニメーション付きの移動では、アニメーション中にこのイベントが発生します。ドラッグやピンチなどのジェスチャ操作でも発生します。</p>\n<h3 id=\"oncameramovecanceled---%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E3%82%AD%E3%83%A3%E3%83%B3%E3%82%BB%E3%83%AB%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82\">onCameraMoveCanceled - アニメーションがキャンセルされた時 <a class=\"direct-link\" href=\"#oncameramovecanceled---%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E3%82%AD%E3%83%A3%E3%83%B3%E3%82%BB%E3%83%AB%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82\">#</a></h3>\n<p><code>animateCamera</code> などのアニメーション付きのカメラ移動が、何らかの操作によりキャンセルされたときに発生します。「何らかの操作」とは、</p>\n<ul>\n<li>アニメーション中に <code>stopAnimation</code> が呼ぶ</li>\n<li>アニメーション中に画面をタップやドラッグする</li>\n</ul>\n<p>です。</p>\n<h2 id=\"%E3%80%90%E3%81%8A%E3%81%BE%E3%81%91%E3%80%91-animatecamera-%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF\">【おまけ】 <code>animateCamera</code> のコールバック <a class=\"direct-link\" href=\"#%E3%80%90%E3%81%8A%E3%81%BE%E3%81%91%E3%80%91-animatecamera-%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%AB%E3%83%90%E3%83%83%E3%82%AF\">#</a></h2>\n<p><code>animateCamera</code> には、アニメーションの完了／中止を受信できるコールバックを指定できます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">void</span> animateCamera <span class=\"token punctuation\">(</span><br>    <span class=\"token class-name\">CameraUpdate</span> update<span class=\"token punctuation\">,</span> <br>    <span class=\"token class-name\">GoogleMap<span class=\"token punctuation\">.</span>CancelableCallback</span> callback<span class=\"token punctuation\">)</span></code></pre>\n<h2 id=\"%E3%82%B1%E3%83%BC%E3%82%B9%E6%AF%8E%E3%81%AE%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E7%99%BA%E7%94%9F%E3%81%AE%E6%A7%98%E5%AD%90\">ケース毎のイベント発生の様子 <a class=\"direct-link\" href=\"#%E3%82%B1%E3%83%BC%E3%82%B9%E6%AF%8E%E3%81%AE%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E7%99%BA%E7%94%9F%E3%81%AE%E6%A7%98%E5%AD%90\">#</a></h2>\n<p>サンプルアプリを作って、実際の操作でどのようなイベントが発生するのか、調べてみました。</p>\n<p><img src=\"/img/posts/deep_dive_in_camera_events_of_google_maps_android_api_01.gif\" alt=\"\"></p>\n<h3 id=\"updatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C\">updateCamera メソッドの実行 <a class=\"direct-link\" href=\"#updatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h3>\n<ol>\n<li>onCameraMoveStarted</li>\n<li>onCameraMove ←発生しないこともある</li>\n<li><s>onCameraChange</s></li>\n<li>onCameraIdle</li>\n</ol>\n<p><strong><code>onCameraMove</code> は発生することも、しないこともある</strong> ようです、その条件についてはよくわかりませんでした（位置が変わるから <code>onCameraMove</code> が発生する、わけでもないようです）。 <code>onCameraChange</code> は非推奨なので打ち消し線を入れています。</p>\n<h3 id=\"animatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C(%E4%B8%AD%E6%96%AD%E3%81%AA%E3%81%97)\">animateCamera メソッドの実行(中断なし) <a class=\"direct-link\" href=\"#animatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C(%E4%B8%AD%E6%96%AD%E3%81%AA%E3%81%97)\">#</a></h3>\n<ol>\n<li>onCameraMoveStarted</li>\n<li>onCameraMove</li>\n<li>onCameraMove</li>\n<li>・・・</li>\n<li>animateCamera_onFinish</li>\n<li><s>onCameraChange</s></li>\n<li>onCameraIdle</li>\n</ol>\n<p>移動中に <code>onCameraMove</code> が複数回呼び出されます。回数はアニメーションの速度により変わります。<br>\n移動が完了すると <code>animateCamera</code> メソッドのコールバックに <code>onFinish</code> が通知され、その後、 <code>onCameraIdle</code> が呼び出されます。</p>\n<h3 id=\"animatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C-%E2%86%92-stopanimation-%E3%81%AE%E5%AE%9F%E8%A1%8C\">animateCamera メソッドの実行 → stopAnimation の実行 <a class=\"direct-link\" href=\"#animatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C-%E2%86%92-stopanimation-%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h3>\n<ol>\n<li>onCameraMoveStarted</li>\n<li>onCameraMove</li>\n<li>・・・</li>\n<li>onCameraMove</li>\n<li><code>stopAnimation</code> 呼び出し</li>\n<li>onCameraMoveCanceled</li>\n<li>animateCamera_onCancel</li>\n<li><s>onCameraChange</s></li>\n<li>onCameraIdle</li>\n</ol>\n<p>アニメーション中に <code>stopAnimation</code> を呼び出すと、カメラの移動が停止し、 <code>onCameraMoveCanceled</code> → <code>animateCamera_onCancel</code> の順で中止が通知されます。その後、 <code>onCameraIdle</code> が呼び出されるのは完了時と変わりません。</p>\n<h3 id=\"animatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C-%E2%86%92-%E7%A7%BB%E5%8B%95%E4%B8%AD%E3%81%AB%E3%83%89%E3%83%A9%E3%83%83%E3%82%B0%E3%81%97%E3%81%A6%E5%9C%B0%E5%9B%B3%E3%82%92%E7%A7%BB%E5%8B%95\">animateCamera メソッドの実行 → 移動中にドラッグして地図を移動 <a class=\"direct-link\" href=\"#animatecamera-%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%81%AE%E5%AE%9F%E8%A1%8C-%E2%86%92-%E7%A7%BB%E5%8B%95%E4%B8%AD%E3%81%AB%E3%83%89%E3%83%A9%E3%83%83%E3%82%B0%E3%81%97%E3%81%A6%E5%9C%B0%E5%9B%B3%E3%82%92%E7%A7%BB%E5%8B%95\">#</a></h3>\n<ol>\n<li>onCameraMoveStarted ← animateCameraによる移動開始</li>\n<li>onCameraMove</li>\n<li>・・・</li>\n<li>onCameraMove</li>\n<li>ドラッグで地図移動</li>\n<li>onCameraMoveCanceled</li>\n<li>onCameraMoveStarted ← ドラッグによる移動開始</li>\n<li>animateCamera_onCancel</li>\n<li>onCameraMove</li>\n<li>onCameraMove</li>\n<li>・・・</li>\n<li>ドラッグやめ</li>\n<li><s>onCameraChange</s> ← animateCameraによる移動終了？</li>\n<li>onCameraMove</li>\n<li>onCameraMove</li>\n<li><s>onCameraChange</s> ← ドラッグによる移動終了？</li>\n<li>onCameraIdle</li>\n</ol>\n<p>地図移動中にドラッグをすると、 <code>onCameraMoveCanceled</code> で中断が通知され、即座に 新しいカメラの移動として <code>onCameraMoveStarted</code> が通知されます。 <code>animateCamera</code> にアニメーション中止 <code>animateCamera_onCancel</code> が通知されるのはその後です。</p>\n<p>その後、ドラッグによる <code>onCameraMove</code> が連続して発生し、ドラッグをやめると <s><code>onCameraChange</code></s> が２回、<code>onCameraIdle</code> が最後に１回呼び出されました。</p>\n<p>このケースでの要注意点をまとめると以下です。</p>\n<ul>\n<li><code>animateCamera</code> に <code>onCancel</code> が通知されるよりも先に、ドラッグによる <code>onCameraMoveStarted</code> が通知される</li>\n<li><code>onCameraMoveStarted</code> は２回通知される（<code>animateCamera</code> 呼び出し時とドラッグ開始時）のに、 <code>onCameraIdle</code> は最後に１回しか通知されない。</li>\n</ul>\n<p>RxJava などで複数のイベントをストリーム化する時は、どうしてもイベントの発生順序や回数を意識せざるを得ませんが、その時に問題になりそうな気がします。</p>\n<h3 id=\"%E9%9D%9E%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E6%99%82%E3%81%AB-stopanimation-%E3%82%92%E5%91%BC%E3%81%B6\">非アニメーション時に stopAnimation を呼ぶ <a class=\"direct-link\" href=\"#%E9%9D%9E%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E6%99%82%E3%81%AB-stopanimation-%E3%82%92%E5%91%BC%E3%81%B6\">#</a></h3>\n<ol>\n<li><s>onCameraChange</s></li>\n<li>onCameraIdle</li>\n</ol>\n<p>ただ <code>stopAnimation</code> を呼ぶだけでも、 <s><code>onCameraChange</code></s>、 <code>onCameraIdle</code> が呼ばれます。気持ち悪いですね。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>非推奨になった <code>onCameraChange</code> の代わりとしては <code>onCameraIdle</code> が使えるが、ビミョーに発生タイミングが違うようなので注意！</li>\n<li>新たに追加された <code>onCameraMoveStarted</code> でカメラ移動の開始、 <code>onCameraMove</code> で移動中のカメラを受信できる。</li>\n<li><code>onCameraXXXX</code> は、メソッドによるカメラ移動だけでなく、ジェスチャによるカメラ移動時にも通知が来る。 <code>animateCamera</code> のアニメーションの終了／中断は引数のコールバックで受信する。</li>\n</ul>\n<h3 id=\"%E3%80%90%E3%81%8A%E3%81%BE%E3%81%91%E3%80%91-google-maps-sdk-for-ios\">【おまけ】 Google Maps SDK for iOS <a class=\"direct-link\" href=\"#%E3%80%90%E3%81%8A%E3%81%BE%E3%81%91%E3%80%91-google-maps-sdk-for-ios\">#</a></h3>\n<p>姉妹ライブラリである iOS 向けの Google Maps SDK では、カメラ関連イベントは</p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/protocol_g_m_s_map_view_delegate-p.html?hl=ja#aabd01d59d7680799a0c24d3c8b5e4622\">GMSMapViewDelegate Protocol Reference  ｜  Google Maps SDK for iOS</a></li>\n</ul>\n<p>にあります。これによると、</p>\n<ul>\n<li>willMove</li>\n<li>didChangeCameraPosition</li>\n<li>idleAtCameraPosition</li>\n</ul>\n<p>があります。Android 用とことなっていて悩ましいです。。。</p>\n",
      "date_published": "2017-01-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/01/12/determining_is_preview_in_xamarin_forms/",
      "url": "https://blog.amay077.net/blog/2017/01/12/determining_is_preview_in_xamarin_forms/",
      "title": "Xamarin.Forms で XAML Preview 中かどうかを判別する方法",
      "content_html": "<p>Xamarin.Forms 向けのUIライブラリを提供する人向けの内容です。</p>\n<!--more-->\n<p><a href=\"https://developer.xamarin.com/guides/xamarin-forms/xaml/xaml-previewer/\">XAML Previewer</a> によって、XAML のコーディングも捗るようになってきました。</p>\n<h2 id=\"xaml-previewer-%E3%81%AE%E5%8B%95%E3%81%8D\">XAML Previewer の動き <a class=\"direct-link\" href=\"#xaml-previewer-%E3%81%AE%E5%8B%95%E3%81%8D\">#</a></h2>\n<p><a href=\"https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/\">Custom Renderer</a> を使って、独自のコントロールを作成し、それを Page で使用した場合、XAML Previewer は、そのカスタムコントロールもレンダリングしようとします。</p>\n<p>アプリ実行時とほぼ変わらない処理が行われるようです。<br>\nその為、特に意識しなくとも、カスタムコントロールをプレビューすることができます。</p>\n<p>一方で、プレビュー時には、アプリ実行時とは異なる動きをさせたい場合があります。</p>\n<p>私の作成している <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Xamarin.Forms.GoogleMaps</a> は地図を表示するためのカスタムコントロールです。<br>\nこれは、次の理由で、プレビュー時には、実行時の処理をさせたくありません。</p>\n<ol>\n<li>Android/iOS の Google Maps SDK に依存しているが、プレビュー時はこれが使用できない</li>\n<li>動作に必要な API Key はメソッドで渡すため、プレビュー時には API Key が無い</li>\n<li>そもそもプレビュー時に地図が見えても、嬉しい人は少ない</li>\n</ol>\n<p>Xamarin.Forms.GoogleMaps 以外でも、例えば Android/iOS 端末内のデータを読んで表示・描画するようなものや C/C++ のライブラリに依存したカスタムコントロールも該当すると思います。</p>\n<p>このような場合、XAML Previewer による <strong>プレビュー中かどうか</strong> を判断し、プレビュー中なら背景色をグレイにする、何か文字を表示する、などの特別な処理をしたいです。</p>\n<h2 id=\"%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%81%AE%E5%88%A4%E6%96%AD%E3%81%AF%E5%8F%AF%E8%83%BD%E3%81%8B%EF%BC%9F\">プレビュー中かどうかの判断は可能か？ <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%81%AE%E5%88%A4%E6%96%AD%E3%81%AF%E5%8F%AF%E8%83%BD%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>Windows.Forms で言えば <code>DesignMode</code> プロパティ、Blend だと <code>DesignModeEnabled</code> に相当するような、「プレビュー中かどうか」を明確に知る手法は、現在の Xamarin.Forms には提供されていませんでした。</p>\n<h2 id=\"%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%82%92%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B%E4%BB%A3%E6%9B%BF%E6%89%8B%E6%B3%95%EF%BC%91%3A-application.current-%E3%81%8C-null-%E3%81%8B\">プレビュー中かどうかを判断する代替手法１: Application.Current が null か <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%82%92%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B%E4%BB%A3%E6%9B%BF%E6%89%8B%E6%B3%95%EF%BC%91%3A-application.current-%E3%81%8C-null-%E3%81%8B\">#</a></h2>\n<ul>\n<li><a href=\"https://forums.xamarin.com/discussion/68440/xamarin-forms-xaml-previewer-determine-if-in-design-mode-in-code-behind-and-xaml-similar-to-blend\">Xamarin.Forms XAML Previewer - Determine if in Design Mode in Code Behind and XAML similar to Blend — Xamarin Forums</a></li>\n</ul>\n<p>で紹介されていますが、 「<code>Application.Current</code> が <code>null</code> だったらプレビュー中である」という判断方法があるようです。</p>\n<p>ところが、<code>App.xaml.cs</code> で <code>MainPage = new NavigationPage(new SomePage());</code> としている場合、iOS ではプレビュー中にも関わらず <code>Application.Current</code> が <code>null</code> ではありませんでした（XAML Previewer が <code>App.xaml.cs</code> もパースして実行している？）。</p>\n<h2 id=\"%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%82%92%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B%E4%BB%A3%E6%9B%BF%E6%89%8B%E6%B3%95%EF%BC%92%3A-mylib.init()-%E3%81%8C%E5%91%BC%E3%81%B0%E3%82%8C%E3%81%9F%E3%81%8B\">プレビュー中かどうかを判断する代替手法２: MyLib.Init() が呼ばれたか <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%8B%E3%81%A9%E3%81%86%E3%81%8B%E3%82%92%E5%88%A4%E6%96%AD%E3%81%99%E3%82%8B%E4%BB%A3%E6%9B%BF%E6%89%8B%E6%B3%95%EF%BC%92%3A-mylib.init()-%E3%81%8C%E5%91%BC%E3%81%B0%E3%82%8C%E3%81%9F%E3%81%8B\">#</a></h2>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/b40d0383b9aaa75ab3f1\">Xamarin.Forms 向けのUIライブラリを作る時の注意点 - Qiita</a></li>\n</ul>\n<p>で書きましたが、ライブラリを提供する場合、そのアセンブリが確実にロードされるようにするには、<code>MainActivity.cs</code> や <code>AppDelegate.cs</code> で、UIライブラリの何らかのメソッド(<code>MyLib.Init()</code>のような)を明示的に呼び出す必要があります。</p>\n<p>これは、「実行時にのみ、 <code>MyLib.Init()</code> が呼び出される」前提になるので、「<code>MyLib.Init()</code> が呼び出されていなければプレビュー中である」と疑似的に判断することができます。</p>\n<p>こちらは XAML Previewer でも正常に判断されました。<br>\nXamarin.Forms.GoogleMaps では、<code>Xamarin.FormsGoogleMaps.Init()</code> という初期化メソッドを提供していますが、これが呼び出されていない場合には、地図の描画をせず、背景色付きのラベルを配置するようにしました。</p>\n<p>その修正のコミットが↓です。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/commit/5d483e85ef8e64fdb5047e23b36e20862d79df21\">Render empty bounds when FormsGoogleMaps.Init not called · amay077/Xamarin.Forms.GoogleMaps@5d483e8</a></li>\n</ul>\n<p><code>OnElementChanged</code> で、<code>Init</code> が呼び出されていない場合は、<code>MapView</code> ではなく <code>UILabel</code> をセットするようにしています。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// iOS/MapRenderer.cs</span><br><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementChangedEventArgs<span class=\"token punctuation\">&lt;</span>View<span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// For XAML Previewer or FormsGoogleMaps.Init not called.</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>FormsGoogleMaps<span class=\"token punctuation\">.</span>IsInitialized<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> label <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UILabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Xamarin.Forms.GoogleMaps\"</span><span class=\"token punctuation\">,</span><br>            BackgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Teal<span class=\"token punctuation\">.</span><span class=\"token function\">ToUIColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            TextColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">.</span><span class=\"token function\">ToUIColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            TextAlignment <span class=\"token operator\">=</span> UITextAlignment<span class=\"token punctuation\">.</span>Center<br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">SetNativeControl</span><span class=\"token punctuation\">(</span>label<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 以下略</span></code></pre>\n<h2 id=\"%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%AF%E3%82%B9%E3%82%AD%E3%83%83%E3%83%97%E3%81%97%E3%81%9F%E6%96%B9%E3%81%8C%E3%82%88%E3%81%84%E5%87%A6%E7%90%86\">プレビュー中はスキップした方がよい処理 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E4%B8%AD%E3%81%AF%E3%82%B9%E3%82%AD%E3%83%83%E3%83%97%E3%81%97%E3%81%9F%E6%96%B9%E3%81%8C%E3%82%88%E3%81%84%E5%87%A6%E7%90%86\">#</a></h2>\n<p>前述のコミットにも示されていますが、Android/iOS それぞれの Custom Renderer の実装で、</p>\n<p>コンストラクタ, <code>OnElementChanged</code>, <code>OnLayout</code>, <code>OnElementPropertyChanged</code>, <code>LayoutSubviews</code> など、親クラスを override しているメソッドは、プレビュー中にも呼び出される可能性があるので、処理をスキップした方がよいです。</p>\n<p>Xamarin.Forms.GoogleMaps では、以下のような感じで処理をスキップしています。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/5d483e85ef8e64fdb5047e23b36e20862d79df21/Xamarin.Forms.GoogleMaps/Xamarin.Forms.GoogleMaps.iOS/MapRenderer.cs#L130\">iOS/MapRenderer.cs - OnElementPropertyChanged</a></li>\n</ul>\n<h2 id=\"%E7%B5%90%E6%9E%9C\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C\">#</a></h2>\n<p>これらを対応した結果、Xamarin.Forms.GoogleMaps は、Visual Studio for Mac の XAML Preview では下図のような背景色付きのラベルで表示されるようになりました。</p>\n<p><img src=\"/img/posts/determine_if_in_Xamarin_xaml_previewer_01.png\" alt=\"\"></p>\n<p>プロジェクトが使用している Xamarin.Forms の nuget パッケージが古いとプレビューが表示されないようです（この記事投稿時、2.3.0 では「古い」と言われ、最新の 2.3.3 に上げたら表示されるようになりました）。</p>\n<p>尚、未検証ですが、<code>Init</code> が呼ばれたか、という手法なら、XAML Previewer 以外のプレビューソリューション（Gorilla Player とか）でも使用可能と思われます。</p>\n",
      "date_published": "2017-01-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/01/12/avoiding_overlaps_software_keyboard_in_xamarin_forms/",
      "url": "https://blog.amay077.net/blog/2017/01/12/avoiding_overlaps_software_keyboard_in_xamarin_forms/",
      "title": "Xamarin.Forms でソフトウェアキーボードが表示された時に画面が隠れないようにする",
      "content_html": "<p>Xamarin.Forms で、ソフトウェアキーボードを表示した時の動きが、Android と iOS で違って、いずれも目的の動作と合わなかったので、調べてみました。</p>\n<!--more-->\n<h2 id=\"%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\">やりたいこと <a class=\"direct-link\" href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\">#</a></h2>\n<p>これ↓</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_04.gif\" alt=\"\"></p>\n<p>いわゆる LINE のような画面、リストビューと文字列入力があって、文字列入力にフォーカスが当たるとソフトウェアキーボードが表示され、その分リストビューの高さが縮む、という動きです。<br>\nこれを Xamarin.Forms(Android と iOS)で実現したいです。</p>\n<h2 id=\"android-%E3%81%AE%E5%A0%B4%E5%90%88\">Android の場合 <a class=\"direct-link\" href=\"#android-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>Xamarin.Forms アプリの Android 側で、特になにもせずに LINE 風の画面を作って動かすと、下図のようになります。</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_01.png\" alt=\"\"></p>\n<p>ソフトウェアキーボードによって、画面が隠れることはありませんが、ListView の高さが縮んでいるのではなく、 <strong>画面全体が上へスライド</strong> しています。そのため、キーボードを表示したまま、ListView の先頭の項目を見ることができません。</p>\n<p>Android ネイティブでは、 <code>AndroidManifest.xml</code> の activity の属性に <code>windowSoftInputMode=&quot;adjustResize&quot;</code> を設定することで実現できます（付けなくても既定値がこれなのかな？）。</p>\n<ul>\n<li><a href=\"http://www.adakoda.com/adakoda/2010/08/android-ime.html\">[Android] IME表示時にアクティビティーを伸縮させる - adakoda</a></li>\n</ul>\n<p>おーけーおーけー、Xamarin では <code>AndroidManifest.xml</code> ではなく <code>MainActivity.cs</code> のクラスの属性に書けばOKだな、というわけで下のように記述してみました。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// MainActivity.cs</span><br><span class=\"token punctuation\">[</span><span class=\"token function\">Activity</span><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"ImeStretchSample.Droid\"</span><span class=\"token punctuation\">,</span><br>            Icon <span class=\"token operator\">=</span> <span class=\"token string\">\"@drawable/icon\"</span><span class=\"token punctuation\">,</span><br>            Theme <span class=\"token operator\">=</span> <span class=\"token string\">\"@style/MyTheme\"</span><span class=\"token punctuation\">,</span><br>            MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>            ConfigurationChanges <span class=\"token operator\">=</span> ConfigChanges<span class=\"token punctuation\">.</span>ScreenSize <span class=\"token operator\">|</span> ConfigChanges<span class=\"token punctuation\">.</span>Orientation<span class=\"token punctuation\">,</span><br>            WindowSoftInputMode <span class=\"token operator\">=</span> SoftInput<span class=\"token punctuation\">.</span>AdjustResize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// ←ここだよー！！！</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">.</span>FormsAppCompatActivity<br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 以下略</span></code></pre>\n<p>ところがこれが機能しません。</p>\n<p>ググってみると Bugzilla に登録されてました。</p>\n<ul>\n<li><a href=\"https://bugzilla.xamarin.com/show_bug.cgi?id=39765#c4\">39765 – WindowSoftInputMode Attribute is Ignored When Using AppCompat</a></li>\n</ul>\n<blockquote>\n<p><code>Application.Current.On&lt;Android&gt;().UseWindowSoftInputModeAdjust(</code></p>\n</blockquote>\n<p>Xamarin.Forms の 2.3.3 以降で、上記メソッドが使えるらしい、と。<br>\n現在の Stable は 2.3.3.180 なので使えますね、使ってみましょう。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// MainActivity.cs</span><br><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    TabLayoutResource <span class=\"token operator\">=</span> Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Tabbar<span class=\"token punctuation\">;</span><br>    ToolbarResource <span class=\"token operator\">=</span> Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Toolbar<span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">LoadApplication</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    App<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">On</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>PlatformConfiguration<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">UseWindowSoftInputModeAdjust</span><span class=\"token punctuation\">(</span>WindowSoftInputModeAdjust<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ←ここ！！</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これを実行すると、</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_02.png\" alt=\"\"></p>\n<p>ListView は適切に縮んでいますが、 <strong>なんだあのステータスバー付近の空白は！！！</strong></p>\n<p>さらにググります。</p>\n<ul>\n<li><a href=\"https://gist.github.com/jimmgarrido/e36033b26f01e8da091fd321d41d991a#file-forms-2-3-2-L9\">AdjustResize Workaround for Xamarin.Forms</a></li>\n</ul>\n<p>こんな Workaround を見つけました。<br>\n適用してみます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// MainActivity.cs</span><br><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    TabLayoutResource <span class=\"token operator\">=</span> Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Tabbar<span class=\"token punctuation\">;</span><br>    ToolbarResource <span class=\"token operator\">=</span> Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Toolbar<span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Build<span class=\"token punctuation\">.</span>VERSION<span class=\"token punctuation\">.</span>SdkInt <span class=\"token operator\">>=</span> BuildVersionCodes<span class=\"token punctuation\">.</span>Lollipop<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>\t\tWindow<span class=\"token punctuation\">.</span>DecorView<span class=\"token punctuation\">.</span>SystemUiVisibility <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> statusBarHeightInfo <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">FormsAppCompatActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_statusBarHeight\"</span><span class=\"token punctuation\">,</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>BindingFlags<span class=\"token punctuation\">.</span>Instance <span class=\"token operator\">|</span> System<span class=\"token punctuation\">.</span>Reflection<span class=\"token punctuation\">.</span>BindingFlags<span class=\"token punctuation\">.</span>NonPublic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tstatusBarHeightInfo<span class=\"token punctuation\">.</span><span class=\"token function\">SetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tWindow<span class=\"token punctuation\">.</span><span class=\"token function\">SetStatusBarColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Android<span class=\"token punctuation\">.</span>Graphics<span class=\"token punctuation\">.</span>Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <span class=\"token number\">52</span><span class=\"token punctuation\">,</span> <span class=\"token number\">86</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">LoadApplication</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    App<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">On</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>PlatformConfiguration<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">UseWindowSoftInputModeAdjust</span><span class=\"token punctuation\">(</span>WindowSoftInputModeAdjust<span class=\"token punctuation\">.</span>Resize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>リフレクションを使っていたり、 <code>SetStatusBarColor</code> が色固定になっていたりと激しく不安ですが、これでようやく、期待どおりの動きになりました。</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_03.png\" alt=\"\"></p>\n<h2 id=\"ios-%E3%81%AE%E5%A0%B4%E5%90%88\">iOS の場合 <a class=\"direct-link\" href=\"#ios-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>Xamarin.Forms の iOS 側で、特になにもせずに、ソフトウェアキーボードを表示させると、ListView と文字列入力項目の手前に被さってしまいます。</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_06.png\" alt=\"\"></p>\n<p>通常の画面なら、 ScrollView で囲ってあげることで、適切に ScollView の高さが縮んで、その中がスクロール可能になります。<br>\nが、ScrollView と ListView のようにスクローラブルなコントロールを入れ子で使うとトラブルの素なので、ScrollView は選択できません。</p>\n<p>iOS ネイティブでは、キーボードが表示されたかどうかを検知して、AutoLayout の制約を設定したり、自力で View のサイズを再計算するようです。</p>\n<ul>\n<li><a href=\"http://qiita.com/rizumita/items/7852124d03a2a59d4252\">Auto Layoutを利用してキーボードに合わせてビューをリサイズする方法 - Qiita</a></li>\n</ul>\n<p>Xamarin.Forms の iOS 側での対策をググって探します。<br>\nこんなライブラリを見つけました。</p>\n<ul>\n<li><a href=\"https://github.com/paulpatarinski/Xamarin.Forms.Plugins/tree/master/KeyboardOverlap\">Xamarin.Forms.Plugins/KeyboardOverlap at master · paulpatarinski/Xamarin.Forms.Plugins</a></li>\n</ul>\n<p>これを適用してみると、以下のような動きになります。</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_07.png\" alt=\"\"></p>\n<p>んー、 Android 側の初期状態とおなじく、 <strong>画面全体が上へスライド</strong> しています。</p>\n<p>このライブラリの <a href=\"https://github.com/paulpatarinski/Xamarin.Forms.Plugins/blob/master/KeyboardOverlap/KeyboardOverlap/KeyboardOverlap.Forms.Plugin.iOSUnified/KeyboardOverlapRenderer.cs\">ソースコード</a> を見てみます。<br>\nこれは Custom Renderer で実現されていて、キーボードが表示されたら、Page の位置を上方向へ移動させているようです(<code>ShiftPageUp()</code>, <code>ShiftPageDown()</code> というメソッド名だし)。</p>\n<p>であれば、この処理を改造して、「移動」ではなく「高さのリサイズ」をすればよいことになります。<br>\n以下のように修正しました（コメントアウトは旧コードです）。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// KeyboardOverlapRenderer.cs</span><br><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShiftPageUp</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">nfloat</span> keyboardHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> activeViewBottom<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pageFrame <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">.</span>Bounds<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">//    var newY = pageFrame.Y + CalculateShiftByAmount(pageFrame.Height, keyboardHeight, activeViewBottom);</span><br><span class=\"token comment\">//    Element.LayoutTo(new Rectangle(pageFrame.X, newY,</span><br><span class=\"token comment\">//        pageFrame.Width, pageFrame.Height));</span><br><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newHeight <span class=\"token operator\">=</span> pageFrame<span class=\"token punctuation\">.</span>Height <span class=\"token operator\">+</span> <span class=\"token function\">CalculateShiftByAmount</span><span class=\"token punctuation\">(</span>pageFrame<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">,</span> keyboardHeight<span class=\"token punctuation\">,</span> activeViewBottom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    Element<span class=\"token punctuation\">.</span><span class=\"token function\">LayoutTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rectangle</span><span class=\"token punctuation\">(</span>pageFrame<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> pageFrame<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">,</span><br>        pageFrame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> newHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    _pageWasShiftedUp <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ShiftPageDown</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">nfloat</span> keyboardHeight<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> activeViewBottom<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pageFrame <span class=\"token operator\">=</span> Element<span class=\"token punctuation\">.</span>Bounds<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">//    var newY = pageFrame.Y - CalculateShiftByAmount(pageFrame.Height, keyboardHeight, activeViewBottom);</span><br><span class=\"token comment\">//    Element.LayoutTo(new Rectangle(pageFrame.X, newY,</span><br><span class=\"token comment\">//        pageFrame.Width, pageFrame.Height));</span><br><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newHeight <span class=\"token operator\">=</span> pageFrame<span class=\"token punctuation\">.</span>Height <span class=\"token operator\">+</span> keyboardHeight<span class=\"token punctuation\">;</span><br>    Element<span class=\"token punctuation\">.</span><span class=\"token function\">LayoutTo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rectangle</span><span class=\"token punctuation\">(</span>pageFrame<span class=\"token punctuation\">.</span>X<span class=\"token punctuation\">,</span> pageFrame<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">,</span><br>        pageFrame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> newHeight<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    _pageWasShiftedUp <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これを動かすと、下図のようになります。</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_08.png\" alt=\"\"></p>\n<p>iOS 側も、求めていた動きになりました。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>改めて、期待通りの動きになった Xamarin.Forms での画面(Android と iOS)です。</p>\n<p><img src=\"/img/posts/keyboard_ovelapping_in_Xamarin_forms_09.gif\" alt=\"\"></p>\n<p>Android 側は、 <code>MainActivity.cs</code> に <code>UseWindowSoftInputModeAdjust(WindowSoftInputModeAdjust.Resize)</code> と、WORKAROUND のコードを書きます。</p>\n<p>iOS 側は、 KeyboardOverlap.Forms.Plugin のカスタムレンダラー <code>KeyboardOverlapRenderer.cs</code> を少し修正して使用します。</p>\n<p>どちらもサンプルアプリを作りました。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/ImeAutoAjustSample\">amay077/ImeAutoAjustSample</a></li>\n</ul>\n<p><code>/Android</code> が、 Android-Java で作成した「期待値」で、<br>\n<code>/XamarinFormsCustomRenderer</code> が、 Xamarin.Forms で「期待値」を再現した iOS/Android アプリです。</p>\n<p>ListView + Entry のチャット画面に加えて、 ScrollView を使った画面も用意しています。</p>\n<h2 id=\"%E6%9C%80%E5%BE%8C%E3%81%AB\">最後に <a class=\"direct-link\" href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\">#</a></h2>\n<p>このポストのきっかけは、</p>\n<p><amp-twitter\n \tdata-tweetid=\"818794518849781760\"\n \twidth=\"800\"\n \theight=\"600\"\n \tlayout=\"responsive\"></amp-twitter></p>\n<p>からの <a href=\"https://twitter.com/amay077/status/819123872611975168\">一連の流れ</a> です。もともと自分のプログラムでも懸案だったので調べてみました。</p>\n<p>ここに書かなかったけど知見になりそうなツイートを貼っておきます。</p>\n<p><amp-twitter\n \tdata-tweetid=\"819142125929447424\"\n \twidth=\"800\"\n \theight=\"600\"\n \tlayout=\"responsive\"></amp-twitter></p>\n<p><amp-twitter\n \tdata-tweetid=\"819103490609856513\"\n \twidth=\"800\"\n \theight=\"600\"\n \tlayout=\"responsive\"></amp-twitter></p>\n<p>関わっていただいた皆さん、ありがとうございました。</p>\n",
      "date_published": "2017-01-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/01/05/order_of_xamarin_forms_margin_in_xaml/",
      "url": "https://blog.amay077.net/blog/2017/01/05/order_of_xamarin_forms_margin_in_xaml/",
      "title": "Xamarin.Forms XAML で、Margin の上下左右の順番",
      "content_html": "<p>Xamarin.Forms の XAML で マージン(Margin)やパディング(Padding)を書くとき、上下左右の順番がわからなくなるのでメモ。</p>\n<!--more-->\n<p>XAML に Margin や Padding （いわゆる <code>Thickness</code>）をリテラルで書くときの順番は、 <strong>「left, top, right, bottom」</strong> だ。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">?</span><span class=\"token class-name\">xml</span> version<span class=\"token operator\">=</span><span class=\"token string\">\"1.0\"</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">?</span><span class=\"token operator\">></span><br><span class=\"token operator\">&lt;</span><span class=\"token class-name\">ContentPage</span> xmlns<span class=\"token operator\">=</span><span class=\"token string\">\"http://xamarin.com/schemas/2014/forms\"</span> <br>\t\txmlns<span class=\"token punctuation\">:</span>x<span class=\"token operator\">=</span><span class=\"token string\">\"http://schemas.microsoft.com/winfx/2009/xaml\"</span> <br>\t\txmlns<span class=\"token punctuation\">:</span>local<span class=\"token operator\">=</span><span class=\"token string\">\"clr-namespace:MarginTest\"</span> <br>\t\tx<span class=\"token punctuation\">:</span>Class<span class=\"token operator\">=</span><span class=\"token string\">\"MarginTest.MarginTestPage\"</span> <br>\t\tBackgroundColor<span class=\"token operator\">=</span><span class=\"token string\">\"Silver\"</span><span class=\"token operator\">></span><br>\t<br>\t<span class=\"token operator\">&lt;</span><span class=\"token class-name\">BoxView</span> <br>\t\tMargin<span class=\"token operator\">=</span><span class=\"token string\">\"10, 20, 30, 40\"</span><br>\t\tBackgroundColor<span class=\"token operator\">=</span><span class=\"token string\">\"Red\"</span><br>\t\tHorizontalOptions<span class=\"token operator\">=</span><span class=\"token string\">\"FillAndExpand\"</span> <br>\t\tVerticalOptions<span class=\"token operator\">=</span><span class=\"token string\">\"FillAndExpand\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><br>\t<br><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ContentPage<span class=\"token operator\">></span></code></pre>\n<p><img src=\"/img/posts/xamarin_forms_margin_definition_01.png\" alt=\"\"></p>\n<p><strong>「&quot;左&quot; をスタートに時計まわり」</strong> と覚えておきたい。</p>\n<p>Thickness のコンストラクタの引数を見てもよい。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/api/constructor/Xamarin.Forms.Thickness.Thickness/p/System.Double/System.Double/System.Double/System.Double/\">Thickness(double, double, double, double) - Xamarin</a></li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// syntax</span><br><span class=\"token keyword\">public</span> Thickness <span class=\"token punctuation\">(</span><span class=\"token class-name\">Double</span> left<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span> top<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span> right<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Double</span> bottom<span class=\"token punctuation\">)</span></code></pre>\n<p>ちなみに css の <code>margin: 10px 20px 30px 40px;</code> は、 ”上” をスタートに時計まわり だ、紛らわしい。</p>\n",
      "date_published": "2017-01-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/01/05/killing_tab_for_xamarin_project/",
      "url": "https://blog.amay077.net/blog/2017/01/05/killing_tab_for_xamarin_project/",
      "title": "Xamarin Studio(Visual Studio for Mac)で tab を絶対殺す設定",
      "content_html": "<p>インデントは space4 派です。</p>\n<p>インストールした直後の Xamarin Studio や Visual Studio for Mac の設定だと、インデントが tab になっています。</p>\n<!--more-->\n<p>この状態で開発を始めてしまうと、意図せず tab がコードに挿入され、リポジトリに push してしまい、 <a href=\"https://github.com/nuitsjp/Xamarin.Forms.GoogleMaps.Bindings/commit/8399c57a6d83b291116be0e588ecca88405d4182#diff-5a747f9189b02ce61af4958a513f30f6\">github で見た時に初めて気づき</a> ヽ(｀Д´#)ﾉ ﾑｷｰ!! となるので、早めに手を打ちましょう。</p>\n<h2 id=\"%E7%AC%AC%E4%B8%80%E3%81%AE%E7%A0%A6%3A-xamarin-studio-%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E8%A8%AD%E5%AE%9A\">第一の砦: Xamarin Studio のユーザー設定 <a class=\"direct-link\" href=\"#%E7%AC%AC%E4%B8%80%E3%81%AE%E7%A0%A6%3A-xamarin-studio-%E3%81%AE%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>できればインストールした直後にやっておきたい設定。<br>\nそもそもこの既定の設定値が Visual Studio for Win と異なるからいろいろ不幸が起こると思われ。</p>\n<p>メニュー -&gt; Xamarin Studio -&gt; ユーザー設定 で「ユーザー設定」画面を起動し、ソースコード -&gt; コードの書式設定 -&gt; C# ソースコードを選択し、以下のように、</p>\n<ul>\n<li>タブ幅、インデント幅を 4 に</li>\n<li>タブをスペースに変換 にチェックを入れる</li>\n</ul>\n<p><img src=\"/img/posts/definitely_kill_tab_for_Xamarin_studio_01.png\" alt=\"\"></p>\n<p>と設定します。（ポリシーで <strong>Visual Sutdio</strong> を選択すればいいんじゃん！）</p>\n<h2 id=\"%E7%AC%AC%E4%BA%8C%E3%81%AE%E7%A0%A6%3A-%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%2F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">第二の砦: ソリューション/プロジェクトの設定 <a class=\"direct-link\" href=\"#%E7%AC%AC%E4%BA%8C%E3%81%AE%E7%A0%A6%3A-%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%2F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>ソースコードの書式設定が、ソリューションまたはプロジェクト毎にされている場合、第一の砦を突破される可能性があります。</p>\n<p>ソリューションまたはプロジェクトを右クリックして、オプションを選択し、先ほどと同じように ソースコードの書式設定 を見直します。</p>\n<p><img src=\"/img/posts/definitely_kill_tab_for_Xamarin_studio_02.png\" alt=\"\"></p>\n<p>Windows と Mac で共同作業する場合は、プロジェクト作成時に、この設定を明示的に行っておくのがよいと思います。</p>\n<h2 id=\"%E6%9C%80%E5%BE%8C%E3%81%AE%E7%A0%A6%3A-git-%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E6%99%82%E3%81%AB-tab-%E3%82%92-space-%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E8%A8%AD%E5%AE%9A\">最後の砦: git のコミット時に tab を space に変換する設定 <a class=\"direct-link\" href=\"#%E6%9C%80%E5%BE%8C%E3%81%AE%E7%A0%A6%3A-git-%E3%81%AE%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E6%99%82%E3%81%AB-tab-%E3%82%92-space-%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>Xamarin Studio やプロジェクトの設定だけでは不安な場合は、最後の砦として、git のコミット時に tab を空白に変換してしまいましょう。</p>\n<ul>\n<li><a href=\"http://hogeblr.tumblr.com/post/49260745404/git-%E3%81%A7-commit-%E6%99%82%E3%81%AB%E3%83%9B%E3%83%AF%E3%82%A4%E3%83%88%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%82%84%E6%94%B9%E8%A1%8C%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E8%87%AA%E5%8B%95%E7%9A%84%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B\">git で commit 時にホワイトスペースや改行コードを自動的に変換する - hogeblr</a></li>\n<li><a href=\"http://stackoverflow.com/questions/2316677/can-git-automatically-switch-between-spaces-and-tabs\">Can git automatically switch between spaces and tabs? - Stack Overflow</a></li>\n</ul>\n<h3 id=\"1.-homebrew-%E3%81%A7-coreutils-%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\">1. homebrew で coreutils を入れる <a class=\"direct-link\" href=\"#1.-homebrew-%E3%81%A7-coreutils-%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\">#</a></h3>\n<p>Terminal で、</p>\n<p><code>brew install coreutils</code></p>\n<p>を実行します。<br>\nhomebrew が入っていない場合は、</p>\n<ul>\n<li><a href=\"http://weblabo.oscasierra.net/homebrew-1/\">Mac の開発を便利にするパッケージ管理ソフト Homebrew のインストール手順 ｜ WEB ARCH LABO</a></li>\n</ul>\n<p>などを見て先にインストールしてください。</p>\n<h3 id=\"2.-tab-%E3%82%92-space-%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90\">2. tab を space に変換するフィルタを作成 <a class=\"direct-link\" href=\"#2.-tab-%E3%82%92-space-%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>Terminal で、</p>\n<p><code>git config --global filter.tabspace.clean 'expand -t 4'</code></p>\n<p>を実行します。<br>\nこれは、 「&quot;tabspace&quot; という名前のフィルターを作成する」という意味です。<code>--global</code> を付けていますが、個別のローカルリポジトリにのみ適用する場合は <code>--local</code> として、ローカルリポジトリのディレクトリで実行してください。尚、この設定はリモートへは適用されません。</p>\n<h3 id=\"3.-.gitattributes-%E3%81%AB%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%92%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92%E8%A8%AD%E5%AE%9A\">3. .gitattributes にフィルタを適用する拡張子を設定 <a class=\"direct-link\" href=\"#3.-.gitattributes-%E3%81%AB%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%92%E9%81%A9%E7%94%A8%E3%81%99%E3%82%8B%E6%8B%A1%E5%BC%B5%E5%AD%90%E3%82%92%E8%A8%AD%E5%AE%9A\">#</a></h3>\n<p>ローカルリポジトリに <code>.gitattributes</code> というテキストファイルを作成し、以下を追記します。</p>\n<pre><code>*.cs filter=tabspace\n</code></pre>\n<p>「2 で作成したフィルタ &quot;tabspace&quot; を、拡張子 *.cs に適用する」という意味です。<br>\n<code>.gitattributes</code> はリモートに送信されます。</p>\n<h3 id=\"4.-%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%92%E9%81%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%81%82%E3%81%92%E3%82%8B\">4. ローカルリポジトリにフィルタを適用してあげる <a class=\"direct-link\" href=\"#4.-%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%82%92%E9%81%A9%E7%94%A8%E3%81%97%E3%81%A6%E3%81%82%E3%81%92%E3%82%8B\">#</a></h3>\n<p>Terminal で、</p>\n<pre><code>git rm -r --cached .\ngit add .\n</code></pre>\n<p>を実行します。<br>\nすべてのファイルを一旦キャッシュから削除して再追加してあげることでフィルタを適用します。（上記リンクでは <code>git checkout HEAD -- **</code> が紹介されてましたがうまくいかなかったんですよね。。）<br>\nリポジトリ内の *.cs ファイルに tab が含まれていた場合は、この操作で、それらのステータスが modified になり tab が space に変換されているでしょう。そのまま <code>git commit</code> すると、tab が space でコミットされます。</p>\n<p>変更したファイルに tab があるとそれは space に変換されるし、テキストエディタで意図的に tab を挿入しても、space に変換されます。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>さまざまな人がコミットするプロジェクトの管理者の立場で、 tab でなく space の使用をできるだけ強制したい場合は、</p>\n<ol>\n<li>プロジェクト単位でコードの書式設定をしておく</li>\n<li><code>.gitattributes</code> をリポジトリに含める</li>\n<li><code>git config --global filter.tabspace.clean 'expand -t 4'</code> を作業Macで実行してもらう</li>\n</ol>\n<p>が現状ですぐに採用できる対策かと思います。</p>\n<p>1 をしないと、各作業者の環境の設定値が適用されてしまうので、明示的に設定した方が良いと思います。</p>\n<p>git の filter は <code>--global</code> だと複数のリポジトリで衝突する可能性があるので、 <code>--local</code> の方が無難とも思います。</p>\n",
      "date_published": "2017-01-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/01/03/incrementing_numberpickers_displayitems_is_troublesome/",
      "url": "https://blog.amay077.net/blog/2017/01/03/incrementing_numberpickers_displayitems_is_troublesome/",
      "title": "NumberPicker の DisplayItems の増減が面倒すぎる",
      "content_html": "<p><a href=\"https://developer.android.com/reference/android/widget/NumberPicker.html\"><code>NumberPicker</code></a> には数値だけじゃなくて <code>setDisplayedValues</code> で数値以外の任意の文字列を項目群として設定できる。</p>\n<!--more-->\n<p>以下のようにすると、 NumberPicker には 「A, B, C」が表示される。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> words <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"F\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"G\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"H\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"J\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"K\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"L\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"N\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"O\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">NumberPicker</span> numPicker1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">NumberPicker</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>numPicker1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setMinValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxValue</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> displayWords <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// A,B,C</span><br>numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayedValues</span><span class=\"token punctuation\">(</span>displayWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>項目群を、 A,B,C から A,B,C,D に増やしたいときに、下のようコードを書くと、</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Button</span> buttonAdd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>buttonAdd<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">int</span> newMax <span class=\"token operator\">=</span> numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> displayWords <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newMax <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>newMax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxValue</span><span class=\"token punctuation\">(</span>newMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayedValues</span><span class=\"token punctuation\">(</span>displayWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>setDisplayedValues</code> で <code>ArrayIndexOutOfBoundsException</code> が出て落ちる。</p>\n<blockquote>\n<p>E/AndroidRuntime: FATAL EXCEPTION: main<br>\nProcess: net.amay077.numberpickersample, PID: 3828<br>\njava.lang.ArrayIndexOutOfBoundsException: length=4; index=4<br>\nat android.widget.NumberPicker.ensureCachedScrollSelectorValue(NumberPicker.java:1825)<br>\nat android.widget.NumberPicker.initializeSelectorWheelIndices(NumberPicker.java:1640)<br>\nat android.widget.NumberPicker.setMaxValue(NumberPicker.java:1445)<br>\nat net.amay077.numberpickersample.MainActivity$1.onClick(MainActivity.java:36)</p>\n</blockquote>\n<p>項目を増やすときは、<code>setMaxValue</code> よりも  <code>setDisplayedValues</code> を先に呼ばないといけないらしい。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Button</span> buttonAdd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonAdd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>buttonAdd<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">int</span> newMax <span class=\"token operator\">=</span> numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> displayWords <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newMax <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>newMax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 増やすときは先に setDisplayedValues</span><br>        numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayedValues</span><span class=\"token punctuation\">(</span>displayWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxValue</span><span class=\"token punctuation\">(</span>newMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>逆に、項目を減らすときは、<code>setMaxValue</code> よりも  <code>setDisplayedValues</code> を後に呼ばないといけないらしい。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Button</span> buttonRemove <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonRemove<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>buttonRemove<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">int</span> newMax <span class=\"token operator\">=</span> numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">getMaxValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> displayWords <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">subList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> newMax <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>newMax<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxValue</span><span class=\"token punctuation\">(</span>newMax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 減らすときは後で setDisplayedValues</span><br>        numPicker1<span class=\"token punctuation\">.</span><span class=\"token function\">setDisplayedValues</span><span class=\"token punctuation\">(</span>displayWords<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><img src=\"/img/posts/android_numberpicker_01.gif\" alt=\"\"></p>\n<p>項目が増えたときと減ったときで、呼び出しの順番を変えないといけないのが面倒すぎる。</p>\n",
      "date_published": "2017-01-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2017/01/01/bought_macbookpro_2016_with_touchbar/",
      "url": "https://blog.amay077.net/blog/2017/01/01/bought_macbookpro_2016_with_touchbar/",
      "title": "MacBook Pro Late 2016 13インチ TouchBar付きと周辺機器を購入しました",
      "content_html": "<p>発表された日に注文してたんですけどね。</p>\n<!--more-->\n<p><a href=\"http://www.apple.com/jp/macbook-pro/\">MacBook Pro</a> の 13インチ、TouchBar 付きを購入しました。</p>\n<p>Mac mini を購入したのが4年前くらいになるので、そろそろ買い替えたいと思っていました。</p>\n<h2 id=\"%E3%82%B9%E3%83%9A%E3%83%83%E3%82%AF\">スペック <a class=\"direct-link\" href=\"#%E3%82%B9%E3%83%9A%E3%83%83%E3%82%AF\">#</a></h2>\n<p>かなりがんばった！</p>\n<p><img src=\"/img/posts/bought_macbookpro_2016_with_touchbar_03.png\" alt=\"\"></p>\n<h2 id=\"touchbar\">TouchBar <a class=\"direct-link\" href=\"#touchbar\">#</a></h2>\n<p>うーん、ほとんど活用できてません💧<br>\n自宅では外部ディスプレイ、外部キーボード、トラックパッドで作業してるので、本体はほぼ閉じたまま…。<br>\nなので TouchID もあまり活かしてないという・・・。</p>\n<h2 id=\"%E3%83%90%E3%83%83%E3%83%86%E3%83%AA%E3%83%BC\">バッテリー <a class=\"direct-link\" href=\"#%E3%83%90%E3%83%83%E3%83%86%E3%83%AA%E3%83%BC\">#</a></h2>\n<p>購入直後は、ものすごく減りが早くて、バッテリーだけでは3時間くらいしか持ちませんでした。<br>\nWiFi、Xamarin Studio や VMWare Fusion などをガンガン使ってたので、というのもあるのですが、同じような用途で会社で使ってる MacBook Pro 2015 13inch は6時間くらい持ってる印象だったので、「うーんこんなもんか…」という印象だったのですが、macOS のアップデートが契機だったのか、あるいは初期処理（インデックス作成とか？）が終わったのか、最近は5時間くらいは持つかなあ、と感じています。</p>\n<p>これ、12/11 時点のバッテリーの減り方、尋常じゃない角度です。</p>\n<p><img src=\"/img/posts/bought_macbookpro_2016_with_touchbar_01.png\" alt=\"\"></p>\n<p>その後の 12/21 のバッテリーの減り方、きもーち角度が緩くなってます。</p>\n<p><img src=\"/img/posts/bought_macbookpro_2016_with_touchbar_02.png\" alt=\"\"></p>\n<p>今は、さらに角度が緩くなってる印象ですね。</p>\n<h2 id=\"%E5%91%A8%E8%BE%BA%E6%A9%9F%E5%99%A8\">周辺機器 <a class=\"direct-link\" href=\"#%E5%91%A8%E8%BE%BA%E6%A9%9F%E5%99%A8\">#</a></h2>\n<h3 id=\"%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%83%90%E3%83%83%E3%83%86%E3%83%AA%E3%83%BC\">モバイルバッテリー <a class=\"direct-link\" href=\"#%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%83%90%E3%83%83%E3%83%86%E3%83%AA%E3%83%BC\">#</a></h3>\n<ul>\n<li><a href=\"http://amzn.to/2hlpAgz\">モバイルバッテリー RAVPower 26800mAh USB-C ポータブル充電器 （ PD対応 USB-C充電器付 iSmart2.0機能搭載) MacBook / MateBook / VivoBook / YOGA / iPhone / iPad など対応</a></li>\n</ul>\n<p>前述の通りバッテリーに不安があるので購入。MacBook Air 用に <a href=\"http://tyomac.com/hyperjuice/\">HyperJuice</a> を持っているので、これが使えると良かったのですが、現状対応していないようで…。でも以外と安かったので即決しました。</p>\n<p>MacBook Pro Late 2016 に対応したモバイルバッテリーはまだ数が少ないです。<br>\nこのバッテリーは出力30Wで、MBP にも給電ではなく <strong>充電</strong> ができます。</p>\n<p>モバイルバッテリーが満タンの状態から、 電池残が空っぽの MBP に、3〜4時間でフル充電ができます(MBPを使用しながら)。ただ MBP への充電は1回が限界のようで、モバイルバッテリーの容量を 4/5 程度消費するようです（フル充電時、5つある目盛りが、1つまで減った）。</p>\n<p>モバイルバッテリーとしては大きいと思いますが、 HyperJuice に比べれば小さく・軽いです。</p>\n<p>この製品自体には、 USB Type-C ケーブルが付属しませんので、そのままではモバイルバッテリーの充電もできません。別途ケーブルの購入が必要です。</p>\n<p>付属しているケーブルは、 USB Type-A to micro USB のケーブル(短)が2本と、micro USB to USB Type-C アダプタが1つです、謎です。</p>\n<h3 id=\"usb-type-c-%E9%96%A2%E9%80%A3\">USB Type-C 関連 <a class=\"direct-link\" href=\"#usb-type-c-%E9%96%A2%E9%80%A3\">#</a></h3>\n<p>何かとネックになる USB Type-C 関連ですが、私は以下を購入しました。</p>\n<ul>\n<li><a href=\"http://amzn.to/2ioFzvj\">AUKEY USB C to USB Cケーブル USB2.0 (2m) Type-C 機器対応 ナイロン編み Quick Charge 3.0 超急速充電 最大3A給電 新しいMacBook Pro/MacBook、Nexus 6P、Nexus 5Xなどに対応 CB-CD6</a></li>\n</ul>\n<p>モバイルバッテリー自体の充電、モバイルバッテリーから MBP への充電用の USB Type-C ケーブルです。<br>\nカバンの中にバッテリーを入れて机の上の MBP まで届くように 2m と長めのケーブルにしました、動作に問題はないです。ナイロン編みなので、なんとなく質感が「紐」っぽいです。</p>\n<ul>\n<li><a href=\"http://amzn.to/2it1SCD\">【2点セット】 AUKEY USB C to USB 3.0 変換アダプタ Type cコネクタ 56Kレジス OTG機能対応 新しいMacBook Pro、MacBook、Chromebook Pixel、Nexus 6P、Nexus 5X、OnePlus 2 に対応 高速転送可能 CB-A1</a></li>\n</ul>\n<p>手持ちの iOS 機器(Lightning)や Android 機器(micro USB)のケーブルを活かすための、USB Type-C to Type-A 変換アダプタです。</p>\n<p>ちなみに、 MBP の側面には USB Type-C 端子が2つ並んでいますが、このアダプタを２つ並べて刺そうとすると干渉してしまいます。両側に１つずつしか使えません。</p>\n<ul>\n<li><a href=\"http://amzn.to/2ioKPPP\">Cable Matters USB-C to HDMI / VGA / LAN/ USB マルチポート搭載 4K UHD 変換アダプター（Thunderbolt 3 Port Compatible）</a></li>\n</ul>\n<p>自宅では、HDMI接続の外部ディスプレイ、有線LAN を接続して使いたかった(Mac mini でもそうしてた)ので、いい感じにオールインワンなアダプタがあって助かりました。</p>\n<p>USB Type-A ポートも付いているので、上記のアダプタを使わなくても、機器ひとつだけなら、こいつで捌けます。</p>\n<h2 id=\"%E3%82%A4%E3%83%B3%E3%83%8A%E3%83%BC%E3%82%B1%E3%83%BC%E3%82%B9\">インナーケース <a class=\"direct-link\" href=\"#%E3%82%A4%E3%83%B3%E3%83%8A%E3%83%BC%E3%82%B1%E3%83%BC%E3%82%B9\">#</a></h2>\n<ul>\n<li><a href=\"http://amzn.to/2ioQPYV\">Arvok 13.3 インナーケース Apple MacBook Air/Pro 用 フェルト&amp; レザー とともに 小さなポーチ ウルトラブック用スリーブバッグ Macbook 電源ケーブル 用 プロテクターケース/ ネットブックケース/ノートパソコンケース/バッグ/スリーブ/ポーチカバー ウルトラブック/ネットブック用（濃いグレー）</a></li>\n</ul>\n<p>剥き出しのままカバンに入れたくないなーと思い、ケースも購入しました。<br>\nフェルト製のケースで、事務用品っぽくはないです。<br>\n13.3インチと少し大きめなのに加えて、新MBP が薄くなったので、収納にはかなり余裕があります。</p>\n<p><img src=\"/img/posts/bought_macbookpro_2016_with_touchbar_04.png\" alt=\"\"></p>\n<p>収納するとこんな感じです。</p>\n<h2 id=\"%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E9%96%A2%E9%80%A3\">トラブル関連 <a class=\"direct-link\" href=\"#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E9%96%A2%E9%80%A3\">#</a></h2>\n<p>Twitter などで、バッテリーの初期不良？で修理→交換みたいな話をよく聞きますが、幸いかそのようなトラブルには見舞われていません。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>バッテリーが予想以上に持たないなー、という点を除いては、まあ満足です。<br>\n「この MacBook Pro が」という意味よりは、「開発に使える新しいマシン」としてですが。</p>\n<p>重さ薄さ共に、MBP2015 よりは軽く薄くなってるので、持ち運びはしやすいです。</p>\n<p>「TouchBar は(私に)必要だったのか？」については、否定せざるを得ません、今のところ…。</p>\n",
      "date_published": "2017-01-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/31/notice_for_creating_ui_library_for_xamarin_forms/",
      "url": "https://blog.amay077.net/blog/2016/12/31/notice_for_creating_ui_library_for_xamarin_forms/",
      "title": "Xamarin.Forms 向けのUIライブラリを作る時の注意点",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin-student\">[学生さん・初心者さん大歓迎！]Xamarin Advent Calendar 2016</a> 16日目です。<br>\n<a href=\"http://ticktack.hatenablog.jp/entry/2015/11/19/083000\">【Xamarin.Forms】自作ライブラリのカスタムコントロール使用時にSystem.IO.FileNotFoundExceptionが発生する場合の対処 - ぴーさんログ</a></p>\n<!--more-->\n<p>これ系の話です。</p>\n<p>Xamarin.Forms 向けのライブラリで、使う側が XAML のみで完結しそうなものは、次のような種類があります。</p>\n<ul>\n<li>ValueConverter</li>\n<li>Behavior</li>\n<li>Effects</li>\n<li>Custom Renderer</li>\n</ul>\n<p>上２つと下２つで、症状と対策が異なるので、それぞれ説明します。</p>\n<h2 id=\"valueconverter%2C-behavior-%E3%81%AE%E5%A0%B4%E5%90%88\">ValueConverter, Behavior の場合 <a class=\"direct-link\" href=\"#valueconverter%2C-behavior-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<h2 id=\"%E7%97%87%E7%8A%B6\">症状 <a class=\"direct-link\" href=\"#%E7%97%87%E7%8A%B6\">#</a></h2>\n<p>これらのライブラリを XAML でしか使用していない（C# のコードで使用していない）場合、冒頭のリンクで紹介したような <code>System.IO.FileNotFoundException</code> が発生することがあります。<br>\nこれは iOS プロジェクトの実行で顕著なようです。（Android プロジェクトの場合、通常の実行ではプロジェクトで参照されているアセンブリが全て配布されるためでしょうか。）</p>\n<h2 id=\"%E5%AF%BE%E7%AD%96\">対策 <a class=\"direct-link\" href=\"#%E5%AF%BE%E7%AD%96\">#</a></h2>\n<p>これを回避するには、 P3PPP さんが書いているように <code>new MyLib.MyControl()</code> などと、そのアセンブリを参照するコードを明示的に書いておきます。</p>\n<p>あるいは、XAMLC という、XAML の事前コンパイル機能を使用することでも回避できます。これによりコンパイル時に XAML がパースされ、それに必要なアセンブリが配布されるためです。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/xamarin-forms/xaml/xamlc/\">XAML Compilation - Xamarin</a></li>\n</ul>\n<p>XAMLC は互換性維持のためデフォルトではOFFになっており、ON にするためには <code>XamlCompilationOptions.Compile</code> を namespace または page class に付与します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// アセンブリまるっと指定</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Xaml</span><span class=\"token punctuation\">;</span><br><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">XamlCompilation</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>XamlCompilationOptions<span class=\"token punctuation\">.</span>Compile<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PhotoApp</span><br><span class=\"token punctuation\">{</span><br>  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><br><span class=\"token punctuation\">}</span><br><br><br><span class=\"token comment\">// 特定ページにのみ指定</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Xaml</span><span class=\"token punctuation\">;</span><br><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">XamlCompilation</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>XamlCompilationOptions<span class=\"token punctuation\">.</span>Compile<span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HomePage</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ContentPage</span></span><br><span class=\"token punctuation\">{</span><br>  <span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>では XAMLC を強制させればOKかというとそうでもありません。これで解決できるのは、 ValueConverter, Behavior のライブラリのみです。</p>\n<p>そもそも XAMLC も、 <a href=\"https://blog.xamarin.com/adding-bindable-native-views-directly-to-xaml/\">Native Embedding と併用できない</a> など、ON を強制できない事情もあります。</p>\n<h2 id=\"effects%2C-custom-renderer-%E3%81%AE%E5%A0%B4%E5%90%88\">Effects, Custom Renderer の場合 <a class=\"direct-link\" href=\"#effects%2C-custom-renderer-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<h3 id=\"%E7%97%87%E7%8A%B6-2\">症状 <a class=\"direct-link\" href=\"#%E7%97%87%E7%8A%B6-2\">#</a></h3>\n<p>3rd party ライブラリとして提供される Effects, Custom Renderer には、 PCL による共通インターフェース部と、 Xamarin.Android、Xamarin.iOS によるプラットフォーム実装のアセンブリが存在します。</p>\n<p>これらの場合、プラットフォーム実装のアセンブリ(<code>MyLib.Droid.dll</code> や <code>MyLib.iOS.dll</code> のこと)もまた、配布されない場合があることに注意が必要です。</p>\n<p>CustomRenderer も Effects も DependencyService や RootingEffect を利用してプラットフォーム固有のアセンブリに制御を委譲していますが、プラットフォーム固有のアセンブリを参照するコードがあなたのアプリプロジェクトに存在しない場合、やはりプラットフォーム固有のアセンブリは配布されず、Effects や Custom Renderer が機能しないことになります。この場合、特に例外は出ません、機能するはずの Effects、CustomRenderer が表示されない、といった症状になります。</p>\n<h3 id=\"%E5%AF%BE%E7%AD%96-2\">対策 <a class=\"direct-link\" href=\"#%E5%AF%BE%E7%AD%96-2\">#</a></h3>\n<p>これの対策は、C# でそのアセンブリを参照するコードを書くしかありません。しかも <strong>プラットフォーム毎に書く必要があります</strong> 。</p>\n<h4 id=\"android-%E5%81%B4\">Android 側 <a class=\"direct-link\" href=\"#android-%E5%81%B4\">#</a></h4>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// MainActivity.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">.</span>FormsAppCompatActivity<br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        TabLayoutResource <span class=\"token operator\">=</span> Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Tabbar<span class=\"token punctuation\">;</span><br>        ToolbarResource <span class=\"token operator\">=</span> Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Toolbar<span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        MyLib<span class=\"token punctuation\">.</span>Initializer<span class=\"token punctuation\">.</span><span class=\"token function\">InitForDroid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ←これ！</span><br><br>        <span class=\"token function\">LoadApplication</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"ios-%E5%81%B4\">iOS 側 <a class=\"direct-link\" href=\"#ios-%E5%81%B4\">#</a></h4>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// AppDelegate.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppDelegate</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>iOS<span class=\"token punctuation\">.</span>FormsApplicationDelegate<br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">FinishedLaunching</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> app<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSDictionary</span> options<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">global</span><span class=\"token punctuation\">::</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token function\">LoadApplication</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        MyLib<span class=\"token punctuation\">.</span>Initializer<span class=\"token punctuation\">.</span><span class=\"token function\">InitForiOS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ←これ！</span><br><br>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">FinishedLaunching</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>アセンブリを読み込ませるだけのコードなので、プラットフォーム毎、アセンブリ毎に１回だけ呼べばOKです。</p>\n<p>私が開発・配布している <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Xamarin.Forms.GoogleMaps</a> も、Custom Renderer を使っているのでこれに該当しますが、 X.F.GoogleMaps は、各プラットフォームで Google Maps の API Key を指定してもらう必要があるため、もともと <code>MainActivity.cs</code> や <code>AppDelegate.cs</code> で <code>Xamarin.FormsGoogleMaps.Init(&quot;your_api_key&quot;)</code> を呼び出してもらう必要があったため、本件の問題は発生していませんでした。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Effects, Custom Renderer の場合の対応策である</p>\n<p>「<code>MainActivity.cs</code> や <code>AppDelegate.cs</code> で <code>MyLib.Initializer.InitForDroid()</code>, <code>MyLib.Initializer.InitForiOS()</code> を呼んでもらう」</p>\n<p>は、ValueConverter, Behavior の対策も包括します。よって、Xamarin.Forms 向けの UI ライブラリを提供しようと考えている人は、とりあえず <strong>実装は空っぽの <code>Initializer.Init()</code> メソッドを用意して、それを各プラットフォームの起動直後に呼び出してもらう</strong> 、という「運用でカバー」をお願いします。</p>\n<p>今は ValueConverter、 Behavior しか提供するつもりがなくても、将来的に Effect、Custom Renderer も提供する可能性がゼロではない場合は、最初から各プラットフォームのプロジェクトも作って、上の <code>Init()</code> メソッドを用意しておいた方がよいと思います。</p>\n<p>「なんだかな〜」という気もしますが、現状はこうするしかなさそうです。</p>\n",
      "date_published": "2016-12-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/31/can_use_visual_basic_in_xamarin/",
      "url": "https://blog.amay077.net/blog/2016/12/31/can_use_visual_basic_in_xamarin/",
      "title": "Visual Basic で Xamarin.Forms アプリ開発どこまでいける？",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin-welcome\">[初心者さん・学生さん大歓迎！] Xamarin その2 Advent Calendar 2016</a> 25日目です。<br>\nXamarin アプリ開発で使用できる言語は、公式には C# と F# のみですが、初心者にやさしいとされる Visual <a href=\"http://Basic.NET\">Basic.NET</a>(<a href=\"http://VB.NET\">VB.NET</a>) を使って Xamarin（今回は Xamarin.Forms）アプリは開発できないのでしょうか？</p>\n<!--more-->\n<p>チャレンジしてみました。</p>\n<h2 id=\"%E3%81%84%E3%81%8D%E3%81%AA%E3%82%8A%E7%B5%90%E8%AB%96\">いきなり結論 <a class=\"direct-link\" href=\"#%E3%81%84%E3%81%8D%E3%81%AA%E3%82%8A%E7%B5%90%E8%AB%96\">#</a></h2>\n<p>まあだいたい察しがつくので先に結論言っちゃいますけど、<a href=\"http://VB.NET\">VB.NET</a> での Xamarin.Forms アプリ開発は、 <strong>「部分的に可能」</strong> です。</p>\n<p>部分的に、というのは PCL で作れる箇所で、且つ Xamarin.Forms の XAML 以外です。</p>\n<p>PCL は Xamarin でなく  .NET 標準のライブラリだから、.NET 系の言語ならなんでも作れるわけですね。</p>\n<h2 id=\"%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%AA%E6%A7%8B%E6%88%90%E3%81%AE-xamarin.forms-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AF%E3%80%81%E3%81%A9%E3%81%93%E3%81%BE%E3%81%A7-visual-basic-%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%EF%BC%9F\">一般的な構成の Xamarin.Forms アプリは、どこまで Visual Basic 化できるか？ <a class=\"direct-link\" href=\"#%E4%B8%80%E8%88%AC%E7%9A%84%E3%81%AA%E6%A7%8B%E6%88%90%E3%81%AE-xamarin.forms-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AF%E3%80%81%E3%81%A9%E3%81%93%E3%81%BE%E3%81%A7-visual-basic-%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%EF%BC%9F\">#</a></h2>\n<h3 id=\"not-xaml-%E3%81%AE%E5%A0%B4%E5%90%88\">Not XAML の場合 <a class=\"direct-link\" href=\"#not-xaml-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>Xamarin.Forms プロジェクトをテンプレートから作成すると、</p>\n<ul>\n<li>MyApp</li>\n<li>MyApp.Droid</li>\n<li>MyApp.iOS</li>\n<li>MyApp.UWP</li>\n</ul>\n<p>の４つのプロジェクトがいずれも C# で作成されます。<br>\n（この内、もともと MS の管轄である UWP は今回のネタからは除外します）</p>\n<p>コアとなる MyApp プロジェクトは PCL なので、ここは Visual Basic が使えます。<br>\nちょっとやってみましょう。</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_01.png\" alt=\"\"></p>\n<p>を</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_02.png\" alt=\"\"></p>\n<p>こうします。</p>\n<p>C# で適当な Xamarin.Forms プロジェクトを作成した後、追加 -&gt; 新しいプロジェクト で、 <strong>Visual Basic のポータブルクラスライブラリ</strong> を作成します。</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_03.png\" alt=\"\"></p>\n<p>なんかプロファイルを聞かれるので、 Xamarin.Android と Xamarin.iOS と UWP あたりを含ませます。</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_04.png\" alt=\"\"></p>\n<p><a href=\"http://VB.NET\">VB.NET</a> の PCL に、nuget パッケージマネージャから「Xamarin.Forms」を追加します。</p>\n<p><code>App.vb</code> クラスを追加し、以下のように書きます。</p>\n<pre class=\"language-vbnet\"><code class=\"language-vbnet\"><span class=\"token keyword\">Imports</span> Xamarin.Forms<br><br><span class=\"token keyword\">Public</span> <span class=\"token keyword\">Class</span> App<br>    <span class=\"token keyword\">Inherits</span> Application<br><br>    <span class=\"token keyword\">Private</span> <span class=\"token keyword\">WithEvents</span> _button1 <span class=\"token keyword\">As</span> Button<br><br>    <span class=\"token keyword\">Sub</span> <span class=\"token keyword\">New</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><br>        <span class=\"token keyword\">Dim</span> layout <span class=\"token operator\">=</span> <span class=\"token keyword\">New</span> StackLayout<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">With</span> {<br>                 .VerticalOptions <span class=\"token operator\">=</span> LayoutOptions.Center<br>        }<br><br>        _button1 <span class=\"token operator\">=</span> <span class=\"token keyword\">New</span> Button<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">With</span> {<br>            .<span class=\"token function\">Text</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Goto Second\"</span><br>            }<br><br>        layout.Children.Add<span class=\"token punctuation\">(</span><span class=\"token keyword\">New</span> Label<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">With</span> {<br>            .HorizontalTextAlignment <span class=\"token operator\">=</span> TextAlignment.Center<span class=\"token punctuation\">,</span><br>            .<span class=\"token function\">Text</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Xamarin.Forms with Visual Basic!\"</span><br>        }<span class=\"token punctuation\">)</span><br>        layout.Children.Add<span class=\"token punctuation\">(</span>_button1<span class=\"token punctuation\">)</span><br><br>        <span class=\"token keyword\">Dim</span> content <span class=\"token operator\">=</span> <span class=\"token keyword\">New</span> ContentPage<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">With</span> {<br>            .Title <span class=\"token operator\">=</span> <span class=\"token string\">\"TryXFWithVB\"</span><span class=\"token punctuation\">,</span><br>            .Content <span class=\"token operator\">=</span> layout<br>        }<br><br>        MainPage <span class=\"token operator\">=</span> <span class=\"token keyword\">New</span> NavigationPage<span class=\"token punctuation\">(</span>content<span class=\"token punctuation\">)</span><br><br>    <span class=\"token keyword\">End</span> <span class=\"token keyword\">Sub</span><br><br>    <span class=\"token keyword\">Private</span> <span class=\"token keyword\">Sub</span> Button1_Clicked<span class=\"token punctuation\">(</span>sender <span class=\"token keyword\">As</span> <span class=\"token keyword\">Object</span><span class=\"token punctuation\">,</span> args <span class=\"token keyword\">As</span> EventArgs<span class=\"token punctuation\">)</span> <span class=\"token keyword\">Handles</span> _button1.Clicked<br>        <span class=\"token comment\">''次のページに遷移する処理を書く</span><br>    <span class=\"token keyword\">End</span> <span class=\"token keyword\">Sub</span><br><span class=\"token keyword\">End</span> <span class=\"token keyword\">Class</span></code></pre>\n<p>最後に、 Droid と iOS プロジェクトが参照するプロジェクトを、C# の PCL プロジェクトから <a href=\"http://VB.NET\">VB.NET</a> の PCL プロジェクトに切り替えます。</p>\n<p>で、実行すると、こうなります（iOS の場合）。</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_05.png\" alt=\"\"></p>\n<p>ほら <a href=\"http://VB.NET\">VB.NET</a> で Xamarin.Forms 、できました。C# 側の PCL プロジェクトは削除してしまって問題ないです。</p>\n<h3 id=\"xaml-%E3%81%AE%E5%A0%B4%E5%90%88\">XAML の場合 <a class=\"direct-link\" href=\"#xaml-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>コードで画面を書くのはできましたが、Xamarin.Forms XAML は使えるのでしょうか？<br>\n使えなさそう……使えませんでしたー。</p>\n<p>C# の Xamarin.Forms XAML や、<a href=\"http://VB.NET\">VB.NET</a> の WPF の XAML プロジェクトを見て、見よう見まねでプロジェクトファイル(<code>.vbproj</code>) を、書いてみましたが、「XAML とコードビハインド」として認識されず…。</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_06.png\" alt=\"\"></p>\n<h2 id=\"prism.forms-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92-vb.net-%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">Prism.Forms プロジェクトを <a href=\"http://VB.NET\">VB.NET</a> 化してみる <a class=\"direct-link\" href=\"#prism.forms-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92-vb.net-%E5%8C%96%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>画面を XAML で書きたいとなったら、<a href=\"http://VB.NET\">VB.NET</a> をあきらめるしかありません。<br>\nが、コードビハインドに１行も書かないマン＆ウーマンだったら、Xamarin.Forms のプロジェクトが C# でも問題ないはず。なぜなら ViewModel や Model のプロジェクトを切り離して、そっちを <a href=\"http://VB.NET\">VB.NET</a> にすれば良いのだから！</p>\n<p>試しに Prism.Forms のプロジェクトを <a href=\"http://VB.NET\">VB.NET</a> 化してみましょう。<br>\nここでは @Nuits さんの</p>\n<ul>\n<li><a href=\"https://github.com/jxug/PrismAndMoqHansOn/blob/master/docs/01.HandsOn-Overview.md\">PrismAndMoqHansOn/01.HandsOn-Overview.md at master · jxug/PrismAndMoqHansOn</a></li>\n<li><a href=\"http://www.nuits.jp/entry/2016/11/06/202916\">Prism and Moqハンズオンのドキュメントを大幅に加筆修正しました - nuits.jp blog</a></li>\n</ul>\n<p>を題材にさせてもらいます。</p>\n<h3 id=\"viewmodel%E3%80%81model-%E3%82%92-vb.net-%E5%8C%96%E3%81%99%E3%82%8B\">ViewModel、Model を <a href=\"http://VB.NET\">VB.NET</a> 化する <a class=\"direct-link\" href=\"#viewmodel%E3%80%81model-%E3%82%92-vb.net-%E5%8C%96%E3%81%99%E3%82%8B\">#</a></h3>\n<p>このハンズオンのプロジェクトは、</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_07.png\" alt=\"\"></p>\n<p>のようになっているので、ViewModels と Models を <a href=\"http://VB.NET\">VB.NET</a> のプロジェクトに追い出してこう</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_08.png\" alt=\"\"></p>\n<p>します。</p>\n<p>コード長いんで、 github に上げました。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/PrismHandsOnVB\">amay077/PrismHandsOnVB</a></li>\n</ul>\n<p><a href=\"https://github.com/amay077/PrismHandsOnVB/blob/master/TextSpeaker/TextSpeakerCoreVB/ViewModels/BatteryPageViewModel.vb\"><code>BatteryPageViewModel.vb</code></a> とか見ると分かるんですけど、 Xamarin.Forms の MVVM も、Prism.Forms も、ちゃんと <a href=\"http://VB.NET\">VB.NET</a> でも動くんですよ（あたりまえだけど）</p>\n<p>Prism.Forms で、View とは別アセンブリにある ViewModel を <code>AutoWireViewModel</code> で見つかるようにするために、同じく @Nuits さんの、</p>\n<ul>\n<li><a href=\"https://gist.github.com/nuitsjp/d3e3d819fb68e31b884800caa94a56bc\">PrismでViewとViewModelを別アセンブリにする場合のコードサンプル</a></li>\n</ul>\n<p>を <a href=\"https://github.com/amay077/PrismHandsOnVB/blob/master/TextSpeaker/TextSpeaker/App.cs#L47\">適用してます</a> 。</p>\n<p>これで、ViewModel とビジネスロジックは <a href=\"http://VB.NET\">VB.NET</a> で記述することができるようになりました。</p>\n<h3 id=\"%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E5%9B%BA%E6%9C%89%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92-vb.net-%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%EF%BC%9F\">プラットフォーム固有の処理を <a href=\"http://VB.NET\">VB.NET</a> 化できるか？ <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E5%9B%BA%E6%9C%89%E3%81%AE%E5%87%A6%E7%90%86%E3%82%92-vb.net-%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B%E3%81%8B%EF%BC%9F\">#</a></h3>\n<p>どうせなら、TextSpeaker.Droid/iOS で C# で行っている「ITextSpeaker の実装」も、<a href=\"http://VB.NET\">VB.NET</a> プロジェクトに追い出して、こう</p>\n<p><img src=\"/img/posts/xamarinforms_with_vb_09.png\" alt=\"\"></p>\n<p>できないかなー、とトライしてみたのですが、できませんでした。</p>\n<p>理由は、 「Xamarin.iOS/Android をサポートするクラスライブラリを <a href=\"http://VB.NET\">VB.NET</a> で作成できない事」です。Xamarin.iOS/Android はともに Monoランタイムを基盤としますが、これを基盤とする <a href=\"http://VB.NET\">VB.NET</a> のクラスライブラリを作成することができませんでした（少なくとも Visual Studio 2015 では）。</p>\n<ul>\n<li><a href=\"http://www.mono-project.com/docs/about-mono/languages/visualbasic/\">Visual Basic support ｜ Mono</a></li>\n<li><a href=\"https://karuakun.wordpress.com/2011/12/19/mono-develop%E3%81%A7vb%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%81%99%E3%82%8B%E3%80%82/\">Mono DevelopでVBのソースをコンパイルする。 ｜ かるあのメモ on WordPress</a></li>\n</ul>\n<p>この辺を見ると <code>vbnc</code> ってコンパイラでできそう？いや Xamarin.Android/iOS はそれに対応してないからダメ？とかよくわかりません。</p>\n<p>初心者向けの Visual Basic を使うのにトリッキーなことをするのも本末転倒なので深掘りは辞めておきます。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>というわけでまとめ。</p>\n<p>Visual Basic を使って Xamarin.Forms アプリの開発は、</p>\n<ul>\n<li><strong>XAML を使わない Xamarin.Forms アプリ開発</strong></li>\n<li><strong>ViewModel とビジネスロジック</strong></li>\n</ul>\n<p>は可能です（特に後者を &quot;Xamarin の&quot; と呼んでよいかはお任せします）。</p>\n<p>逆に Visual Basic では不可能なのは、</p>\n<ul>\n<li>Xamarin.Forms の XAML の使用</li>\n<li>Xamarin.Android, Xamarin.iOS の使用</li>\n</ul>\n<p>です。</p>\n<p>CustomRenderer、Effects などプラットフォーム固有の処理は C#/F# で書くしかありません。</p>\n<p>Visual Basic エンジニアと分業するなら、彼らはモバイル系のAPIに関与できないので、逆に分かりやすいかも知れません。</p>\n<p>半分ネタのつもりだったけど、VB要員も活かせるという意味では、ありかも知れませんね。</p>\n<p>とここまで書いて、</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/cross-platform/application_fundamentals/pcl/portable_visual_basic_net/xamarin-forms/\">Xamarin.Forms using Visual Basic.NET - Xamarin</a></li>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/2015/09/09/173455\">【朗報？】Visual Basic ユーザーも Xamarin.Forms でモバイル開発者になれます！ - Xamarin 日本語情報</a></li>\n</ul>\n<p>と丸かぶりだったことに気づく（しかも 2015年9月の情報）！<br>\nまあ今でも変わらないよ、ということで。</p>\n",
      "date_published": "2016-12-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/27/making_picker_control_for_xamarin_forms/",
      "url": "https://blog.amay077.net/blog/2016/12/27/making_picker_control_for_xamarin_forms/",
      "title": "Xamarin.Forms 向けのピッカーコントロールを作った",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin\">Xamarin Advent Calendar 2016</a> 23日目です。<br>\niOS の <a href=\"http://swift-salaryman.com/uipickerview.php\">UIPickerView</a>、 Android の <a href=\"https://akira-watson.com/android/numberpicker.html\">NumberPicker</a> は Xamarin.Forms では、標準コントロールで用意されていないみたいだったので Custom Renderer で作りました。</p>\n<!--more-->\n<p>特に nuget パッケージとかにはしてなくて、サンプルアプリと一緒になってます（&gt;&lt;）</p>\n<p>こんな感じのコントロールです。</p>\n<p>こんな感じで使えます。</p>\n<p><img src=\"/img/posts/pickerview_for_Xamarin_forms_screenshot01.gif\" alt=\"\"></p>\n<p><code>ItemsSource</code> と <code>SelectedIndex</code> の２つのバインダブルなプロパティしかなくて、<code>SelectedIndex</code> の方は TwoWay です。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xamarin.com/schemas/2014/forms<span class=\"token punctuation\">\"</span></span><br>             <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/winfx/2009/xaml<span class=\"token punctuation\">\"</span></span><br>             <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>local</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>clr-namespace:PickerViewSample<span class=\"token punctuation\">\"</span></span><br>             <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PickerViewSample.PickerViewSamplePage<span class=\"token punctuation\">\"</span></span><br>\t\t\t <span class=\"token attr-name\">Title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>PickerView Sample<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage.BindingContext</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">local:</span>Model</span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ContentPage.BindingContext</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage.Resources</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ResourceDictionary</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">local:</span>ItemsSourceConverter</span> <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Key</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>itemsConv<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ResourceDictionary</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ContentPage.Resources</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Grid</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Grid.RowDefinitions</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowDefinition</span> <span class=\"token attr-name\">Height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Auto<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowDefinition</span> <span class=\"token attr-name\">Height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Auto<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RowDefinition</span> <span class=\"token attr-name\">Height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Auto<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Grid.RowDefinitions</span><span class=\"token punctuation\">></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Grid.ColumnDefinitions</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnDefinition</span> <span class=\"token attr-name\">Width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Auto<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnDefinition</span> <span class=\"token attr-name\">Width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>*<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ColumnDefinition</span> <span class=\"token attr-name\">Width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Auto<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Grid.ColumnDefinitions</span><span class=\"token punctuation\">></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token namespace\">local:</span>PickerView</span><br>            <span class=\"token attr-name\">Grid.Row</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Grid.Column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Grid.ColumnSpan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\">ItemsSource</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding ItemsSource, Converter={StaticResource itemsConv}}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\">SelectedIndex</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding SelectedIndex}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">Grid.Row</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Grid.Column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ItemsSource<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Entry</span> <span class=\"token attr-name\">Grid.Row</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Grid.Column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding ItemsSource, Mode=TwoWay}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Label</span> <span class=\"token attr-name\">Grid.Row</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Grid.Column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>SelectedIndex<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Entry</span> <span class=\"token attr-name\">Grid.Row</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Grid.Column</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>{Binding SelectedIndex, Mode=TwoWay}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Grid</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ContentPage</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>ソースコードは、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin_Forms_PickerViewSample\">amay077/Xamarin_Forms_PickerViewSample</a></li>\n</ul>\n<p>にありますので、 Fork などして使ってください。</p>\n<p>iOS の <code>UIPickerView</code> は、それ自体が複数の列を持てるようですが、Android のはそうではないので、１列しか使ってません。</p>\n<p>Custom Renderer のサンプルにもなると思います。</p>\n<h2 id=\"%E8%BF%BD%E8%A8%98%3A-pickerview-%E3%82%92%E4%B8%A6%E3%81%B9%E3%81%A6%E6%95%B0%E5%80%A4%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B-ui-%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%9F\">追記: PickerView を並べて数値を選択する UI も作った <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98%3A-pickerview-%E3%82%92%E4%B8%A6%E3%81%B9%E3%81%A6%E6%95%B0%E5%80%A4%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%99%E3%82%8B-ui-%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%9F\">#</a></h2>\n<p><img src=\"/img/posts/pickerview_for_Xamarin_forms_screenshot02.gif\" alt=\"\"></p>\n<p>ソースコードは上と同じギッハブにあります。</p>\n",
      "date_published": "2016-12-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/21/using_carto_mobile_sdk_for_xamarin/",
      "url": "https://blog.amay077.net/blog/2016/12/21/using_carto_mobile_sdk_for_xamarin/",
      "title": "CARTO の Xamarin 向けモバイル用SDKを使ってみる",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/foss4gvol2\">FOSS4G 二個目だよ Advent Calendar 2016</a> 21日目です。<br>\nCARTO やるやる詐欺してました、すみません。<br>\nCARTO といえば、地図関連で今一番イケてるサービスの一つですね。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://carto.com/\">CARTO - Predict through location</a></li>\n<li><a href=\"http://chizudb.jp/\">ChizuDB - CARTO 日本向けサービス</a></li>\n</ul>\n<p>紹介される媒体が Web なので、Web地図の事例しか見たことなくて、「スマホアプリで表示できないのかなー」と思っていましたら…あるじゃん！モバイル用の CARTO SDK が！</p>\n<ul>\n<li><a href=\"https://carto.com/engine/mobile/\">Mobile — CARTO</a></li>\n<li><a href=\"https://carto.com/docs/carto-engine/mobile-sdk/\">Mobile SDK — CARTO Documentation</a></li>\n</ul>\n<p>どうやら、 Android、iOS に対応している様子。<br>\nそしてなんと、C# - Xamarin 用のSDKとサンプルも発見！</p>\n<ul>\n<li><a href=\"https://github.com/CartoDB/mobile-dotnet-samples\">CartoDB/mobile-dotnet-samples: CARTO Mobile SDK samples for Xamarin and WP .NET</a></li>\n</ul>\n<p>さっそく使ってみましょう。</p>\n<h2 id=\"mobile-dotnet-samples-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">mobile-dotnet-samples を動かしてみる <a class=\"direct-link\" href=\"#mobile-dotnet-samples-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p><a href=\"http://www.mierune.co.jp/\">MIERUNE. LLC</a> さんが作られて、public に公開されている、</p>\n<ul>\n<li><a href=\"https://mierune2016team.carto.com/viz/8a9450a2-6456-11e6-8a7a-0ee66e2c9693/public_map\">北海道内土砂災害危険箇所・土砂災害警戒区域・避難施設</a></li>\n</ul>\n<p>を使わせていただきます。<br>\nこれを iOS で表示してみます。</p>\n<h3 id=\"step1%3A-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92-clone-%E3%81%99%E3%82%8B\">STEP1: サンプルソースコードを Clone する <a class=\"direct-link\" href=\"#step1%3A-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92-clone-%E3%81%99%E3%82%8B\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/CartoDB/mobile-dotnet-samples\">https://github.com/CartoDB/mobile-dotnet-samples</a></li>\n</ul>\n<p>をローカルにクローンします（ZIPでダウンロードでもおｋ）。</p>\n<h3 id=\"step2%3A-xamarin-studio%2Fvisual-studio-%E3%81%A7%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E9%96%8B%E3%81%8F\">STEP2: Xamarin Studio/Visual Studio でソリューションを開く <a class=\"direct-link\" href=\"#step2%3A-xamarin-studio%2Fvisual-studio-%E3%81%A7%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E9%96%8B%E3%81%8F\">#</a></h3>\n<p><code>mobile_dotnet_samples.sln</code> というファイルがあるので、Mac では Xamarin Studio、 Windows では Visual Studio で開きます。<br>\n私は Visual Studio for Mac を使っているので、それでも大丈夫です。</p>\n<h3 id=\"step3%3A-%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92-cartomap.ios-%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">STEP3: スタートアッププロジェクトを CartoMap.iOS に変更する <a class=\"direct-link\" href=\"#step3%3A-%E3%82%B9%E3%82%BF%E3%83%BC%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92-cartomap.ios-%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">#</a></h3>\n<p>Mac だとこんな↓感じで。</p>\n<p><img src=\"/img/posts/running_carto_mobile_sample_01.png\" alt=\"\"></p>\n<h3 id=\"step4%3A-cartomap.ios-%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E8%A8%AD%E5%AE%9A%E3%81%A7%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%82%92-x86_64-%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">STEP4: CartoMap.iOS のプロジェクト設定でアーキテクチャを x86_64 に変更する <a class=\"direct-link\" href=\"#step4%3A-cartomap.ios-%E3%81%AE%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E8%A8%AD%E5%AE%9A%E3%81%A7%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%82%92-x86_64-%E3%81%AB%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">#</a></h3>\n<p>iOS アプリはもはや 64bit に移行しているので、プロジェクト設定を変更します。</p>\n<p><img src=\"/img/posts/running_carto_mobile_sample_02.png\" alt=\"\"></p>\n<p>これをしないと、アプリを実行したときに「May slow down〜」などと言われます。</p>\n<h3 id=\"step5%3A-%E3%83%93%E3%83%AB%E3%83%89%EF%BC%86%E5%AE%9F%E8%A1%8C\">STEP5: ビルド＆実行 <a class=\"direct-link\" href=\"#step5%3A-%E3%83%93%E3%83%AB%E3%83%89%EF%BC%86%E5%AE%9F%E8%A1%8C\">#</a></h3>\n<p>適当な iOSシミュレータを選んで、実行します。</p>\n<p><img src=\"/img/posts/running_carto_mobile_sample_03.png\" alt=\"\"></p>\n<p>実行すると、下図のような感じに動くと思います。</p>\n<p><img src=\"/img/posts/running_carto_mobile_sample_04.gif\" alt=\"\"></p>\n<h3 id=\"step5%3A-%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E5%9C%B0%E5%9B%B3%E3%82%92%E5%A4%89%E3%81%88%E3%81%A6%E3%81%BF%E3%82%8B\">STEP5: 表示する地図を変えてみる <a class=\"direct-link\" href=\"#step5%3A-%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E5%9C%B0%E5%9B%B3%E3%82%92%E5%A4%89%E3%81%88%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h3>\n<p>サンプルアプリの 「Countries Vis」を選択したときに表示される地図を、冒頭で紹介した、「北海道内土砂災害危険箇所・土砂災害警戒区域・避難施設」に変更してみましょう。</p>\n<p>読み込む地図の指定は、 <code>CartoMap.iOS/Sections/CARTO.js API/CountriesVisController.cs</code> で行っています。</p>\n<p>これを以下のように修正します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// CountriesVisController.cs</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">CartoMap<span class=\"token punctuation\">.</span>iOS</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountriesVisController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">BaseVisController</span></span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Countries Vis\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Description <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token string\">\"Vis displaying countries in different colors using UTFGrid\"</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Url<br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">get</span><br>\t\t\t<span class=\"token punctuation\">{</span><br><span class=\"token comment\">//\t\t\t\treturn \"http://documentation.cartodb.com/api/v2/viz/2b13c956-e7c1-11e2-806b-5404a6a683d5/viz.json\"; // 修正前</span><br>\t\t\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"https://mierune2016team.carto.com/api/v2/viz/8a9450a2-6456-11e6-8a7a-0ee66e2c9693/viz.json\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修正後</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>CARTO をブラウザで見るときの URL と、Mobile SDK に指定する時の URL の違いに注目してください。 <code>/viz/</code> を <code>/api/v2/viz</code> に、 <code>public_map</code> を <code>viz.json</code> に置き換えると、モバイルSDK用の URL になるようです。(仕様未確認)</p>\n<p><a href=\"https://mierune2016team.carto.com/viz/8a9450a2-6456-11e6-8a7a-0ee66e2c9693/public_map\">https://mierune2016team.carto.com/viz/8a9450a2-6456-11e6-8a7a-0ee66e2c9693/public_map</a><br>\n↓<br>\n<a href=\"https://mierune2016team.carto.com/api/v2/viz/8a9450a2-6456-11e6-8a7a-0ee66e2c9693/viz.json\">https://mierune2016team.carto.com/api/v2/viz/8a9450a2-6456-11e6-8a7a-0ee66e2c9693/viz.json</a></p>\n<p>これを実行すると、↓のようになります。</p>\n<p><img src=\"/img/posts/running_carto_mobile_sample_05.gif\" alt=\"\"></p>\n<p>レスポンスにやや問題がある、凡例がないので主題の意味がわからないなどの問題はありますが、Web で観られる地図と同じものが iOS 端末でも観られます。</p>\n<h2 id=\"%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">ソースコード <a class=\"direct-link\" href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p>元のリポジトリは進化が早く、最新のソースだと挙動が変わるかもしれないので、私のアカウントに Fork しました(SDKが新しくなると動かなくなるかも知れませんが)。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/mobile-dotnet-samples/tree/20161221_blogged\">https://github.com/amay077/mobile-dotnet-samples/tree/20161221_blogged</a></li>\n</ul>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>CARTO の Mobile SDK を紹介しました。<br>\n今回は Xamarin.iOS でのみトライしましたが、 Xamarin 用 SDK には他にも Android と <a href=\"https://github.com/CartoDB/mobile-dotnet-samples/tree/master/CartoMap.WindowsPhone\">Windows Phone 用もあるよう</a> です。</p>\n<p>また、iOS / Android ネイティブ用の SDK とサンプルもあります。</p>\n<ul>\n<li><a href=\"https://github.com/CartoDB/mobile-ios-samples\">CartoDB/mobile-ios-samples: iOS mobile app with CARTO Mobile SDK</a></li>\n<li><a href=\"https://github.com/CartoDB/mobile-android-samples\">CartoDB/mobile-android-samples: Android sample for CARTO Mobile SDK</a></li>\n</ul>\n<p>Xamarin版SDK はまだプレリリースでした。ネイティブ版SDK はどうだかわかりませんが、CARTO の地図をモバイルアプリで使いたい！という機会があったら思い出してください。</p>\n",
      "date_published": "2016-12-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/20/best_practice_for_secret_key_management_in_xamarin_project/",
      "url": "https://blog.amay077.net/blog/2016/12/20/best_practice_for_secret_key_management_in_xamarin_project/",
      "title": "Xamarin プロジェクトにおける API key など秘密情報管理のベスト？プラクティス",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin\">Xamarin Advent Calendar 2016</a> 19日目です。<br>\nAPI key や SecretKey はハードコードダメ、git リポジトリでの管理もダメ、というわけでどうしたもんかと。</p>\n<!--more-->\n<p>Android アプリ開発では、</p>\n<ul>\n<li><a href=\"http://shimbaroid.hatenablog.jp/entry/2016/08/15/010350\">【Android Studio】Api keyを始めとしたgit管理したくない定数を環境変数で管理する - shimbaroid’s diary</a></li>\n</ul>\n<p>のような仕組みで、システム環境変数をビルド時の変数に inject してくれる仕組みがあるのでいいですね。</p>\n<p>Xamarin（というか .NET アプリケーション、MSBuild）のエコシステムには、そういう仕組みがなさそう（見つからなかった…）なので、自力でやるしかなさそうです。</p>\n<h1 id=\"%E3%82%B1%E3%83%BC%E3%82%B91%3Agoogle-maps-%E3%81%AE-api-%E3%82%AD%E3%83%BC\">ケース1:Google Maps の API キー <a class=\"direct-link\" href=\"#%E3%82%B1%E3%83%BC%E3%82%B91%3Agoogle-maps-%E3%81%AE-api-%E3%82%AD%E3%83%BC\">#</a></h1>\n<p>私は <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Xamarin.Forms.GoogleMaps</a> というライブラリを開発していて、それの <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample\">サンプルアプリケーションのコードも</a> 公開しています。</p>\n<p>Android や iOS で Google Maps を使うには、各々の API Key を入手して、ライブラリに設定する必要があるわけで、サンプルアプリケーションでそれをやっているのですが、API key をソースコードに直書きしてしまうと、それをうっかりコミットしてしまう危険があるし、これを Fork してくれる人にもそのような間違いを起こして欲しくありません。</p>\n<h2 id=\"step1%3Aapi%E3%82%AD%E3%83%BC%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%82%92%E5%88%86%E9%9B%A2%E3%81%99%E3%82%8B\">STEP1:APIキーの定義を分離する <a class=\"direct-link\" href=\"#step1%3Aapi%E3%82%AD%E3%83%BC%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%82%92%E5%88%86%E9%9B%A2%E3%81%99%E3%82%8B\">#</a></h2>\n<p>まずは APIキーを Static なクラスに追い出します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Variables.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Variables</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// https://developers.google.com/maps/documentation/android-api/signup</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> GOOGLE_MAPS_ANDROID_API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"your_google_maps_android_api_v2_api_key\"</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// https://developers.google.com/maps/documentation/ios-sdk/start#step_4_get_an_api_key</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> GOOGLE_MAPS_IOS_API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"your_google_maps_sdk_for_ios_api_key\"</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// https://msdn.microsoft.com/windows/uwp/maps-and-location/authentication-key</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> BING_MAPS_UWP_API_KEY <span class=\"token operator\">=</span> <span class=\"token string\">\"your_bing_maps_apikey\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>static readonly</code> なプロパティにせず <code>const</code> にしているのは、Android での <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/master/XFGoogleMapSample/Droid/MyApp.cs#L8-L9\">API Key の指定が属性になっている</a> からです。</p>\n<h2 id=\"step2%3Avariables.cs-%E3%82%92-.gitignore-%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">STEP2:Variables.cs を .gitignore に追加する <a class=\"direct-link\" href=\"#step2%3Avariables.cs-%E3%82%92-.gitignore-%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/master/XFGoogleMapSample/.gitignore\">https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/master/XFGoogleMapSample/.gitignore</a></p>\n<p>Variables.cs を .gitignore に追加して、 git で管理しないようにします。</p>\n<p>これで <code>Variables.cs</code> に正しいAPIKeyを設定しても、コミット対象にならないので、間違えて API Key が流出することが防げます。</p>\n<p>ただ、開発者がどんな <code>Variables.cs</code> を用意すればいいか分からないので、<code>Variables.cs</code> を <code>Variables_sample.cs</code> という名前でコミットしておきます。もちろんこちらには正しい APIKey は記述しません。</p>\n<p>これで、 <code>README.md</code> などに、 「<code>Variable_sample.cs</code> を <code>Variable.cs</code> にリネームして、あなたのAPIKeyを設定して使ってください」とでも記述しておけば、大抵の開発者は理解できると思います。</p>\n<h2 id=\"step3%3A%E3%83%93%E3%83%AB%E3%83%89%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%A7-variables_sample.cs-%E3%82%92-variables.cs-%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B\">STEP3:ビルドイベントで <code>Variables_sample.cs</code> を <code>Variables.cs</code> にコピーする <a class=\"direct-link\" href=\"#step3%3A%E3%83%93%E3%83%AB%E3%83%89%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%A7-variables_sample.cs-%E3%82%92-variables.cs-%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B\">#</a></h2>\n<p>このままでもまあよいのですが、git clone してすぐビルドしてエラーになるのは悪いような良いような…。</p>\n<p>Visual Studio、Xamarin Studio のビルドシステムには「ビルドイベント」という、ビルド前後などに任意のコマンドを実行する機能があるので、それを使って <code>Variables_sample.cs</code> を <code>Variables.cs</code> にコピーできます。</p>\n<p><code>.csproj</code> に次のように追加します。全ソースは <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/156bfc449e25c40d4455d677a761d9a7d6661253/XFGoogleMapSample/XFGoogleMapSample/XFGoogleMapSample.csproj\">こちら</a> 。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\">// XFGoogleMapSample.csproj<br>（前略）<br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ProjectExtensions</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(OS)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>Windows_NT<span class=\"token punctuation\">'</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PreBuildEvent</span><span class=\"token punctuation\">></span></span>if not exist \"$(ProjectDir)Variables.cs\" copy \"$(ProjectDir)Variables_sample.cs\" \"$(ProjectDir)Variables.cs\" >nul<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PreBuildEvent</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(OS)<span class=\"token punctuation\">'</span> != <span class=\"token punctuation\">'</span>Windows_NT<span class=\"token punctuation\">'</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PreBuildEvent</span><span class=\"token punctuation\">></span></span>rsync -u \"$(ProjectDir)Variables_sample.cs\" \"$(ProjectDir)Variables.cs\"<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PreBuildEvent</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Project</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Windows と Mac 両方に対応しないといけないのが面倒な点１。<br>\nこれは <code>Condition=&quot; '$(OS)' == 'Windows_NT' &quot;</code> と <code>Condition=&quot; '$(OS)' != 'Windows_NT' &quot;</code> で行っています。</p>\n<p>しかも、Visual Studio でビルドイベントを設定すると <code>Condition</code> が設定できないし、Xamarin Studio と Visual Studio で <code>.csproj</code> に記述される書式が違うしで、結局 <code>.csproj</code> に手書きするしかありませんでした。</p>\n<p>次に、「<code>Variables.cs</code> が既に存在していたらコピーしない」としたいが、</p>\n<ul>\n<li>Windows の <code>copy</code> コマンドは「上書きしない」オプションがないらしく、 <code>if not exist</code> を使う羽目に…</li>\n<li>Mac の <code>cp</code> コマンドは「上書きしない」オプションはあるものの、上書きしない場合にエラーコードを返すらしく、それを MSBuild が検知してビルド失敗してしまうため、 <code>rsync</code> を使う羽目に…</li>\n</ul>\n<p>と、それぞれ回りくどいことが必要なのが面倒な点２。<br>\nここまでしてなんとか実現できました。</p>\n<p>これで、「ソースを取得してすぐビルドできるけど、 <code>Variables.cs</code> は git では管理されない」ようになりました。</p>\n<h1 id=\"%E3%82%B1%E3%83%BC%E3%82%B92%3Aci(%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3)%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C\">ケース2:CI(継続的インテグレーション)への対応 <a class=\"direct-link\" href=\"#%E3%82%B1%E3%83%BC%E3%82%B92%3Aci(%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3)%E3%81%B8%E3%81%AE%E5%AF%BE%E5%BF%9C\">#</a></h1>\n<p>Visual Studio Team Services(VSTS)などの CI サービスで自動ビルドすることを考えると、CIサービスの機能で <code>Variables.cs</code> に、正しい APIKey を設定してやる必要があります。</p>\n<p>冒頭で紹介した Android でのビルドの事例は、 gradle を使い、システム環境変数を AndroidManifest.xml に伝搬させています（<code>manifestPlaceholders</code> という仕組みなのかな？）。</p>\n<p>.NET のビルドシステムである MSBuild に同類の機能があることを確認できなかったので、CIサービスが提供する一般的な機能を使って実現するしかなさそうです。</p>\n<ul>\n<li>(本番用のAPIKeyが記述された) <code>Variables.cs</code> をコピーする</li>\n<li><code>Variables.cs</code> の内容を置換して本番用のAPIKeyを注入する</li>\n</ul>\n<p>などです。</p>\n<ul>\n<li><a href=\"http://www.raghurana.com/building-and-deploying-apps-using-vsts-and-hockeyapp-part-2nbsp-android\">Building and Deploying apps using VSTS and HockeyApp - Part 2 : Android - Raghu Rana's blog</a></li>\n</ul>\n<p>の例では、Perl を使って <code>AndroidManifest.xml</code> のプレースホルダを置換してAPIKeyを差し込んでいるようです。</p>\n<h2 id=\"visual-studio-mobile-center-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%82%88%EF%BC%9F\">Visual Studio Mobile Center ではどうよ？ <a class=\"direct-link\" href=\"#visual-studio-mobile-center-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%82%88%EF%BC%9F\">#</a></h2>\n<p>Connect(); で発表され、今はプレビュー版を誰でも試せるようになっている</p>\n<ul>\n<li><a href=\"https://www.visualstudio.com/vs/mobile-center/\">Visual Studio Mobile Center / Visual Studio</a></li>\n</ul>\n<p>にも、github などからソースを取得して自動ビルドできる機能があります。<br>\nが、今のところ、VSTS や他のCIサービスほど機能が用意されていない為か、ビルド前に任意のコマンドを実行させることはできません、今のところ(期待を込めて２回言った)。</p>\n<h1 id=\"%E6%B1%82%E3%82%80%EF%BC%81%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9\">求む！ベストプラクティス <a class=\"direct-link\" href=\"#%E6%B1%82%E3%82%80%EF%BC%81%E3%83%99%E3%82%B9%E3%83%88%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B9\">#</a></h1>\n<p>というわけで、泥臭い方法をいくつか使わないと実現できないのがなんだかなあ、という感じです。</p>\n<p>「こういうもの」なのか、「もっとスマートな方法がある」のか、情報をお待ちしております。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">これと同じ事を Xamarin というか .NET アプリでやりたいよ～。MSBuild でできる？ /【Android Studio】Api keyを始めとしたgit管理したくない定数を環境変数で管理する <a href=\"https://t.co/OPfOZSCjDS\">https://t.co/OPfOZSCjDS</a></p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/809752860707561473\">2016年12月16日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"%E3%82%84%E3%81%B0%E3%81%84\">やばい <a class=\"direct-link\" href=\"#%E3%82%84%E3%81%B0%E3%81%84\">#</a></h2>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">とりあえずこんなんでどうかな… <a href=\"https://t.co/2teIgC2NkQ\">https://t.co/2teIgC2NkQ</a> <a href=\"https://t.co/zJjgsvvMdT\">https://t.co/zJjgsvvMdT</a></p>&mdash; Atsushi Eno (@atsushieno) <a href=\"https://twitter.com/atsushieno/status/811061374361047041\">2016年12月20日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n",
      "date_published": "2016-12-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/13/eveything_is_a_stream_what_is_a_viewmodel/",
      "url": "https://blog.amay077.net/blog/2016/12/13/eveything_is_a_stream_what_is_a_viewmodel/",
      "title": "Everything is a stream, ViewModel is 何？",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/rxjava\">RxJava Advent Calendar 2016</a> 13日目 です。<br>\nRxJava と Android の DataBinding と MVVM についての話をします。</p>\n<!--more-->\n<h2 id=\"everything-is-a-stream\">Everything is a stream <a class=\"direct-link\" href=\"#everything-is-a-stream\">#</a></h2>\n<p><img src=\"/img/posts/everythis_is_a_stream_what_is_viewmodel_01.jpg\" alt=\"\"></p>\n<p>via <a href=\"http://slides.com/robwormald/everything-is-a-stream#/\">Rob Wormald</a></p>\n<p>いいコトバですね。</p>\n<p>Android アプリ開発では、事実上 stream is an (RxJava の) <code>Observable&lt;T&gt;</code>、<br>\nつまり<br>\n<strong>Everything is an <code>Observable&lt;T&gt;</code></strong> と言ってもいいでしょう。</p>\n<p>ところで、 Android アプリ開発でも DataBinding の登場以来、MVVM パターンの話題が増えてきました。</p>\n<p>Everything is a <code>Observable&lt;T&gt;</code>、では ViewModel はどうでしょう？</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewModel</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> location <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> bio <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>ObservableField&lt;T&gt;</code> … <code>Observable&lt;T&gt;</code> じゃない！（<code>BaseObservable</code> でも同じね）</p>\n<p>これの何がイヤかというと、Model から流れてくる値を View に表示してやるために、ViewModel で subscribe しないといけない所です。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewModel</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MainViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// めんどい</span><br>        _someModel<span class=\"token punctuation\">.</span><span class=\"token function\">getUserName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            name <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>RxJava の <code>Observable&lt;T&gt;</code> をそのまま View にバインドできたらどれだけ楽だろうか、それを実現してくれるのが <strong>rx-property-android</strong> というライブラリです。</p>\n<ul>\n<li><a href=\"https://github.com/k-kagurazaka/rx-property-android\">k-kagurazaka/rx-property-android: Bindable and observable property for Android Data Binding</a></li>\n<li><a href=\"http://qiita.com/k-kagurazaka@github/items/3fc1fc19ea608cac9913\">RxPropertyでRxJavaとAndroid Data Bindingを連携する - Qiita</a> ←作者: @k-kagurazaka@github さんによる解説</li>\n</ul>\n<h2 id=\"rx-property-android-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">rx-property-android を使ってみる <a class=\"direct-link\" href=\"#rx-property-android-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>「UserID を指定して、GitHub のユーザー情報を取得する」という単純なサンプルを作ってみます。</p>\n<p>こんなのです。</p>\n<p><img src=\"/img/posts/everythis_is_a_stream_what_is_viewmodel_02.gif\" alt=\"\"></p>\n<p>実装の説明の前に、MVVM に関するこのスライドを見てください。</p>\n<ul>\n<li><a href=\"https://speakerdeck.com/shinpeim/vue-dot-jsdeshi-xian-surumvvmpatan-fluxakitekutiyatofalseju-li\">Vue.jsで実現するMVVMパターン Fluxアーキテクチャとの距離 // Speaker Deck</a></li>\n<li><a href=\"http://techblog.reraku.co.jp/entry/2016/12/13/080000\">実況中継シリーズ Vue.jsで実現するMVVMパターン Fluxアーキテクチャとの距離 - Re.Ra.Ku アドベントカレンダー day 13 - Re.Ra.Ku tech blog</a></li>\n</ul>\n<p>とっても勉強になります。</p>\n<ul>\n<li><em><em>「注意深く設計された MV</em> は単一データフローになる」</em>*</li>\n<li><strong>「ModelについてViewModelが行うことは、イベントに対する反応と戻り値のないメソッドの呼び出ししかない」</strong> via <a href=\"http://ugaya40.hateblo.jp/entry/model-mistake\">MVVMのModelにまつわる誤解</a></li>\n</ul>\n<p>では実装を説明します、まずモデル。</p>\n<p>ロジック自体は本題ではないので、公開インターフェースだけ載せます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// GutHubModel.java</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GitHubModel</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 外部に公開する Hot な Observable</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> user <span class=\"token operator\">=</span> _user<span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// 指定した UserID の GitHub ユーザー情報を得る</span><br>    <span class=\"token comment\">// Model だから戻り値の無いメソッドだよ</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> user<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>       <span class=\"token comment\">/* ごにょごにょやって user の onNext を呼び出す */</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>「イベントに対する反応」が <code>Observable&lt;User&gt; user</code> で、<br>\n「戻り値のないメソッド」が <code>void getUser(String user)</code> ですね。</p>\n<p>メソッドが呼ばれると、GitHub API で通信して User を得、<code>user</code> の <code>onNext</code> を呼び出して、変更を通知します。</p>\n<p>次、本題の ViewModel です。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// MainViewModel.java</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewModel</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// View(EditText) と TwoWay Binding する RxProperty</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> userId <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// ボタンをおした時に実行されるコマンド(＝ボタンを押した時に onNext が呼ばれる Observable)</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RxCommand</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> getUserCommand<span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// Model -> View DataBinding 用の RxProperty（name.value で DataBinding できる）</span><br>    <span class=\"token comment\">// OneWay Binding だから ReadOnlyRxProperty の方が望ましい</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> name<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> location<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> bio<span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// GitHub からユーザー情報を得る Model. DIしようね</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">GitHubModel</span> _gitHubModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GitHubModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MainViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Model -> ViewModel -> View のデータの流れ道を作っておきましょう</span><br>        <span class=\"token comment\">// GitHubModel の user が変更されたら、name/location/bio にそれぞれデータを流すよ</span><br>        name <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>_gitHubModel<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">-></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        location <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>_gitHubModel<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">-></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        bio <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RxProperty</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>_gitHubModel<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>user <span class=\"token operator\">-></span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getBio</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><br>        <span class=\"token comment\">// ユーザー取得コマンドは userID が空でない時のみ使用可能です</span><br>        getUserCommand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RxCommand</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">.</span><span class=\"token function\">asObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token operator\">!</span><span class=\"token class-name\">TextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// ユーザー取得が実行されたら GitHubModel の getUser を呼ぶよ</span><br>        getUserCommand<span class=\"token punctuation\">.</span><span class=\"token function\">asObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            _gitHubModel<span class=\"token punctuation\">.</span><span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>rx-property-android を使用した結果、</p>\n<ul>\n<li><code>ObservableField&lt;T&gt;</code> が <code>RxProperty&lt;T&gt;</code> に</li>\n<li><code>ボタンのイベントハンドラ</code> が <code>RxCommand</code> に</li>\n</ul>\n<p>置き換わっています。<br>\nそしてこれらは、その名が示すとおり全て <code>Observable&lt;T&gt;</code> と連携しています。</p>\n<p>例えば <code>RxProperty&lt;String&gt; name</code> は、 <code>_githubModel.user</code> を map オペレータで <code>getName()</code> に変換しています。他の２つも同様です。</p>\n<p><code>RxCommand getUserCommand</code> も <code>Observable&lt;T&gt;</code> です。<br>\nこれは、「コマンドが実行されたら onNext() が呼び出される」という Observable です(<a href=\"http://qiita.com/Reyurnible/items/b2888d2d1d13110d2250\">RxBinding</a> のようなイメージ)。</p>\n<p>このように、全て <code>Observable&lt;T&gt;</code> にすることができました。<br>\nイミュータブルなフィールドとコンストラクタで「定義」するだけ、美しい・・・。</p>\n<p>Everything is an <code>Observable&lt;T&gt;</code>, <strong>ViewModel is also <code>Observable&lt;T&gt;</code></strong></p>\n<p>さて、ではこの <code>RxProperty&lt;T&gt;</code> と <code>RxCommand</code> を View(xml) でバインドします。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\">// activity_main.xml<br><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tools</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/tools<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>app</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>net.amay077.rxretrofitsample.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>variable</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewModel<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>net.amay077.rxretrofitsample.viewmodels.MainViewModel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span><br>    <br>    (中略)<br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EditText</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@={viewModel.userId.value}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonGetUser<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Get User<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>rxCommandOnClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.getUserCommand}<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.name.value}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.location.value}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.bio.value}<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>    (中略)<br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>RxProperty のバインドは <code>&lt;プロパティ名&gt;.value</code> とします。 .value をよく忘れるので注意が必要です。<br>\nRxCommand は <code>app:rxCommandOnClick</code> を使ってバインドします。</p>\n<h2 id=\"%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">ソースコード <a class=\"direct-link\" href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p>完成形のソースコードは、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/RxPropertyRetrofitSample\">amay077/RxPropertyRetrofitSample</a></li>\n</ul>\n<p>にあります。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p><a href=\"https://github.com/k-kagurazaka/rx-property-android\">rx-property-android</a> を使うと DataBinding と <code>Observable&lt;T&gt;</code> の連携ができます。</p>\n<p>全てが <code>Observable&lt;T&gt;</code> なら、</p>\n<p><strong>「左手はそえるだけ、ViewModel はつなぐだけ」</strong></p>\n<p>流れるような DataBinding + MVVM ライフを。</p>\n<h3 id=\"%E3%81%8A%E3%81%BE%E3%81%91\">おまけ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">#</a></h3>\n<p>rx-property-android は、 .NET の <a href=\"https://github.com/runceel/ReactiveProperty\">ReactiveProperty</a> というライブラリを Android 向けに移植してくださっているものです。</p>\n<p>ReactiveProperty は .NETアプリケーション他、 Xamarin によるモバイルアプリケーションでも多数の事例があります(<a href=\"https://twitter.com/ytabuchi/status/806706768042606592\">NHK紅白アプリ</a>とかね)。</p>\n<p>私は <a href=\"https://droidkaigi.github.io/2017/\">DroidKaigi 2017</a> で Xamarin.Android について話しますが、ReactiveProperty を使った Android/iOS 共通な ViewModel の話も少ししたいなーと思っています、ご興味あれば是非。</p>\n",
      "date_published": "2016-12-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/10/copy_file_to_shared_folder_with_password/",
      "url": "https://blog.amay077.net/blog/2016/12/10/copy_file_to_shared_folder_with_password/",
      "title": "VB.NET でパスワード付き共有フォルダにファイルをコピーする",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/vb\">Visual Basic Advent Calendar 2016</a> 10日目です。<br>\n「ユーザー／パスワードが必要な共有フォルダにファイルをコピーしたい」という要件がありまして。なぜかそれが Visual Basic のプログラムだったので参加してみました。</p>\n<!--more-->\n<p>「.NET Framework で用意されてるだろ」と思ったら無くて、「nuget か OSS のライブラリがあるだろ」と探してみても見つからず。</p>\n<p>まさかこんな事の為に、今 Win32 API を Declare することになろうとは夢にも思いませんでした。</p>\n<p>ググって見つかったサンプルコード達は、対象環境が古いのか微妙に定義が違うのかうまく動かないものが多かったので、 <strong>動いた</strong> コードを載せておきます。</p>\n<pre class=\"language-vbnet\"><code class=\"language-vbnet\"><span class=\"token comment\">'' NetWorkModule.vb</span><br><span class=\"token keyword\">Namespace</span> SomeNameSpace<br>    <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Module</span> NetWorkModule<br><br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Declare</span> Unicode <span class=\"token keyword\">Function</span> WNetAddConnection2 <span class=\"token keyword\">Lib</span> <span class=\"token string\">\"mpr.dll\"</span> <span class=\"token keyword\">Alias</span> <span class=\"token string\">\"WNetAddConnection2W\"</span> <span class=\"token punctuation\">(</span><br>        <span class=\"token keyword\">ByRef</span> lpNetResource <span class=\"token keyword\">As</span> NETRESOURCE<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ByVal</span> lpPassword <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ByVal</span> lpUserName <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ByVal</span> dwFlags <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><br><br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Declare</span> <span class=\"token keyword\">Function</span> WNetCancelConnection2 <span class=\"token keyword\">Lib</span> <span class=\"token string\">\"mpr.dll\"</span> <span class=\"token keyword\">Alias</span> _<br>            <span class=\"token string\">\"WNetCancelConnection2W\"</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">ByVal</span> lpName <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><span class=\"token punctuation\">,</span><br>                                      <span class=\"token keyword\">ByVal</span> dwFlags <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><span class=\"token punctuation\">,</span><br>                                      <span class=\"token keyword\">ByVal</span> fForce <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><br><br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Const</span> RESOURCE_CONNECTED <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>H1<br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Const</span> RESOURCETYPE_ANY <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>H0<br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Const</span> RESOURCEDISPLAYTYPE_SHARE <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>H3<br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Const</span> CONNECT_UPDATE_PROFILE <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>H1<br>        <span class=\"token comment\">'</span><br>        <span class=\"token operator\">&lt;</span>StructLayout<span class=\"token punctuation\">(</span>LayoutKind.<span class=\"token function\">Sequential</span><span class=\"token punctuation\">,</span> CharSet<span class=\"token punctuation\">:</span><span class=\"token operator\">=</span><span class=\"token keyword\">System</span>.Runtime.InteropServices.CharSet.Unicode<span class=\"token punctuation\">)</span><span class=\"token operator\">></span><br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Structure</span> NETRESOURCE<br>            <span class=\"token keyword\">Public</span> dwScope <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><br>            <span class=\"token keyword\">Public</span> dwType <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><br>            <span class=\"token keyword\">Public</span> dwDisplayType <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><br>            <span class=\"token keyword\">Public</span> dwUsage <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><br>            <span class=\"token keyword\">Public</span> lpLocalName <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><br>            <span class=\"token keyword\">Public</span> lpRemoteName <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><br>            <span class=\"token keyword\">Public</span> lpComment <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><br>            <span class=\"token keyword\">Public</span> lpProvider <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><br>        <span class=\"token keyword\">End</span> <span class=\"token keyword\">Structure</span><br><br>        <span class=\"token keyword\">Public</span> <span class=\"token keyword\">Function</span> Copy<span class=\"token punctuation\">(</span>localPath <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><span class=\"token punctuation\">,</span> networkPath <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><span class=\"token punctuation\">,</span> userId <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><span class=\"token punctuation\">,</span> password <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">As</span> <span class=\"token keyword\">String</span><br>            <span class=\"token keyword\">Dim</span> result <span class=\"token keyword\">As</span> <span class=\"token keyword\">Integer</span><br>            <span class=\"token keyword\">Dim</span> myResource <span class=\"token keyword\">As</span> NETRESOURCE<br>            myResource.dwScope <span class=\"token operator\">=</span> <span class=\"token number\">2</span><br>            myResource.dwType <span class=\"token operator\">=</span> <span class=\"token number\">1</span><br>            myResource.dwDisplayType <span class=\"token operator\">=</span> <span class=\"token number\">3</span><br>            myResource.dwUsage <span class=\"token operator\">=</span> <span class=\"token keyword\">Nothing</span><br>            myResource.lpComment <span class=\"token operator\">=</span> <span class=\"token keyword\">Nothing</span><br>            myResource.lpLocalName <span class=\"token operator\">=</span> <span class=\"token keyword\">Nothing</span><br>            myResource.lpProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">Nothing</span><br>            myResource.lpRemoteName <span class=\"token operator\">=</span> Path.GetDirectory<span class=\"token punctuation\">(</span>networkPath<span class=\"token punctuation\">)</span><br><br>            <span class=\"token keyword\">Try</span><br>                <span class=\"token comment\">'' なぜか Password が UserID より先！</span><br>                result <span class=\"token operator\">=</span> NetWorkModule.WNetAddConnection2<span class=\"token punctuation\">(</span>myResource<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">,</span> userId<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">If</span> result <span class=\"token operator\">&lt;></span> <span class=\"token number\">0</span> <span class=\"token keyword\">Then</span><br>                    <span class=\"token keyword\">Return</span> \"ネットワークドライブに接続できませんでした <span class=\"token function\">status</span> <span class=\"token operator\">=</span> \" <span class=\"token operator\">+</span> result<br>                <span class=\"token keyword\">End</span> <span class=\"token keyword\">If</span><br><br>                File.Copy<span class=\"token punctuation\">(</span>localPath<span class=\"token punctuation\">,</span> networkPath<span class=\"token punctuation\">)</span><br><br>            <span class=\"token keyword\">Catch</span> ex <span class=\"token keyword\">As</span> Exception<br>                <span class=\"token keyword\">Return</span> \"ファイルのコピーに失敗しました \" <span class=\"token operator\">+</span> ex.Message<br>            <span class=\"token keyword\">Finally</span><br>                NetWorkModule.WNetCancelConnection2<span class=\"token punctuation\">(</span>myResource.lpRemoteName<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">True</span><span class=\"token punctuation\">)</span><br>            <span class=\"token keyword\">End</span> <span class=\"token keyword\">Try</span><br><br>            <span class=\"token keyword\">Return</span> <span class=\"token string\">\"\"</span><br>        <span class=\"token keyword\">End</span> <span class=\"token keyword\">Function</span><br>    <span class=\"token keyword\">End</span> <span class=\"token keyword\">Module</span><br><span class=\"token keyword\">End</span> <span class=\"token keyword\">Namespace</span></code></pre>\n<p><code>NetWorkModule.Copy(&quot;¥¥server¥path¥hoge.txt&quot;, &quot;C:¥temp¥hoge.txt&quot;, &quot;user&quot;, &quot;pass&quot;)</code> というように使います。</p>\n<p>戻り値が <code>String</code> で空文字だったら成功、とかちょっとヒドい関数ですけど、まあ使えればいいかな。</p>\n<p>他には、こんな情報も教えていただきました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/amay077\">@amay077</a> アプリにもよりますが WNetAddConnection3 でユーザーID/パスワードを省略して必要に応じて自動的にダイアログボックスでユーザーID/パスワードをユーザーに入力させるやり方が一番オススメですよ。</p>&mdash; 道仂師＠S落ちシャープマーカー使い (@wraith13) <a href=\"https://twitter.com/wraith13/status/806157456682274816\">2016年12月6日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB-vb-%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F%E6%84%9F%E6%83%B3\">久しぶりに VB を書いた感想 <a class=\"direct-link\" href=\"#%E4%B9%85%E3%81%97%E3%81%B6%E3%82%8A%E3%81%AB-vb-%E3%82%92%E6%9B%B8%E3%81%84%E3%81%9F%E6%84%9F%E6%83%B3\">#</a></h2>\n<p>せっかくなので、久しぶりに VB を書いてみた感想を書いておきますね。（普段は C# ばかり書いています。 <a href=\"http://VB.NET\">VB.NET</a> より VB6 の方が昔たくさん書きました。）</p>\n<h3 id=\"%E3%83%A9%E3%83%A0%E3%83%80%E3%81%A8%EF%BC%88%E3%81%84%E3%81%86%E3%81%8B%E5%8C%BF%E5%90%8D%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%EF%BC%89%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%93%E3%81%A0\">ラムダと（いうか匿名メソッド）使えるんだ <a class=\"direct-link\" href=\"#%E3%83%A9%E3%83%A0%E3%83%80%E3%81%A8%EF%BC%88%E3%81%84%E3%81%86%E3%81%8B%E5%8C%BF%E5%90%8D%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%EF%BC%89%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%93%E3%81%A0\">#</a></h3>\n<p><code>hoge.Where(Function(h) h.IsHoge)</code> と書けるんですね。果たしてどのくらいの人がVB で LINQ to Objects を使ってるのか分かりませんが。</p>\n<h3 id=\"async%2Fawait-%E3%82%82%E3%81%82%E3%82%8B%E3%82%93%E3%81%A0\">async/await もあるんだ <a class=\"direct-link\" href=\"#async%2Fawait-%E3%82%82%E3%81%82%E3%82%8B%E3%82%93%E3%81%A0\">#</a></h3>\n<p>まさか使えると思ってなかったです（失礼）。</p>\n<pre class=\"language-vbnet\"><code class=\"language-vbnet\"><span class=\"token punctuation\">:</span><br>Async <span class=\"token keyword\">Sub</span> HogeMethod<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    Await Task.Delay<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><br>    <br>    MessageBox.Show<span class=\"token punctuation\">(</span><span class=\"token string\">\"hogehoge\"</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">End</span> <span class=\"token keyword\">Sub</span></code></pre>\n<h3 id=\"withevents-%E3%81%A8-readonly-%E3%81%8C%E4%BD%B5%E7%94%A8%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\">WithEvents と ReadOnly が併用できない <a class=\"direct-link\" href=\"#withevents-%E3%81%A8-readonly-%E3%81%8C%E4%BD%B5%E7%94%A8%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\">#</a></h3>\n<p>「イベントを受け取るイミュータブルなメンバ変数」を使いたいのだけど、</p>\n<pre><code>Private ReadOnly WithEvents _hoge As Timer = New Timer()\n```\n\nと書けない。イベント受信を捨てるわけにはいかないので ReadOnly を諦めるしかない。。。\n\n### 変数の型定義を省略すると？\n\n``Dim h As Hoge = New Hoge()`` と書くところを、\n``Dim h = New Hoge()`` と書けるので便利〜、と思っていたけど、どんな条件か ``h`` が ``Hoge型`` だと解決してくれないケースがあって…よく分かりません。\n\n### 変数名 objHoge\n\nC# だと \n``var hoge = new Hoge()`` みたく書くので、VB でも、\n``Dim hoge = New Hoge()`` と書くと、変数は大文字小文字を **区別しない** ので NG。このような衝突を避けるために ``objHoge`` みたいなプレフィックスが有効だったりしたのかなあとちょっと思いました。\n\n### private setter なプロパティには自動実装プロパティが使えない\n\nC# だと\n\n```csharp\npublic string Hoge { get; private set; }\n```\n\nと書けるやつ。VB での自動実装プロパティは\n\n</code></pre>\n<p>Public Property Hoge As String</p>\n<pre><code>\nとしか書けず、getter/setter 別々にアクセス修飾子を指定できない。。。普通のプロパティ構文をつかいました 。\n\n## おわりに\n\nとまあ、 VB へのグチになってしまった感はありますが、全体的にも C# に比べて VB の方がコードが長くなってしまうので、やっぱり C# の方がいいなあと思いました。\n\nアプリ自体は WPF で、Prism というフレームワークを使いました。まさか VB + Prism の情報がネットにあるとは思っていなかったので大変お世話になりました。\n\nまじめに、 Visual Basic が活きる場所はどこ？というのを聞いてみたいです。\nそれが習得容易性なら、プログラミング教育に VB は向いている？とか。\n\n## 参考\n\n* [WPF+Prism 5.0 でMVVMアプリを作る（前準備） - VB.NETで作る！](http://mk3008net.hatenablog.com/entry/2015/01/12/234030)\n* [VB　.NET4.5 Async/Await Cheat Sheet - VB.NETで作る！](http://mk3008net.hatenablog.com/entry/2015/05/24/200135)\n* [LINQの便利さに感動したのでその時のメモ - Qiita](http://qiita.com/hondasports8/items/7793f3d31dafe9cf49ba)\n* [Auto-Implemented Properties (Visual Basic)](https://msdn.microsoft.com/ja-jp/library/dd293589.aspx?f=255&amp;MSPPError=-2147217396)\n</code></pre>\n",
      "date_published": "2016-12-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/12/01/gachi_project_structure_for_xamarin_forms_in_2016_winter/",
      "url": "https://blog.amay077.net/blog/2016/12/01/gachi_project_structure_for_xamarin_forms_in_2016_winter/",
      "title": "Xamarin.Forms をガチで使う時のプロジェクト構成(2016冬Ver)",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin\">Xamarin Advent Calendar 2016 &quot;その1&quot;</a> の初日です。今年もよろしくお願いします。</p>\n<!--more-->\n<p>Xamarin.Forms も大分安定し、機能も増え、ライブラリも充実してきました。既に実戦投入されていらっしゃる方も多いと思います。事例も増えてきました。</p>\n<p>（一方で、プラットフォーム固有のUIをフルに活用したい場合は Xamarin.Forms は使うべきでありません。例えば Android には、<a href=\"https://material.google.com/components/buttons-floating-action-button.html?utm_campaign=io15&amp;utm_source=dac&amp;utm_medium=blog\">Floating Action Button - FAB</a>、<a href=\"http://www.materialdoc.com/edit-text/\">ラベル付きのTextField</a> と言った特徴的なUIパーツがあります。これらは Xamarin.Forms ではサポートされません。※ちょっとだけ頑張れば使うことはできます。）</p>\n<p>そこで初日は、 「Xamarin.Forms をガチで使う時のプロジェクト構成(2016冬Ver)」と題して、現在のベストプラクティスと呼べるプロジェクト構成案を示してみようと思います。</p>\n<p>これは、以前に書いた、</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/e66108afb0d1e1dc26c8\">Xamarin.Forms をガチで使うときのプロジェクト構成案 - Qiita</a></li>\n</ul>\n<p>の Update 版です。</p>\n<h2 id=\"%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88\">コンセプト <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88\">#</a></h2>\n<ul>\n<li>Xamarin.Forms</li>\n<li>且つ、非Xamarin への相互運用も視野に</li>\n<li>Shared でなく PCL</li>\n<li>Prism.Forms で MVVM</li>\n<li>ReactiveProperty で Rx + Data Binding</li>\n</ul>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\">プロジェクト構成 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90\">#</a></h2>\n<p><img src=\"/img/posts/xamarin_forms_gachi_projects_2016_winter_01.png\" alt=\"プロジェクト構成図\"></p>\n<p>プロジェクトは以下の5つです。</p>\n<ol>\n<li>Hoge.Droid</li>\n<li>Hoge.iOS</li>\n<li>Hoge.UWP</li>\n<li>Hoge.ViewCore</li>\n<li>Hoge.Core</li>\n</ol>\n<p>1 〜 3 は Xamarin.Forms のソリューションを作成すると作られる各プラットフォーム向けのプロジェクトです。<br>\n4 は Xamarin.Forms のソリューションを作成すると作られる共通部分のプロジェクトです。XAML や Page などはここに記述します。プロジェクト作成直後は、 Hoge という名前ですが、説明しやすさのために Hoge.ViewCore と名称変更しています。<br>\n5 は ViewModel-Model層を担うプロジェクトです。なぜ 4 と分けているのかに意味があります。</p>\n<p>では、それぞれ説明します。</p>\n<h3 id=\"hoge.droid%2Fios%2Fuwp-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">Hoge.Droid/iOS/UWP プロジェクト <a class=\"direct-link\" href=\"#hoge.droid%2Fios%2Fuwp-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">#</a></h3>\n<p>Xamarin.Forms では「スタートアップ プロジェクト」としての役割が多いですが、以下のものを置きます。</p>\n<ul>\n<li>Custom Renderer</li>\n<li>Effects</li>\n<li>プラットフォーム固有の機能</li>\n</ul>\n<p>プラットフォーム固有の機能はここに実装し、（Prism における PlatformInitializer を用いて）Dependency Injection します。</p>\n<h3 id=\"hoge.viewcore-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">Hoge.ViewCore プロジェクト <a class=\"direct-link\" href=\"#hoge.viewcore-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">#</a></h3>\n<p><strong>Xamarin.Forms として</strong> のメインプロジェクト。</p>\n<ul>\n<li>XAML / Page</li>\n<li>ValueConverter</li>\n<li>カスタムView</li>\n<li>Behavior</li>\n</ul>\n<p>などを置きます。<br>\nここには ViewModel や Model層の機能は置きません。</p>\n<h3 id=\"hoge.core-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">Hoge.Core プロジェクト <a class=\"direct-link\" href=\"#hoge.core-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">#</a></h3>\n<p>ViewModel, Model層を配置するプロジェクト。</p>\n<p>ここは <strong>Xamarin.Forms に依存しません</strong> 。そう、ViewModel や Model 層を Hoge.ViewCore に置いてしまうと、それは Xamarin.Forms に依存しているため、Xamarin.Native プロジェクトから参照できないし、Xamarin と関係ないプロジェクト(WPF とか)からも使えなくなってしまいます。</p>\n<p>また、View層と明確に切り離すことで、View層の部品を誤って参照してしまう、といったミスをなくすことができます（それは ViewModel, Model にも言えて、規模によっては Model は別プロジェクトにすべきかも知れません）。</p>\n<p>よって、ここには以下のものを配置します。</p>\n<ul>\n<li>ViewModel</li>\n<li>Model</li>\n<li>各種API</li>\n<li>プラットフォーム固有機能の共通インターフェース</li>\n</ul>\n<p>各種APIとは、SQLite/Realm などのDBライブラリ、HttpClient などのWeb通信ライブラリなどのインターフェースです。<a href=\"https://docs.microsoft.com/ja-jp/azure/app-service-mobile/app-service-mobile-value-prop\">Azure</a> 等 mBaaS 用機能も含まれるかな。<br>\nプラットフォーム固有機能の共通インターフェースは、Hoge.Droid/iOS/UWP プロジェクトでそれぞれ実装する機能クラスのインターフェースです。</p>\n<h2 id=\"%E6%8E%A8%E5%A5%A8%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">推奨ライブラリ <a class=\"direct-link\" href=\"#%E6%8E%A8%E5%A5%A8%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">#</a></h2>\n<h3 id=\"mvvm%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-%3D-prism.forms\">MVVMフレームワーク = Prism.Forms <a class=\"direct-link\" href=\"#mvvm%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-%3D-prism.forms\">#</a></h3>\n<ul>\n<li><a href=\"http://www.nuits.jp/entry/2016/08/11/160313\">Prism for Xamarin.Forms入門　はじめに - nuits.jp blog</a></li>\n</ul>\n<p>もはや鉄板とも言えるのかも。<br>\n本 Advent Caledar でこのネタもよく出ると思いますので、多くは語りませんが、いま一番勢いのあるライブラリです。</p>\n<h3 id=\"di%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A-%3D-unity\">DIコンテナ = Unity <a class=\"direct-link\" href=\"#di%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A-%3D-unity\">#</a></h3>\n<p>Prism.Forms の標準のコンテナがこれなので、まあ良いかなと。<br>\nXamarin.Forms の DependencyService は、使わない方針です。理由は二つ、ユニットテストが難しいのと、ViewModel,Model層 は Xamarin.Forms に依存しない、です。</p>\n<p>＊＊追記(2017/1/11)＊＊</p>\n<p>DIコンテナの Unity は開発停止しているとの情報が。</p>\n<ul>\n<li><a href=\"http://www.nuits.jp/entry/is-unity-dead\">ゲームじゃないUnityの開発が停止している疑惑について - nuits.jp blog</a></li>\n</ul>\n<p>Unity は実績も豊富で枯れているので当面使用に問題はないでしょうが、新しいフレームワークへの追従などが期待できなくなるリスクはあります（.NET Standard とか）。</p>\n<p>Prism 自体は、さまざまはDIコンテナに対応していて、 @Nuits さんが最新の比較をしてくれていますので、こちらも参考に。</p>\n<ul>\n<li><a href=\"http://www.nuits.jp/entry/ioc-battle-in-2017\">IoC Battle in 2017 - nuits.jp blog</a></li>\n</ul>\n<h3 id=\"data-binding-%3D-reactiveproperty\">Data Binding = ReactiveProperty <a class=\"direct-link\" href=\"#data-binding-%3D-reactiveproperty\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md\">ReactiveProperty · runceel/ReactiveProperty</a></li>\n</ul>\n<p>こちらも鉄板。<br>\nViewModel-Modelのやり取りは <code>Task&lt;T&gt;</code> あるいは <code>Observable&lt;T&gt;</code>、Page と ViewModel のバインディングは ReactiveProperty でやるのが理想。</p>\n<p>でも Rx 難しいという人は Prism にも <code>INotifyPropertyChanged</code> のヘルパーがあるので、そちらを使用してもおｋです。</p>\n<h3 id=\"%E7%AB%AF%E6%9C%AB%E5%86%85%E3%83%87%E3%83%BC%E3%82%BF%E4%BF%9D%E5%AD%98-%3D-akavache\">端末内データ保存 = Akavache <a class=\"direct-link\" href=\"#%E7%AB%AF%E6%9C%AB%E5%86%85%E3%83%87%E3%83%BC%E3%82%BF%E4%BF%9D%E5%AD%98-%3D-akavache\">#</a></h3>\n<p>Akavache については、昨年の Advent Calendar で書きました。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/356ad0028b7e6fbf089f\">クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する - Qiita</a></li>\n</ul>\n<p>Key-Value Store なので、アプリケーションの設定情報などの保存に便利です。</p>\n<h3 id=\"%E3%83%AD%E3%82%AC%E3%83%BC-%3D-metrolog\">ロガー = MetroLog <a class=\"direct-link\" href=\"#%E3%83%AD%E3%82%AC%E3%83%BC-%3D-metrolog\">#</a></h3>\n<p><code>Debug.WriteLine</code> ではツラい時はこれ。</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/MetroLog/\">MetroLog Lightweight Logging for Portable and WinJS 1.0.1</a></li>\n</ul>\n<p>名前がよくないですか？「Metro」ってｗ<br>\nLog4j ライクに使えるので、割と重宝しています。</p>\n<p><a href=\"https://firebase.google.com/docs/analytics/?hl=ja\">Firebase</a> や <a href=\"https://hockeyapp.net/\">HockeyApp</a> や <a href=\"https://blogs.msdn.microsoft.com/visualstudio_jpn/2016/11/18/visual-studio-mobile-center/\">Visual Studio Mobile Center</a> といった「継続的デプロイメントサービス」には、少し目的の違った（ユーザーの導線を知るような）ロギング機能があります。それらの SDK も選択肢に入るかと思います。</p>\n<h3 id=\"%5Bpr%5D-%E5%9C%B0%E5%9B%B3-%3D-xamarin.forms.googlemaps\">[PR] 地図 = Xamarin.Forms.GoogleMaps <a class=\"direct-link\" href=\"#%5Bpr%5D-%E5%9C%B0%E5%9B%B3-%3D-xamarin.forms.googlemaps\">#</a></h3>\n<p>ここは宣伝です。Xamarin.Forms で地図を使うなら是非！</p>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">amay077/Xamarin.Forms.GoogleMaps: Map library for Xamarin.Forms using Google maps API</a></li>\n</ul>\n<p>(サンプルではこっそり Google Maps っではなく「地理院地図」を使うという Trick を見せています)</p>\n<h2 id=\"%E6%87%B8%E6%A1%88\">懸案 <a class=\"direct-link\" href=\"#%E6%87%B8%E6%A1%88\">#</a></h2>\n<p>Hoge.Core を Xamarin.Forms から切り離したとは言え Prism には依存しているので、それが邪魔になる可能性はあります。特定の MVVM フレームワークに依存したくなければ Prism.Forms の使用をあきらめるしかないと思いますが、Model層だけは別プロジェクトに逃がして、再利用する選択肢もあります。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA\">サンプルアプリ <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA\">#</a></h2>\n<p>本ポストの指針に基づいたサンプルアプリを作ってみました（全てのライブラリを使っているわけではありませんが）。</p>\n<p>これは、</p>\n<ol>\n<li>テキストボックスに住所を入力してボタンを押す</li>\n<li>住所から緯度経度を取得（ジオコード）して、次の画面に渡す</li>\n<li>地図上にマーカーを立てる</li>\n</ol>\n<p>という単純なものです。</p>\n<p><img src=\"/img/posts/xamarin_forms_gachi_projects_2016_winter_02.gif\" alt=\"サンプル\"></p>\n<p>本ポストで提示したプロジェクト構成になっており、</p>\n<ul>\n<li>Prism.Forms による MVVM サポート、ナビゲーション、DI</li>\n<li>ReactiveProperty による Data Binding</li>\n</ul>\n<p>を実装しています。よければ参考にしてください。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/XamarinFormsGachiSample2016Winter\">amay077/XamarinFormsGachiSample2016Winter</a></li>\n</ul>\n<p>※ 住所→緯度経度の変換（ジオコーディング）には、 OpenStreetMap の <a href=\"http://wiki.openstreetmap.org/wiki/JA:Nominatim\">Nominatim</a> を使用しています。<br>\n※ 地図の表示には、 国土地理院 - 地理院地図の <a href=\"http://maps.gsi.go.jp/development/ichiran.html\">地理院タイル</a> を使用しています。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>「プロジェクトを分ける」ことを意識することで、それぞれの責務に関心が持てます。</p>\n<p>小規模アプリなら、デフォルトの4つでもよいでしょうし、大規模アプリだとこので紹介した5つでは足りないかも知れません。</p>\n<p>原理主義的に分けすぎるのも考えものですが、いつも心に留めておきたいですし、開発前にできるだけ設計したいですね。</p>\n<p>では、本日より25日間、 Xamarin Advent Calendar 2016 シリーズをお楽しみ下さい。</p>\n<ul>\n<li><a href=\"http://qiita.com/advent-calendar/2016/xamarin\">Xamarin Advent Calendar 2016 - Qiita</a></li>\n<li><a href=\"http://qiita.com/advent-calendar/2016/xamarin2\">Xamarin(その2) Advent Calendar 2016 - Qiita</a></li>\n<li><a href=\"http://qiita.com/advent-calendar/2016/xamarin-student\">[学生さん・初心者さん大歓迎！]Xamarin Advent Calendar 2016 - Qiita</a></li>\n<li><a href=\"http://qiita.com/advent-calendar/2016/xamarin-welcome\">[初心者さん・学生さん大歓迎！]Xamarin その2 Advent Calendar 2016 - Qiita</a></li>\n</ul>\n",
      "date_published": "2016-12-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/28/joined_xamarin_hands_on_at_nagoya_part2/",
      "url": "https://blog.amay077.net/blog/2016/11/28/joined_xamarin_hands_on_at_nagoya_part2/",
      "title": "JXUGC #20 Xamarin ハンズオン大会 第二弾でサポートスタッフしてきました",
      "content_html": "<p><a href=\"https://jxug.connpass.com/event/41648/\">JXUGC #20 Xamarin ハンズオン大会 第二弾 名古屋支部 ＆ 学生支部</a> で、ハンズオンのサポートスタッフとして参加してきました。</p>\n<!--more-->\n<p>遅刻してすいません。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">うおおおお！ <a href=\"https://twitter.com/hashtag/jxug?src=hash\">#jxug</a> <a href=\"https://t.co/lc7x6vaNWl\">pic.twitter.com/lc7x6vaNWl</a></p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/802320470204788737\">2016年11月26日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>午前中は座学で、午後がハンズオンでした。</p>\n<h2 id=\"%E5%8D%88%E5%89%8D\">午前 <a class=\"direct-link\" href=\"#%E5%8D%88%E5%89%8D\">#</a></h2>\n<p>午前は、 <a href=\"https://twitter.com/biac\">@biac</a> さん、 <a href=\"https://twitter.com/garicchi\">@garicchi</a> さん、 <a href=\"https://twitter.com/chomado\">@chomado</a> さんの発表でした。</p>\n<ul>\n<li><a href=\"https://jxug.connpass.com/event/41648/presentation/\">JXUGC #20 Xamarin ハンズオン大会 第二弾 名古屋支部 ＆ 学生支部 - 資料一覧 - connpass</a></li>\n</ul>\n<p>に資料があがるはず！ご免！</p>\n<h2 id=\"%E5%8D%88%E5%BE%8C\">午後 <a class=\"direct-link\" href=\"#%E5%8D%88%E5%BE%8C\">#</a></h2>\n<p>午後はハンズオン。Xamarin Dev days の内容をみんなでやりましょうというお題でした。<br>\nめいめいでやるよりみんなで一歩ずつ進んでいく感じ、こっちの方が初学者には優しいかな、と思います。</p>\n<h3 id=\"%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">ハンズオンのソースコード <a class=\"direct-link\" href=\"#%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/xamarin/dev-days-labs/tree/ce494e381416e023787c4adcbe54039a205bab43\">xamarin/dev-days-labs as xamarin</a></li>\n</ul>\n<h3 id=\"%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\">日本語のドキュメント <a class=\"direct-link\" href=\"#%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AE%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/chomado/xamarin-dev-doc/blob/f615a3935a6038c03df935eda0c515306ced357e/hands-on/readme.md\">xamarin-dev-doc/readme.md at chomado/xamarin-dev-doc</a></li>\n</ul>\n<p>ソース・ドキュメントとも、開催当日時点のハッシュがリンク先になっていますので、最新とは異なります。</p>\n<p>私は、ハンズオンの内容を司会の田淵さんと一緒にトレースしながら、会場内の皆さんの様子を伺ってトラブルシュートするという感じで過ごしました。</p>\n<p>トレースには、Mac で Xamarin Studio と同時に JetBrains の C# IDE である <a href=\"https://blog.jetbrains.com/jp/2016/01/13/569\">JetBrains Rider</a> を使ってみました。</p>\n<p>現在は <a href=\"https://blog.jetbrains.com/dotnet/2016/11/21/jetbrains-rider-public-preview/\">Public EAP</a> 公開中で、 Xamarin プロジェクトの「実行」はできないものの、C# ソースコードや XAML の編集は問題なく行えます（XAML プレビューはありません）。</p>\n<p>JetBrains Rider には Resharper が実装されており、コード入力に対して圧倒的なサポートをしてくれます。<br>\n（ハンズオン当日は、Visual Studio の Xamarin 拡張にはバグがあり、XAML上でのインテリセンスが効かなかったようで、余計に助かりました。）</p>\n<p>Xamarin Studio と JetBrains Rider を一緒に起動させておくと、ファイルの編集は相互に適用されるので、</p>\n<ol>\n<li>Rider で C# ソースコードを編集</li>\n<li>Xamarin Studio で実行</li>\n</ol>\n<p>という手順で開発していました。</p>\n<p>Visual Studio for Mac が発表されて間もないですが、JetBrains Rider も正式公開に向けて要チェックです！</p>\n<p>ハンズオンの成果物は、</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Xamarin ハンズオン、iOS と Android でここまで簡単に来られます（よね？） <a href=\"https://twitter.com/hashtag/jxug?src=hash\">#jxug</a> <a href=\"https://t.co/xI5cQyUQ63\">pic.twitter.com/xI5cQyUQ63</a></p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/802392119755145216\">2016年11月26日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>です。</p>\n<p>Xamarin ハンズオンは毎度思うのですが、やっぱり「Win+Visual Studioでの環境構築だなー」と。</p>\n<p>私が対応したトラブルシュートは、</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">昨日のXamarinハンズオンでのトラブルシュート（全部Win）<br>アプリ実行後すぐ落ちる→Fastdevをoff<br>.netcoreでエラー→UWPprjを削除<br>Bonjourでエラー→iOSprjを削除<br>JDK1.8が入ってない→入れた<br>XAMLでtypoしてもエラーにはならない</p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/802711502297776128\">2016年11月27日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>こんな感じでした。</p>\n<p>午前に登壇してくれて、午後はサポートも行ってくれた がりっちさん（ @garicchi ）からも、素晴らしいフィードバックをいただきました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/ytabuchi\">@ytabuchi</a> <a href=\"https://twitter.com/amay077\">@amay077</a> <a href=\"https://twitter.com/chomado\">@chomado</a> <a href=\"https://twitter.com/Fumiya_Kume\">@Fumiya_Kume</a> 先日はお疲れ様でした&amp;遅刻すみませんでした。ハンズオン中に参加者いただいた質問をまとめましたので次回以降の参考にしていただければと思います。 <a href=\"https://t.co/FIU4J8iiZW\">https://t.co/FIU4J8iiZW</a></p>&mdash; がりっち🔜 (@garicchi) <a href=\"https://twitter.com/garicchi/status/802736736237273090\">2016年11月27日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>Xamarin はバージョンアップが激しいので、トラブルシューティングのノウハウも陳腐化が激しいのですが、Wiki とかに情報をまとめて（すぐ更新できるようにして）、環境構築時のトラブルを少しでも減らせるとよいなと思います。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Xamarin の開発環境構築FAQ集に「サバイバルガイド」って名前付けようかw</p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/802856193727217667\">2016年11月27日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2 id=\"lt\">LT <a class=\"direct-link\" href=\"#lt\">#</a></h2>\n<p>「Visual Studio を学校のPCに入れてください」とお願いしたら先生に断られて、それじゃあという事で高校生の <a href=\"https://twitter.com/MogamiTsuchikaw\">@MogamiTsuchikaw</a> 君が作った、 USBに入れて持ち運べる C# 開発環境「C#_GO」</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">USBに入れて、いつでも·どこでもC#!!<br>【C#_GO】<br>このアカウントでは、アップデートや使い方等の情報を発信しています。<br><br>現在クローズドベータテストを実施に向け開発中です。<br>フォローしていただき、DMにてベータテスト参加の意思を送っていただければ、参加できます。</p>&mdash; C#_GO (@Csharp_GO) <a href=\"https://twitter.com/Csharp_GO/status/795096003988721664\">2016年11月6日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>がいろいろスゴいので是非応援してあげてください。フロッピーディスク知ってるとかヤバイな最近の高校生ｗ</p>\n<p>あと <a href=\"https://twitter.com/kekyo2\">kekyo</a> さんのこれｗ</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">寿司が延々と流れていく Visual Studio <a href=\"https://t.co/J9tCF3PKW8\">pic.twitter.com/J9tCF3PKW8</a></p>&mdash; 田淵 義人＠エクセルソフト (@ytabuchi) <a href=\"https://twitter.com/ytabuchi/status/802383908562046976\">2016年11月26日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>私は、 Xamarin Advent Calendar 2016 の募集をしました。</p>\n<ul>\n<li>\n<p><a href=\"http://www.slideshare.net/amay077/xamarin-advent-calendar-2016\">Xamarin advent calendar 2016 参加者募集</a></p>\n</li>\n<li>\n<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin-welcome\">[初心者さん・学生さん大歓迎！] Xamarin その2 Advent Calendar 2016 - Qiita</a></p>\n</li>\n</ul>\n<p>が募集中ですので、参加よろしくおねがいします。<br>\nそれから Xamarin Advent Calendar 2016 シリーズ４つ、</p>\n<ul>\n<li>通常1 - <a href=\"http://qiita.com/advent-calendar/2016/xamarin\">http://qiita.com/advent-calendar/2016/xamarin</a></li>\n<li>通常2 - <a href=\"http://qiita.com/advent-calendar/2016/xamarin-student\">http://qiita.com/advent-calendar/2016/xamarin-student</a></li>\n<li>初心者・学生さん向け1 - <a href=\"http://qiita.com/advent-calendar/2016/xamarin2\">http://qiita.com/advent-calendar/2016/xamarin2</a></li>\n<li>初心者・学生さん向け2 - <a href=\"http://qiita.com/advent-calendar/2016/xamarin-welcome\">http://qiita.com/advent-calendar/2016/xamarin-welcome</a></li>\n</ul>\n<p>ウォッチしておいてくださいね。</p>\n<h2 id=\"%E6%87%87%E8%A6%AA%E4%BC%9A%EF%BC%81\">懇親会！ <a class=\"direct-link\" href=\"#%E6%87%87%E8%A6%AA%E4%BC%9A%EF%BC%81\">#</a></h2>\n<p>懇親会の感想は、</p>\n<ul>\n<li>「SIer も Web系 も一括りにはできないよ？」</li>\n<li>「最近の大学生スゴい、高校生スゴい」</li>\n<li>「オレの地元、IT人材豊富じゃない？」</li>\n</ul>\n<p>の３本です。</p>\n<p>最後に、企画・主催の <a href=\"https://twitter.com/Fumiya_Kume\">くぅ(@Fumiya_Kume)くん</a>、運営の皆さま、登壇者・参加されたみなさん、ありがとうございました。<br>\n名古屋でも Xamarin、またやるみたいなので、その時にお会いしましょう。</p>\n",
      "date_published": "2016-11-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/22/creating_fast_android_emulator_for_windows/",
      "url": "https://blog.amay077.net/blog/2016/11/22/creating_fast_android_emulator_for_windows/",
      "title": "Xamarin でも使える高速 Android エミュレータを簡単に作る方法(Windows編)",
      "content_html": "<ul>\n<li><a href=\"http://qiita.com/amay077/items/48b7f3d5096b9677d70a\">Xamarin でも使える高速 Android エミュレータを簡単に作る方法(Mac編) - Qiita</a></li>\n</ul>\n<p>の Windows 版です。</p>\n<!--more-->\n<p>「『Android のエミュレータは遅い』という常識はもう古い」と言われてもう数年経ってる気がしますが HAXM エミュレータの普及率、どのくらいなんでしょう？</p>\n<p>この高速な HAXM エミュレータの作り方も随分と簡単になったので、改めて紹介します。</p>\n<h2 id=\"android-studio-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\">Android Studio をインストールする <a class=\"direct-link\" href=\"#android-studio-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\">#</a></h2>\n<p>まずは Android Studio をダウンロードしてインストールしましょう。</p>\n<ul>\n<li><a href=\"https://developer.android.com/studio/index.html?hl=ja\">Android Studio と SDK ツールをダウンロードする / Android Studio</a></li>\n</ul>\n<p>Xamarin 使ってる人、「オレ Xamarin だから関係ないわｗ」とか言わないで。<br>\nAndroid SDK が２重に入っちゃうけど、まずはそのまま入れて下さい。<br>\n※インストール時に、既存の Android-SDK のディレクトリを指定することもできるようです。</p>\n<p>(てゆうか Xamarin で作る場合もネイティブの開発知識は必要だから、Android Studio なんて入ってるよね普通)</p>\n<h2 id=\"android-studio-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">Android Studio を起動する <a class=\"direct-link\" href=\"#android-studio-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Android Studio を起動して、適当な Android Project を作って下さい。ここで作るプロジェクトに全く意味はありません。エミュレータの作成が終わったら削除してOKです。</p>\n<h2 id=\"android-sdk-%E3%81%AE%E5%A0%B4%E6%89%80%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">Android SDK の場所を変更する <a class=\"direct-link\" href=\"#android-sdk-%E3%81%AE%E5%A0%B4%E6%89%80%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">#</a></h2>\n<p>メニューの File -&gt; Settings で設定画面を起動します。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_01.png\" alt=\"\"></p>\n<p>Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK を選択し、Android SDK Location の右横の「Edit」を押して、Xamarin や Visual Studio for Mac がインストールした Android SDK のパスを指定します。</p>\n<p>Xamarin がインストールした Android SDK は通常 <code>C:¥Program Files (x86)¥Android¥android-sdk</code> にあります。</p>\n<p>ところが、このパスを Android Studio に指定すると、「Android SDK location should not contain whitespace」（空白付きのディレクトリを使うな！）と怒られます。まあ気持ち悪いので、この際、<code>c:¥dev¥android-sdk</code> などに移動してしまいましょう。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_02.png\" alt=\"\"></p>\n<p>Android SDK をどちらかに統一できたら、不要な方はディレクトリ毎削除して OK です。あ、Android SDK にパスを通してる場合はそちらの変更も忘れずに。</p>\n<h2 id=\"android-%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">Android エミュレータを作成する <a class=\"direct-link\" href=\"#android-%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">#</a></h2>\n<p>さて、 Android Studio の画面にもどって、ツールバーにある「AVD Manager」のアイコンをクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_03.png\" alt=\"\"></p>\n<p>Android Virtual Device Manager の画面が表示されます。</p>\n<p>ここで Hyper-V が ON になっていると「Android Emulator is incompatible with Hyper-V」というメッセージが表示されます。Hyper-V を OFF にしないとエミュレータは使えないので「Turn off Hyper-V」をクリックして Hyper-V を切り、OS を再起動します。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_04.png\" alt=\"\"></p>\n<p>再度 Android Studio を起動してこの画面に戻ってくると、先程のエラーは消え、今度は「HAXE is not installed」というメッセージが表示されます。こちらも、その右のリンク「Install Haxm」をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_05.png\" alt=\"\"></p>\n<p>Emulator Settings の画面になります。<br>\n特に設定は変えずに「Next」を押します。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_06.png\" alt=\"\"></p>\n<p>HAXM のインストールが完了しました。<br>\nFinish で一旦画面を閉じます。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_07.png\" alt=\"\"></p>\n<p>再び Android Virtual Device Manager の画面を開き、「Create Virtual Device」をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_08.png\" alt=\"\"></p>\n<p>System Image の画面が表示されます。<br>\n下ごしらえができた所で、実際にエミュレータを作っていきましょう。</p>\n<p>試しに「x86 Images」タブから</p>\n<ul>\n<li>Lollipop</li>\n<li>API Level 21</li>\n<li>x86_64 (Windows が 32bitOS なら x86)」</li>\n<li>Android 5.0(with Google APIs)</li>\n</ul>\n<p>のエミュレータを作ってみましょう。(with Google APIs) を選択しているのは Google Maps などの Google Play services も使えるようにするためです。この時点では未だ必要な SDK や System Image が入ってないので「Download」をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_09.png\" alt=\"\"></p>\n<p>足りないコンポーネントのインストールが終わると、行がアクティブになり「Next」ボタンが使用可能になるので、クリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_10.png\" alt=\"\"></p>\n<p>Android Virtual Device の画面です。<br>\n特に設定を変更せず、「Next」をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_11.png\" alt=\"\"></p>\n<p>はい、HAXM のインストールと、それを使用したエミュレータが作成されました。<br>\n「実行」ボタンをクリックして、起動してみましょう。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_12.png\" alt=\"\"></p>\n<p>起動してプリインストールされている Google マップアプリを表示させた画面です。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_13.png\" alt=\"\"></p>\n<h2 id=\"visual-studio-%E3%81%8B%E3%82%89%E3%82%82%E4%BD%BF%E3%81%88%E3%81%BE%E3%81%99\">Visual Studio からも使えます <a class=\"direct-link\" href=\"#visual-studio-%E3%81%8B%E3%82%89%E3%82%82%E4%BD%BF%E3%81%88%E3%81%BE%E3%81%99\">#</a></h2>\n<p>作成したエミュレータは、もちろん Visual Studio からも使えます。2015 で確認、2017 は知らない。</p>\n<p>下図は Visual Studio 2015 Community で、 Xamarin.Android のプロジェクトを実行するところですが、Android Studio で先ほど作成したエミュレータが選択肢に出てきます。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_win_14.png\" alt=\"\"></p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Windows でも、Android Studio でエミュレータを作ると、ちょっと面倒な HAXM のインストールもウィザードに沿ってできて、高速エミュレータが簡単に作れるよ。</p>\n<p>あと、Android SDK はショートパスな場所に移動して、自分で管理しような。</p>\n",
      "date_published": "2016-11-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/21/creating_fast_android_emulator_for_mac/",
      "url": "https://blog.amay077.net/blog/2016/11/21/creating_fast_android_emulator_for_mac/",
      "title": "Xamarin でも使える高速 Android エミュレータを簡単に作る方法(Mac編)",
      "content_html": "<p>「『Android のエミュレータは遅い』という常識はもう古い」と言われてもう数年経ってる気がしますが HAXM エミュレータの普及率、どのくらいなんでしょう？</p>\n<!--more-->\n<p>この高速な HAXM エミュレータの作り方も随分と簡単になったので、改めて紹介します。</p>\n<p>Mac編と言っているけど、Windows でもやる事は全く同じなので、Visual Studio 2015 で Xamarin やってる人も Android Studio 入れてやってください。</p>\n<h2 id=\"android-studio-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\">Android Studio をインストールする <a class=\"direct-link\" href=\"#android-studio-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\">#</a></h2>\n<p>まずは Android Studio をダウンロードしてインストールしましょう。</p>\n<ul>\n<li><a href=\"https://developer.android.com/studio/index.html?hl=ja\">Android Studio と SDK ツールをダウンロードする Android Studio</a></li>\n</ul>\n<p>Xamarin 使ってる人、「オレ Xamarin だから関係ないわｗ」とか言わないで。<br>\nAndroid SDK が２重に入っちゃうけど、まずはそのまま入れて下さい。</p>\n<p>(てゆうか Xamarin で作る場合もネイティブの開発知識は必要だから、Android Studio なんて入ってるよね普通)</p>\n<h2 id=\"android-studio-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">Android Studio を起動する <a class=\"direct-link\" href=\"#android-studio-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Android Studio を起動して、適当な Android Project を作って下さい。ここで作るプロジェクトに全く意味はありません。エミュレータの作成が終わったら削除してOKです。</p>\n<h2 id=\"android-sdk-%E3%81%AE%E5%A0%B4%E6%89%80%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">Android SDK の場所を変更する <a class=\"direct-link\" href=\"#android-sdk-%E3%81%AE%E5%A0%B4%E6%89%80%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">#</a></h2>\n<p>メニューの Android Studio -&gt; Preference で設定画面を起動します。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_01.png\" alt=\"\"></p>\n<p>Appearance &amp; Behavior -&gt; System Settings -&gt; Android SDK を選択し、Android SDK Location の右横の「Edit」を押して、Xamarin や Visual Studio for Mac がインストールした Android SDK のパスを指定します。</p>\n<p>Xamarin がインストールした Android SDK は通常 <code>~/Library/Developer/Xamarin/android-sdk-macosx</code> にあります。</p>\n<p>逆に、 Xamarin Studio や、 Visual Studio for Mac 側の設定を、 Android Studio に合わせてもOKです。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_02.png\" alt=\"\"></p>\n<p>Android SDK をどちらかに統一できたら、不要な方はディレクトリ毎削除して OK です。あ、 <code>.bashrc</code> などでパスを通してる場合はそちらの変更も忘れずに。</p>\n<h2 id=\"android-%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">Android エミュレータを作成する <a class=\"direct-link\" href=\"#android-%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">#</a></h2>\n<p>さて、 Android Studio の画面にもどって、ツールバーにある「AVD Manager」のアイコンをクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_a.png\" alt=\"\"></p>\n<p>Android Vistual Device Manager の画面が表示されます。<br>\nここで「Create Virtual Device」をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_b.png\" alt=\"\"></p>\n<p>System Image の画面が表示されます。<br>\n重要なのは右下、 <strong>「Install Intel HAXM for better emulation performance」</strong> の表示です。<br>\nこれが表示されているということは、PC に HAXM がインストールされていないので、その下にある <strong>「Download and Install HAXM」</strong> をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_c.png\" alt=\"\"></p>\n<p>「Download and Install HAXM」をクリックすると、Emulator Settings の画面になります。<br>\n特に設定は変えずに「Next」を押します。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_d.png\" alt=\"\"></p>\n<p>HAXM のインストールが完了しました。<br>\nFinish で一旦画面を閉じて、再び「Create Virtual Device」をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_e.png\" alt=\"\"></p>\n<p>再び System Image の画面です。<br>\n右下の、 「Install Intel HAXM for better emulation performance」 が消えているのがわかります。</p>\n<p>さて下ごしらえができた所で、実際にエミュレータを作っていきましょう。<br>\n試しに「Marshmallow」の「x86_64」を選択して「Next」をクリックします。<br>\n（上の方の Release Name が <code>null</code> になってるの、なんででしょう？）</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_f.png\" alt=\"\"></p>\n<p>Android Virtual Device の画面です。<br>\n特に設定を変更せず、「Next」をクリックします。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_g.png\" alt=\"\"></p>\n<p>はい、HAXM のインストールと、それを使用したエミュレータが作成されました。<br>\n「実行」ボタンをクリックして、起動してみましょう。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_h.png\" alt=\"\"></p>\n<p>起動して動かしてみた画面です。アニGIFなのでうまく伝えられてないかもですが、普通の Android エミュレータよりは全然速いです。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_03.gif\" alt=\"\"></p>\n<p>ということで、 Android Studio を使うと、もはや「普通の手順で」作られるエミュレータが、高速な HAXM エミュレータになっています。</p>\n<h2 id=\"xamarin-studio-%E3%82%84-visual-studio-for-mac-%E3%81%8B%E3%82%89%E3%82%82%E4%BD%BF%E3%81%88%E3%81%BE%E3%81%99\">Xamarin Studio や Visual Studio for Mac からも使えます <a class=\"direct-link\" href=\"#xamarin-studio-%E3%82%84-visual-studio-for-mac-%E3%81%8B%E3%82%89%E3%82%82%E4%BD%BF%E3%81%88%E3%81%BE%E3%81%99\">#</a></h2>\n<p>作成したエミュレータは、もちろん Xamarin Studio や Visual Studio for Mac からも使えます。</p>\n<p>下図は Visual Studio for Mac で、 Xamarin.Android のプロジェクトを実行するところですが、Android Studio で先ほど作成したエミュレータが選択肢に出てきます。</p>\n<p><img src=\"/img/posts/making_android_haxm_emulator_i.png\" alt=\"\"></p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Android Studio でエミュレータを作ると、ちょっと面倒な HAXM のインストールもウィザードに沿ってできて、高速エミュレータが簡単に作れるよ。</p>\n<p>（自分が使ってる Android Studio がまだ v1.4 だったという盛大なブーメランｗｗ けどウィザードの画面はだいたい今も同じだから。）</p>\n",
      "date_published": "2016-11-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/17/installing_visual_studio_for_mac_instead_of_xamarin_studio/",
      "url": "https://blog.amay077.net/blog/2016/11/17/installing_visual_studio_for_mac_instead_of_xamarin_studio/",
      "title": "Xamarin Studio をアンインストールして Visual Studio for Mac(Preview) をインストールする",
      "content_html": "<p>Visual Studio for Mac(Preview) のインストール、失敗にもいろいろあるようですが、私の場合、インストーラを実行すると、しばらくして以下の画面が表示されてしまうというケースでした。</p>\n<!--more-->\n<p><img src=\"/img/posts/install_failed_vs_for_mac_01.png\" alt=\"\"></p>\n<p>これの原因が本当によくわからなくて、</p>\n<ul>\n<li>Xamarin Studio のアンインストール</li>\n<li>Mono のアンインストール</li>\n<li>Android SDK の削除</li>\n</ul>\n<p>とかいろいろやってみたけど症状変わらずでした。</p>\n<p>改めて、ディスクの中に Xamarin 関係の残骸が残っていないかチェックしてみると、 <code>/Developer/MonoAndroid</code> にシンボリックリンクを発見！「おまえかー！」と叫びながらそれを削除。</p>\n<p>さらにアプリケーションの中に</p>\n<ul>\n<li>Xamarin Workbooks</li>\n<li>Xamarin Inspector</li>\n</ul>\n<p>なども残ってました。</p>\n<p>そして何度目かのインストーラ実行…ついに…</p>\n<p><img src=\"/img/posts/install_failed_vs_for_mac_02.png\" alt=\"\"></p>\n<p>インストールできたぁ！</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Xamarin Studio をアンインストールして、Visual Studio for Mac をクリーンインストールするには、</p>\n<ol>\n<li><a href=\"https://developer.xamarin.com/guides/cross-platform/getting_started/installation/uninstalling_xamarin/\">Uninstalling Xamarin - Xamarin</a> に従って、Xamarin Studio をアンインストールする（<code>./xamarin_uninstall.sh</code> が便利ですぞよ）</li>\n<li>Xamarin Workbooks とか Inspector とか、「Xamarin関連の」アプリが残ってないかチェックしてそいつらも消す</li>\n<li><a href=\"http://qiita.com/gayou/items/3919b567c226e155cb1c\">Xamarinをアンインストール後、関連ファイルを手動で削除した（Mac OS X）</a> に沿って、残骸を探して消す（私が見つけるのに苦労した <code>/Developer/MonoAndroid</code> も載ってます）</li>\n</ol>\n<p>でOKなはずです。</p>\n<p>この状態で Visual Studio for Mac をインストールしてみましょう。</p>\n<p>ちなみに Android SDK は削除しなくて OK です。ディスク内に Android SDK が入っている場合は、 Visual Studio のインストール時にそれを選択することもできます。</p>\n<p>さあ、 Mac で Visual Studio 生活、はじめましょうか。</p>\n",
      "date_published": "2016-11-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/17/first_impression_about_microsoft_connect/",
      "url": "https://blog.amay077.net/blog/2016/11/17/first_impression_about_microsoft_connect/",
      "title": "Microsoft Connect(); 2016 雑感(おもに Xamarin 周り)",
      "content_html": "<p><a href=\"https://connectevent.microsoft.com/\">Microsoft Connect(); 2016</a> の、日本でのライブを観てました。</p>\n<!--more-->\n<h2 id=\"visual-studio-for-mac\">Visual Studio for Mac <a class=\"direct-link\" href=\"#visual-studio-for-mac\">#</a></h2>\n<ul>\n<li><a href=\"https://www.visualstudio.com/vs/visual-studio-mac/\">Visual Studio for Mac</a></li>\n</ul>\n<p>まあ、記憶から消してたアレ。<br>\nXamarin Studio をベースにした IDE だけど、 .NET Core アプリ開発や Azure 連携が入るみたい。</p>\n<p>個人的には、これは標準のIDEとして使いつつも、コーディングには JetBrains の <a href=\"https://www.jetbrains.com/rider/\">Rider</a> に期待している。VS for Mac にも Resharper や CodeLens 並みの機能が載ってくれば別だけど。</p>\n<p>Xamarin Studio は OSS だったけど、VS for Mac はどうなんだろう？ MonoDevelop との関係は？</p>\n<h2 id=\"visual-studio-2017\">Visual Studio 2017 <a class=\"direct-link\" href=\"#visual-studio-2017\">#</a></h2>\n<ul>\n<li><a href=\"https://www.visualstudio.com/vs/visual-studio-2017-rc/\">Visual Studio 2017 RC</a></li>\n</ul>\n<p>何というか、 Xamarin の導入が簡単になってるといいな。</p>\n<h2 id=\"visual-studio-mobile-center\">Visual Studio Mobile Center <a class=\"direct-link\" href=\"#visual-studio-mobile-center\">#</a></h2>\n<ul>\n<li><a href=\"https://www.visualstudio.com/vs/mobile-center/\">Visual Studio Mobile Center</a></li>\n</ul>\n<p>なんか Microsoft の ｍBaaS はこれになるっぽい？<br>\nサイトに、</p>\n<blockquote>\n<p>Mobile platforms\tObjective-C, Swift, Java, Xamarin, React Native<br>\nLifecycle features\tBuild, Test, Crash, Beta Distribution, Analytics<br>\nCloud features\tAuthentication, Easy tables, Offline sync</p>\n</blockquote>\n<p>と書いてあるので。あれ？ <a href=\"https://docs.microsoft.com/ja-jp/azure/app-service-mobile/app-service-mobile-value-prop\">Azure Mobile Apps</a> と被るよねこれ？</p>\n<p>mBaaS に加えて CI の要素もあるようなので、AWS の Mobile Hub や Google Firebase を超える機能を持つことになりますね。</p>\n<h2 id=\"xamarin.forms.platforms.tizen\">Xamarin.Forms.Platforms.Tizen <a class=\"direct-link\" href=\"#xamarin.forms.platforms.tizen\">#</a></h2>\n<p>ふいたｗ<br>\nまさかの Tizen 復活、そしてそれは Xamarin.Forms のチカラによってｗ</p>\n<p>なんか、 「Xamarin.Forms.Platforms.WinForms」 とか自作できそう。</p>\n<h2 id=\"%E3%81%8B%E3%82%93%E3%81%9D%E3%81%86\">かんそう <a class=\"direct-link\" href=\"#%E3%81%8B%E3%82%93%E3%81%9D%E3%81%86\">#</a></h2>\n<p>なんか勢いあるねマイクロソフト。</p>\n<p><a href=\"http://www.windowscentral.com/microsoft-joins-linux-foundation-welcomes-google-net-community\">Google が .NET Foundation に加わったり、MS が Linux Foundation に加わったり</a> 、企業間抗争もしてないし、オープンソースとも仲良くやってる感じ。</p>\n<p>ライブ始まってから２時間経っても Windows のトピックが出てこなかったり、デモが Mac だったり iPhone だったり、「もうそんな時代じゃねーんだよ」とは以前から言ってるけど、ここまでとはｗ</p>\n<p>日本のライブのゲストに及川さん(は元MSだけど)や、伊藤直也さんを呼んだのも、そういう「広がり」を意識してるのかな？</p>\n<p>いろいろな世界と仲良くしつつ、モダンさを保ち続けられる C# と .NET が使える場所を広げていく。<br>\n改めて、「.NET Framework と C# ってスゴい」ですね！</p>\n<p>Xamarin人材としては、Xamarin Studio →  Visual Studio for Mac や Xamarin test cloud → Visual Studio Mobile Center など、徐々に「Xamarinブランド」が Visual Studio に吸収されていくのは仕方ないけど、一方で Tizen 対応などに Xamarin Platform の発展を見ることができるので、Microsoft のなかで重要なポジションに位置するモノであり続けるのかな、と思いました。</p>\n<p>いや、Stackoverflow や teratail で Xamarin タグが無くなると質問するのに困るし、「Xamarinはいいぞ！」って言い続けたいしね。</p>\n<p>ともあれ、「ざまりん三銃士」おつかれさまでした！</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">なう <a href=\"https://twitter.com/hashtag/MSFTConnect?src=hash\">#MSFTConnect</a> <a href=\"https://twitter.com/hashtag/vsjp?src=hash\">#vsjp</a> <a href=\"https://t.co/VLbtzYV2rL\">pic.twitter.com/VLbtzYV2rL</a></p>&mdash; 田淵 義人＠エクセルソフト (@ytabuchi) <a href=\"https://twitter.com/ytabuchi/status/798883310277513216\">2016年11月16日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"https://connectevent.microsoft.com/#day2\">Connect(); の２日目</a> も Visual Studio や Xamarin のトピックがあるので、あー睡眠時間がー。</p>\n<p>(ライブ中に naoya_ito さんが、テストサービスについて「Windows Phone は使えないんですかね？」って場を凍らせてたけど、KeyNote後の Miguel と Nat への Q&amp;A で「対応するよ」的なこと言ってた気がする)</p>\n",
      "date_published": "2016-11-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/14/make_azure_function_what_get_twitter_reply/",
      "url": "https://blog.amay077.net/blog/2016/11/14/make_azure_function_what_get_twitter_reply/",
      "title": "Azure Functions で Twitter のリプライを受け取る WebAPI を作ってみた",
      "content_html": "<p>BOT Framework とか使えよｗ というものですが、 Twitter の自動応答BOTをWebAPI化してみたかったんですね。</p>\n<!--more-->\n<h2 id=\"%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\">作りたいもののイメージ <a class=\"direct-link\" href=\"#%E4%BD%9C%E3%82%8A%E3%81%9F%E3%81%84%E3%82%82%E3%81%AE%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\">#</a></h2>\n<h3 id=\"%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\">リクエスト <a class=\"direct-link\" href=\"#%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88\">#</a></h3>\n<p><code>https://xxxx.azurewebsites.net/api/myfunc1?text=明日の天気は？</code></p>\n<h3 id=\"%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9\">レスポンス <a class=\"direct-link\" href=\"#%E3%83%AC%E3%82%B9%E3%83%9D%E3%83%B3%E3%82%B9\">#</a></h3>\n<blockquote>\n<p>晴れのちくもり</p>\n</blockquote>\n<h2 id=\"azure-functions-%E3%82%92%E4%BD%9C%E3%82%8B\">Azure Functions を作る <a class=\"direct-link\" href=\"#azure-functions-%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<ul>\n<li><a href=\"https://azure.microsoft.com/ja-jp/documentation/articles/functions-create-first-azure-function/\">Create your first Azure Function - Microsoft Azure</a></li>\n</ul>\n<p>を参考に Javascript で作りました。<br>\n（C# で作ろうと思ったんだけど、作成直後にエラーが出たもので。そっちは <a href=\"https://social.msdn.microsoft.com/Forums/ja-JP/91983eb4-d9e1-4183-a332-be3e576d7846/c-azure-functions-?forum=windowsazureja#91983eb4-d9e1-4183-a332-be3e576d7846\">MSDNフォーラムに投げたら速攻で回答してもらえた</a> のでありがたかったけどね。）</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">exports</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">context<span class=\"token punctuation\">,</span> req</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// https://apps.twitter.com から得るやつ</span><br>    <span class=\"token keyword\">var</span> oauth <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>        consumer_key<span class=\"token operator\">:</span> <span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span><br>        consumer_secret<span class=\"token operator\">:</span> <span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span><br>        token<span class=\"token operator\">:</span> <span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span><br>        token_secret<span class=\"token operator\">:</span> <span class=\"token string\">'xxxx'</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">var</span> botTwitterName <span class=\"token operator\">=</span> <span class=\"token string\">\"@hoge\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// メンション投げるTwitterアカウント名</span><br>    <span class=\"token keyword\">var</span> botTwitterId <span class=\"token operator\">=</span> <span class=\"token number\">999999999</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// メンション投げるTwitterアカウントID</span><br>    <span class=\"token keyword\">var</span> senderTwitterName <span class=\"token operator\">=</span> <span class=\"token string\">\"@my_twitter_account \"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自分のTwitterアカウント名</span><br>    <span class=\"token keyword\">var</span> noComment <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'…'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Nothing'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'EMPTY'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// リプライが得られなかった時の代替テキスト(ランダムで選ばれる)</span><br>    <span class=\"token keyword\">var</span> waitForReply <span class=\"token operator\">=</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// メンション投げてリプライを取得するまでの待ち時間</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>text <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>body <span class=\"token operator\">&amp;&amp;</span> req<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error! text no found'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>            status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span><br>            body<span class=\"token operator\">:</span> noComment<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reply message:\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">var</span> rp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'request-promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// 会話相手との会話が以前にあったら、その続きにするために過去のツイートを取得する。</span><br>    <span class=\"token keyword\">var</span> getLatestReplyUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=10'</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">rp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>url<span class=\"token operator\">:</span>getLatestReplyUrl<span class=\"token punctuation\">,</span> oauth<span class=\"token operator\">:</span>oauth<span class=\"token punctuation\">,</span> json<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mentions</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        <br>        <span class=\"token comment\">// 自分の mention 群に会話相手からの投稿があったら、そのツイートIDを得る</span><br>        <span class=\"token keyword\">var</span> latestRepId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> mentions<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">var</span> men <span class=\"token operator\">=</span> mentions<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>men<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">.</span>id <span class=\"token operator\">==</span> botTwitterId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                latestRepId <span class=\"token operator\">=</span> men<span class=\"token punctuation\">.</span>id_str<span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span>    <br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">var</span> formData <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"status\"</span><span class=\"token operator\">:</span>botTwitterName <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>latestRepId <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            formData<span class=\"token punctuation\">[</span><span class=\"token string\">\"in_reply_to_status_id\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> latestRepId<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">var</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>            url<span class=\"token operator\">:</span> <span class=\"token string\">'https://api.twitter.com/1.1/statuses/update.json'</span><span class=\"token punctuation\">,</span><br>            method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span><br>            headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>            json<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><br>            oauth<span class=\"token operator\">:</span> oauth<span class=\"token punctuation\">,</span><br>            include_rts<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>            form<span class=\"token operator\">:</span> formData<br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">return</span> <span class=\"token function\">rp</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tweet</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tweeted.res:\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">return</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>waitForReply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// wait</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// get reply</span><br>        <span class=\"token keyword\">var</span> getRepUrl <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=5&amp;since_id='</span> <span class=\"token operator\">+</span> r<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// var getRepUrl = 'https://api.twitter.com/1.1/statuses/mentions_timeline.json?count=10';</span><br>        <span class=\"token keyword\">return</span> <span class=\"token function\">rp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>url<span class=\"token operator\">:</span>getRepUrl<span class=\"token punctuation\">,</span> oauth<span class=\"token operator\">:</span>oauth<span class=\"token punctuation\">,</span> json<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">mentsions</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>            context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get mentions.\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">var</span> reply <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>text<span class=\"token operator\">:</span><span class=\"token function\">getNoComment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            mentsions<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">men</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>men<span class=\"token punctuation\">.</span>in_reply_to_status_id <span class=\"token operator\">==</span> r<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    reply <span class=\"token operator\">=</span> men<span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get reply.\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>reply<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>                status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span><br>                body<span class=\"token operator\">:</span> reply<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>senderTwitterName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reply message:\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            context<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error!:'</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">var</span> res <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>            status<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span><br>            body<span class=\"token operator\">:</span> noComment<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"reply message:\"</span> <span class=\"token operator\">+</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">function</span> <span class=\"token function\">getNoComment</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> noComment<span class=\"token punctuation\">[</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> noComment<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E4%BA%8B\">やっている事 <a class=\"direct-link\" href=\"#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E4%BA%8B\">#</a></h2>\n<ol>\n<li>自分の過去のメンション群を取得して、相手との会話があったら、その会話の続きとするようにツイートの ID を得る</li>\n<li>相手にメンションをツイートする（1. で ID 取れてたら <code>in_reply_to_status_id</code> に設定する）。投稿したツイートの ID を得ておく。</li>\n<li>ｎ秒待つ</li>\n<li>もう一度自分の過去のメンション群を取得する。検索パラメータに投稿時のツイートIDを指定して、投稿より未来のリプライしか得ないようにする。</li>\n<li>メンション群から投稿時のツイートIDを <code>in_reply_to_status_id</code> に持つツイートを検索する。</li>\n<li>それがリプライのツイートなので、レスポンスでその <code>text</code> を返す。</li>\n</ol>\n<h2 id=\"%E4%BD%BF%E7%94%A8%E6%8A%80%E8%A1%93\">使用技術 <a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E6%8A%80%E8%A1%93\">#</a></h2>\n<p>node.js でまともなプログラムを作るのは初めてでした。<br>\n次の npm モジュールにお世話になりました。</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/request\">request</a></li>\n<li><a href=\"https://www.npmjs.com/package/request-promise\">request-promise</a></li>\n</ul>\n<p>特に <code>request</code> を使用した Twitter API の使い方は、</p>\n<ul>\n<li><a href=\"http://ripplation.co.jp/blogs/tech/archives/196\">Node.jsでのTwitterタイムライン取得方法 - りぷろぐ</a></li>\n</ul>\n<p>を参考にさせてもらいました。</p>\n<h3 id=\"%E3%81%9D%E3%81%AE%E4%BB%96tips\">その他Tips <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96tips\">#</a></h3>\n<h4 id=\"azure-functions-%E3%81%B8%E3%81%AE-npm-install-%E3%81%AE%E4%BB%95%E6%96%B9\">Azure Functions への npm install の仕方 <a class=\"direct-link\" href=\"#azure-functions-%E3%81%B8%E3%81%AE-npm-install-%E3%81%AE%E4%BB%95%E6%96%B9\">#</a></h4>\n<ul>\n<li><a href=\"https://azure.microsoft.com/ja-jp/documentation/articles/functions-reference-node/#node\">Azure Functions NodeJS 開発者向けリファレンス - Microsoft Azure</a></li>\n</ul>\n<p>の手順に沿うと、ブラウザ上で Terminal が使えるので、そこで <code>npm install request-promise</code> などとできます。<code>package.json</code> ？、まだよく知らないです。</p>\n<h4 id=\"%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%81%AE-node.js-%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\">ローカルでの node.js の開発環境 <a class=\"direct-link\" href=\"#%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%81%A7%E3%81%AE-node.js-%E3%81%AE%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\">#</a></h4>\n<p>Mac と Visual Studio Code を使いました。</p>\n<ul>\n<li><a href=\"http://dev.classmethod.jp/server-side/vscode-nodejs-1/\">Visual Studio CodeによるNode.jsのデバッグ（その１） - Developers.IO</a></li>\n</ul>\n<p>がとても参考になりました（インテリセンスを使うための設定はしませんでした）。</p>\n<p>はじめは C# でやろうと思ったけど、こういうのは Javascript の方がちゃちゃっと作れてよいですね。お互い適材適所だなーと思いました。</p>\n<p>(今のところトライアルだけど Azure Functions の課金ってどうなるのかな？)</p>\n",
      "date_published": "2016-11-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/11/reactive_ppap_in_csharp/",
      "url": "https://blog.amay077.net/blog/2016/11/11/reactive_ppap_in_csharp/",
      "title": "C# で Reactive PPAP",
      "content_html": "<p>エンジニア立ち居振舞いには乗らないが、こういうのには乗ってしまうｗ</p>\n<!--more-->\n<ul>\n<li><a href=\"http://qiita.com/on0z/items/ef32f79bde5452a2ccec\">Swift3でPPAPキヨシ - Qiita</a></li>\n</ul>\n<p>C# と Reactice Extension で。<a href=\"http://qiita.com/amay077/items/85dfc4bd194f57c52c57\">以前の</a> をちょっと改造しただけだが。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//PPAPClass.cs</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PPAPConsole</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">PPAPClass</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> FIN <span class=\"token operator\">=</span> <span class=\"token string\">\"Pen-Pineapple-Apple-Pen\"</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> PPAP <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"ペン\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"パイナッポー\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"アッポー\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ペン\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> WORDS <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"ペン\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"パイナッポー\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"アッポー\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ppapObservable <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Interval</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> WORDS<span class=\"token punctuation\">[</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span>WORDS<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ランダムに</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Buffer</span><span class=\"token punctuation\">(</span>PPAP<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 要素数4のBufferを1ずつズラしてく</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>queue <span class=\"token operator\">=></span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">SequenceEqual</span><span class=\"token punctuation\">(</span>PPAP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token comment\">// パターンと一致したら…</span><br>                    Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span><br>                        Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// Queueの最後</span><br>                        Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token comment\">// + 空文字(終了判定用)</span><br>                    Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token punctuation\">.</span><span class=\"token function\">TakeWhile</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 空文字になるまで繰り返す</span><br><br>            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PPAP\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最初に言うので</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span>Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// なんとなく待つ</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>ppapObservable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><br>                    x <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>FIN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">Read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"%E7%B5%90%E6%9E%9C\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C\">#</a></h4>\n<blockquote>\n<p>PPAP<br>\nパイナッポー<br>\nペン<br>\nペン<br>\nアッポー<br>\nペン<br>\nパイナッポー<br>\nアッポー<br>\nアッポー<br>\nアッポー<br>\nアッポー<br>\nペン<br>\nアッポー<br>\nペン<br>\nアッポー<br>\nペン<br>\nパイナッポー<br>\nアッポー<br>\nペン<br>\nPen-Pineapple-Apple-Pen</p>\n</blockquote>\n<p>apple-pen と pineapple-pen をうまく活かした感じにしたいですね。</p>\n",
      "date_published": "2016-11-11T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/05/hiding_and_changing_title_back_button_in_navigation_page_on_xamarin_forms/",
      "url": "https://blog.amay077.net/blog/2016/11/05/hiding_and_changing_title_back_button_in_navigation_page_on_xamarin_forms/",
      "title": "Xamarin.Forms の NavigationPage で戻るボタンを消す＆タイトルを変える",
      "content_html": "<p>Xamarin.Forms で <code>NavigationPage</code> を使うと、 iOS では <a href=\"https://developer.apple.com/jp/documentation/UserExperience/Conceptual/MobileHIG/Bars/Bars.html#//apple_ref/doc/uid/TP40006556-CH12-SW3\">ナビゲーションバー(UINavigationBar)</a>、Android では <a href=\"https://developer.android.com/design/patterns/actionbar.html\">Action Bar</a> がそれぞれ使用されます。</p>\n<!--more-->\n<p>プラットフォーム標準のナビゲーション機能が共通の定義で使えるのは便利ですが、アプリの要件によっては、カスタマイズした場面もあるでしょう。</p>\n<h2 id=\"%E6%88%BB%E3%82%8B%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%B6%88%E3%81%99\">戻るボタンを消す <a class=\"direct-link\" href=\"#%E6%88%BB%E3%82%8B%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%B6%88%E3%81%99\">#</a></h2>\n<p>戻るボタンを消したい場合、 Page の XAML に <code>NavigationPage.HasBackButton=&quot;false&quot;</code> を追加します。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xamarin.com/schemas/2014/forms<span class=\"token punctuation\">\"</span></span> <br>\t\t\t <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/winfx/2009/xaml<span class=\"token punctuation\">\"</span></span> <br>\t\t\t <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WorkingWithNavigation.Page2Xaml<span class=\"token punctuation\">\"</span></span><br>\t\t\t <span class=\"token attr-name\">NavigationPage.HasBackButton</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span><br>\t\t\t <span class=\"token attr-name\">Title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Page 2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>コードでは、 <code>NavigationPage.SetHasBackButton(page2, false)</code> と書けます。</p>\n<p>これを実行すると、下のようになります。</p>\n<p><img src=\"/img/posts/customize_back_button_in_Xamarin_forms_01.gif\" alt=\"\"></p>\n<p>Page2 に仕掛けているので、iOS では Page2 だけ、戻るボタンが表示されないのが確認できます。<br>\nAndroid はちょっとわかりにくいですが、ActionBar のアイコンの横に着いている ＜ のアイコンが、 Page2 だけ表示されないのが確認できます。</p>\n<h2 id=\"%E6%88%BB%E3%82%8B%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B\">戻るボタンのタイトルを変える <a class=\"direct-link\" href=\"#%E6%88%BB%E3%82%8B%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E3%82%BF%E3%82%A4%E3%83%88%E3%83%AB%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B\">#</a></h2>\n<p>iOS の UINavigationBar では、戻るボタンには前画面のタイトルが表示されます。<br>\nXamarin.Forms の NavigationPage も同じくです。<br>\nこれを変更するには、 <code>NavigationPage.BackButtonTitle=&quot;たいとる&quot;</code> を使います。</p>\n<p>要注意なのは、これを仕掛けたPageの戻るボタンタイトルが変わるのではなく、 <strong>これを仕掛けたPageが戻り先となる場合に、戻るボタンタイトルが変わる</strong> ということです。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ContentPage</span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://xamarin.com/schemas/2014/forms<span class=\"token punctuation\">\"</span></span> <br>\t\t\t <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>x</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/winfx/2009/xaml<span class=\"token punctuation\">\"</span></span> <br>\t\t\t <span class=\"token attr-name\"><span class=\"token namespace\">x:</span>Class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>WorkingWithNavigation.Page2Xaml<span class=\"token punctuation\">\"</span></span><br>\t\t\t <span class=\"token attr-name\">NavigationPage.BackButtonTitle</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BACK<span class=\"token punctuation\">\"</span></span><br>\t\t\t <span class=\"token attr-name\">Title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Page 2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre>\n<p>コードでは、 <code>NavigationPage.SetBackButtonTitle(page2, &quot;BACK&quot;)</code> と書けます。</p>\n<p>これを実行すると、下のようになります。</p>\n<p><img src=\"/img/posts/customize_back_button_in_Xamarin_forms_02.gif\" alt=\"\"></p>\n<p>Page2 に <code>BackButtonTitle=&quot;BACK&quot;</code> を仕掛けているので、Page2 ではなく、それが戻り先となる Page3 の戻るボタンが「BACK」になっています。</p>\n<p>尚、Android では、戻るボタンは「＜」のアイコンだけなので、この機能は無視されます。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/xamarin-forms/user-interface/navigation/hierarchical/\">Hierarchical Navigation - Xamarin</a></li>\n<li><a href=\"https://github.com/xamarin/xamarin-forms-samples/tree/master/Navigation/Hierarchical\">サンプル：Hierarchical Navigation - GitHub</a></li>\n<li><a href=\"http://motzcod.es/post/136765476207/changing-ioss-back-button-text-in-xamarinforms\">MotzCod.es by James Montemagno — Changing iOS’s Back Button Text in Xamarin.Forms</a></li>\n</ul>\n",
      "date_published": "2016-11-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/11/02/convert_nsdate_to_datetime_in_xamarin_ios/",
      "url": "https://blog.amay077.net/blog/2016/11/02/convert_nsdate_to_datetime_in_xamarin_ios/",
      "title": "Xamarin.iOS で NSDate を DateTime に変換する",
      "content_html": "<p>なんで <code>NSDate</code> ってこんなにわけわからんの？</p>\n<!--more-->\n<p>こんなもの <code>System.DateTime</code> に変換してやる、えーい！</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Foundation</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">YourNameSpace</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NSDateExtensions</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">DateTime</span> <span class=\"token function\">ToDateTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">NSDate</span> date<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">DateTime</span> reference <span class=\"token operator\">=</span> TimeZone<span class=\"token punctuation\">.</span>CurrentTimeZone<span class=\"token punctuation\">.</span><span class=\"token function\">ToLocalTime</span><span class=\"token punctuation\">(</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">DateTime</span><span class=\"token punctuation\">(</span><span class=\"token number\">2001</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">return</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">AddSeconds</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span>SecondsSinceReferenceDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<p>参考は↓だけど、使いやすいように Extension Method にしました。</p>\n<ul>\n<li><a href=\"http://sourcerer.tumblr.com/post/502919332/nsdate-to-datetime-and-back\">I code therefore I am. - NSDate to DateTime and Back</a></li>\n</ul>\n",
      "date_published": "2016-11-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/10/27/join-xamarin-advent-calendar-2016/",
      "url": "https://blog.amay077.net/blog/2016/10/27/join-xamarin-advent-calendar-2016/",
      "title": "Xamarin Advent Calendar 2016 参加者募集中です",
      "content_html": "<p>4年目の Xamarin Advent Calendar です。</p>\n<!--more-->\n<p><a href=\"http://blog.qiita.com/post/152366526084/adventcalendar2016\">「Qiita Advent Calendar 2016」の募集が始まりました - Qiita Blog</a></p>\n<p>とのことでさっそく</p>\n<ul>\n<li><a href=\"http://qiita.com/advent-calendar/2016/xamarin\">Xamarin Advent Calendar 2016 - Qiita</a></li>\n</ul>\n<p>を作成しました。</p>\n<p>なんと、募集開始からたったの2時間で25枠全部埋まりました(嬉しくて泣きそう</p>\n<p><a href=\"https://twitter.com/ytabuchi\">@ytabuchi</a> さん始め <a href=\"http://jxug.org\">JXUG</a> の皆さん、 <a href=\"https://twitter.com/chomado\">@chomado</a> さん始めＭＳの方々のおかげです、本当にありがとうございます。</p>\n<p>仕事中ずっと監視してました(ぉぃ)が、 Qiita 内では最速ｗｗｗ （下は記念スクショ）</p>\n<p><img src=\"/img/posts/join_xamarin_advent_calendar_2016_01.png\" alt=\"\"></p>\n<p><a href=\"https://twitter.com/Fumiya_Kume\">@Fumiya_Kume</a> 君が作ってくれた 学生さん、初心者さん向け、</p>\n<ul>\n<li><a href=\"http://qiita.com/advent-calendar/2016/xamarin-student\">[学生さん・初心者さん大歓迎！]Xamarin Advent Calendar 2016 - Qiita</a></li>\n</ul>\n<p>も満席、すご！（「どこがビギナーやねんｗ」というラインナップだがｗｗ）</p>\n<p>なので、それぞれ「その2」 を作りました。</p>\n<ul>\n<li>\n<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin2\">Xamarin(その2) Advent Calendar 2016 - Qiita</a></p>\n</li>\n<li>\n<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin-welcome\">[初心者さん・学生さん大歓迎！] Xamarin その2 Advent Calendar 2016 - Qiita</a></p>\n</li>\n</ul>\n<p>これらはまだ空きがありますので、奮ってご応募下さい。</p>\n<p>あ、Xamarin Advent Calendar 4つ、購読もよろしくおねがいします。</p>\n<p><a href=\"http://qiita.com/advent-calendar/2016/xamarin\"><img src=\"/img/posts/join_xamarin_advent_calendar_2016_02.png\" alt=\"\"></a></p>\n<p>参加登録していただいた皆さんは、担当日忘れないでくださいね(ﾆｯｺﾘ)</p>\n",
      "date_published": "2016-10-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/10/25/submit-cfp-for-droidkaigi2017/",
      "url": "https://blog.amay077.net/blog/2016/10/25/submit-cfp-for-droidkaigi2017/",
      "title": "DroidKaigi2017 に Xamarin ネタでトーク応募したよ",
      "content_html": "<p>神からの啓示がありまして、 <a href=\"https://droidkaigi.github.io/2017/\">DroidKaigi2017</a> のトークに応募しました。</p>\n<!--more-->\n<p>昨年 DroidKaigi2016 を聞きにいきました。 Kotlin、Go Mobile のセッションがありました。</p>\n<p>当時 Xamarin はまだプロプライエタリな有償の製品でした。今はほとんどオープンソースのプロダクトです。</p>\n<p>これはワンチャンあるで！</p>\n<p>応募内容は以下です。「○○界隈」いうのがあまり好きではないので、そういうのにこだわらない話をしたいと思っています。</p>\n<hr>\n<h2 id=\"title\">Title <a class=\"direct-link\" href=\"#title\">#</a></h2>\n<p>Xamarin.Android で始めるクロスプラットフォームモバイルアプリ開発</p>\n<h2 id=\"abstract\">Abstract <a class=\"direct-link\" href=\"#abstract\">#</a></h2>\n<h3 id=\"%E5%AF%BE%E8%B1%A1%E8%80%85\">対象者 <a class=\"direct-link\" href=\"#%E5%AF%BE%E8%B1%A1%E8%80%85\">#</a></h3>\n<ul>\n<li>Android中級者〜</li>\n<li>C# 初心者〜</li>\n</ul>\n<h3 id=\"%E6%A6%82%E8%A6%81\">概要 <a class=\"direct-link\" href=\"#%E6%A6%82%E8%A6%81\">#</a></h3>\n<p>Xamarin（ざまりん）は C# によるクロスプラットフォームモバイルアプリ開発ツールです。<br>\nMicrosoft が2016年4月に買収して、一気に知名度が上がりました。</p>\n<p>このセッションでは、 Xamarin とは、Xamarin.Android とは何か、C# や .NET Framework(Mono) の強力な言語・ライブラリ機能について触れ、通常の Android アプリ開発と Xamarin を使ったアプリ開発はどこが違って、どこが同じなのかを説明します。</p>\n<p>また、今日のモバイルアプリ開発では、DataBinding、MVVM、Reactive Extensions(Rx) といった、Microsoft が源流となっている手法が広まって来ています。<br>\nXamarin を使うと、MVVMパターンと Rx を使用し、大部分のコードを共有できる Android/iOS 両対応アプリケーションを開発できます。如何にしてコードを共有するか、できない場合にどのような解決策が用意されているかについてお話します。</p>\n<h3 id=\"%E7%9B%AE%E6%AC%A1%EF%BC%88%E4%BB%AE%EF%BC%89\">目次（仮） <a class=\"direct-link\" href=\"#%E7%9B%AE%E6%AC%A1%EF%BC%88%E4%BB%AE%EF%BC%89\">#</a></h3>\n<h4 id=\"1.-xamarin-%E3%81%A8%E3%81%AF%EF%BC%9F\">1. Xamarin とは？ <a class=\"direct-link\" href=\"#1.-xamarin-%E3%81%A8%E3%81%AF%EF%BC%9F\">#</a></h4>\n<ul>\n<li>Xamarin とは何か</li>\n<li>Xamarin.Android とは何か</li>\n<li>C# の利点(Java, Swift との比較)</li>\n</ul>\n<h4 id=\"2.-%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%81%A8%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%85%B1%E6%9C%89\">2. クロスプラットフォームアプリ開発とコードの共有 <a class=\"direct-link\" href=\"#2.-%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E3%81%A8%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AE%E5%85%B1%E6%9C%89\">#</a></h4>\n<ul>\n<li>MVVMパターン</li>\n<li>Reactive Extensions / ReactiveProperty</li>\n<li>Portable Class Library(PCL)によるコード共有</li>\n<li>プラットフォーム固有の処理を行う方法</li>\n</ul>\n<h4 id=\"3.-open-xamarin%E3%80%81open-microsoft\">3. Open Xamarin、Open Microsoft <a class=\"direct-link\" href=\"#3.-open-xamarin%E3%80%81open-microsoft\">#</a></h4>\n<ul>\n<li>Xamarin で使えるライブラリ(C#, Java)</li>\n<li>All Xamarin SDKs are open source</li>\n<li>.NET Standard</li>\n</ul>\n<h4 id=\"4.-xamarin-%E3%81%AE%E4%BD%BF%E3%81%84%E3%81%A9%E3%81%93%E3%82%8D\">4. Xamarin の使いどころ <a class=\"direct-link\" href=\"#4.-xamarin-%E3%81%AE%E4%BD%BF%E3%81%84%E3%81%A9%E3%81%93%E3%82%8D\">#</a></h4>\n<ul>\n<li>採用すべきケースとしなくてよいケース</li>\n</ul>\n<h2 id=\"topic\">Topic <a class=\"direct-link\" href=\"#topic\">#</a></h2>\n<p>開発環境・ツール (Productivity and Tooling)</p>\n<hr>\n",
      "date_published": "2016-10-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/10/18/who-dont-need-xamarin/",
      "url": "https://blog.amay077.net/blog/2016/10/18/who-dont-need-xamarin/",
      "title": "Xamarin を使わなくてもいい人たち",
      "content_html": "<p>「Xamarin はいいぞ」ばかり言ってる私ですが、Xamarin がハマらないケースも当然あるわけで。</p>\n<!--more-->\n<p>いくつかピックアップしてみたいと思います。</p>\n<h2 id=\"android-%2F-ios-%E3%81%AE%E3%82%B9%E3%83%9A%E3%82%B7%E3%83%A3%E3%83%AA%E3%82%B9%E3%83%88\">Android / iOS のスペシャリスト <a class=\"direct-link\" href=\"#android-%2F-ios-%E3%81%AE%E3%82%B9%E3%83%9A%E3%82%B7%E3%83%A3%E3%83%AA%E3%82%B9%E3%83%88\">#</a></h2>\n<p>Android または iOS、Java や Swift が大好きで最先端を突っ走ってる人。<br>\nあるいは、最新のOSの機能をガンガンアプリに取り入れていくプロダクト。</p>\n<p>彼(または彼女)達に「Xamarin 使えよ、C# 使えよ」って言っても彼らの楽しみを奪ってしまうのでしない方がいいし、SDK が新しくなったら即使いたいという欲求はネイティブでないと満たせないですよね。</p>\n<h2 id=\"%E9%85%8D%E5%B8%83%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%B0%97%E3%81%AB%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88\">配布サイズを気にするプロダクト <a class=\"direct-link\" href=\"#%E9%85%8D%E5%B8%83%E3%82%B5%E3%82%A4%E3%82%BA%E3%82%92%E6%B0%97%E3%81%AB%E3%81%99%E3%82%8B%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88\">#</a></h2>\n<p>Xamarin でアプリを作ると、Monoランタイムを同梱するため配布パッケージの容量がびっくりするくらい増えます。（Android の場合、HelloWorld でも 10MByte は切れないんじゃなかったかな？）<br>\n　プロダクトが、世界をターゲットにしていて、それに回線の細い新興国も含まれている場合、注意した方がよいと思います。</p>\n<h2 id=\"%E3%82%AC%E3%83%AF%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E3%81%A7%E3%81%84%E3%81%84%E3%82%84%E3%81%A4\">ガワネイティブでいいやつ <a class=\"direct-link\" href=\"#%E3%82%AC%E3%83%AF%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E3%81%A7%E3%81%84%E3%81%84%E3%82%84%E3%81%A4\">#</a></h2>\n<p>Cordova, Monaca とかそういうの。例えばショッピングサイトのネイティブアプリだと、コンテンツの差し替えが激しいので HTML5 でモバイルWebサイトと共通化できたほうが運用の効率がよいです。</p>\n<h2 id=\"%E5%AE%97%E6%95%99%E4%B8%8A%E3%81%AE%E7%90%86%E7%94%B1\">宗教上の理由 <a class=\"direct-link\" href=\"#%E5%AE%97%E6%95%99%E4%B8%8A%E3%81%AE%E7%90%86%E7%94%B1\">#</a></h2>\n<h2 id=\"%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%BD%E3%83%95%E3%83%88%E3%81%AB%E8%A6%AA%E3%82%92%E6%AE%BA%E3%81%95%E3%82%8C%E3%81%9F%E4%BA%BA%E3%81%AF%E4%BD%BF%E3%82%8F%E3%81%AA%E3%81%84%E3%81%A7%E3%81%97%E3%82%87%E3%81%86%E3%80%82%E3%81%9F%E3%81%A0%E3%80%81%E9%81%8E%E5%8E%BB%E3%81%AB%E4%BD%95%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F%E3%81%8B%E3%81%AF%E7%9F%A5%E3%82%89%E3%81%AA%E3%81%84%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9%E3%80%81%E4%BB%8A%E3%81%AE%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%BD%E3%83%95%E3%83%88%E3%81%AF%E3%81%82%E3%81%AA%E3%81%9F%E3%82%92%E6%AE%BA%E3%81%97%E3%81%BE%E3%81%9B%E3%82%93%E3%82%88%EF%BC%9F\">マイクロソフトに親を殺された人は使わないでしょう。ただ、過去に何があったかは知らないですけど、今のマイクロソフトはあなたを殺しませんよ？ <a class=\"direct-link\" href=\"#%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%BD%E3%83%95%E3%83%88%E3%81%AB%E8%A6%AA%E3%82%92%E6%AE%BA%E3%81%95%E3%82%8C%E3%81%9F%E4%BA%BA%E3%81%AF%E4%BD%BF%E3%82%8F%E3%81%AA%E3%81%84%E3%81%A7%E3%81%97%E3%82%87%E3%81%86%E3%80%82%E3%81%9F%E3%81%A0%E3%80%81%E9%81%8E%E5%8E%BB%E3%81%AB%E4%BD%95%E3%81%8C%E3%81%82%E3%81%A3%E3%81%9F%E3%81%8B%E3%81%AF%E7%9F%A5%E3%82%89%E3%81%AA%E3%81%84%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9%E3%80%81%E4%BB%8A%E3%81%AE%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%BD%E3%83%95%E3%83%88%E3%81%AF%E3%81%82%E3%81%AA%E3%81%9F%E3%82%92%E6%AE%BA%E3%81%97%E3%81%BE%E3%81%9B%E3%82%93%E3%82%88%EF%BC%9F\">#</a></h2>\n<p>こんなもんかなあ。逆を言えば、上に当てはまらなければ Xamarin を選択しない理由はないわけで。</p>\n<p>やっぱり、「Xamarin はいいぞ」</p>\n",
      "date_published": "2016-10-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/10/16/gave-presentation-in-xamarin-jxugc-17/",
      "url": "https://blog.amay077.net/blog/2016/10/16/gave-presentation-in-xamarin-jxugc-17/",
      "title": "JXUGC #17 お前の Xamarin アプリを見せてみろ！ で発表してきました",
      "content_html": "<p><a href=\"http://jxug.connpass.com/event/39470/\">JXUGC #17 お前の Xamarin アプリを見せてみろ！ - connpass</a> に参加、登壇してきました。</p>\n<!--more-->\n<p><a href=\"https://developer.xamarin.com/guides/xamarin-forms/datapages/\">Xamarin DataPages</a> をネタにしましたが、今回は本当に準備が不足してすいませんでした。何かをでっちあげることしかできませんでした。</p>\n<p>他のみなさんのアプリや発表、完成度が高くて脱帽です。</p>\n<p>一応、資料はこちら。</p>\n<script async class=\"speakerdeck-embed\" data-id=\"f7a39d6e6d5742a185231e1e4e1d8953\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n<p>ソースもあります。(Xamarinのリポジトリから切り取ってきた DataPages 関連のプロジェクト付き)</p>\n<ul>\n<li><a href=\"https://github.com/amay077/MikawaMorningApp\">amay077/MikawaMorningApp</a></li>\n</ul>\n<p>今回の参加は、たまには東京の人たちにも会いたいなーという動機、それから Xamarin.Forms.GoogleMaps の PR が目的でして。。。</p>\n<p>DataPages にそこまで期待しているわけじゃないけど、標準機能でできることが少ないなら Xamarin.Forms.GoogleMaps みたく、Fork して機能拡張しちゃえばいいやと軽い気持ちでソースを除いてみたのですが、うーむ分からん。</p>\n<p><code>Xamarin.Forms.Pages.DataPage</code> を継承したクラスに <code>ListDataPage</code> というものがあって、これは与えられたデータソースを元に一覧画面を生成してくれます。更に、行を選択すると詳細画面も表示してくれます。</p>\n<p>ならば同じく <code>DataPage</code> を継承して <code>MapDataPage</code> を作ったら、一覧の代わりに地図にピン群が立つ画面を用意できるのでは？そんでピンをタップしたら詳細画面を表示できるのでは？と思ったのですが・・・。</p>\n<p><code>MapDataPage</code> を用意することはできました。データソースを元に地図にピン群を立たせることはできました。</p>\n<p>しかし、詳細ページを表示する方法が分かりませんでした。</p>\n<p>もうちょっと詳しく言うと、<code>ListDataPage</code> で行を選択したときに <a href=\"https://github.com/amay077/MikawaMorningApp/blob/master/Xamarin.Forms.Pages/ListDataPage.cs#L46\"><code>DataTemplate.CreateContent()</code></a> を呼び出していて、その返値が詳細画面となる <code>Page</code> なのですが、 この <code>DataTemplate</code> がよく分からない。</p>\n<p><code>ListDataPage.DetailTemplateProperty</code> への設定はいつだれが行っている？ DataTemplate は Xamarin.Forms.Core のソースなので、ちゃんとデバッグ環境作ればトレースできたかもしれません（だから Xamarin.Forms.Themes は関係ないかも知れない）が、ちょっと時間なく。。。</p>\n<p>この辺りの仕組みが分かれば、詳細画面で、</p>\n<ul>\n<li>http: で始まる文字列には、ハイパーリンクを設定する</li>\n<li>緯度経度だったら「地図」ボタンを表示する</li>\n</ul>\n<p>などのカスタマイズもできると思うので、引き続きソースおっかけてみたいと思います。</p>\n<p>JXUG イベント多すぎだろ！と思いつつ、数回に１回は行きたいなーと思っているので、またよろしくおねがいします。</p>\n<p>最後に、「喫茶店で朝￥500円以上払ったらそれはモーニングサービスとは言わない」これはガチ。</p>\n",
      "date_published": "2016-10-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/10/12/received-mvp-award-kit/",
      "url": "https://blog.amay077.net/blog/2016/10/12/received-mvp-award-kit/",
      "title": "MVP アワードキットが届きました",
      "content_html": "<p>海の向こうから、「MVPアワードキット」が届きましたよっと。</p>\n<!--more-->\n<h3 id=\"%E7%AE%B1%EF%BC%81\">箱！ <a class=\"direct-link\" href=\"#%E7%AE%B1%EF%BC%81\">#</a></h3>\n<p><img src=\"/img/posts/received_mvp_award_kit_01.jpg\" alt=\"\"></p>\n<h3 id=\"%E4%B8%AD%E8%BA%AB%EF%BC%81%EF%BC%81\">中身！！ <a class=\"direct-link\" href=\"#%E4%B8%AD%E8%BA%AB%EF%BC%81%EF%BC%81\">#</a></h3>\n<p><img src=\"/img/posts/received_mvp_award_kit_02.jpg\" alt=\"\"></p>\n<ul>\n<li>盾</li>\n<li>置物</li>\n<li>メンバーカードみたいなやつ</li>\n<li>ピンバッジ</li>\n<li>説明書みたいなやつ</li>\n</ul>\n<p>です。</p>\n<p>この他には書類とか MVP のステッカーとか。さっそく（会社の）MacBook Pro に貼ってやったぜぇー。</p>\n<p>MVPのセンパイ方も、初めて受賞したときはこういう事したんだろうなーと思いながら自分もやってしまったｗ</p>\n",
      "date_published": "2016-10-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/10/02/become-microsoft-mvp-for-the-first-timme/",
      "url": "https://blog.amay077.net/blog/2016/10/02/become-microsoft-mvp-for-the-first-timme/",
      "title": "初めて Microsoft MVP になりました！",
      "content_html": "<h4 id=\"microsoft-%E3%81%8B%E3%82%89%E9%9B%A2%E3%82%8C%E3%81%A6%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%A4%E3%82%82%E3%82%8A%E3%81%8C%E3%80%81%E3%81%84%E3%81%A4%E3%81%AE%E9%96%93%E3%81%AB%E3%81%8B-microsoft-mvp-%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%84%E3%81%9F\">Microsoft から離れてモバイルアプリ開発者になったつもりが、いつの間にか <a href=\"https://mvp.microsoft.com/ja-jp/overview\">Microsoft MVP</a> になっていた <a class=\"direct-link\" href=\"#microsoft-%E3%81%8B%E3%82%89%E9%9B%A2%E3%82%8C%E3%81%A6%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%E3%81%A4%E3%82%82%E3%82%8A%E3%81%8C%E3%80%81%E3%81%84%E3%81%A4%E3%81%AE%E9%96%93%E3%81%AB%E3%81%8B-microsoft-mvp-%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%84%E3%81%9F\">#</a></h4>\n<!--more-->\n<p>何を言ってるのかわからねーと思うが、そういうことですｗ</p>\n<p>元々 VB や VC で Windows のアプリケーション開発をしていましたが、転職を機に Android/iOS アプリ開発にクラスチェンジしたのは2011年頃の話です。</p>\n<p>が、やっぱり C# が好きで、 <a href=\"http://qiita.com/search?q=+user%3Aamay077+tag%3Axamarin&amp;sort=stock\">2013年から「Xamarin はいいぞ！」と言い続けていた</a> ら、Xamarin が Microsoft に買収され、Xamarin も Microsoft MVP の対象に！</p>\n<p>Xamarin 関係で、<a href=\"https://twitter.com/iseebi\">@iseebi</a> さんや <a href=\"https://twitter.com/ytabuchi\">@ytabuchi</a> さんが受賞されるなか、「こりゃワタシもワンチャンある？」と思い申請しましたらありがたく MVP になることができました。</p>\n<p>カテゴリは Visual Studio and Development Technologies ですが、Xamarin のことしか詳しくないので、これからも <strong>「Xamarin はいいぞ！」</strong> と言い続けていきます。</p>\n<p>まだ Microsoft 系の開発者には浸透していないであろう Android/iOS アプリの開発ノウハウについて、あるいは両者の技術コミュニティが繋がるような活動ができれば、と思っています。</p>\n<p>（あ、 <a href=\"http://aile.hatenablog.com/entry/2016/10/02/005811\">Xamarin.Macの人</a> とは同期受賞になるのかな、 <strong>Windowsを使わないMVP</strong> 同士、がんばりましょうｗ）</p>\n<p>年末にかけて、 Xamarin関連の勉強会には(地方からだけど)ちょいちょい顔を出しますし、12月には Xamarin Advent Calendar を今年もやります！</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">4年目となる Xamarin Advent Calendar 2016 もやるから皆さんよろ〜<br>2015 - <a href=\"https://t.co/EbFffM48no\">https://t.co/EbFffM48no</a><br>2014 - <a href=\"https://t.co/siRSDoDhJ8\">https://t.co/siRSDoDhJ8</a><br>2013 - <a href=\"https://t.co/JkdGFRt8i7\">https://t.co/JkdGFRt8i7</a></p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/777844707669909504\">2016年9月19日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>よろしくおねがいします。</p>\n",
      "date_published": "2016-10-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/09/29/got-jetbrains-opensource-lisence/",
      "url": "https://blog.amay077.net/blog/2016/09/29/got-jetbrains-opensource-lisence/",
      "title": "JetBrains の Open Source License をいただきました",
      "content_html": "<p>JetBrains は、 Androidアプリ開発者には Android Studio の元となっているIDE「IntelliJ IDEA」、C# 開発者には、Visual Studio拡張機能「ReSharper」を販売している企業としておなじみですよね。</p>\n<!--more-->\n<h2 id=\"jetbrains-%E8%A3%BD%E5%93%81%E7%BE%A4%E3%81%A8%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9\">JetBrains 製品群とオープンソースライセンス <a class=\"direct-link\" href=\"#jetbrains-%E8%A3%BD%E5%93%81%E7%BE%A4%E3%81%A8%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%83%A9%E3%82%A4%E3%82%BB%E3%83%B3%E3%82%B9\">#</a></h2>\n<p>そんな JetBrains 製品群、便利と聞きつつも個人では購入するのをためらっていました（Xamarin は有償でも買ってたのにな！）。</p>\n<p>その JetBrains に非商用のオープンソースプロジェクト開発者にライセンスを提供してくれる「Free Open Source License」があるのを知ったのは数ヶ月前のことです。</p>\n<ul>\n<li><a href=\"https://www.jetbrains.com/buy/opensource/\">JetBrains :: Opensource license</a></li>\n</ul>\n<p>「今の僕なら、 <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Xamarin.Forms.GoogleMaps</a> 開発してるし、(少ないけど)コントリビューションしてくれる人も居るし、 nuget のダウンロード数も 1,800超えてるしワンチャンあるのでは？」 と思い申請してみました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Xamarin.Forms.GoogleMaps 作り始めて３ヶ月経ったので JetBrains OSS License ワンチャン</p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/781369150635507712\">2016年9月29日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>すると驚き、ものの数時間で「おｋ、ライセンスやるお」ってメールが!はやっ！！</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">やったー！ JetBrains OSS License もらえた！！ってかレビューはやっ！ <a href=\"https://t.co/i9yGYXCOsP\">pic.twitter.com/i9yGYXCOsP</a></p>&mdash; これがあめいの選択だよ (@amay077) <a href=\"https://twitter.com/amay077/status/781428124399448064\">2016年9月29日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>ありがとう JetBrains、そしてありがとう Xamarin と Microsoft。 Xamarin がオープンソースにしてくれたから、それをフォークして、自分のプロジェクトにできて、ライセンスもらえました。</p>\n<p>これで超便利と噂の Resharper 先生が使えます（普段Macだけどな！）</p>\n<p>Eclipse の代わりに IntelliJ IDEA 使うぞ！</p>\n<p>今まで Early Access Program で何とか使ってた <a href=\"https://www.jetbrains.com/datagrip/\">DataGrip</a> もガッツリ使うぞ。</p>\n<p><strong><a href=\"https://www.jetbrains.com/rider/\">Rider</a> のリリース心待ちにしてます。</strong></p>\n<p>ほかのプロダクトは…あまり知らなかったけどいろいろ使ってみるぞ！</p>\n<p>なお、このプログラムで支給されるライセンスは</p>\n<blockquote>\n<p>Licenses can be used for non-commercial OS development only. Please consider purchasing separate licenses to work on commercial projects.</p>\n</blockquote>\n<p>ということで、非商用のオープンソースソフトウェア開発目的でのみ使用可能です。商用で使用する場合は <a href=\"https://twitter.com/yusuke/status/1144116495871434753\">ライセンスを購入</a> しましょう。</p>\n<h2 id=\"%E3%81%BF%E3%82%93%E3%81%AA%E3%82%82%E3%83%AF%E3%83%B3%E3%83%81%E3%83%A3%E3%83%B3%E3%81%82%E3%82%8B%E3%81%A7\">みんなもワンチャンあるで <a class=\"direct-link\" href=\"#%E3%81%BF%E3%82%93%E3%81%AA%E3%82%82%E3%83%AF%E3%83%B3%E3%83%81%E3%83%A3%E3%83%B3%E3%81%82%E3%82%8B%E3%81%A7\">#</a></h2>\n<p>申請時、 Number of commiters 的な項目があったので、 <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/graphs/contributors\">Xamarin.Forms.GoogleMaps にコミットしてくれていた人の数</a> で「3」と入力したら、ライセンスも3つくれました（残りの２つはコミッターの方々に提供するつもりです）。</p>\n<p>これが意味するのは、</p>\n<p><strong>自分でオープンソースプロジェクトを立ち上げなくても、どこからのプロジェクトに「積極的に」参加して、そのオーナーさんに「申請して」って言えばいいのでは</strong></p>\n<p>そのプロジェクトに大きめな関わりができて、良好な関係が築ければオーナーさんも引き受けてくれるのではないでしょうか（また、オーナーでなければ申請できないというルールでもないです）。JetBrains Open Source License について知らなければ、みんなにメリットのある事ですし。（コミッターが多い場合、いくつまで License を発行してくれるのかはさじ加減が必要かも知れませんが）</p>\n<p>もちろん、自分でOSSを始めるのも全然アリです。Xamarin.Forms.GoogleMaps もほぼ一人プロジェクトで、歴史も浅く、規模もとても小さいです。あ、頑張って README などを英語で書いている、というのは効いているのかも知れません。</p>\n<p>最後に宣伝ですが、 Xamarin.Forms.GoogleMaps にコントリビュートしていただければ、来年のライセンス更新時に「Number of commiters」を増やせて、参加して頂いた方にもライセンス供給できるかもしれませんので、プルリクなどよろしくおねがいします。<a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues\">ISSUES</a> が溜まってきているのですｗ</p>\n",
      "date_published": "2016-09-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/09/16/airbnb_first_impression/",
      "url": "https://blog.amay077.net/blog/2016/09/16/airbnb_first_impression/",
      "title": "東京出張で AirBnB を初めて使ってみた",
      "content_html": "<p>仕事で東京に１週間滞在する機会があったので、初めて AirBnB を使ってみました。</p>\n<!--more-->\n<p>説明する必要があるかわからないけど、 <a href=\"https://www.airbnb.jp/\">AirBnB</a> は、一般のお宅の一部（一部屋とか）を宿泊先として借りる（使う人）サービスのことで、日本では「民泊」と呼ばれています。当然、貸す側の人もいるわけで、それらの仲介をしているのが AirBnB などのサービスです。</p>\n<p>AirBnB の用語？で、部屋を貸す人を「ホスト」、借りる人を「ゲスト」と呼びます。</p>\n<p>前から興味あったし、予算に見合うビジネスホテルがなかったので、代わりになる宿泊先を AirBnB で探して使ってみました。</p>\n<h2 id=\"%E5%AE%BF%E6%B3%8A%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6\">宿泊してみて <a class=\"direct-link\" href=\"#%E5%AE%BF%E6%B3%8A%E3%81%97%E3%81%A6%E3%81%BF%E3%81%A6\">#</a></h2>\n<h3 id=\"%E6%96%99%E9%87%91\">料金 <a class=\"direct-link\" href=\"#%E6%96%99%E9%87%91\">#</a></h3>\n<p>今回の物件は、部屋の広さが6畳くらい。料金は、清掃料約2000円＋1泊約5,000円です。4泊したので合計約25,000円でした。付近のビジネスホテルと比べると1泊あたりで2000〜3000円ほど安いです。</p>\n<h3 id=\"%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A4%E3%83%B3%E3%80%81%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A2%E3%82%A6%E3%83%88\">チェックイン、チェックアウト <a class=\"direct-link\" href=\"#%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A4%E3%83%B3%E3%80%81%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%A2%E3%82%A6%E3%83%88\">#</a></h3>\n<p>ホストさんとのやりとりは Facebook メッセンジャーで行い、チェックインの際には実際にお会いして、部屋の説明などをしていただきましたが、それ以来、チェックアウトの時も、会うことはありませんでした。</p>\n<h3 id=\"%E3%83%9E%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%B8%E3%81%AE%E5%87%BA%E5%85%A5%E3%82%8A\">マンションへの出入り <a class=\"direct-link\" href=\"#%E3%83%9E%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%B8%E3%81%AE%E5%87%BA%E5%85%A5%E3%82%8A\">#</a></h3>\n<p>滞在中は家のカギを貸していただけるので、マンションへの出入りは自由でした。住人と思しき人から「こんばんわー」などと挨拶されることもありましたが、これって絶対 <strong>ご近所さんと間違われてる</strong> よね？</p>\n<h3 id=\"%E7%94%9F%E6%B4%BB%E9%9F%B3\">生活音 <a class=\"direct-link\" href=\"#%E7%94%9F%E6%B4%BB%E9%9F%B3\">#</a></h3>\n<p>今回の物件は、ホストさん達の居住空間の空いている部屋を貸し出しているタイプ。しかしその部屋は居住空間とは扉で分断されていました。生活音はわずかに聞こえますが、声などは聞こえませんでした。誰が何人住んでいるのかを伺い知ることもできませんでした。たまに掃除とか、移動の音が聞こえるくらい。</p>\n<h3 id=\"%E6%B4%97%E9%9D%A2%E3%81%AA%E3%81%A9\">洗面など <a class=\"direct-link\" href=\"#%E6%B4%97%E9%9D%A2%E3%81%AA%E3%81%A9\">#</a></h3>\n<p>バブラシなどのアメニティは用意されていない物件だったので、自分で用意したものを使いました。タオルは、ホストさんのご好意で使い放題になっており、大変助かりました。</p>\n<h3 id=\"%E3%81%8A%E9%A2%A8%E5%91%82\">お風呂 <a class=\"direct-link\" href=\"#%E3%81%8A%E9%A2%A8%E5%91%82\">#</a></h3>\n<p>浴槽はゲストに使わせる想定では無かったようだったのでシャワーでした。海外の方だとシャワーで十分なんですかね。</p>\n<h3 id=\"%E7%B7%8A%E5%BC%B5%E6%84%9F\">緊張感 <a class=\"direct-link\" href=\"#%E7%B7%8A%E5%BC%B5%E6%84%9F\">#</a></h3>\n<p>ビジネスホテルと違う緊張感はあります。全裸でトイレやお風呂に行くことはさすがにできません。</p>\n<h3 id=\"%E9%80%9A%E4%BF%A1%E7%92%B0%E5%A2%83\">通信環境 <a class=\"direct-link\" href=\"#%E9%80%9A%E4%BF%A1%E7%92%B0%E5%A2%83\">#</a></h3>\n<p>Free WiFiが２つ(内１つはモバイルWiFi)されており、自由に使うことができました。速度的にも問題なかったです。</p>\n<h3 id=\"%E5%AE%B6%E3%81%AE%E9%8D%B5%E3%82%92%E6%B8%A1%E3%81%99%EF%BC%8F%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8\">家の鍵を渡す／受け取るということ <a class=\"direct-link\" href=\"#%E5%AE%B6%E3%81%AE%E9%8D%B5%E3%82%92%E6%B8%A1%E3%81%99%EF%BC%8F%E5%8F%97%E3%81%91%E5%8F%96%E3%82%8B%E3%81%A8%E3%81%84%E3%81%86%E3%81%93%E3%81%A8\">#</a></h3>\n<p>利用者は本人確認をしているとはいえ、自宅の鍵を他人に渡して自由に使わせるってどんな気分だろうなーと思いました。自分ならとてもムリ。それを超えるメリット（異文化コミュニケーションとか？）があるということでしょうか。</p>\n<p><img src=\"/img/posts/airbnb_first_impression_01.jpg\" alt=\"\"></p>\n<p>お借りした部屋のホワイトボードには、ここに泊まったゲストの人たちの、ホストへの感謝のことばがたくさん書かれていました。from アメリカ、オーストラリア、フランス、中国、台湾、シンガポール、デンマーク、フィリピンなどなど。僕も足させてもらいましたよ、日本語でｗ</p>\n<h2 id=\"airbnb-%E3%82%92%E3%81%BE%E3%81%9F%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%81%84%E3%81%8B\">AirBnB をまた利用したいか <a class=\"direct-link\" href=\"#airbnb-%E3%82%92%E3%81%BE%E3%81%9F%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%81%84%E3%81%8B\">#</a></h2>\n<p>うん、また利用してみたいですね。</p>\n<p>ひとりで、東京に遊びに行く時など、なるべく宿泊費は浮かせたい、けどカプセルホテルじゃイヤだ、というときの選択肢になるでしょう。</p>\n<p>今回は、ホストさんがほとんど干渉して来ないタイプでワタシ的にはとてもありがたかったです。AirBnB の物件には、いろいろな種類の物件があるので、その違いをもっと見てみたいという気もします。</p>\n<p>日頃スタートアップのWebサービスのニュースは見るけど、使う機会はなかなか無いので、もっといろいろ使っていかないとなあとも思ってます。<a href=\"https://www.uber.com/ja/\">Uber</a> も使ってみたいぞ！</p>\n",
      "date_published": "2016-09-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/09/10/joined-xamarin-hads-on-ad-hamamatsu-revenge/",
      "url": "https://blog.amay077.net/blog/2016/09/10/joined-xamarin-hads-on-ad-hamamatsu-revenge/",
      "title": "Xamarinハンズオン浜松(再び) で講師をしました",
      "content_html": "<ul>\n<li><a href=\"http://jaghama.connpass.com/event/37686/\">Xamarinハンズオン浜松(再び) #JXUG #jaghama - connpass</a></li>\n</ul>\n<!--more-->\n<p><a href=\"/blog/2016/07/10/joined_xamarin_hads_on_ad_hamamatsu/\">前回</a> から２ヶ月、「もう一度浜松で開催して欲しい」と要望があったとのことで、前回の田淵さんに代わり、講師役として協力させていただきました。</p>\n<h2 id=\"%E3%83%97%E3%83%AC%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%80%8C%E3%81%95%E3%82%8F%E3%82%84%E3%81%8B%E3%82%92%E9%A3%9F%E3%81%B9%E3%82%8B%E4%BC%9A%E3%80%8D\">プレイベント「さわやかを食べる会」 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AC%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%80%8C%E3%81%95%E3%82%8F%E3%82%84%E3%81%8B%E3%82%92%E9%A3%9F%E3%81%B9%E3%82%8B%E4%BC%9A%E3%80%8D\">#</a></h2>\n<p>今回もウォーミングアップは さわやか です（前回とは違う店だよ）。<br>\n前回は げんこつハンバーグ でしたが、今回は <em>普通の</em> ハンバーグ、こいつもウマイ！！</p>\n<p><img src=\"/img/posts/joined_xamarin_hands_on_ad_hamamatsu_2_01.JPG\" alt=\"\"></p>\n<h2 id=\"%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A\">ハンズオン振り返り <a class=\"direct-link\" href=\"#%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E6%8C%AF%E3%82%8A%E8%BF%94%E3%82%8A\">#</a></h2>\n<p>一応、概要説明の資料はこちらにおいておきますね(前回の講師である田淵さんの資料をほぼ丸パクリですがｗ)。</p>\n<ul>\n<li><a href=\"http://www.slideshare.net/amay077/xamarin-xamarin201609-jxug-jaghama\">Xamarin基礎講座 Xamarinハンズオン(2016.09 浜松) #JXUG #jaghama</a></li>\n</ul>\n<p>今回は約２０名の方に参加していただけました。</p>\n<p>会場がとてもキレイでした、ご協力ありがとうございます、○○鉄道さま！（どこまで公開してよいか分からないから一応伏せといた）</p>\n<p>Windows + Visual Studio の方が多かったのに、私自身が普段 Mac + Xamarin Studio 使いなので、ちょっと不安だなー、と思っていましたが、その通りでした💧</p>\n<p>何名かの人で、 Visual Studio ならでは(?) な問題が発生して、環境が作れなかったりしました。<br>\n本当はその場で解決してあげたかったんですが、Visual Studio のトラブルシューティングの引き出しが少なく…。</p>\n<p>とはいえ、今後も Mac から Windows に乗り換えることは無さそうなので、どうしたもんかなぁ、という感じです。</p>\n<h2 id=\"%E6%89%93%E3%81%A1%E4%B8%8A%E3%81%92\">打ち上げ <a class=\"direct-link\" href=\"#%E6%89%93%E3%81%A1%E4%B8%8A%E3%81%92\">#</a></h2>\n<p>駅前の浜松餃子屋さんで軽く打ち上げ。混んでたためか、餃子の追加注文お断りとのことで、余裕を持って頼んだ結果こうなりました。</p>\n<p><img src=\"/img/posts/joined_xamarin_hands_on_ad_hamamatsu_2_02.JPG\" alt=\"\"></p>\n<p>大人５人だったからなんとか食べきれましたね、浜松餃子も旨かった！</p>\n<h2 id=\"%E3%81%A1%E3%82%87%E3%81%BE%E3%81%A9%E3%81%95%E3%82%93\">ちょまどさん <a class=\"direct-link\" href=\"#%E3%81%A1%E3%82%87%E3%81%BE%E3%81%A9%E3%81%95%E3%82%93\">#</a></h2>\n<p>Microsoft のエバンジェリストであるちょまど(<a href=\"https://twitter.com/chomado\">@chomado</a>)さんも来ていただき、サポートスタッフをお願いしました、ありがとうございました！</p>\n<p>新たな伝説のネタとなって、浜松<strong>市</strong> も大変うれしく思います（^^）</p>\n<ul>\n<li><a href=\"http://togetter.com/li/1020144\">浜松町と浜松 - Togetterまとめ</a></li>\n</ul>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/chomado\">@chomado</a> <br><br>だいたいさ！<br><br>浜松<br>と<br>浜松町<br><br>が全然違うところなんて本当に知らなかったよ！<br><br>会社(日本マイクロソフト品川本社)の隣駅と浜松町だと思ってたら、<br><br>まさかの新幹線ですよ！<br><br>もちろん自費です！</p>&mdash; ちょまど@MS入社してから5ヶ月 (@chomado) <a href=\"https://twitter.com/chomado/status/771907617555828740\">2016年9月3日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">以前も浜松市の勉強会に、浜松町と間違えて登録された方がいましたが、間違いに気づいてキャンセルされました。実際に来られたのは <a href=\"https://twitter.com/chomado\">@chomado</a> さんが初めてです。</p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href=\"https://twitter.com/amay077/status/771913137792491520\">2016年9月3日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>また次回も <s>浜松町と間違えて</s> 来てください！</p>\n<h2 id=\"%E5%9C%B0%E6%96%B9%E3%82%82-xamarin-%E3%81%8C%E3%82%93%E3%81%B0%E3%82%8D%E3%81%86\">地方も Xamarin がんばろう <a class=\"direct-link\" href=\"#%E5%9C%B0%E6%96%B9%E3%82%82-xamarin-%E3%81%8C%E3%82%93%E3%81%B0%E3%82%8D%E3%81%86\">#</a></h2>\n<p>東京・関東あたりは、Xamarin の勉強会を毎月数回やっている感じですが、地方はまだまだ少なめ。</p>\n<p>直近だと、長野県でもくもく会があるそうです。</p>\n<ul>\n<li><a href=\"http://glnagano.connpass.com/event/39782/\">ギークラボ長野 Xamarinもくもく会 - connpass</a></li>\n</ul>\n<p>地方の観光スポットor特産品を釣り餌にしていただけると、ワタシも喰いつきやすいです。<br>\nよろしくおねがいします。</p>\n",
      "date_published": "2016-09-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/08/26/ger_is_network_available_on_xamarin_ios/",
      "url": "https://blog.amay077.net/blog/2016/08/26/ger_is_network_available_on_xamarin_ios/",
      "title": "Xamarin.iOS でインターネット通信が可能かを取得する",
      "content_html": "<p>Xamarin.iOS で、「端末からインターネット通信が可能か？」を調べたい。</p>\n<!--more-->\n<p>Objective-C だと <a href=\"https://github.com/tonymillion/Reachability\">Reachability</a>、swift だと <a href=\"https://github.com/ashleymills/Reachability.swift\">Reachability.swift</a> を使うようだけど、 Xamarin.iOS ではどうするか？</p>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/scientre/20150527/get_network_status_in_swift\">Swift でネットワーク状況を調べる - メモ用紙</a></li>\n</ul>\n<p>Bindingライブラリがあるのかな？と思ったら、サンプルで C# のソースコードが提供されていた。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/recipes/ios/network/reachability/detect_if_network_is_available/\">Detect if Network is Available - Xamarin</a></li>\n</ul>\n<p>の <a href=\"https://github.com/xamarin/monotouch-samples/blob/master/ReachabilitySample/reachability.cs\"><code>reachability.cs</code></a> がそれ。<br>\n（名前から察して Reachability.swift を C# で書きなおしたもの？詳しくは見てないけど。）</p>\n<p>で、このサンプルの <code>Reachability</code> を使うと、以下のような感じで、「インターネット通信が可能か？」を調べられる。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> IsNetworkAvailable<br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">get</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> Reachability<span class=\"token punctuation\">.</span><span class=\"token function\">InternetConnectionStatus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> NetworkStatus<span class=\"token punctuation\">.</span>NotReachable<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>WiFi とかセルラーとか細かいステータスもあるので、あとはコードを見てください。</p>\n",
      "date_published": "2016-08-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/22/customizing_left_button_on_%20NavigationBar_in_using_navigationpage_with_masterdetailpage/",
      "url": "https://blog.amay077.net/blog/2016/07/22/customizing_left_button_on_%20NavigationBar_in_using_navigationpage_with_masterdetailpage/",
      "title": "NavigationPage + MasterDetailPage の時に iOS の NavigationBar の左ボタンをカスタマイズする",
      "content_html": "<p>Xamarin.Forms では、左からスライドして出てくるメニューを持つ画面を <code>MasterDetailPage</code> で作成します。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/xamarin-forms/user-interface/navigation/master-detail-page/\">Master-Detail Page - Xamarin</a></li>\n</ul>\n<p>一方、普通に画面遷移していく場合は ContentPage などを <code>NavigationPage</code> でラップしてあげます。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/xamarin-forms/user-interface/navigation/hierarchical/\">Hierarchical Navigation - Xamarin</a></li>\n</ul>\n<h2 id=\"%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\">やりたいこと <a class=\"direct-link\" href=\"#%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E3%81%93%E3%81%A8\">#</a></h2>\n<p>何がしたいかというと、両者を組み合わせたいんです。こういうことってよくありませんかね？</p>\n<p><img src=\"/img/posts/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_01.png\" alt=\"\"></p>\n<p>起動画面で「新規ユーザー登録」があって、「ユーザー登録画面」を経て、メインの画面に遷移する、メイン画面にはスライドメニューがある、というパターン。これを Xamarin.Forms でやりたいのです。</p>\n<h2 id=\"%E5%95%8F%E9%A1%8C\">問題 <a class=\"direct-link\" href=\"#%E5%95%8F%E9%A1%8C\">#</a></h2>\n<p>ところが、 <code>NavigationPage</code> で遷移していく画面の中に <code>MasterDetailPage</code> があると、 <code>NavigationPage</code> の方が勝ってしまい、ナビゲーションバーには「BACK」ボタンが表示されてしまいます。</p>\n<p><img src=\"/img/posts/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_02.png\" alt=\"\"></p>\n<p>これを消そうと、<code>MasterDetailPage</code> のコンストラクタで <code>NavigationPage.SetHasBackButton(this, false)</code> してみます。</p>\n<p>その結果がこれ。</p>\n<p><img src=\"/img/posts/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_03.png\" alt=\"\"></p>\n<p>Android の方は望む結果になったけど、iOSの方はうーん…、BACKボタンは消えたけど、メニューを表示させるボタンが出ません。</p>\n<p>しょうがないので、iOS の場合だけ、ナビゲーションバーの左ボタンをどうにかして追加してみます。</p>\n<h2 id=\"%E7%A7%81%E3%81%8C%E6%B1%82%E3%82%81%E3%81%A6%E3%81%84%E3%81%9F%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%88customrenderer%E7%B7%A8%EF%BC%89\">私が求めていたソリューション（CustomRenderer編） <a class=\"direct-link\" href=\"#%E7%A7%81%E3%81%8C%E6%B1%82%E3%82%81%E3%81%A6%E3%81%84%E3%81%9F%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%88customrenderer%E7%B7%A8%EF%BC%89\">#</a></h2>\n<p>Xamarin.Forms のお供、CustomRenderer です。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/xamarin-forms/custom-renderer/\">Customizing Controls on Each Platform - Xamarin</a></li>\n<li><a href=\"http://ticktack.hatenablog.jp/entry/2016/06/11/124751\">【Xamarin.Forms】ViewRendererと仲良くなるための簡易チュートリアル - ぴーさんログ</a></li>\n</ul>\n<p><code>MasterDetailPage</code> の iOS向けCustomRenderer を作って、ネイティブ側でナビゲーションバーをカスタマイズしてみます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// CustomMasterDetailRenderer.cs</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MasterDetail<span class=\"token punctuation\">.</span>iOS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>UIKit</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>iOS</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ExportRenderer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MasterDetailPage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CustomMasterDetailRenderer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MasterDetail<span class=\"token punctuation\">.</span>iOS</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomMasterDetailRenderer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PhoneMasterDetailRenderer</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewWillAppear</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> animated<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewWillAppear</span><span class=\"token punctuation\">(</span>animated<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> page <span class=\"token operator\">=</span> Element <span class=\"token keyword\">as</span> <span class=\"token class-name\">MasterDetailPage</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> navigationItem <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>NavigationController<span class=\"token punctuation\">.</span>TopViewController<span class=\"token punctuation\">.</span>NavigationItem<span class=\"token punctuation\">;</span><br>            navigationItem<span class=\"token punctuation\">.</span>LeftBarButtonItems <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIBarButtonItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIBarButtonItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MENU\"</span><span class=\"token punctuation\">,</span> UIBarButtonItemStyle<span class=\"token punctuation\">.</span>Plain<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>                <span class=\"token punctuation\">{</span> <br>                    page<span class=\"token punctuation\">.</span>IsPresented <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>page<span class=\"token punctuation\">.</span>IsPresented<span class=\"token punctuation\">;</span> <br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>「MENU」ってボタンを、ナビゲーションバーの左側に追加しています。<br>\nこんな CustomRenderer を iOS 側のプロジェクトに追加して実行してみます。</p>\n<p><img src=\"/img/posts/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_04.png\" alt=\"\"></p>\n<p>オーケーオーケー、これが私が求めていたソリューションです。</p>\n<h2 id=\"%E7%A7%81%E3%81%8C%E6%B1%82%E3%82%81%E3%81%A6%E3%81%84%E3%81%9F%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%88effects%E7%B7%A8%EF%BC%89\">私が求めていたソリューション（Effects編） <a class=\"direct-link\" href=\"#%E7%A7%81%E3%81%8C%E6%B1%82%E3%82%81%E3%81%A6%E3%81%84%E3%81%9F%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%88effects%E7%B7%A8%EF%BC%89\">#</a></h2>\n<p>が、CustomRenderer にはいくつか考えなければならないことがあります。</p>\n<ul>\n<li>上で作った <code>CustomMasterDetailRenderer.cs</code> は <code>PhoneMasterDetailRenderer</code> というクラスを継承しています。が、実はこれは iPhone 用で、実はタブレット（iPad）用に <code>TabletMasterDetailRenderer</code> というクラスもあります。これの CustomRenderer も用意しなければなりませんか？</li>\n<li>CustomRenderer はベースとなる ViewRenderer を「継承」して作ります。そして C# は多重継承を許していません、この意味が分かるな？別の機能を拡張したいと思ったら<code>CustomMasterDetailRenderer</code>から派生させるしかなくなります。</li>\n</ul>\n<p>で、 Xamarin.Forms には、v2.1 から既存機能の拡張に Effects という選択肢が加わりました。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/xamarin-forms/effects/\">Customizing Controls with Effects - Xamarin</a></li>\n<li><a href=\"http://ticktack.hatenablog.jp/entry/2016/01/26/020248\">【Xamarin.Forms 2.1.0(プレビュー)】Effects - ぴーさんログ</a></li>\n</ul>\n<p>では、<code>CustomMasterDetailRenderer.cs</code> を Effects に変えてみましょう。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// CustomMasterDetailEffect.cs</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MasterDetail<span class=\"token punctuation\">.</span>iOS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>UIKit</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>iOS</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ResolutionGroupName</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"mycompany\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">ExportEffect</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CustomMasterDetailEffect</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"CustomMasterDetailEffect\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MasterDetail<span class=\"token punctuation\">.</span>iOS</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomMasterDetailEffect</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PlatformEffect</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnAttached</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> page <span class=\"token operator\">=</span> Element <span class=\"token keyword\">as</span> <span class=\"token class-name\">MasterDetailPage</span><span class=\"token punctuation\">;</span><br>            page<span class=\"token punctuation\">.</span>Appearing <span class=\"token operator\">+=</span> Page_Appearing<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnDetached</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> page <span class=\"token operator\">=</span> Element <span class=\"token keyword\">as</span> <span class=\"token class-name\">MasterDetailPage</span><span class=\"token punctuation\">;</span><br>            page<span class=\"token punctuation\">.</span>Appearing <span class=\"token operator\">-=</span> Page_Appearing<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Page_Appearing</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> vc <span class=\"token operator\">=</span> <span class=\"token function\">GetParentViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> page <span class=\"token operator\">=</span> Element <span class=\"token keyword\">as</span> <span class=\"token class-name\">MasterDetailPage</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> navigationItem <span class=\"token operator\">=</span> vc<span class=\"token punctuation\">.</span>NavigationController<span class=\"token punctuation\">.</span>TopViewController<span class=\"token punctuation\">.</span>NavigationItem<span class=\"token punctuation\">;</span><br>            navigationItem<span class=\"token punctuation\">.</span>LeftBarButtonItems <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIBarButtonItem<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIBarButtonItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MENU\"</span><span class=\"token punctuation\">,</span> UIBarButtonItemStyle<span class=\"token punctuation\">.</span>Plain<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>                <span class=\"token punctuation\">{</span> <br>                    page<span class=\"token punctuation\">.</span>IsPresented <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>page<span class=\"token punctuation\">.</span>IsPresented<span class=\"token punctuation\">;</span> <br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token return-type class-name\">UIViewController</span> <span class=\"token function\">GetParentViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">UIResponder</span> responder <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Container<span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>responder <span class=\"token operator\">=</span> responder<span class=\"token punctuation\">.</span>NextResponder<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>responder <span class=\"token keyword\">is</span> <span class=\"token class-name\">UIViewController</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>UIViewController<span class=\"token punctuation\">)</span>responder<span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Effect は、 <code>ResolutionGroupName</code> と <code>ExportEffect</code> で定義した名称を使って、PCL側プロジェクトで Page に追加します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// RootPage.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RootPage</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MasterDetailPage</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> RootPage <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        NavigationPage<span class=\"token punctuation\">.</span><span class=\"token function\">SetHasBackButton</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// Effect を追加する</span><br>        Effects<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Effect<span class=\"token punctuation\">.</span><span class=\"token function\">Resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mycompany.CustomMasterDetailEffect\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 以下省略</span><br></code></pre>\n<p><img src=\"/img/posts/customizing_left_navvigationbar_button_in_masterdetail_with_navigation_pages_05.png\" alt=\"\"></p>\n<p>こちらも、CustomRenderer と同じことができました。</p>\n<p>が、ちょっと黒魔術っぽいの使ってます。</p>\n<ul>\n<li><code>Effects.Container</code> から取得できるのは <code>UIView</code> です。親の <code>UIViewController</code> を得るには、 <code>GetParentViewController()</code> でやってるような事をしなければなりません</li>\n<li>CustomRenderer はそれ自体は <code>ViewController</code> だったので <code>ViewWillAppear()</code> など画面のライフサイクルコールバックを override することができました。が、Effects から ViewController のライフサイクルイベントをハンドリングできません。代わりに Xamarin.Forms 側の <code>Page</code> のライフサイクルから <code>Appearing</code> イベントで処理するようにしています。そのため、「MENU」ボタンが表示されるタイミングが若干遅れます。</li>\n</ul>\n<h2 id=\"customrenderer-%E3%81%A8-effects-%E3%80%81%E3%81%A9%E3%81%A1%E3%82%89%E3%82%92%E4%BD%BF%E3%81%88%E3%81%B0%E3%81%84%E3%81%84%E3%81%AE%EF%BC%9F\">CustomRenderer と Effects 、どちらを使えばいいの？ <a class=\"direct-link\" href=\"#customrenderer-%E3%81%A8-effects-%E3%80%81%E3%81%A9%E3%81%A1%E3%82%89%E3%82%92%E4%BD%BF%E3%81%88%E3%81%B0%E3%81%84%E3%81%84%E3%81%AE%EF%BC%9F\">#</a></h2>\n<ul>\n<li>CustomRenderer はできる事は多いが、複数の CustomRenderer を適用することはできない</li>\n<li>Effects はできる事は少ないが、複数の機能拡張を同時に適用できる</li>\n</ul>\n<p>以上を考えると、</p>\n<ol>\n<li>まずあなたの行いたいことが Effects で実現できないか、試してみる</li>\n<li>Effects でできないレベルなら CustomRenderer を選択する</li>\n</ol>\n<p>となるでしょう。</p>\n<p>本件のネタは、 Effects ではかなりムリをして実現しているので、CustomRenderer の方が相応しいと思われます。<br>\nが、CustomRenderer はここぞという時にとっておきたい気もします。<br>\nこのさじ加減は、作るアプリの規模・深度、汎用性、再利用性などによって変わってくるでしょう。Effects の方が汎用性・再利用性は高いですが、ネイティブのUIパーツをごっそり入れ替えるような深い事は、CustomRenderer でなければできません。</p>\n<p>今回のプログラムは Github に上げてあります。（<code>CustomMasterDetailRenderer.cs</code> はコメントアウトしてあって、Effects の方を活かしてます。）</p>\n<ul>\n<li><a href=\"https://github.com/amay077/XFNavigationWithMasterDetailSample/blob/master/README.md\">XFNavigationWithMasterDetailSample/README.md at master · amay077/XFNavigationWithMasterDetailSample</a></li>\n</ul>\n<p>私は「Effects で頑張りたい派」かな。</p>\n",
      "date_published": "2016-07-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/19/comparison_async_logic_with_java_swift_xamarin/",
      "url": "https://blog.amay077.net/blog/2016/07/19/comparison_async_logic_with_java_swift_xamarin/",
      "title": "非同期処理の書き方を Java と Swift と Xamarin で比較する",
      "content_html": "<p>「重たい処理を非同期で実行して、結果をメインスレッドで画面に表示」を、</p>\n<!--more-->\n<ul>\n<li>Android-Java</li>\n<li>iOS-Swift</li>\n<li>Xamarin(Android も iOS も同じ)</li>\n</ul>\n<p>で比較。</p>\n<hr>\n<h2 id=\"android\">Android <a class=\"direct-link\" href=\"#android\">#</a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">AsyncTask</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> p<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// ワーカースレッド</span><br>            <span class=\"token keyword\">long</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>                ret <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// UIスレッド</span><br>            text1<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<h2 id=\"swift\">Swift <a class=\"direct-link\" href=\"#swift\">#</a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@IBAction</span> func <span class=\"token function\">onTouchUpInside</span><span class=\"token punctuation\">(</span>sender<span class=\"token operator\">:</span> <span class=\"token class-name\">AnyObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    weak <span class=\"token keyword\">var</span> weakSelf <span class=\"token operator\">=</span> self<br>    <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span><span class=\"token function\">dispatch_get_global_queue</span><span class=\"token punctuation\">(</span><br>        DISPATCH_QUEUE_PRIORITY_DEFAULT<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// ワーカースレッド</span><br>        <span class=\"token keyword\">var</span> ret<span class=\"token operator\">:</span><span class=\"token class-name\">Int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><br>        <span class=\"token keyword\">for</span> i in <span class=\"token number\">0.</span><span class=\"token punctuation\">.</span><span class=\"token number\">.1000000000</span> <span class=\"token punctuation\">{</span><br>            ret <span class=\"token operator\">+=</span> i<br>        <span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span><span class=\"token function\">dispatch_get_main_queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// UIスレッド</span><br>            weakSelf<span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>label1<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<h2 id=\"xamarin(android-%E3%82%82-ios-%E3%82%82)\">Xamarin(Android も iOS も) <a class=\"direct-link\" href=\"#xamarin(android-%E3%82%82-ios-%E3%82%82)\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">FatProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Task<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Run</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">long</span></span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">long</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>        ret <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>button1<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ret <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">FatProc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ワーカースレッド</span><br>    label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// UIスレッド</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<h2 id=\"xamarin-%E3%81%AF%E3%81%84%E3%81%84%E3%81%9E%EF%BC%81\">Xamarin はいいぞ！ <a class=\"direct-link\" href=\"#xamarin-%E3%81%AF%E3%81%84%E3%81%84%E3%81%9E%EF%BC%81\">#</a></h2>\n",
      "date_published": "2016-07-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/18/xamarin_forms_googlemaps_v1_4_0_released/",
      "url": "https://blog.amay077.net/blog/2016/07/18/xamarin_forms_googlemaps_v1_4_0_released/",
      "title": "カスタムマーカーに対応した Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました",
      "content_html": "<p>Xamarin.Forms.GoogleMaps v1.4.0 をリリースしました。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/1.4.0\">NuGet Xamarin.Forms.GoogleMaps 1.4.0</a></li>\n</ul>\n<p>待望？のカスタムマーカーに対応しました。</p>\n<p><img src=\"/img/posts/xamarin_forms_googlemaps_v1_4_0_released_001.png\" alt=\"image001\"></p>\n<h2 id=\"%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\">カスタムマーカーの使い方 <a class=\"direct-link\" href=\"#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%A0%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h2>\n<p><code>Pin.Icon</code> に <code>BitmapDescriptorFactory</code> により生成される <code>BitmapDescriptor</code> を設定します。</p>\n<p><code>BitmapDescriptorFactory</code> の３つのファクトリメソッドにより、<br>\n「デフォルトマーカーの色を変える」「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」<br>\nの３つが使用できます。</p>\n<h3 id=\"%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AE%E8%89%B2%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B\">デフォルトマーカーの色を変える <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E3%81%AE%E8%89%B2%E3%82%92%E5%A4%89%E3%81%88%E3%82%8B\">#</a></h3>\n<p><a href=\"https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_marker.html?hl=ja#ae320cb082a68c22eb1f37955f8e56228\"><code>iOS:GMSMarker.markerImageWithColor</code></a>, <a href=\"https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float)\"><code>Android:BitmapDescriptorFactory.defaultMarker</code></a> に対応する、既定のマーカー形状の色のみを変える機能です。</p>\n<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">pin<span class=\"token punctuation\">.</span>Icon <span class=\"token operator\">=</span> BitmapDescriptorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">DefaultMarker</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>Pink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E6%AF%8E%E3%81%AE%E7%94%BB%E5%83%8F%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\">プラットフォーム毎の画像リソースを使用する <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E6%AF%8E%E3%81%AE%E7%94%BB%E5%83%8F%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\">#</a></h3>\n<p><a href=\"https://developers.google.com/maps/documentation/ios-sdk/marker?hl=ja#_7\"><code>iOS:UIImage.imageNamed</code></a>, <a href=\"https://developers.google.com/android/reference/com/google/android/gms/maps/model/BitmapDescriptorFactory.html?hl=ja#defaultMarker(float)\"><code>Android:BitmapDescriptorFactory.fromAsset</code></a> に対応する、プラットフォーム固有の画像リソースを、マーカー画像として使用する機能です。</p>\n<p>以下のように、 <code>BitmapDescriptorFactory.FromBundle(string)</code> メソッドを使用します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">pin<span class=\"token punctuation\">.</span>Icon <span class=\"token operator\">=</span> BitmapDescriptorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FromBundle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"image01.png\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>引数の bundleName は、 <strong>同じ名称で</strong> 、プラットフォーム毎に次のように用意されている必要があります。</p>\n<h4 id=\"android-%E3%81%AE%E5%A0%B4%E5%90%88\">Android の場合 <a class=\"direct-link\" href=\"#android-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h4>\n<p>Android側のプロジェクトの <code>Assets</code> ディレクトリ内に <code>image01.png</code> を追加し、 Build Action を ”Android Asset” に設定します。</p>\n<p><img src=\"/img/posts/xamarin_forms_googlemaps_v1_4_0_released_002.png\" alt=\"image001\"></p>\n<h4 id=\"ios-%E3%81%AE%E5%A0%B4%E5%90%88\">iOS の場合 <a class=\"direct-link\" href=\"#ios-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h4>\n<p>iOS側のプロジェクト <code>image01.png</code> を追加し、 Build Action を ”BundleResource” に設定します。</p>\n<p><img src=\"/img/posts/xamarin_forms_googlemaps_v1_4_0_released_003.png\" alt=\"image001\"></p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E3%81%AE%E7%94%BB%E5%83%8F%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\">共通の画像リソースを使用する <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A%E3%81%AE%E7%94%BB%E5%83%8F%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\">#</a></h3>\n<p>画像を <code>Stream</code> を直接指定できる、機能です。</p>\n<p>以下のように、 <code>BitmapDescriptorFactory.DefaultMarker(Color)</code> メソッドを使用します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// PCLプロジェクトに EmbeddedResouece として追加した \"marker01.png\" を読み込んで Stream 化</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> assembly <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">CustomPinsPage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetTypeInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Assembly<span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> stream <span class=\"token operator\">=</span> assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetManifestResourceStream</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"XFGoogleMapSample.marker01.png\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Stream をマーカーに設定</span><br>pin<span class=\"token punctuation\">.</span>Icon <span class=\"token operator\">=</span> BitmapDescriptorFactory<span class=\"token punctuation\">.</span><span class=\"token function\">FromStream</span><span class=\"token punctuation\">(</span>stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"%E3%80%90%E6%B3%A8%E6%84%8F%E3%80%91%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E6%AF%8E%E3%81%AE%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AE%E9%81%95%E3%81%84\">【注意】プラットフォーム毎のマーカーサイズの違い <a class=\"direct-link\" href=\"#%E3%80%90%E6%B3%A8%E6%84%8F%E3%80%91%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E6%AF%8E%E3%81%AE%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AE%E9%81%95%E3%81%84\">#</a></h2>\n<p>「プラットフォーム毎の画像リソースを使用する」「共通の画像リソースを使用する」で見られる現象なのですが、iOS と Android では <strong>同じサイズの画像を指定しているのに iOS の方が大きく描画されます</strong></p>\n<p><img src=\"/img/posts/xamarin_forms_googlemaps_v1_4_0_released_004.png\" alt=\"image001\"></p>\n<p>なぜこうなるのか分かりませんが、 <a href=\"https://developers.google.com/maps/documentation/ios-sdk/intro?hl=ja\">Google Maps SDK for iOS</a> と <a href=\"https://developers.google.com/maps/documentation/android-api/intro?hl=ja\">Google Maps Android API</a> を直接使用した時もこうなるので、両者の仕様というかプラットフォーム自体の仕様なのかも知れません。</p>\n<p>特に <code>BitmapDescriptorFactory.FromStream</code> を使用した時には使い勝手が悪いのですが、「ネイティブの Google Maps SDK の機能を共通APIでラップする」のが第一目標なので、とりあえず画像を何も加工しない実装でリリースしました。</p>\n<p>何か原因などについてヒントがある方は</p>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues/40\">Why custom pin icon in iOS bigger than Android? · Issue #40 · amay077/Xamarin.Forms.GoogleMaps</a></li>\n</ul>\n<p>に書いてもらえると助かります（日本語で大丈夫です）。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\">サンプルプログラム <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\">#</a></h2>\n<p><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample\">XFGoogleMapSample</a> の <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/blob/master/XFGoogleMapSample/XFGoogleMapSample/CustomPinsPage.xaml.cs\"><code>CustomPinsPage.xaml.cs</code></a> でこれらの機能を使用しています。</p>\n<p>是非使ってみてください。よければ <a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Github リポジトリ</a> に Star ください。</p>\n",
      "date_published": "2016-07-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/15/comparison_on_click_with_java_swift_xamarin/",
      "url": "https://blog.amay077.net/blog/2016/07/15/comparison_on_click_with_java_swift_xamarin/",
      "title": "ボタンをタップした時に○○する、を Java と Swift と Xamarin で比較する",
      "content_html": "<p>たぶん一番書くやつを</p>\n<!--more-->\n<ul>\n<li>Android-Java</li>\n<li>Android-Xamarin</li>\n<li>iOS-Swift</li>\n<li>iOS-Xamarin</li>\n</ul>\n<p>で比較。</p>\n<hr>\n<h2 id=\"android-java\">Android-Java <a class=\"direct-link\" href=\"#android-java\">#</a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//MainActivity.java</span><br>button1<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        label1<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pushed!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<h2 id=\"xamarin.android(c%23)\">Xamarin.Android(C#) <a class=\"direct-link\" href=\"#xamarin.android(c%23)\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//MainActivity.cs</span><br>buttonOk<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><br>    <span class=\"token operator\">=></span> label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"pushed!!\"</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<h2 id=\"ios-swift\">iOS-Swift <a class=\"direct-link\" href=\"#ios-swift\">#</a></h2>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//ViewController.swift</span><br>buttonOK<span class=\"token punctuation\">.</span><span class=\"token function\">addTarget</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> <br>    #<span class=\"token function\">selector</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewController</span><span class=\"token punctuation\">.</span><span class=\"token function\">onTouch</span><span class=\"token punctuation\">(</span>_<span class=\"token operator\">:</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>    forControlEvents<span class=\"token operator\">:</span> <span class=\"token punctuation\">.</span>TouchUpInside<span class=\"token punctuation\">)</span><br>・・・<br>func <span class=\"token function\">onTouch</span><span class=\"token punctuation\">(</span>sender<span class=\"token operator\">:</span> <span class=\"token class-name\">AnyObject</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    label1<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> <span class=\"token string\">\"pushed!!\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<hr>\n<h2 id=\"xamarin.ios(c%23)\">Xamarin.iOS(C#) <a class=\"direct-link\" href=\"#xamarin.ios(c%23)\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//ViewColtroller.cs</span><br>buttonOk<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <br>    <span class=\"token operator\">=></span> label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"pushed!!\"</span><span class=\"token punctuation\">;</span></code></pre>\n<hr>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p><strong>Xamarin はいいぞ！</strong></p>\n",
      "date_published": "2016-07-15T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/10/joined_xamarin_hads_on_ad_hamamatsu/",
      "url": "https://blog.amay077.net/blog/2016/07/10/joined_xamarin_hads_on_ad_hamamatsu/",
      "title": "Xamarin ハンズオン浜松に参加しました #JXUG #jaghama",
      "content_html": "<ul>\n<li><a href=\"http://jaghama.connpass.com/event/33735/\">Xamarinハンズオン浜松 #JXUG #jaghama - connpass</a></li>\n</ul>\n<!--more-->\n<p>日本Androidの会 浜松支部の市川(<a href=\"https://twitter.com/macha1972\">@macha1972</a>)さんからのご相談を受けて、JXUG の田淵さんに講師を依頼、 <a href=\"https://groups.google.com/forum/#!forum/android-hamamatsu\">日本Android浜松支部(#jaghama)</a>と <a href=\"http://jxug.org/\">Japan Xamarin Users Group (#jxug)</a> の共催という形で、 Xamarin 勉強会（ハンズオン）を浜松市で開催しました。</p>\n<h2 id=\"%E3%83%97%E3%83%AC%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%80%8C%E3%81%95%E3%82%8F%E3%82%84%E3%81%8B%E3%82%92%E9%A3%9F%E3%81%B9%E3%82%8B%E4%BC%9A%E3%80%8D\">プレイベント「さわやかを食べる会」 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AC%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%80%8C%E3%81%95%E3%82%8F%E3%82%84%E3%81%8B%E3%82%92%E9%A3%9F%E3%81%B9%E3%82%8B%E4%BC%9A%E3%80%8D\">#</a></h2>\n<p>兼ねてより「さわやかに行きたい！」という声が聞かれていた（僕も食べたかった！）ので、プレイベントとして「さわやかを食べる会」も行いました。</p>\n<p>言い出しっぺだったので、浜松駅からさわやかまでの送迎の為の車を出しました。</p>\n<p>久しぶりのさわやかだったので、定番のげんこつを外せず今回は断念した さわやかバーガー のメニュー</p>\n<p><img src=\"/img/posts/joined_xamarin_hands_on_ad_hamamatsu_01.jpg\" alt=\"\"></p>\n<p>げんこつハンバーグ第一形態</p>\n<p><img src=\"/img/posts/joined_xamarin_hands_on_ad_hamamatsu_02.jpg\" alt=\"\"></p>\n<p>げんこつハンバーグ第二形態</p>\n<p><img src=\"/img/posts/joined_xamarin_hands_on_ad_hamamatsu_03.jpg\" alt=\"\"></p>\n<p>久しぶりだった、やっぱり旨かった、肉を喰ってるッ！って感じがした。</p>\n<h2 id=\"xamarin-%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3\">Xamarin ハンズオン <a class=\"direct-link\" href=\"#xamarin-%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3\">#</a></h2>\n<p><a href=\"http://jxug.connpass.com/event/30152/\">JXUGC #14 Xamarin ハンズオン 名古屋大会</a> でもサポートスタッフをさせていただいてたので、だいたいの要領は同じ。</p>\n<p>当時にくらべて、Xamarin も Visual Studio もバージョンアップしていて、導入時のエラーはだいぶ減ってきたかなあという印象。</p>\n<p>それでも、「Android SDK で Android N を入れているとビルドエラーになる」とか、新しいハマりポイントも出てきたので、やっぱり要注意。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">これ、5/30名の確率でハマってる。Frequently Asked Questions にしてよいでしょう？レベル <a href=\"https://t.co/DXklIE2FBq\">https://t.co/DXklIE2FBq</a> <a href=\"https://twitter.com/hashtag/JXUG?src=hash\">#JXUG</a> <a href=\"https://twitter.com/hashtag/xamarin?src=hash\">#xamarin</a> <a href=\"https://twitter.com/hashtag/jaghama?src=hash\">#jaghama</a></p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href=\"https://twitter.com/amay077/status/751653596861566976\">2016年7月9日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>このへんは、</p>\n<ul>\n<li><a href=\"https://github.com/ytabuchi/XamarinHOL/issues\">Issues · ytabuchi/XamarinHOL</a></li>\n</ul>\n<p>に上げておいて、継続的に改良していけるとよいな。</p>\n<p><a href=\"https://github.com/ytabuchi/XamarinHOL\">ハンズオン資料</a>が素晴らしいので、躓くのはほとんど最初だけだよねー、ということで、時間の最後らへんは、</p>\n<p>田淵さんからT(enpura)ポイントをもらったり、</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/amay077\">@amay077</a> さんに public Command(Action execute, Func&lt;bool&gt; canExecute); を教えていただいた！！！！！Tポイント!!! <a href=\"https://twitter.com/hashtag/JXUG?src=hash\">#JXUG</a></p>&mdash; 田淵 義人＠エクセルソフト (@ytabuchi) <a href=\"https://twitter.com/ytabuchi/status/751682059186216960\">2016年7月9日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>「そこで Rx ですよ！」とか言っていた。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">田淵さんが「2つのデータのいずれかが変わった時に、画面のとある項目を更新する必要がある」と言われたので、<br>「そこで Rx ですよ」とだけ言っておいた。 <a href=\"https://twitter.com/hashtag/jxug?src=hash\">#jxug</a></p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href=\"https://twitter.com/amay077/status/751691630172712960\">2016年7月9日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>スパルタだったけど、時間的にも少し余裕があったかな。皆さん完走できていたと思います。</p>\n<h2 id=\"lt\">LT <a class=\"direct-link\" href=\"#lt\">#</a></h2>\n<p>先日より開発中の Xamarin.Forms.GoogleMaps を Qiita のスライドモードを使って LT しました。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/feb5353bf8fb8b8c866d\">Xamarin.Forms 用の地図ライブラリつくった - Qiita</a></li>\n</ul>\n<h2 id=\"%E6%87%87%E8%A6%AA%E4%BC%9A%E3%80%81%E3%82%A2%E3%83%95%E3%82%BF%E3%83%BC%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88\">懇親会、アフターイベント <a class=\"direct-link\" href=\"#%E6%87%87%E8%A6%AA%E4%BC%9A%E3%80%81%E3%82%A2%E3%83%95%E3%82%BF%E3%83%BC%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88\">#</a></h2>\n<p>終わったら懇親会、やっぱ地方はいいな！なんとなく落ち着くのです（車出したのでお酒は飲んでいません）。</p>\n<p>会の途中、流れでアプリ紹介タイムになり、 <a href=\"https://twitter.com/fxxk_authority\">しんす</a> さんの Multi Function Display というアプリがおもしろそうだった（他の方紹介できずごめんなさい）。</p>\n<ul>\n<li><a href=\"https://www.microsoft.com/ja-jp/store/apps/multi-function-display/9nblggh6268l\">Multi Function Display – Microsoft ストアの Windows アプリ</a></li>\n</ul>\n<p>夜、車のダッシュボードにおいて、速度とかをフロンドガラスに写り込ませて見られるのだそうで、カッコいい！MADOSMA の使いみちに困っていたので使ってみます！</p>\n<p>懇親会の後、数名の方でラーメンを食べに行くとのこと。お腹もいい感じだったので帰ろうかなと思っていたのですが、 <strong>「三太」</strong> に行くと聞いて手のひら返し、ご一緒させていただきました。浜松来たらほぼ必ず行くんですよ、三太。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">俺の中の浜松のソウルフード「三太のラーメン」の誘惑に負けた <a href=\"https://twitter.com/hashtag/jxug?src=hash\">#jxug</a> <a href=\"https://twitter.com/hashtag/jaghama?src=hash\">#jaghama</a> (@ 三太 モール街店 in 浜松市, 静岡県) <a href=\"https://t.co/rhxGxhqfyZ\">https://t.co/rhxGxhqfyZ</a></p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href=\"https://twitter.com/amay077/status/751746459469541376\">2016年7月9日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>約30名も集まっていただいて感謝！</p>\n<p>学生さん多かった印象、休憩時間に「もしかしてみなさんは昭和生まれなんですか？」とぶっ込まれた時は、場が軽く凍りましたねｗ</p>\n<p>東京のどでかい勉強会もいいけど、地方の十数名くらいの勉強会の方がどっちかというと落ち着きます（^ ^）</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">さわやかうまかった。次は 生しらす か 桜エビ を食べたいです。</p>&mdash; 4度目S+のあめいスピナーリミックス (@amay077) <a href=\"https://twitter.com/amay077/status/751617505202843648\">2016年7月9日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
      "date_published": "2016-07-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/09/gain_transient_in_xamarin_android/",
      "url": "https://blog.amay077.net/blog/2016/07/09/gain_transient_in_xamarin_android/",
      "title": "Xamarin.Android で音楽の音量を下げてから効果音を再生する",
      "content_html": "<p>カーナビでよくある、音楽流しながらナビしてると、ガイダンス中は音楽のボリュームを一時的に下げて、案内の音声を再生するってやつ。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://ja.stackoverflow.com/questions/27452/%e3%82%b9%e3%83%9e%e3%83%9b%e3%82%a2%e3%83%97%e3%83%aa%e8%b5%b7%e5%8b%95%e6%99%82ios-android%e3%81%ab%e5%86%8d%e7%94%9f%e4%b8%ad%e3%81%ae%e9%9f%b3%e6%a5%bd%e3%82%92%e5%81%9c%e6%ad%a2%e3%81%95%e3%81%9b%e3%82%8b%e6%96%b9%e6%b3%95/27459#27459\">スマホアプリ起動時(iOS/Android)に再生中の音楽を停止させる方法 - スタック・オーバーフロー</a></li>\n</ul>\n<p>に回答したので、その関連でやってみた。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//MainActivity.cs</span><br><span class=\"token punctuation\">[</span><span class=\"token function\">Activity</span><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"AudioFocusSample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Icon <span class=\"token operator\">=</span> <span class=\"token string\">\"@mipmap/icon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AudioManager<span class=\"token punctuation\">.</span>IOnAudioFocusChangeListener</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> audioManager <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>AudioManager<span class=\"token punctuation\">)</span><span class=\"token function\">GetSystemService</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>AudioService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 先に効果音を読み込んでおく</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> soundPool <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SoundPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">.</span>Music<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> soundId <span class=\"token operator\">=</span> soundPool<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>ApplicationContext<span class=\"token punctuation\">,</span> Resource<span class=\"token punctuation\">.</span>Raw<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// SoundPool は再生完了のコールバックがないので、事前に長さを得ておく</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> duration <span class=\"token operator\">=</span> <span class=\"token function\">GetSoundDuration</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Raw<span class=\"token punctuation\">.</span>cat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>buttonRequestFocus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// ダッキングを許可する AudioFocus を要求</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> audioManager<span class=\"token punctuation\">.</span><span class=\"token function\">RequestAudioFocus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> Stream<span class=\"token punctuation\">.</span>Music<span class=\"token punctuation\">,</span> AudioFocus<span class=\"token punctuation\">.</span>GainTransientMayDuck<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result <span class=\"token operator\">==</span> AudioFocusRequest<span class=\"token punctuation\">.</span>Granted<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// 効果音を再生する</span><br>                soundPool<span class=\"token punctuation\">.</span><span class=\"token function\">Play</span><span class=\"token punctuation\">(</span>soundId<span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token comment\">// 再生完了まで待つ</span><br>                <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>duration<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token comment\">// AudioFocus を開放</span><br>                audioManager<span class=\"token punctuation\">.</span><span class=\"token function\">AbandonAudioFocus</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 音声の再生長さを得る</span><br>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">long</span></span> <span class=\"token function\">GetSoundDuration</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> rawId<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> player <span class=\"token operator\">=</span> MediaPlayer<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>ApplicationContext<span class=\"token punctuation\">,</span> rawId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> player<span class=\"token punctuation\">.</span>Duration<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// IOnAudioFocusChangeListener の実装（RequestAudioFocus のために必要）</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnAudioFocusChange</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedEnum</span></span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">AudioFocus</span> focusChange<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>       <span class=\"token comment\">// 今回は使用しない</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>効果音 <code>Resource.Raw.cat</code> は、 <a href=\"http://on-jin.com/sound/index.php\">On-Jin ～音人～</a> さんのを使わせてもらいました。</p>\n<p>音量を小さくする＝絞る＝ダッキング、というのがなかなか連想しづらいので辿りつけない。<br>\nAndroid の音声再生は、他に <code>MediaPlayer</code> とか <code>AudioTrack</code> もあるし、リモコンなど外部からの操作のため？に BroadcastReceiver を使わないといけないし。</p>\n<p>サンプルアプリはこちら。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/AudioFocusSample\">amay077/AudioFocusSample</a></li>\n</ul>\n<p>次は Xamarin.iOS でやってみる。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://developer.android.com/training/managing-audio/audio-focus.html\">Managing Audio Focus | Android Developers</a></li>\n<li><a href=\"http://dev.classmethod.jp/smartphone/android/android-tips-48-soundpool-mediaplayer/\">Android Tips #48 BGM や効果音を再生する ｜ Developers.IO</a></li>\n<li><a href=\"http://ameblo.jp/negiiiimo/entry-11488832997.html\">Managing Audio Playback part2｜Android開発記録雑記</a></li>\n<li><a href=\"http://qiita.com/KeithYokoma/items/3896f5934478fa560a50\">音を制御する - AudioManager - Qiita</a></li>\n<li><a href=\"https://developer.amazon.com/public/ja/solutions/devices/fire-tv/docs/managing-audio-focus\">Fire TV でのオーディオフォーカスの管理 - アマゾン アプリ 開発者ポータル</a></li>\n</ul>\n",
      "date_published": "2016-07-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/08/changed-jobs/",
      "url": "https://blog.amay077.net/blog/2016/07/08/changed-jobs/",
      "title": "転職してました",
      "content_html": "<p>気がついたら</p>\n<!--more-->\n<p>転職していました、 7/1 から？</p>\n<p>転職しましたが、何も変わっていません、仕事内容も環境も待遇も。</p>\n<p>全社員フルリモートの会社になったので、相変わらず家でゴロゴロしています。</p>\n<p>今後ともどうぞよろしくお願いします。</p>\n<ul>\n<li><a href=\"https://nepula.net/pc/\">Nepula ネプラ｜基幹システムをクラウド化、収益化</a></li>\n</ul>\n",
      "date_published": "2016-07-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/07/06/version-up-xamarin-forms-project-from-1-2-to-2-3/",
      "url": "https://blog.amay077.net/blog/2016/07/06/version-up-xamarin-forms-project-from-1-2-to-2-3/",
      "title": "Xamarin.Forms のバージョンを 1.2 から 2.3 に上げた時のエラー対処法",
      "content_html": "<p>プロジェクトで使ってる Xamarin.Forms のバージョンを「1.2.3.6257」から「2.3.0.107」に上げたら、ビルドでエラーが発生するようになった。</p>\n<!--more-->\n<p>ググッてみると、「Xamarin Studio を再起動」とか「ソリューションを開き直せ」とか書いてある。<br>\nホンマかいな？と思いながら実施すると、確かになんか変化が。</p>\n<p>エラーメッセージが変わっただけだけど。</p>\n<blockquote>\n<p>Error initializing task XamlG: Not registered task XamlG.</p>\n</blockquote>\n<p>とか、</p>\n<blockquote>\n<p>Error initializing task FixedCreateCSharpManifestResourceName: Not registered task FixedCreateCSharpManifestResourceName.</p>\n</blockquote>\n<p>調べたときに見た情報の中には .csproj ファイルがどーのこーの書いてあったので、開いてみると、何やら以前のバージョンが残ってた。</p>\n<p>ので、その行を削除してソリューションを開き直し、ビルドしたらエラーはなくなった。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\">//xxx.csproj<br>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>$(MSBuildExtensionsPath32)\\Microsoft\\Portable\\$(TargetFrameworkVersion)\\Microsoft.Portable.CSharp.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>これ削除→  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\packages\\Xamarin.Forms.1.2.3.6257\\build\\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\\Xamarin.Forms.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Exists(<span class=\"token punctuation\">'</span>..\\packages\\Xamarin.Forms.1.2.3.6257\\build\\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\\Xamarin.Forms.targets<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\packages\\Microsoft.Bcl.Build.1.0.21\\build\\Microsoft.Bcl.Build.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Exists(<span class=\"token punctuation\">'</span>..\\packages\\Microsoft.Bcl.Build.1.0.21\\build\\Microsoft.Bcl.Build.targets<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Import</span> <span class=\"token attr-name\">Project</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>..\\packages\\Xamarin.Forms.2.3.0.107\\build\\portable-win+net45+wp80+win81+wpa81+MonoAndroid10+MonoTouch10+Xamarin.iOS10\\Xamarin.Forms.targets<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Exists(<span class=\"token punctuation\">'</span>..\\packages\\Xamarin.Forms.2.3.0.107\\build\\portable-win+net45+wp80+win81+wpa81+MonoAndroid10+MonoTouch10+Xamarin.iOS10\\Xamarin.Forms.targets<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>エラーは、ね。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://rksoftware.wordpress.com/2016/04/24/001-16/\">Xamarin Studio がビルドエラーでビルドできなくなった話 ｜ rksoftware</a></li>\n<li><a href=\"http://stackoverflow.com/questions/27873185/error-error-initializing-task-xamlg-not-registered-task-xamlg\">xamarin - error : Error initializing task XamlG: Not registered task XamlG - Stack Overflow</a></li>\n<li><a href=\"http://stackoverflow.com/questions/34501301/error-compiling-xamarin-forms-new-project\">Error compiling Xamarin Forms new project - Stack Overflow</a></li>\n</ul>\n",
      "date_published": "2016-07-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps/",
      "url": "https://blog.amay077.net/blog/2016/06/27/release-xamarin-forms-googlemaps/",
      "title": "Xamarin.Forms 向けの地図ライブラリ「Xamarin.Forms.GoogleMaps」をリリースしました",
      "content_html": "<p>Xamarin.Forms で使える地図ライブラリは、公式が出している</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Forms.Maps/\">Xamarin.Forms.Maps</a> - Maps models and renderers for Xamarin.Forms</li>\n</ul>\n<p>があるのですが、非常に機能が少ないです（ピンがおけるだけで、図形の描画すらできません）。</p>\n<!--more-->\n<p>なので、別な選択肢としての「Xamarin.Forms向け地図ライブラリ」を開発し始めました。</p>\n<p>それがこちら</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Forms.GoogleMaps/\">Xamarin.Forms.GoogleMaps</a> - Yet another Maps library for Xamarin.Forms that optimized for Google maps.</li>\n</ul>\n<p>です。</p>\n<p>iOS では MapKit に代わり <a href=\"https://developers.google.com/maps/documentation/ios-sdk/?hl=ja\">Google Maps SDK for iOS</a> を使用し、 Android/iOS 共に Google Maps に特化することで、API の共通化を容易にし、恐らくAPI共通化の足枷になっているであろう UWP(Bing maps) のサポートは最小限に留めています。</p>\n<p><img src=\"/img/posts/xamarin_forms_googlemaps_intro_01.png\" alt=\"screenshot1\"></p>\n<h2 id=\"%E7%8F%BE%E5%9C%A8%E3%81%AE%E6%A9%9F%E8%83%BD\">現在の機能 <a class=\"direct-link\" href=\"#%E7%8F%BE%E5%9C%A8%E3%81%AE%E6%A9%9F%E8%83%BD\">#</a></h2>\n<p>現在のバージョンは 1.1.0 。<br>\n公式の Xamarin.Forms.Maps に比べて、ライン・ポリゴン・円を追加できるようになりました。</p>\n<p><img src=\"/img/posts/xamarin_forms_googlemaps_intro_02.png\" alt=\"screenshot2\"></p>\n<p>詳しい比較は</p>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/wiki/Xamarin.Forms.Maps-%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\">Xamarin.Forms.Maps との比較 - Xamarin.Forms.GoogleMaps Wiki</a></li>\n</ul>\n<p>にあります。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\">サンプルプログラム <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0\">#</a></h2>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/tree/master/XFGoogleMapSample\">Xamarin.Forms.GoogleMaps/XFGoogleMapSample - github</a></li>\n</ul>\n<p>にあります。</p>\n<p>Google Maps の APIキーを Android / iOS それぞれで取得する必要があります。</p>\n<ul>\n<li>Android -  <a href=\"http://www.buildinsider.net/mobile/xamarintips/0020\">Xamarin.Androidで地図を表示するには？（Google Maps使用） - Build Insider</a></li>\n<li>iOS - <a href=\"https://developers.google.com/maps/documentation/ios-sdk/?hl=ja\">Google Maps SDK for iOS  ｜  Google Developers</a> の「クイック スタート ステップ」<br>\nをそれぞれ参照してください。</li>\n</ul>\n<h2 id=\"%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9\">オープンソース <a class=\"direct-link\" href=\"#%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9\">#</a></h2>\n<p><a href=\"http://open.xamarin.com/\">Xamarin Open Source SDK</a> により、 Xamarin.Forms のソースコードもオープンソースになったので、 <a href=\"https://github.com/xamarin/Xamarin.Forms/tree/master/Xamarin.Forms.Maps\">Xamarin.Forms/Xamarin.Forms.Maps - github</a> などを Fork して作りました。</p>\n<p>このライブラリ自体もオープンソースであり、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps\">Xamarin.Forms.GoogleMaps: Map library for Xamarin.Forms using Google maps API</a></li>\n</ul>\n<p>で開発しています。（スターを付けてもらえると作者がよろこびます）</p>\n<p><a href=\"https://github.com/amay077/Xamarin.Forms.GoogleMaps/issues\">要望、コメントなど</a>もらえると嬉しいです。よろしくおねがいします。</p>\n",
      "date_published": "2016-06-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles/",
      "url": "https://blog.amay077.net/blog/2016/06/08/xamarin-forms-page-lifecycles/",
      "title": "Xamarin.Forms の画面(Page)のライフサイクルイベントについて",
      "content_html": "<p>ちょっと誤解してた＆情報がなかったのでまとめてみました。</p>\n<!--more-->\n<h2 id=\"%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E3%81%AE%E3%80%8C%E7%94%BB%E9%9D%A2%E3%80%8D%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88\">モバイルアプリでの「画面」の基本的なライフサイクルイベント <a class=\"direct-link\" href=\"#%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E3%81%AE%E3%80%8C%E7%94%BB%E9%9D%A2%E3%80%8D%E3%81%AE%E5%9F%BA%E6%9C%AC%E7%9A%84%E3%81%AA%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88\">#</a></h2>\n<p>まあ Android と iOS についてですが。</p>\n<p>画面が表示される時のイベント（コールバック）は、簡潔には以下のようになります。</p>\n<table>\n<thead>\n<tr>\n<th>順番</th>\n<th>イベント</th>\n<th>iOS(UIViewController)</th>\n<th>Android(Activity)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>画面がロードされる(た)時</td>\n<td>viewDidLoad</td>\n<td>onCreate</td>\n</tr>\n<tr>\n<td>2</td>\n<td>画面が表示される(た)時</td>\n<td>viewDidAppear</td>\n<td>onResume</td>\n</tr>\n<tr>\n<td>3</td>\n<td>画面が非表示になる(った)時</td>\n<td>viewDidDisappear</td>\n<td>onPause</td>\n</tr>\n<tr>\n<td>4</td>\n<td>画面がアンロードされる(た)時</td>\n<td>viewDidUnload</td>\n<td>onDestroy</td>\n</tr>\n</tbody>\n</table>\n<p>厳密にはもっと細かく、〜される前と後が iOS と Android で微妙に異なるのでだいたいこんな感じという程度と思って下さい。</p>\n<p>もう少し細かいイベントは以前調べた以下を参考にしてみてください。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/52a0b0da97fe455abc08\">iOS と Android で画面表示時のコールバックを比較する - Qiita</a></li>\n</ul>\n<h2 id=\"xamarin.forms-%E3%81%A7%E3%81%AE%E7%94%BB%E9%9D%A2%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88\">Xamarin.Forms での画面のライフサイクルイベント <a class=\"direct-link\" href=\"#xamarin.forms-%E3%81%A7%E3%81%AE%E7%94%BB%E9%9D%A2%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%95%E3%82%B5%E3%82%A4%E3%82%AF%E3%83%AB%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88\">#</a></h2>\n<p>Xamarin.Forms では、上表のライフサイクルイベントは、アプリケーション<br>\n(Application) と、画面(Page) のイベントに分かれています。</p>\n<p>表に、Xamarin.Forms を追加してみました。</p>\n<table>\n<thead>\n<tr>\n<th>順番</th>\n<th>イベント</th>\n<th>iOS(UIViewController)</th>\n<th>Android(Activity)</th>\n<th>Xamarin.Forms</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>画面がロードされる(た)時</td>\n<td>viewDidLoad</td>\n<td>onCreate</td>\n<td><a href=\"https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnAppearing()/\">Page.OnAppearing</a></td>\n</tr>\n<tr>\n<td>2</td>\n<td>画面が表示される(た)時</td>\n<td>viewDidAppear</td>\n<td>onResume</td>\n<td><a href=\"https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnResume()/\">Application.OnResume</a> <strong>※要注意</strong></td>\n</tr>\n<tr>\n<td>3</td>\n<td>画面が非表示になる(った)時</td>\n<td>viewDidDisappear</td>\n<td>onPause</td>\n<td><a href=\"https://developer.xamarin.com/api/member/Xamarin.Forms.Application.OnSleep()/\">Application.OnSleep</a></td>\n</tr>\n<tr>\n<td>4</td>\n<td>画面がアンロードされる(た)時</td>\n<td>viewDidUnload</td>\n<td>onDestroy</td>\n<td><a href=\"https://developer.xamarin.com/api/member/Xamarin.Forms.Page.OnDisappearing()/\">Page.OnDisappearing</a></td>\n</tr>\n</tbody>\n</table>\n<p>画面のロード時（<code>viewDidLoad/onCreate</code>）に相当するのは、Xamarin.Forms では <code>OnAppearing</code>、逆にアンロード時は <code>OnDisAppearing</code> です（名称が <code>viewDidAppear</code> に似てるので、画面の表示時かと勘違いしてました）。</p>\n<p>画面の表示／非表示時のイベントは、画面でなく Application クラスの <code>OnResume</code>, <code>OnSleep</code> で提供されます。</p>\n<p>要注意なのは <code>OnResume</code> です。これ、画面が表示される <strong>初回はイベントが発生しません</strong>。<br>\n一度、アプリを背面に退避し、再度前面に持ってきたときに初めて <code>OnResume</code> が呼び出されます。iOS や Android の <code>viewDidAppear / OnResume</code> と同じだと思ってつかうとハマります。</p>\n<p>基本的には、 <code>OnAppearing</code> でリソースの確保を、 <code>OnDisAppearing</code> で解放をすればよさそうです。</p>\n<p>GPS など、電池消費の激しいリソースを使う場合は、アプリが背面へ隠れたら直ちにそのリソースを解放した方がよいです。その場合は <code>OnResume-OnSleep</code> を使いますが、前述の通り、画面初回表示時は <code>OnResume</code> が走らないので、少し工夫が必要です。</p>\n<h2 id=\"%E7%94%BB%E9%9D%A2%E3%81%8C%E5%9B%9E%E8%BB%A2%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82\">画面が回転された時 <a class=\"direct-link\" href=\"#%E7%94%BB%E9%9D%A2%E3%81%8C%E5%9B%9E%E8%BB%A2%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82\">#</a></h2>\n<p>端末を横向きに回転すると、Android では Activity が破棄されて再度生成される事が知られています。</p>\n<p>Xamarin.Forms では Android でもそのような事はなく、 <code>Page.OnSizeAllocated</code> が呼び出されるだけです(iOS も当然同じ)。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/xamarin-forms/working-with/app-lifecycle/\">Working with the App Lifecycle - Xamarin</a></li>\n</ul>\n",
      "date_published": "2016-06-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/05/27/impression-of-decode16/",
      "url": "https://blog.amay077.net/blog/2016/05/27/impression-of-decode16/",
      "title": "de:code 2016 に参加した感想",
      "content_html": "<p>Microsoft の開発者向けイベント <a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/\">de:code 2016</a> に参加させてもらいましたので感想を書きます。</p>\n<!--more-->\n<p>Microsoft のカンファレンスに参加するのは何年ぶりでしょう、パシフィコ横浜でやってた Tech・ED とか Tech・Days 以来です。</p>\n<p>ここ数年 Android や iOS もモバイルアプリ開発ばかりやってきて、 Xamarin で C# に戻ってきて〜って感じだったので、 「Xamarin 以外の Microsoft テクノロジーを広く浅く知る」 という目的で参加しました。</p>\n<h1 id=\"%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%84%9F%E6%83%B3\">セッションの感想 <a class=\"direct-link\" href=\"#%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E6%84%9F%E6%83%B3\">#</a></h1>\n<h2 id=\"day1\">Day1 <a class=\"direct-link\" href=\"#day1\">#</a></h2>\n<h3 id=\"keynote\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/keynote.aspx\">Keynote</a> <a class=\"direct-link\" href=\"#keynote\">#</a></h3>\n<p>なんかこういう全体像まとめるの苦手、というか何番煎じなので、他の人のまとめをみてくれい（爆</p>\n<p>とりあえず、<br>\n<strong>「りんな が想像以上に自然すぎて、LINE で会話してるのをカミさんに見られたら、完全に誤解されそう」</strong><br>\nです。</p>\n<h3 id=\"dev-013-%E3%81%BE%E3%81%A0%E3%81%BE%E3%81%A0%E9%80%B2%E5%8C%96%E3%81%8C%E6%AD%A2%E3%81%BE%E3%82%89%E3%81%AA%E3%81%84%EF%BC%81%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE-microsoft-azure-%E6%9C%80%E6%96%B0%E6%A9%9F%E8%83%BD\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-013\">DEV-013 まだまだ進化が止まらない！開発者のための Microsoft Azure 最新機能</a> <a class=\"direct-link\" href=\"#dev-013-%E3%81%BE%E3%81%A0%E3%81%BE%E3%81%A0%E9%80%B2%E5%8C%96%E3%81%8C%E6%AD%A2%E3%81%BE%E3%82%89%E3%81%AA%E3%81%84%EF%BC%81%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE-microsoft-azure-%E6%9C%80%E6%96%B0%E6%A9%9F%E8%83%BD\">#</a></h3>\n<p>Azure の現在の提供機能を知りたくて。</p>\n<p>Scale Sets、Batch Service、Container Service、Service Fabric、Azure Function など、だいたい AWS を後追いして遜色ない感じになってるのかなー、と。</p>\n<p>Region は AWS や Google より多い（日本にも２つある）のは初めて知った。</p>\n<h3 id=\"clt-006-hololens-%E6%A6%82%E8%A6%81-%E3%80%9C%E6%9C%AA%E6%9D%A5%E3%82%92%E8%A6%8B%E3%82%8B%E6%96%B0%E3%81%97%E3%81%84%E6%96%B9%E6%B3%95%E3%80%9C\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#CLT-006\">CLT-006 HoloLens 概要 〜未来を見る新しい方法〜</a> <a class=\"direct-link\" href=\"#clt-006-hololens-%E6%A6%82%E8%A6%81-%E3%80%9C%E6%9C%AA%E6%9D%A5%E3%82%92%E8%A6%8B%E3%82%8B%E6%96%B0%E3%81%97%E3%81%84%E6%96%B9%E6%B3%95%E3%80%9C\">#</a></h3>\n<p>期待値の高い HoloLens の概要を知った。<br>\nAR や VR との対比で MR(複合現実：Mixed Reality)という。<br>\nGoogle Glass(AR)、 Oculus Rift(VR) は体験したことがあるので、HoloLens も体験すると、ものすごくオドロキがあるんだろうな。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">HoloLens でスプラトゥーンやりたい <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href=\"https://twitter.com/amay077/status/734998372906471424\">2016年5月24日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>とツイートしたが、その時は VR(仮想現実) の文脈で言ってたことにあとで気づいた。<br>\nMR:複合現実で考えると、目の前にある現実のもの（机とか家の壁とか）にインクで色が塗れる、「でもそれどうやって多人数対戦型ゲームになるんだ？」とかまだまだ発想力が乏しい。</p>\n<p>（例のおさわり会、２周目やってほしいです。。。）</p>\n<h3 id=\"dev-020-bot-framework-%26-cognitive-services-%E3%80%9C%E8%87%AA%E5%8B%95%E5%BF%9C%E7%AD%94%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA%E3%81%AB%E6%8C%91%E6%88%A6%E3%80%9C\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-020\">DEV-020 Bot Framework &amp; Cognitive Services 〜自動応答ソリューション開発に挑戦〜</a> <a class=\"direct-link\" href=\"#dev-020-bot-framework-%26-cognitive-services-%E3%80%9C%E8%87%AA%E5%8B%95%E5%BF%9C%E7%AD%94%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA%E3%81%AB%E6%8C%91%E6%88%A6%E3%80%9C\">#</a></h3>\n<p>Bot Framework と Cognitive Services を使ってBOTを作る様子を見た。<br>\nまだ理解できていない感じ、どこまでプログラムしないといけないのか、とか。</p>\n<h2 id=\"day2\">Day2 <a class=\"direct-link\" href=\"#day2\">#</a></h2>\n<h3 id=\"arc-003-%E3%83%A2%E3%83%80%E3%83%B3-web%EF%BC%9A%E3%81%9F%E3%81%A3%E3%81%9F%E4%BB%8A%E3%81%A8%E3%80%81%E3%81%BB%E3%82%93%E3%81%AE%E5%B0%91%E3%81%97%E6%9C%AA%E6%9D%A5%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#ARC-003\">ARC-003 モダン Web：たった今と、ほんの少し未来のはなし</a> <a class=\"direct-link\" href=\"#arc-003-%E3%83%A2%E3%83%80%E3%83%B3-web%EF%BC%9A%E3%81%9F%E3%81%A3%E3%81%9F%E4%BB%8A%E3%81%A8%E3%80%81%E3%81%BB%E3%82%93%E3%81%AE%E5%B0%91%E3%81%97%E6%9C%AA%E6%9D%A5%E3%81%AE%E3%81%AF%E3%81%AA%E3%81%97\">#</a></h3>\n<p>あんまりWeb界隈に詳しくないけど、Twitterで流れてくる情報はウォッチしてたので、だいたい知ってはいた感じ。<br>\nセッション時間足りないよなあと思いつつも、react.js や仮想DOM についての話も聞きたかった。</p>\n<p>今後の要素として Web Components, Progressive Web Apps, Native Assembly があったが Safari が軒並み「動作：×」になってて、以前見かけた「将来 Safari が IE のようになる」ってツイート思い出した、そうなんでしょうか？</p>\n<h3 id=\"dev-011-typescript-%E3%80%9Cany-browser%2C-any-host%2C-any-os.-open-source%E3%80%9C\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-011\">DEV-011 TypeScript 〜Any browser, Any host, Any OS. Open Source〜</a> <a class=\"direct-link\" href=\"#dev-011-typescript-%E3%80%9Cany-browser%2C-any-host%2C-any-os.-open-source%E3%80%9C\">#</a></h3>\n<p>TypeScript も存在は知りつつ放置してたので最新情報を収集。<br>\nVisual Studio Code で C# ライクにコードが書けて、ちょうど今仕事で Javascript を書いてるので、すぐにでも使ってみようと思った。<br>\ntsc が出力する Javascript コードを参考にして Javascript を書いてもいいかな、とも思った。</p>\n<h3 id=\"snr-018-azure-%E3%81%A8-nest-%E3%81%A7%E5%A7%8B%E3%82%81%E3%82%8B-elastic-stack\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#SNR-018\">SNR-018 Azure と NEST で始める Elastic Stack</a> <a class=\"direct-link\" href=\"#snr-018-azure-%E3%81%A8-nest-%E3%81%A7%E5%A7%8B%E3%82%81%E3%82%8B-elastic-stack\">#</a></h3>\n<p>全文検索の Elasticsearch 周りのセッション。<br>\n仕事で Apache Solr を知って、その後 <a href=\"http://qiita.com/amay077/items/9fb99ab9e6801033977d\">Elasticsearch を知ってためして</a>、<a href=\"http://qiita.com/amay077/items/ca1ce05ac0d295e7c323\">Auto-Rebalancing に感動して</a> 仕事でも採用されて現在に至る。</p>\n<p>Azure との関連はこじつけｗに近かったが、 .NET のクライアントライブラリがあるのは知らなかった。</p>\n<h3 id=\"chk-005-all-about-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%EF%BC%81-%E3%80%9C%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%81%AF%E9%AD%94%E6%B3%95%E3%81%AE%E6%9D%96%E3%81%8B%E3%80%81%E5%8D%98%E3%81%AA%E3%82%8B-big-data-%E3%81%AE%E3%81%AF%E3%81%91%E5%8F%A3%E3%81%8B%E3%80%9C\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#CHK-005\">CHK-005 All about 機械学習！ 〜機械学習は魔法の杖か、単なる Big Data のはけ口か〜</a> <a class=\"direct-link\" href=\"#chk-005-all-about-%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%EF%BC%81-%E3%80%9C%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E3%81%AF%E9%AD%94%E6%B3%95%E3%81%AE%E6%9D%96%E3%81%8B%E3%80%81%E5%8D%98%E3%81%AA%E3%82%8B-big-data-%E3%81%AE%E3%81%AF%E3%81%91%E5%8F%A3%E3%81%8B%E3%80%9C\">#</a></h3>\n<p>タイトルは釣りｗ<br>\n実際は、聴講者が登壇者へ質問を投げつけていくチョークトーク。<br>\nスピーカーお二人が R&amp;D と実務としてデータ解析を行われている方だったので、とても説得力があった。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">データマイニングについて。「陳腐化したデータのなかに宝物なんてない」 <a href=\"https://twitter.com/hashtag/roomH?src=hash\">#roomH</a> <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href=\"https://twitter.com/amay077/status/735329131051778048\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>データマイニングとの違いとは？という問いに対して。<br>\n「人が」「時間をかけて」「データを解析」し、結果が出てから実装していては遅いし、そういう時代は終わった。だからこその機械学習、解析まで機械同士でやってくれと。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Q:どのくらい勉強しなければならないのか？<br>A:時間軸次第。２～３年先には機械学習もパターン化すると予想。その後にはアルゴリズムを選択する必用もなくなると思う。 <a href=\"https://twitter.com/hashtag/roomH?src=hash\">#roomH</a> <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href=\"https://twitter.com/amay077/status/735333613085020160\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>エンジニアが機械学習についてどこまで学習する必要があるのか？という問いに対して。識者の方々が、割と短い期間の内に、機械学習がコモディティ化すると予想されていて、ちょっと驚きと安心。わかりました勉強しませんｗ いろいろな機械学習のツールやサービスを知って、使うフェーズに入っているんだなーと思った。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Q. 機械学習は人間の役割の置き換えになるのか？<br>人間の経験や感覚は、正しい確率が高いわけではない。測定可能なデータをお元に推測ができる機械学習は、多くの場で有用だろう。（筆者意訳）<a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a> <a href=\"https://twitter.com/hashtag/RoomH?src=hash\">#RoomH</a></p>&mdash; dz づ (@dz_) <a href=\"https://twitter.com/dz_/status/735337240327524352\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>機械学習によって仕事を奪われる人をどうやって説得する？という問いに対して。<br>\nかしこい人ほど &quot;カンの妥当性の低さ&quot; を自認しているので、ニーズはあるよなー、と思った。</p>\n<h3 id=\"dev-002-.net-core-%2F-asp.net-core-%E3%81%8C%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0-.net-%E3%81%AE%E4%BB%8A%E3%81%A8%E6%9C%AA%E6%9D%A5\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-002\">DEV-002 .NET Core / ASP.NET Core が実現するクロスプラットフォーム .NET の今と未来</a> <a class=\"direct-link\" href=\"#dev-002-.net-core-%2F-asp.net-core-%E3%81%8C%E5%AE%9F%E7%8F%BE%E3%81%99%E3%82%8B%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0-.net-%E3%81%AE%E4%BB%8A%E3%81%A8%E6%9C%AA%E6%9D%A5\">#</a></h3>\n<p>「.NET Framework はマルチプラットフォームにできます（やらないけどな）」と言ってた時代がなつかしい、実際に Mac や Linux で「動く」 .NET の話。</p>\n<p>Xamarin は Mono を使っているけれど、今後は .NET Core に寄せていく(と思われる)ので、今後も要チェック。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Mac + Xamarin Studio で普通に <a href=\"https://t.co/KM1FpPjJ4s\">https://t.co/KM1FpPjJ4s</a> Webアプリが作れてちょっと感動した。 <a href=\"https://twitter.com/hashtag/roomB?src=hash\">#roomB</a> <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href=\"https://twitter.com/amay077/status/735344072546783232\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>実際のところ、VS より Xamarin Studio の方が機能が少なくて軽量なので、サクッと Webアプリ作るには Xamarin Studio でいいじゃん？とか思った。</p>\n<h3 id=\"dev-023-xamarin-deep-dive---xmarin.forms-%E3%81%AE%E5%8F%AF%E8%83%BD%E6%80%A7\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DEV-023\">DEV-023 Xamarin Deep Dive - Xmarin.Forms の可能性</a> <a class=\"direct-link\" href=\"#dev-023-xamarin-deep-dive---xmarin.forms-%E3%81%AE%E5%8F%AF%E8%83%BD%E6%80%A7\">#</a></h3>\n<p>「Xamarin.Forms？まだ早いでしょ」派の人間だけど、「なかなかイケるらしい」という噂を聞いてたので参加した。<br>\nりんなセッションに客を取られたもののほぼ満員だった。</p>\n<p>(Alpha版だから？)相変わらずイレギュラーな動作はするものの、 Behavior, Effects, Previewer など、だいぶ使えるようになってきた感じ。</p>\n<p>DataPages は、カスタマイズできると強そう。Workbooks は良いぞ！</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/RoomF?src=hash\">#RoomF</a> <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a><br>Xamarin Workbooks ！<br>「実行できる仕様書」みたいなやつ！<a href=\"https://t.co/4gkVcVzALR\">https://t.co/4gkVcVzALR</a> <a href=\"https://t.co/SLSfKMYHoE\">pic.twitter.com/SLSfKMYHoE</a></p>&mdash; ちょまど@MS入社して2ヶ月 (@chomado) <a href=\"https://twitter.com/chomado/status/735377175935913984\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><a href=\"https://blog.xamarin.com/browse-through-the-evolve-2016-mobile-app-source-code/\">Evolve アプリ</a> も Xamarin.Forms を使ってるので、ロックイン覚悟でそろそろ本格的に使ってみますか、という気になった（ただし Mac でな）。</p>\n<h3 id=\"doo-012-fintech-%E3%81%A0%E3%81%91%E3%81%98%E3%82%83%E3%83%A2%E3%83%83%E3%82%BF%E3%82%A4%E7%84%A1%E3%81%84%EF%BC%81%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E3%81%A8%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%81%8C%E4%BD%9C%E3%82%8B%E6%9C%AA%E6%9D%A5\"><a href=\"https://www.microsoft.com/ja-jp/events/decode/2016/session.aspx#DOO-012\">DOO-012 FinTech だけじゃモッタイ無い！ブロックチェーンとクラウドが作る未来</a> <a class=\"direct-link\" href=\"#doo-012-fintech-%E3%81%A0%E3%81%91%E3%81%98%E3%82%83%E3%83%A2%E3%83%83%E3%82%BF%E3%82%A4%E7%84%A1%E3%81%84%EF%BC%81%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%83%81%E3%82%A7%E3%83%BC%E3%83%B3%E3%81%A8%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%81%8C%E4%BD%9C%E3%82%8B%E6%9C%AA%E6%9D%A5\">#</a></h3>\n<p>FinTech とか ブロックチェーン などのバズワードを追ってなかったので聴講。<br>\n何気に一番の発見だった。<br>\nブロックチェーン と プログラムを動かす事 が関係あるとは思ってなかった。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">ブロックチェーンの今後として契約と履行がある。履行＝プログラムの実行、なので開発者もブロックチェーンについて知っておいた方がよい。 <a href=\"https://twitter.com/hashtag/roomG?src=hash\">#roomG</a> <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href=\"https://twitter.com/amay077/status/735396922966564864\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>知らないワードのオンパレードだったが、開発者としても今後ウォッチしていかないといけない事が分かって、聞いてよかった。</p>\n<p>Smart Contract, Ethereum およびこれらの要素を利用したサービス、ビジネスについてウォッチ必須。</p>\n<p>とりあえず、 <strong>Smart Contract Conference</strong> というイベントが開催されるそうなので、これは是非行きたい。</p>\n<h1 id=\"%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E6%84%9F%E6%83%B3\">その他の感想 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96%E3%81%AE%E6%84%9F%E6%83%B3\">#</a></h1>\n<h2 id=\"xamarin!xamarin!xamarin!\">Xamarin!Xamarin!Xamarin! <a class=\"direct-link\" href=\"#xamarin!xamarin!xamarin!\">#</a></h2>\n<p>Xamarin のセッションが４つも！Day2は常にどこかでセッションやってる感じでしたね。<br>\nそのどれもが満員だった模様で関心の高さが伺えました。</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">もう Xamarin だけで 1day イベントやったら感 <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href=\"https://twitter.com/amay077/status/735302315146498048\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>って感じですね（スピーカーワンチャンある？）。</p>\n<h2 id=\"google-%E3%82%84-apple-%E3%81%AE%E9%96%8B%E7%99%BA%E8%80%85%E5%90%91%E3%81%91%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%A8%E6%AF%94%E3%81%B9%E3%81%A6\">Google や Apple の開発者向けイベントと比べて <a class=\"direct-link\" href=\"#google-%E3%82%84-apple-%E3%81%AE%E9%96%8B%E7%99%BA%E8%80%85%E5%90%91%E3%81%91%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%A8%E6%AF%94%E3%81%B9%E3%81%A6\">#</a></h2>\n<p>まず 米国の <a href=\"https://build.microsoft.com/\">//build</a> というイベントの後に、国内でも公式なイベントとして de:code を開催してくれる、これは素直にありがたいです。</p>\n<p>「技術者は英語を聞けて読めて米国から発信される最新情報をキャッチアップすべき」という意見には賛同しつつも、全ての人がそうはなれない訳で、そういった方々にもキチンと企業として情報発信していく、それを専門とするエヴァンジェリストが国内にたくさん居るのはマイクロソフトの良いところかなと思います。</p>\n<p>エヴァンジェリストの方々の多様性にも驚きました。踊ったり、コスプレしたり、漫画描いたり、プレゼンの神だったり…。その多様な活動が話題になることも含めて、今の Google や Apple にはできない、効果の高いことだと思います。</p>\n<p>ただ、開発者向けイベントには、その全てが最先端テクノロジーを利用して行われる事を期待してしまうのですが、</p>\n<ol>\n<li>公式なイベントアプリがない（<a href=\"https://play.google.com/store/apps/details?id=com.google.samples.apps.iosched\">Google I/O にはある</a>）</li>\n<li>参加証を紙で用意しないといけない</li>\n<li>アンケートも紙で書かないといけない</li>\n</ol>\n<p>あたりが残念、今後「変化」を期待したいところです。</p>\n<p>特に 1. に関しては、Microsoft が買収した Xamarin の単体のイベント &quot;Evolve&quot; でも Win/Android/iOS全対応の <a href=\"https://blog.xamarin.com/download-the-xamarin-evolve-2016-conference-app/\">公式アプリ</a> を用意している（Microsoft の技術をふんだんに使って）わけなので、 mobile first をうたうなら、このくらいやって欲しかったなあという印象です（これは build もそうですが）。</p>\n<p>大抵のイベントアプリには、</p>\n<ul>\n<li>聞きたいセッションをお気に入り登録する機能（Azure で管理）</li>\n<li>フロアマップ</li>\n<li>セッションへのフィードバックを送る機能</li>\n</ul>\n<p>があります。アプリがあるだけでもイベント運営がいろいろ改善しそうな気がします。</p>\n<p>また、技術コミュニティ/関連企業が主催する Android や iOS の国内イベントでは、有志の開発者がコミュニティ主導でイベントアプリを開発しています。</p>\n<ul>\n<li><a href=\"http://konifar.hatenablog.com/entry/2016/02/11/031257\">オープンソースでDroidKaigiのカンファレンスアプリ作ってる - Konifar's WIP</a></li>\n<li><a href=\"https://github.com/tryswift/trySwiftApp\">tryswift/trySwiftApp: try! Swift Conference App</a></li>\n</ul>\n<p>こういった動きができるととても良いと思います（そのためにはイベント情報を Microsoft がオープンデータにしてくれる必要があるわけですが）。</p>\n<h2 id=\"%E3%81%82%E3%81%A8%E6%84%9F%E3%81%98%E3%81%9F%E3%81%93%E3%81%A8%E3%82%92%E3%81%A0%E3%82%89%E3%81%A0%E3%82%89%E6%9B%B8%E3%81%8F\">あと感じたことをだらだら書く <a class=\"direct-link\" href=\"#%E3%81%82%E3%81%A8%E6%84%9F%E3%81%98%E3%81%9F%E3%81%93%E3%81%A8%E3%82%92%E3%81%A0%E3%82%89%E3%81%A0%E3%82%89%E6%9B%B8%E3%81%8F\">#</a></h2>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">「○年後は○○だ！」とか明確なビジョンが見えなくても、数年後にはなんとなく思ってたような事やってるし、その為の情報を仕入れにこういうイベントに参加するんだよな。そしてそれは会社ではなく個人の問題。だから来年も来ます。 <a href=\"https://twitter.com/hashtag/decode16?src=hash\">#decode16</a></p>&mdash; 3度目S+のあめいスピナーデコ (@amay077) <a href=\"https://twitter.com/amay077/status/735414344226242561\">2016年5月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>参加者はスーツの人が多かったですね。<br>\n高額なイベントだし、業務の一環で参加しているとしたら当然会社へ戻って報告の義務があるのでしょう、スライドをカメラでパシャパシャ撮って、一生懸命メモ取ってる人も居ました（かくいう自分も、会社のカネで参加した Tech・ED はそうでしたね）。<br>\n会社のカネで参加した人は感想をブログに書くのは抵抗があるのでしょうね。明確にそれを禁止する会社だとしたら残念な会社だと思います。</p>\n<p>幸い私の勤め先はじゃんじゃん情報発信してけ的なスタンスだったので良かったですが、それでもこういうイベントは個人(の目的)として参加しています、好きでエンジニアやってるんで。</p>\n<p>あと、明確な目標を持つ・決めるのって苦手で、それより<br>\n「目を閉じてなんとなく”匂い”のする方に手探りで歩いていたら、なんとなく望んでいた事になってた気がする」<br>\nって感じですかね。”匂いを嗅ぐ”のがこういうイベントで、ストリーミングとかではなかなかできないですね。</p>\n<p>最後に、こういうイベントではぼっちな事が多かったんですが、Xamarin について数年前からブログに書いてた関連で、 JXUG というコミュニティの皆さんと仲良くさせてもらい、現地でもあいさつ、お話できました。</p>\n<p>これについては KeyNote で伊藤執行役が、</p>\n<blockquote>\n<p>「エンジニアがコミュニティに参加することを制限したり、就業時間以外や休日に限定したり、会社名を伏せて参加するといった体質を持っていることにも問題がある。日本のエンジニアが、もっと自由に情報交換をしたり、スキルを磨ける環境を作ることに、日本マイクロソフトとしても支援をしたい」</p>\n</blockquote>\n<p>− from   <a href=\"http://cloud.watch.impress.co.jp/docs/news/20160525_758975.html\">「日本のデベロッパーには国境を越えてほしい」～Microsoft・グッゲンハイマーCVP - クラウド Watch</a></p>\n<p>と言われているので、会社のカネかどうかに関係なく、じゃんじゃんアウトプットしていきましょう。</p>\n<p>ではまた来年！</p>\n",
      "date_published": "2016-05-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/05/08/presentation-in-xamarin-jxug-13/",
      "url": "https://blog.amay077.net/blog/2016/05/08/presentation-in-xamarin-jxug-13/",
      "title": "Xamarin 勉強会 #JXUG 13 で発表してきました",
      "content_html": "<ul>\n<li><a href=\"http://jxug.connpass.com/event/29734/\">JXUGC #13 東京 緊急開催 Xamarin のすべて！ - connpass</a></li>\n</ul>\n<!--more-->\n<p>で、 <strong>「DroidKaigi2016 アプリを Xamarin に移植した話」</strong> というタイトルで登壇してきました。</p>\n<p>その資料です。</p>\n<script async class=\"speakerdeck-embed\" data-id=\"a005a4a951d047948aa9985497736e0d\" data-ratio=\"1.77777777777778\" src=\"//speakerdeck.com/assets/embed.js\"></script>\n<p>動画はこちら</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=9oPwHJ4Zc9I\">JXUGC #13 東京その３ - YouTube</a></li>\n</ul>\n<h2 id=\"%E8%A3%9C%E8%B6%B3%E3%81%AA%E3%81%A9\">補足など <a class=\"direct-link\" href=\"#%E8%A3%9C%E8%B6%B3%E3%81%AA%E3%81%A9\">#</a></h2>\n<p>ライブラリ関係のもう少し細かい話は、</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/09b442da6ac22269e8e0\">DroidKaigi2016アプリを Xamarin.Android に移植した話 - Qiita</a></li>\n</ul>\n<p>に書いてます。</p>\n<p>伝えたかったのは、Xamarin でも Androidネイティブ／iOSネイティブアプリ開発 の知識も要るよということなのですが、そのためには、</p>\n<ul>\n<li>DroidKaigi も try!Swift も参加しようぜ！</li>\n<li>難しいならそれに携わっている人たちをフォローしとこうぜ！</li>\n<li><a href=\"http://potatotips.connpass.com/\">potatotips</a> っていうiOS/Android開発Tips共有会もあるし東京いいなあ！</li>\n</ul>\n<p>ってことです。<br>\nAndroid にしても iOS にしても、所詮は他人の土俵なんで、その土俵に入って情報収集・質問しないと欲しい情報は得られないです（<strong>まだ</strong> 日本語情報が少ない、とかそういう問題じゃないと思います）。</p>\n<p>慣れないOS・慣れない開発環境とかも、最初はツラいんですが、しばらく使い続けれいれば、その内良いトコ取りできるようになります。そういう選択ができるのも Xamarin だけなんで。</p>\n<p>正直、 Java とか Swift を専門でやってきたネイティブアプリ開発の人たちに「C# やろうぜ！」って言っても、彼らの現状にあまりメリットないし、各言語に愛着もあるだろうし難しいと思いますから、こちらから歩み寄っていく感じで！</p>\n<h2 id=\"%E3%81%9D%E3%81%AE%E4%BB%96\">その他 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">#</a></h2>\n<ul>\n<li>資料は <a href=\"http://www.decksetapp.com/\">Deckset</a> という Markdown でプレゼン資料生成するツールで作ってます</li>\n<li>Slideshare に PDF アップしたら日本語表示できなかったので Speaker Deck にせざるを得なかった</li>\n<li>次なんかやるときは <a href=\"https://transiru.net/\">Transiru</a> 使います</li>\n</ul>\n",
      "date_published": "2016-05-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks/",
      "url": "https://blog.amay077.net/blog/2016/04/29/what-is-xamarin-workbooks/",
      "title": "Xamarin Workbooks とかいうやつ",
      "content_html": "<p><a href=\"https://evolve.xamarin.com/\">Xamarin Evolve 2016</a> が開催中されました。</p>\n<!--more-->\n<p>build での予告どおり、Xamarin.Android/iOS などがついにオープンソースになった、などのエキサイティングな発表のまとめは</p>\n<ul>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/evolve2016\">【速報】Evolve 2016 で発表されたエキサイティング情報まとめ - Xamarin 日本語情報</a></li>\n</ul>\n<p>その Keynote でデモされていた Xamarin Workbooks というツールがなかなかすごいので紹介。</p>\n<h2 id=\"%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C%EF%BC%9F\">なにこれ？ <a class=\"direct-link\" href=\"#%E3%81%AA%E3%81%AB%E3%81%93%E3%82%8C%EF%BC%9F\">#</a></h2>\n<p>ひとことでいうと、</p>\n<p><strong>Xcode の Playground みたいなやつ + Markdown</strong></p>\n<p>まだ意味わかんないですね？</p>\n<p>こういうことです。</p>\n<p><img src=\"/img/posts/xamarin_workbooks_01.png\" alt=\"\"><br>\n<img src=\"/img/posts/xamarin_workbooks_02.gif\" alt=\"\"></p>\n<ul>\n<li>Markdown でドキュメントが書ける(このツール自体はリッチなエディタである)</li>\n<li>```csharp〜``` で囲まれたコードブロックは、そのまま iOSシミュレータなどでインタラクティブに、Instant に実行できる。</li>\n</ul>\n<p>上記の Workbook の実ファイルは、これ↓です。</p>\n<ul>\n<li><a href=\"https://gist.github.com/amay077/793b5df4aad0098ffe6d9c12a491ee9a\">Xamarin Workbooks を使ってみるテスト。 HowToUseMapKit.workbook で保存して Xamarin Inspector で File-&gt;Open してね。</a></li>\n</ul>\n<p>みてわかる通りまんま Markdown ですね。</p>\n<h2 id=\"let's-try!\">Let's try! <a class=\"direct-link\" href=\"#let's-try!\">#</a></h2>\n<p>しかも iOS だけじゃなく、Android, Mac, Windows(WPF) に全対応！<br>\nMac でも Windows でも試せるみたいです。</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/cross-platform/workbooks/\">Xamarin Workbooks - Xamarin</a></li>\n</ul>\n<p>スタンドアロンなアプリとして実行可能なようなので、サクッと使ってみよう！</p>\n",
      "date_published": "2016-04-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/04/07/disable-duplicate-press-button-using-reactiveproperty/",
      "url": "https://blog.amay077.net/blog/2016/04/07/disable-duplicate-press-button-using-reactiveproperty/",
      "title": "ReactiveProperty で2度押し防止(Using使ったやつ)",
      "content_html": "<ul>\n<li><a href=\"http://tamafuyou.hatenablog.com/entry/2016/04/06/213633\">ReactivePropertyで2度押し防止 - 眠いしお腹すいたし(´・ω・`)</a></li>\n</ul>\n<p>を拝見しまして、前から気になってたので考えてみました。</p>\n<!--more-->\n<p>先に別件。</p>\n<p>ReactiveCommand は <code>IObservable&lt;T&gt;</code>、そしてロジックの方も <code>IObservable&lt;T&gt;</code> で作ることが多いのですが、その場合「ボタンをクリックした時に、ロジックを実行する」というコードは大抵以下のようになります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//MainViewModel.cs </span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewModel</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveCommand</span> TestCommand <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> IsBusy <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        TestCommand <span class=\"token operator\">=</span> IsBusy<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        TestCommand<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// log(\"ボタンが押されたよ\");</span><br>            IsBusy<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>            SomeLogicAsObservable<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>__ <span class=\"token operator\">=></span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// log(\"処理が実行されたよ\");</span><br>                IsBusy<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ほんとは OnCompleted と OnError でやるべき</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">// なんか重い非同期な処理</span><br>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>Unit<span class=\"token punctuation\">></span></span> <span class=\"token function\">SomeLogicAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>                TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span>    <br><span class=\"token punctuation\">}</span></code></pre>\n<p>こういうコードを書いていていつも「なんかカッコ悪いなー」と思っていました。<br>\nそう思う点は、<code>Subscribe</code> を2回書いていること。ボタンがクリックされた事の購読の中でさらにロジックが実行された事を購読している点です。<br>\nどちらも Stream なのだから、うまくマージできないかなと思っていました。</p>\n<p>これの解決も一緒に考えてみました。</p>\n<p>はい、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//MainViewModel.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewModel</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveCommand</span> TestCommand <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span> IsBusy <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">bool</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">MainViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        TestCommand <span class=\"token operator\">=</span> TestCommand <span class=\"token operator\">=</span> IsBusy<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        TestCommand<br>            <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <span class=\"token function\">UsingIsBusy</span><span class=\"token punctuation\">(</span><span class=\"token function\">SomeLogicAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* log(\"ボタンが押されてロジックが実行されたよ\") ※ */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token comment\">// ※ロジックがたくさん OnNext を呼んでいたらここもたくさん呼ばれるから注意</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">UsingIsBusy</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IObservable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> observable<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Using</span><span class=\"token punctuation\">(</span><br>            <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>            <span class=\"token punctuation\">{</span><br>                IsBusy<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">return</span> Disposable<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> IsBusy<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>            _ <span class=\"token operator\">=></span> observable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// なんか重い非同期な処理</span><br>    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>Unit<span class=\"token punctuation\">></span></span> <span class=\"token function\">SomeLogicAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>Unit<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                                TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>IsBusy</code> の ON/OFF を <code>Observable.Using</code> に任せるようにしました。これは、第2引数に指定した <code>IObservable&lt;T&gt;</code> が完了または失敗した時にリソースを解放してくれる C# の <code>using 句</code> のようなもので、ここでは第2引数にロジックの <code>IObservable&lt;T&gt;</code> を渡すことで、ロジックが完了したら自動的に <code>IsBusy.Value = false</code> が実行されます。</p>\n<p>次に「<code>Subscribe</code>を2回してる問題」は、ボタンがクリックされた<code>IObserbale&lt;T&gt;</code> から <code>SelectMany</code> で繋いであげることで解決しています。</p>\n<p>このコードの要注意は、<code>IsBusy.Value = false</code> が実行されるのがUIスレッドとは限らないので、View側でバインドするまでに <code>ObserveOnUIDispatcher</code> などをしてあげないといけないことです（少なくとも Xamarin.Android + ReactiveProperty ではそうでした。WPFだと気にしないのでしょうか？）。</p>\n<p>もう少し汎用性を高めて、「<code>IsBusy プロパティを持った ReactiveCommand</code>」のようなものを作ったら便利なのかもしれないです。</p>\n",
      "date_published": "2016-04-07T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/04/06/started-keep-a-hamster/",
      "url": "https://blog.amay077.net/blog/2016/04/06/started-keep-a-hamster/",
      "title": "ハムスターを飼い始めました",
      "content_html": "<p>ハムスターを飼い始めました（子供が）。<br>\n２月からかな、初めてです。</p>\n<!--more-->\n<p><img src=\"/img/posts/started_keep_a_hamster_02.jpg\" alt=\"image02\"></p>\n<p>ジャンガリアンです。</p>\n<p>ハムスターはストレスに弱い生き物なのであまり構い過ぎるのはよくない、しかし観たい！というわけで、Webカメラを使ってケージの様子を観察することにしました。</p>\n<ul>\n<li><a href=\"http://com.nicovideo.jp/community/co2173122\">伊藤くんのハムスター中継-ニコニコミュニティ</a></li>\n</ul>\n<p>にインスパイアされまして。</p>\n<h2 id=\"%E9%85%8D%E4%BF%A1%E5%85%88\">配信先 <a class=\"direct-link\" href=\"#%E9%85%8D%E4%BF%A1%E5%85%88\">#</a></h2>\n<p>はじめは家庭内でのみ見られるようにしてたんですが、だんだんと外出先からも観たくなり、オンラインの配信サイトを使うようになりました。</p>\n<p>まずは <a href=\"http://www.ustream.tv/\">UStream.tv</a> で配信していたのですが、無料プランでは画質が悪いようで、<a href=\"https://www.youtube.com/live\">YouTube Live</a> に乗り換えました。</p>\n<p>以前は一般人にはLive配信を解放してなかったのですね。今では有効な電話番号があれば（SNSで認証できました）だれでも使用できるようです。残念だったのは 050 のIP電話番号では認証できないことですね。</p>\n<p>YouTube Live は、(たぶん12時間ごとに)動画を自動アーカイブしてくれるし、その容量に制限はないようだし、Live中も最大4時間前から「おっかけ再生」ができます。</p>\n<p>（が、アーカイブは＜長い時は２〜３日＞時間がかかるし、アーカイブされない場合もあるし、おっかけ再生もなぜか２時間前からしかできませんが。。）</p>\n<p>ニコニコ生放送は、30分置きに「枠」を撮り直さないといけないようだったので試していません。</p>\n<h2 id=\"%E9%85%8D%E4%BF%A1%E6%A9%9F%E6%9D%90\">配信機材 <a class=\"direct-link\" href=\"#%E9%85%8D%E4%BF%A1%E6%A9%9F%E6%9D%90\">#</a></h2>\n<p>家庭内、UStream を使っていた時は iPad や Surface Pro3 搭載のカメラで配信していました。</p>\n<p>しかしこちらもよりよい画質を求めて、またハムスターは夜行性なのである程度の暗所でもキレイに映るように Webカメラを買いました。</p>\n<p>これです、</p>\n<ul>\n<li><a href=\"http://www.amazon.co.jp/Logicool-%E3%83%AD%E3%82%B8%E3%82%AF%E3%83%BC%E3%83%AB-HD-%E3%82%A6%E3%82%A7%E3%83%96%E3%82%AB%E3%83%A0-c920r/dp/B0158F77Z2\">Logicool ロジクール HD プロ ウェブカム c920r: パソコン・周辺機器</a></li>\n</ul>\n<p>PC は Surface Pro 3 を使っています、こんな感じです。</p>\n<p><img src=\"https://pbs.twimg.com/media/CfB5Q5eUIAAtdMM.jpg\" alt=\"image01\"></p>\n<p>Surface Pro 3 をこんな事に使っちゃうなんて、贅沢でしょうか。画質うんぬん言うわりには、通信は無線LANなんですよね（-_-;）</p>\n<h2 id=\"%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2\">ソフトウェア <a class=\"direct-link\" href=\"#%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2\">#</a></h2>\n<p>YouTube Live では、 <a href=\"https://obsproject.com/\">Open Broadcast Software</a> （通称OBS）を使っています。</p>\n<p>はじめはなんか有償アプリの無償機能みたいなの使ってたんですが、やはり画質に限度があるので。</p>\n<p>それから配信する映像に「日付と時刻」をオーバーレイさせたかったので、<a href=\"https://obsproject.com/forum/resources/snaz.96/\">Snaz</a> というソフトを使って実現させました。</p>\n<h2 id=\"%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\">こんな感じ <a class=\"direct-link\" href=\"#%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\">#</a></h2>\n<p>今のところこんな感じで配信しています。</p>\n<p><img src=\"/img/posts/started_keep_a_hamster_01.png\" alt=\"image02\"></p>\n<p>アドレスはここでは公開しませんが、適当なキーワードで検索すれば見つかるのでしょう。</p>\n<h2 id=\"%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E4%BA%8B\">これからやりたい事 <a class=\"direct-link\" href=\"#%E3%81%93%E3%82%8C%E3%81%8B%E3%82%89%E3%82%84%E3%82%8A%E3%81%9F%E3%81%84%E4%BA%8B\">#</a></h2>\n<p>前出のとおり、ハムスターは夜行性なので、昼間はエサか水を摂るためにたま（数時間毎）にしか出てきません。それ以外の時間は巣穴で寝ているかくつろいでいます。夜は２時間くらい活発に動いているようです。</p>\n<p>ハムスターの巣穴にセンサーを設置して、「巣穴から出てきたらスマホにPush通知を送る」とかやってみたいです。</p>\n<p>Rasberry Pi が買ったまま放置されているし、 <a href=\"https://dev.botframework.com/\">Microsoft Bot Framework</a> とかいう気になる技術も発表されました。</p>\n<p>センサーでなく画像認識、機械学習・ディープラーニングという分野の勉強の題材としてもよいかもしれません。</p>\n<p>ハムスターを飼うのも初めてなら、Live配信をするのも初めてなので、いろいろググりながら試行錯誤しています。こういう時間は楽しいです。</p>\n",
      "date_published": "2016-04-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft/",
      "url": "https://blog.amay077.net/blog/2016/04/01/answer-of-xamarin-acquired-by-microsoft/",
      "title": "Xamarin が Microsoft に買収された結果",
      "content_html": "<p><a href=\"http://qiita.com/amay077/items/4aa25db9509216cf5bf0\">Xamarin が Microsoft に買収されたので、今後を勝手に予想</a> の答え合わせなんですが…</p>\n<!--more-->\n<ul>\n<li><a href=\"https://blog.xamarin.com/xamarin-for-all/\">Xamarin for Everyone ｜ Xamarin Blog</a></li>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/ms-xamarin\">【速報】Xamarin のこれからについて！ - Xamarin 日本語情報</a></li>\n</ul>\n<p><strong>Xamarin は無料ですべての Visual Studio に同梱されることになりました！</strong></p>\n<p><strong>Mac では Xamarin Studio が無料で使えるようになりました！！</strong> <a href=\"http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#%E8%BF%BD%E8%A8%98-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0\">※注</a></p>\n<p>というか、 <strong>Xamarin のコアライブラリがオープンソースになりました！！！</strong></p>\n<p>今日も仕事が手につきませんね！</p>\n<h2 id=\"xamarin.android%2C-xamarin.ios-%E2%86%92-%E2%97%8E%E2%97%8E%E2%97%8E\"><a href=\"https://xamarin.com/platform\">Xamarin.Android, Xamarin.iOS</a> → ◎◎◎ <a class=\"direct-link\" href=\"#xamarin.android%2C-xamarin.ios-%E2%86%92-%E2%97%8E%E2%97%8E%E2%97%8E\">#</a></h2>\n<p>期待以上でしたね。<br>\nプロダクトとしては無償になります。<br>\nすべての機能が制約なしに使えます。<br>\nソースコードが MIT License なオープンソースになります。</p>\n<h2 id=\"xamarin.mac-%E2%86%92-%E2%97%8E\"><a href=\"https://xamarin.com/platform#desktop\">Xamarin.Mac</a> → ◎ <a class=\"direct-link\" href=\"#xamarin.mac-%E2%86%92-%E2%97%8E\">#</a></h2>\n<blockquote>\n<p>OSS として公開、のような可能性があるなら嬉しいかも。</p>\n</blockquote>\n<p>これ当たりましたね。Xamarin.Mac の人もこれで一安心。</p>\n<h2 id=\"xamarin.forms-%E2%86%92-%E2%97%8E%E2%97%8E%E2%97%8E\"><a href=\"https://xamarin.com/forms\">Xamarin.Forms</a> → ◎◎◎ <a class=\"direct-link\" href=\"#xamarin.forms-%E2%86%92-%E2%97%8E%E2%97%8E%E2%97%8E\">#</a></h2>\n<p>これも上2つど同様にオープンソースに。<br>\n正直しばらくはプロプラエタリでいくかなーと思ってたので、完全に期待以上でした。<br>\nUIデザイナーは・・・Evolve？</p>\n<h2 id=\"xamarin-studio-%E2%86%92-%E2%97%8E\"><a href=\"https://xamarin.com/studio\">Xamarin Studio</a> → ◎ <a class=\"direct-link\" href=\"#xamarin-studio-%E2%86%92-%E2%97%8E\">#</a></h2>\n<p>これも無償化。ここのソースコードはOSSなのかな？ → OSSにはならないようです（もちろん元々OSSであるMonoDevelop以外のXamarin固有のプラグインのこと） - <a href=\"https://www.xamarin.com/faq#xpq7\">How do I share code across platforms with Xamarin? and other FAQs - Xamarin</a><br>\nとりあえずMacでの開発者には嬉しい。</p>\n<p>そして、ありがとう、<a href=\"https://www.xamarin.com/faq#xpq6\">さよなら Xamarin Studio for Windows</a></p>\n<h2 id=\"xamarin-components-%E2%86%92-%EF%BC%9F\"><a href=\"https://components.xamarin.com/\">Xamarin Components</a> → ？ <a class=\"direct-link\" href=\"#xamarin-components-%E2%86%92-%EF%BC%9F\">#</a></h2>\n<p>まあ、消える流れですよね。。</p>\n<h2 id=\"xamarin-test-cloud-%E2%86%92-%E2%97%8E%E2%97%8E\"><a href=\"https://xamarin.com/test-cloud\">Xamarin Test cloud</a> → ◎◎ <a class=\"direct-link\" href=\"#xamarin-test-cloud-%E2%86%92-%E2%97%8E%E2%97%8E\">#</a></h2>\n<p>Visual Studio Team Services に同梱されるとのことです。<br>\n<a href=\"https://www.visualstudio.com/ja-jp/products/visual-studio-team-services-pricing-vs.aspx\">その価格</a> を見ると、今までよりグッと使いやすくなりました。</p>\n<h2 id=\"xamarin-insights-%E2%86%92-%E2%97%8E%E2%97%8E\"><a href=\"https://xamarin.com/insights\">Xamarin Insights</a> → ◎◎ <a class=\"direct-link\" href=\"#xamarin-insights-%E2%86%92-%E2%97%8E%E2%97%8E\">#</a></h2>\n<blockquote>\n<p>独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。</p>\n</blockquote>\n<p>これハズレましたね。</p>\n<p><a href=\"http://hockeyapp.net/features/\">HockeyApp</a> というサービスに統合されるとのことです。</p>\n<p>HockeyApp って知らなかったのですが、ログ収集・解析の他に、DeployGate のような配布機能も持っているみたいですね。これは嬉しい。</p>\n<h2 id=\"robovm-%E2%86%92-%EF%BC%9F\"><a href=\"https://robovm.com/\">RoboVM</a> → ？ <a class=\"direct-link\" href=\"#robovm-%E2%86%92-%EF%BC%9F\">#</a></h2>\n<p>Build2016 では予想通り全く触れられませんでした。さて未来は？</p>\n<h2 id=\"%E3%81%9D%E3%81%AE%E4%BB%96\">その他 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">#</a></h2>\n<h3 id=\"xamarin-android-player(preview)-%E2%86%92-%EF%BC%9F\"><a href=\"https://developer.xamarin.com/guides/android/getting_started/installation/android-player/\">Xamarin Android Player(Preview)</a> → ？ <a class=\"direct-link\" href=\"#xamarin-android-player(preview)-%E2%86%92-%EF%BC%9F\">#</a></h3>\n<p>Build2016 では Windows上で動く iOS Simulator のデモを行っていました。</p>\n<p>Miguel de Icaza曰く</p>\n<blockquote>\n<p>&quot;Have touch and no need to turn to your Mac&quot;</p>\n</blockquote>\n<p>だそうですよ。</p>\n<h3 id=\"xamarin-profiler(preview)-%E2%86%92-%EF%BC%9F\"><a href=\"https://xamarin.com/profiler\">Xamarin Profiler(Preview)</a> → ？ <a class=\"direct-link\" href=\"#xamarin-profiler(preview)-%E2%86%92-%EF%BC%9F\">#</a></h3>\n<p>これは特に情報ありませんでした。</p>\n<h3 id=\"xamarin-inspector(early-preview)-%E2%86%92-%EF%BC%9F\"><a href=\"https://developer.xamarin.com/guides/cross-platform/inspector/\">Xamarin Inspector(Early Preview)</a> → ？ <a class=\"direct-link\" href=\"#xamarin-inspector(early-preview)-%E2%86%92-%EF%BC%9F\">#</a></h3>\n<p>Windows の Android エミュレータ上でアプリが動いているところで、コードを変更すると、 <strong>即座にアプリに変更が適用される</strong> という謎のデモを行っていました。</p>\n<p>Xamarin（もとい Microsoft ）の中の人曰く、</p>\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">これだよこれがインスタントプログラミングだよ!</p>&mdash; Atsushi Eno (@atsushieno) <a href=\"https://twitter.com/atsushieno/status/715566438203809792\">2016年3月31日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>とのことです。（Android Studio さん聴いてる？）</p>\n<p>Keynote Day 2 の動画あったのでデモ見られます→ <a href=\"https://www.youtube.com/watch?v=WC7ijoFzjEg&amp;feature=youtu.be&amp;t=16m\">Microsoft Build 2016 ｜ Keynote Day 2 (HD) - YouTube</a> （このデモの後ほどなくして &quot;making Xamarin available at no extra charge.&quot; →大歓声、ですね）</p>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h1>\n<p>ということで、総じて言えば、皆さんの期待にすべて応える感じで、Xamarin のパワーを活かして開発者を増やしていきたいという意思が表れていましたね。</p>\n<p>本当に想像以上でした。<br>\nIndie ライセンス買ったばかりだけど、そのお金返せとは言いません、ありがとう Xamarin！！</p>\n<h2 id=\"%E3%80%90%E8%BF%BD%E8%A8%98%E3%80%91-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E3%80%81%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%80%81%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0\">【追記】 to 企業の人、無料になると言ったな、あれは Visual Studio Pro 以上を持ってる人のみだ <a class=\"direct-link\" href=\"#%E3%80%90%E8%BF%BD%E8%A8%98%E3%80%91-to-%E4%BC%81%E6%A5%AD%E3%81%AE%E4%BA%BA%E3%80%81%E7%84%A1%E6%96%99%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%9F%E3%81%AA%E3%80%81%E3%81%82%E3%82%8C%E3%81%AF-visual-studio-pro-%E4%BB%A5%E4%B8%8A%E3%82%92%E6%8C%81%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AE%E3%81%BF%E3%81%A0\">#</a></h2>\n<p>Mac しか使ってない企業が自社のアプリを Xamarin を使って開発・配布する場合、 Xamarin Studio を使うことになります。</p>\n<p><a href=\"https://store.xamarin.com/\">Store - Xamarin</a> の Xamarin Studio にある Small teams をクリックすると <a href=\"https://www.visualstudio.com/support/legal/mt171547\">MICROSOFT VISUAL STUDIO COMMUNITY 2015</a> が表示され、以下のような記述があります。</p>\n<blockquote>\n<ol>\n<li>インストールおよび使用に関する権利。</li>\n</ol>\n<p>b. 組織ライセンス。お客様が組織である場合、お客様のユーザーは以下の条件で本ソフトウェアを使用することができます。</p>\n<ul>\n<li>お客様がエンタープライズである場合、お客様の従業員および契約社員は本ソフトウェアを使用して、お客様のアプリケーションを開発またはテストすることはできません。ただし、上記で許可されているオープンソースおよび教育目的の場合を除きます。「エンタープライズ」とは、合計で (a) 250 台を超えるコンピューターがある、もしくは 250 人を超えるユーザーがいる、 または (b) 年間収益が 100 万米ドル (もしくは他の通貨での相当額) を超える、組織およびその関連会社のことです。「関連会社」とは、組織を (過半数所有により) 支配している法人、組織が支配している法人、または組織と共通の支配下にある法人を意味します。</li>\n</ul>\n</blockquote>\n<p><s>組織（企業）での利用で、250人を超えるユーザー(=配布スマホ台数ということになるでしょう)が居る場合は、使用できない、と読み取れます。</s><br>\n<a href=\"http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a#comment-2297416c6d83b3593425\">コメント</a>で教えていただきました。日本語の <a href=\"https://www.microsoft.com/ja-jp/dev/products/community.aspx\">Visual Studio Community のページ</a> には、ユーザー数に関する記述はないので、この点（配布スマホ台数）に関しては気にしなくてもよさそうです。</p>\n<p>また、 Xamarin の FAQ - <a href=\"https://www.xamarin.com/faq#xpq8\">How do I share code across platforms with Xamarin? and other FAQs - Xamarin</a> には、以下の記述があります。</p>\n<blockquote>\n<p>Xamarin Studio will follow the Visual Studio pricing rules. There is Xamarin Studio Community Edition available for download on the Mac. You’ll need to be a Visual Studio Enterprise subscriber to unlock Visual Studio Enterprise features in Xamarin Studio.</p>\n</blockquote>\n<p>Xamarin Studio は、Visual Studio の価格体系に従う、とのことなので、ライセンス条項も同じだと解釈すれば、 Visual Studio Profesional 以上のライセンスがあれば、 Mac + Xamarin Studio で企業のアプリを開発・配布して問題ないと言えます。<br>\n<s>Macオンリー企業には、ツールとしてでなくライセンスとしての Visual Studio Pro 以上が必要ということなるのでしょうか。</s></p>\n<ul>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/2016/04/21/123000\">【お知らせ】Xamarin ライセンスの移管について - Xamarin 日本語情報</a></li>\n</ul>\n<p>によると、 企業向け開発する場合、 Windows ＋ Visual Studio は Visual Studio Pro単品購入で可能、Mac + Xamarin Studio には Visual Studio Pro <strong>MSDN Subscription</strong> が必要とのことです。</p>\n",
      "date_published": "2016-04-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/03/13/zundoko-with-rxjava/",
      "url": "https://blog.amay077.net/blog/2016/03/13/zundoko-with-rxjava/",
      "title": "RxJava でズンドコキヨシ(window or buffer 使用)",
      "content_html": "<p>調子に乗って RxJava でもやってみた。</p>\n<!--more-->\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったからズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた</p>&mdash; てくも (@kumiromilk) <a href=\"https://twitter.com/kumiromilk/status/707437861881180160\">2016年3月9日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/85dfc4bd194f57c52c57\">C# と Reactive Extensions でズンドコキヨシ</a></li>\n</ul>\n<p>がんばって <a href=\"http://reactivex.io/documentation/operators/window.html\"><code>Observable.window</code></a> を使ってみた。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//zondoko.java</span><br><span class=\"token comment\">// なんちゃってラムダ使用。あと Android。</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doZondoko</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> PATTERN <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"どこ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">K</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"キ・ヨ・シ！\"</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// ※ の Observable&lt;List&lt;String>> を直列に連結</span><br>        <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">-></span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"ずん\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"どこ\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ランダムに ずん or どこ</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">window</span><span class=\"token punctuation\">(</span>PATTERN<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 要素数5のWindowを1ずつズラしてく</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>window <span class=\"token operator\">-></span> window<span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Observable&lt;Observable&lt;String>> を Observable&lt;List&lt;String>> に変換 ※</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>window <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sequenceEqual</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span> PATTERN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// パターンと一致していたら…</span><br>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> says <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                says<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                says<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// キ・ヨ・シ！を追加</span><br>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><br>                        <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>says<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                        <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 終了判定用の空リスト</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">takeWhile</span><span class=\"token punctuation\">(</span>says <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>says<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 空リストになるまで繰り返す</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>says <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>says<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/** リストとリストの要素一致 */</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">sequenceEqual</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> listA<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> listB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterA <span class=\"token operator\">=</span> listA<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> iterB <span class=\"token operator\">=</span> listB<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iterA<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> iterB<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>iterA<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> iterB<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>iterA<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>iterB<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/** リスト内容をダンプ */</span><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuilder</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">TextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            b<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\", \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        b<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>どこ, ずん, どこ, どこ, ずん<br>\nずん, どこ, どこ, ずん, どこ<br>\nどこ, どこ, ずん, どこ, ずん<br>\nどこ, ずん, どこ, ずん, どこ<br>\nずん, どこ, ずん, どこ, どこ<br>\nどこ, ずん, どこ, どこ, ずん<br>\nずん, どこ, どこ, ずん, ずん<br>\nどこ, どこ, ずん, ずん, ずん<br>\nどこ, ずん, ずん, ずん, ずん<br>\nずん, ずん, ずん, ずん, どこ, キ・ヨ・シ！</p>\n</blockquote>\n<p>「window(5, 1) -&gt; toList -&gt; concat してるならそれは <code>buffer(5, 1)</code> やんけ」というのを <a href=\"http://qiita.com/do6gop/items/c4941f6fb2bdc1c0c0f1\">こちら</a> で知って、 <code>buffer</code> 版も書いてみた。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//Zondoko_buffer.java</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doZondoko</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Random</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> PATTERN <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"どこ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token class-name\">K</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"キ・ヨ・シ！\"</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">-></span> random<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"ずん\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"どこ\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ランダムに ずん or どこ</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">buffer</span><span class=\"token punctuation\">(</span>PATTERN<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 要素数5のBufferを1ずつズラしてく</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>buf <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sequenceEqual</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> PATTERN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// パターンと一致していたら…</span><br>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> says <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                says<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                says<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">K</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                      <span class=\"token comment\">// キ・ヨ・シ！を追加</span><br>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><br>                        <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>says<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                        <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collections</span><span class=\"token punctuation\">.</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token function\">emptyList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 終了判定用の空リスト</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">takeWhile</span><span class=\"token punctuation\">(</span>says <span class=\"token operator\">-></span> <span class=\"token operator\">!</span>says<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 空リストになるまで繰り返す</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>says <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token function\">dump</span><span class=\"token punctuation\">(</span>says<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li><a href=\"http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84\">さまざまなズンドコキヨシ</a></li>\n<li><a href=\"http://qiita.com/shunsugai@github/items/971a15461de29563bf90\">ズンドコキヨシまとめ</a></li>\n</ul>\n",
      "date_published": "2016-03-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/03/12/zundoko-with-reactive-extensions/",
      "url": "https://blog.amay077.net/blog/2016/03/12/zundoko-with-reactive-extensions/",
      "title": "C# と Reactive Extensions でズンドコキヨシ",
      "content_html": "<p>流行り？に乗っていくスタイル。</p>\n<!--more-->\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">Javaの講義、試験が「自作関数を作り記述しなさい」って問題だったから<br>「ズン」「ドコ」のいずれかをランダムで出力し続けて「ズン」「ズン」「ズン」「ズン」「ドコ」の配列が出たら「キ・ヨ・シ！」って出力した後終了って関数作ったら満点で単位貰ってた</p>&mdash; てくも (@kumiromilk) <a href=\"https://twitter.com/kumiromilk/status/707437861881180160\">2016年3月9日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//Zondoko.cs</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> K <span class=\"token operator\">=</span> <span class=\"token string\">\"キ・ヨ・シ！\"</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> PATTERN <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ずん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"どこ\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Interval</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromMilliseconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token string\">\"ずん\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"どこ\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ランダムに ずんorどこ</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Scan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token comment\">// 最大５つのQueueに貯める</span><br>        <span class=\"token punctuation\">{</span><br>            queue<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> PATTERN<span class=\"token punctuation\">.</span>Count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">return</span> queue<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>queue <span class=\"token operator\">=></span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">SequenceEqual</span><span class=\"token punctuation\">(</span>PATTERN<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">?</span> <span class=\"token comment\">// パターンと一致したら…</span><br>        Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span><br>            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   <span class=\"token comment\">// Queueの最後</span><br>            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>K<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>              <span class=\"token comment\">// + キ・ヨ・シ！</span><br>            Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token comment\">// + 空文字(終了判定用)</span><br>        Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">TakeWhile</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 空文字になるまで繰り返す</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><br>        x <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"complete!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>どこ<br>\nどこ<br>\nずん<br>\nずん<br>\nずん<br>\nどこ<br>\nどこ<br>\nどこ<br>\nずん<br>\nどこ<br>\nずん<br>\nずん<br>\nずん<br>\nずん<br>\nどこ<br>\nキ・ヨ・シ！<br>\ncomplete!!</p>\n</blockquote>\n<p><code>SelectMany</code> に頼ってるのが気に入らない。。。</p>\n<ul>\n<li>RxJava 版はこちら - <a href=\"http://qiita.com/amay077/items/2c8575753e37fcc94f87\">RxJava でズンドコキヨシ(window 使用)</a></li>\n<li><a href=\"http://qiita.com/B73W56H84/items/519e27a1aed5e6d5304f#%E3%81%82%E3%82%8F%E3%81%9B%E3%81%A6%E8%AA%AD%E3%81%BF%E3%81%9F%E3%81%84\">さまざまなズンドコキヨシ</a></li>\n<li><a href=\"http://qiita.com/shunsugai@github/items/971a15461de29563bf90\">ズンドコキヨシまとめ</a></li>\n</ul>\n",
      "date_published": "2016-03-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/02/27/convert-rxjava-observable-to-android-databinding-observablefield/",
      "url": "https://blog.amay077.net/blog/2016/02/27/convert-rxjava-observable-to-android-databinding-observablefield/",
      "title": "RxJava の Observable を Android DataBinding の ObservableField に変換する",
      "content_html": "<p>Android DataBinding で View とバインドできるデータクラスは <code>BaseObservable</code> から派生したクラスか、<code>ObservableField&lt;T&gt;</code> 型のフィールドのみです。</p>\n<!--more-->\n<p>RxJavaベースの API やモデルクラスを使用している場合、更新通知は <code>rx.Observable&lt;T&gt;</code> を <code>subscribe</code> することで受けられるわけですが、それを View にバインドするには、<code>ObservableField&lt;T&gt;</code> に変換してあげなければなりません。</p>\n<p>結果、下のような Utility 関数を作ることになります。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**<br> * rx.Observable から ObservableField への変換をおこなう<br> */</span><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">toObservableField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> source<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CompositeSubscription</span> subscriptions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> field <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><br>            <span class=\"token comment\">// TODO onError も拾ったほうがいい</span><br>            source<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token annotation punctuation\">@Override</span><br>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    field<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">return</span> field<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>しかしこの方法はスマートでないと感じます。<br>\n　どうせ <code>ObservableField</code> も同じような概念のオブジェクトで、View が購読開始-終了をしているにすぎないはずなので、同じタイミングで、<code>rx.Observable&lt;T&gt;</code> の subscribe/unsubscribe をさせてあげれば良いはずです。</p>\n<p>ということで作ってみたのがこの <code>rx.Observable&lt;T&gt;</code> を <code>ObservableField&lt;T&gt;</code> に変換するクラス。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ObservableField</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">rx<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Observable</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">rx<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">rx<span class=\"token punctuation\">.</span>functions<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Action1</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RxField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ObservableField</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> observable<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">></span></span> sucscriptionMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Subscription</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RxField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> observable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observable <span class=\"token operator\">=</span> observable<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RxField</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> observable<span class=\"token punctuation\">,</span> <span class=\"token class-name\">T</span> defaultValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>defaultValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>observable <span class=\"token operator\">=</span> observable<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addOnPropertyChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnPropertyChangedCallback</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">addOnPropertyChangedCallback</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        sucscriptionMap<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> observable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeOnPropertyChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnPropertyChangedCallback</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sucscriptionMap<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">Subscription</span> subscription <span class=\"token operator\">=</span> sucscriptionMap<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            sucscriptionMap<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeOnPropertyChangedCallback</span><span class=\"token punctuation\">(</span>callback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// TODO should be readonly, because cannot set value to observable</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">tObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> observable<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>ObservableField</code> は、View から購読されると <code>addOnPropertyChangedCallback</code> が呼ばれ、購読解除されると <code>removeOnPropertyChangedCallback</code> が呼ばれます(るはずです)。</p>\n<p>なので、このタイミングで <code>rx.Observable&lt;T&gt;</code> を <code>subscribe()</code>、<code>subscription.unsubscribe()</code> してあげます。購読者(View)が複数になる可能性があるので、 subscription は Map で管理しています。</p>\n<p>で、<code>rx.Observable&lt;T&gt;</code> の値が変わった時(<code>onNext()</code>)に、<code>ObservableField</code> の <code>set(value)</code> を呼んであげれば、<code>ObservableField</code> 側の変更通知(<code>notifyChanged</code>)が飛んで、View が更新されます。</p>\n<p>使い方はこんな感じで → <a href=\"https://github.com/amay077/StopWatchSample/tree/qiita_20160226/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java#L51-L67\">StopWatchSample/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java</a></p>\n<h2 id=\"%E5%8F%8C%E6%96%B9%E5%90%91%E3%81%AB%E3%81%AF%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%A6%E3%81%BE%E3%81%9B%E3%82%93\">双方向には対応してません <a class=\"direct-link\" href=\"#%E5%8F%8C%E6%96%B9%E5%90%91%E3%81%AB%E3%81%AF%E5%AF%BE%E5%BF%9C%E3%81%97%E3%81%A6%E3%81%BE%E3%81%9B%E3%82%93\">#</a></h2>\n<p>この実装は、<code>rx.Observable</code> の更新を <code>ObservableField</code> 通知するだけです。逆方向（<code>ObservableField</code> の変更を <code>rx.Observable</code> に適用する）は対応していません。そもそも <code>rx.Observable</code> は値を設定できないので、それをしたければ <code>rx.Observable</code> の代わりに <code>rx.Subject</code> が必要です。</p>\n<p><a href=\"http://qiita.com/amay077/items/b5c788bb3ee9ff84d9b4\">Android Data Binding + MVVMパターンのサンプルを書いてみた</a> で作成したアプリに、これを適用してみたので、ご参考まで。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/StopWatchSample/tree/qiita_20160226/StopWatchAppAndroid\">StopWatchSample/StopWatchAppAndroid - github</a></li>\n</ul>\n",
      "date_published": "2016-02-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft/",
      "url": "https://blog.amay077.net/blog/2016/02/26/whats-future-if-xamarin-and-microsoft/",
      "title": "Xamarin が Microsoft に買収されたので、今後を勝手に予想",
      "content_html": "<p>いやー起きたら驚きました。いつも午前中は仕事があまり捗らないのですが(ぉぃ、今日はさらに手につきませんでした。</p>\n<!--more-->\n<ul>\n<li><a href=\"https://blog.xamarin.com/a-xamarin-microsoft-future/\">A Xamarin + Microsoft Future ｜ Xamarin Blog</a></li>\n<li><a href=\"http://blogs.microsoft.com/blog/2016/02/24/microsoft-to-acquire-xamarin-and-empower-more-developers-to-build-apps-on-any-device/\">Microsoft to acquire Xamarin and empower more developers to build apps on any device - The Official Microsoft Blog</a></li>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/2016/02/25/084553\">【速報】Xamarin が Microsoft に買収されました - Xamarin 日本語情報</a></li>\n</ul>\n<p>続報は、 <a href=\"http://build.microsoft.com/\">3/30-4/1 の Build 2016</a> と <a href=\"https://evolve.xamarin.com/\">Xamarin Evolve 2016</a> を待てとのことですが、企業としての Xamarin は、様々な製品やツールを展開していますので、MS買収によって、それらが今後どうなるのか、勝手に予想してみます。（個人の主観と希望を多分に含みます。 ○とか△は、今後の継続性(MSから見たら買収効果)を示してます）</p>\n<h2 id=\"xamarin.android%2C-xamarin.ios-%E2%86%92-%E2%97%8E\"><a href=\"https://xamarin.com/platform\">Xamarin.Android, Xamarin.iOS</a> → ◎ <a class=\"direct-link\" href=\"#xamarin.android%2C-xamarin.ios-%E2%86%92-%E2%97%8E\">#</a></h2>\n<p>Android SDK や iOS SDK(CocoaTouch) を C# から呼び出す、現在主力のプロダクト。<br>\n　<br>\n　Microsoft とのパートナーシップにより、すでに Visual Studio に半ば組み込まれていますが、それがさらに推し進められて、完全統合（追加インストールなし）されると思われます。</p>\n<p>完全統合されたからと言って、 iOSアプリをデバッグ、デプロイするには Mac が必要なわけで、厳密には「Visual Studio だけで開発できる」ことにはならないと思います。</p>\n<p>Xamarin という「ブランド」は、いつか表示されなくなってしまうのかも知れません。。。</p>\n<h2 id=\"xamarin.mac-%E2%86%92-%E2%96%B3\"><a href=\"https://xamarin.com/platform#desktop\">Xamarin.Mac</a> → △ <a class=\"direct-link\" href=\"#xamarin.mac-%E2%86%92-%E2%96%B3\">#</a></h2>\n<p>C# で Mac のデスクトップアプリが開発できるというプロダクト。<br>\n　現在も、お世辞にも「存在感がある」とは言えないプロダクトで、買収によって今後が不安なもののひとつ。</p>\n<p>Microsoft も、ここに投資するメリットはあまり感じてないのではないでしょうか？<br>\n　OSS として公開、のような可能性があるなら嬉しいかも。</p>\n<h2 id=\"xamarin.forms-%E2%86%92-%E2%97%8E\"><a href=\"https://xamarin.com/forms\">Xamarin.Forms</a> → ◎ <a class=\"direct-link\" href=\"#xamarin.forms-%E2%86%92-%E2%97%8E\">#</a></h2>\n<p>Xamarin.Android/iOS とは異なり、「単一のコードで複数のプラットフォーム向けのアプリを開発できる」プロダクト。</p>\n<p>画面は XAML(と言っても WPF とは異なる)で記述し、Android/iOS/Windows(UWP) の <code>Activity/ViewController/Window</code> は、<code>Page</code> というクラスに抽象化されます。</p>\n<p>登場以来 Xamarin が最も注力してきたプロダクトで、Microsoft のマルチデバイス戦略にもフィットします(説明しやすいし、デモ受けもしやすいしね)。</p>\n<p>長らくUIエディタがない状態が続いていますが、買収によりいよいよ？ <a href=\"https://build.microsoft.com/\">Build 2016</a> と <a href=\"https://evolve.xamarin.com/\">Evolve 2016</a> が楽しみです。</p>\n<h2 id=\"xamarin-studio-%E2%86%92-%E2%97%8B\"><a href=\"https://xamarin.com/studio\">Xamarin Studio</a> → ○ <a class=\"direct-link\" href=\"#xamarin-studio-%E2%86%92-%E2%97%8B\">#</a></h2>\n<p><a href=\"http://www.monodevelop.com/\">MonoDevelop</a> という OSS の統合開発環境に Xamarin プロダクト向けの Addin を加えたもの。</p>\n<p>Windows では、あえてこれを使用する必要は無いに等しいですが、Mac では、重要なIDEになります。<br>\n　実際、 「Android と iOS アプリだけ」を開発する場合は、Mac の方が何かと都合が良いわけで、 <strong>Mac + Xamarin Studio がベストチョイス</strong> なわけです。</p>\n<p><a href=\"https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/\">Roslyn 対応</a> も進んでいるし、ほとんどは OSS だし、非Windows開発者向けのIDEを引っ込めるメリットは Microsoft にはないでしょう。（Windows版の Xamarin Studio は微妙かも）</p>\n<p>(遠い)将来的には、<a href=\"https://www.visualstudio.com/ja-jp/products/code-vs.aspx\">Visual Studio Code</a>からの流れで、 Visual Studio のようなものが Mac に登場すると良いなあ、と思います。</p>\n<h2 id=\"xamarin-components-%E2%86%92-%C3%97\"><a href=\"https://components.xamarin.com/\">Xamarin Components</a> → × <a class=\"direct-link\" href=\"#xamarin-components-%E2%86%92-%C3%97\">#</a></h2>\n<p>Xamarin で使えるライブラリを有償/無償で公開できるストアなんですが、Xamarin が <a href=\"http://www.atmarkit.co.jp/fdotnet/chushin/nuget_01/nuget_01_01.html\">nuget</a> に対応して以来、徐々に影が薄くなり、同じライブラリでも nuget の方が新しい、なんてこともザラになってきました。</p>\n<p>「ライブラリを販売できる」というエコシステムも機能している感じがしないので、徐々になくなっていくのではないでしょうか（誰か困る人いるんだろうか？）。</p>\n<h2 id=\"xamarin-test-cloud-%E2%86%92-%E2%97%8E\"><a href=\"https://xamarin.com/test-cloud\">Xamarin Test cloud</a> → ◎ <a class=\"direct-link\" href=\"#xamarin-test-cloud-%E2%86%92-%E2%97%8E\">#</a></h2>\n<p>クラウド上に実際のAndroid/iOSデバイスが用意されており、それを使用してテストが行える「デバイスファーム」としてのサービス、それから、<a href=\"https://developer.xamarin.com/guides/testcloud/calabash/introduction-to-calabash/\">Carabash</a> という自動テスティングフレームワークを指します。</p>\n<p>元々は <a href=\"http://techcrunch.com/2013/04/16/xamarin-launches-test-cloud-automated-mobile-ui-testing-platform-acquires-mobile-test-company-lesspainful/\">LessPainful という企業が提供していたサービスを Xamarin が買収した</a> したものです。</p>\n<p><a href=\"https://aws.amazon.com/jp/device-farm/\">Amazon</a> や <a href=\"https://developers.google.com/cloud-test-lab/\">Google</a> もデバイスファームをサービスしているのに対し、 Azure はまだないようなので、これは Microsoft にとってメリット大だと思います。</p>\n<p>お値段高めで知られる同サービスなので、今後の値付けが気になります。</p>\n<h2 id=\"xamarin-insights-%E2%86%92-%E2%96%B3\"><a href=\"https://xamarin.com/insights\">Xamarin Insights</a> → △ <a class=\"direct-link\" href=\"#xamarin-insights-%E2%86%92-%E2%96%B3\">#</a></h2>\n<p><a href=\"https://try.crashlytics.com/\">Crashlytics</a> のようなクラッシュログ収集・解析サービスです。<br>\n　なんだか、 Microsoft には <a href=\"https://azure.microsoft.com/ja-jp/services/application-insights/\">Visual Studio Application Insights</a> というサービスがプレビュー版で出ているようで、丸かぶりですね。</p>\n<p>独立させて残す意味はあまりないので、 Application Insights に統合されていくのかなあ、という感じです。（実戦投入してるので、ちょっとどうしようかな…）</p>\n<h2 id=\"robovm-%E2%86%92-%C3%97\"><a href=\"https://robovm.com/\">RoboVM</a> → × <a class=\"direct-link\" href=\"#robovm-%E2%86%92-%C3%97\">#</a></h2>\n<p>Java で iOS アプリが開発できる(CocoaTouch がよびだせる)という、まるで Xamarin のような製品だなあと思っていたら、実際に <a href=\"https://xamarin.com/pr/xamarin-acquires-robovm\">Xamarin が買収してしまった</a> プロダクト。</p>\n<p>買収以来特に動きもなく Xamarin の製品ラインナップに載ることもなく「？」な状態が続いていました。</p>\n<p>そんな感じで、さらに Microsoft が Java を推すか？…可能性は低いと思います。</p>\n<h2 id=\"%E3%81%9D%E3%81%AE%E4%BB%96\">その他 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">#</a></h2>\n<h3 id=\"xamarin-android-player(preview)-%E2%86%92-%E2%96%B3\"><a href=\"https://developer.xamarin.com/guides/android/getting_started/installation/android-player/\">Xamarin Android Player(Preview)</a> → △ <a class=\"direct-link\" href=\"#xamarin-android-player(preview)-%E2%86%92-%E2%96%B3\">#</a></h3>\n<p>Xamarin 社が提供する高速Androidエミュレータ。</p>\n<p>Microsoft は <a href=\"https://www.visualstudio.com/ja-jp/features/msft-android-emulator-vs.aspx\">Visual Studio Emulator for Android</a> を持っていますからこれも丸かぶり。しかも VSエミュの方が多機能じゃないかな。</p>\n<p>唯一、Mac向けには残すかも知れませんね。</p>\n<h3 id=\"xamarin-profiler(preview)-%E2%86%92-%E2%97%8B\"><a href=\"https://xamarin.com/profiler\">Xamarin Profiler(Preview)</a> → ○ <a class=\"direct-link\" href=\"#xamarin-profiler(preview)-%E2%86%92-%E2%97%8B\">#</a></h3>\n<p>Xcode の Instruments みたいなのを作っちゃいました、というもの(今は Androidアプリのみ対応)。</p>\n<p>既に Visual Studio とも連携してるみたいだし、これは継続進化でしょう。</p>\n<h3 id=\"xamarin-inspector(early-preview)-%E2%86%92-%E2%97%8B\"><a href=\"https://developer.xamarin.com/guides/cross-platform/inspector/\">Xamarin Inspector(Early Preview)</a> → ○ <a class=\"direct-link\" href=\"#xamarin-inspector(early-preview)-%E2%86%92-%E2%97%8B\">#</a></h3>\n<p>Android SDK の <a href=\"http://developer.android.com/intl/ja/tools/testing-support-library/index.html\">Testing Support Library</a> に含まれる <a href=\"https://www.youtube.com/watch?v=uA54T6R8nhs\">UIAutomator Viewer</a> のようなもの。これも Visual Studio の機能とは競合しないと思うので、継続されるでしょう。</p>\n<h2 id=\"%E4%BE%A1%E6%A0%BC\">価格 <a class=\"direct-link\" href=\"#%E4%BE%A1%E6%A0%BC\">#</a></h2>\n<p>みなさんが一番期待しているのは価格でしょう。今は BUSINESS EDITION(Android/iOS) で<a href=\"https://store.xamarin.com/\">年間20万円超</a>（個人向けなら月約5000円から）。</p>\n<p>Microsoft もここの売上をアテにしてるとは到底思えないので、恐らく何らかの改善があるのではないかと思います。<br>\n　無難なところでは 「MSDN Subscription に含まれる」でしょうか。</p>\n<p>完全無料化されて、 Visual Studio Community でも使用可能、になるととても嬉しいですね。</p>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h1>\n<p>2年前の投稿、<a href=\"http://qiita.com/amay077/items/2e86b44e5f274a34b2e9\">マカーの人が Xamarin について勘違いしていそうな５つのこと</a> で、以下のように書きました。</p>\n<blockquote>\n<p>私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。(中略) Evolve2014 には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。</p>\n</blockquote>\n<p>「中立な立場の方が良いのでは？」という個人の意見は変わっていません、今度の Evolve にも <a href=\"https://blog.xamarin.com/join-apple-co-founder-steve-wozniak-at-xamarin-evolve-2016/\">Apple の Steve Wozniak が参加する</a> と話題になっているのですが、さすが Microsoft のイベントには来られないよなー、と思います。</p>\n<p>とはいえ、「いずれ・・・」と思っていたのも事実で、「ついにXデーが来たかー」、という感想です。<br>\n　マイクロソフトももはやガチガチのプロプライエタリというよりはかなりオープンな企業になっていますし、それには Xamarin（というか Mono）の活動も少なからず影響を与えていたと思います（<a href=\"https://msdn.microsoft.com/ja-jp/library/dn878908(v=vs.110).aspx\">.NETがオープンソース化される</a>とは、数年前誰が予想していたでしょうか）。<br>\n　上でまとめて来たように、マイクロソフトにとってメリットの多い買収なので、少なくとも飼い殺しのような事にはならないでしょう。</p>\n<p>個人的にも、「Xamarin が加わった新しい Microsoft」に期待して、Xamarin.Android を始めとした Xamarin 製品群を使い続けますし、Qiita を始め Tips の投稿もしていくつもりです。<br>\n　<br>\n(おまけ)</p>\n<p>今回の買収劇のオチは、</p>\n<p><strong>「MSを助ける製品の販売代理店として頑張って活動していたら、その製品がMSに買収されてなくなっちゃった」</strong></p>\n<p>という<a href=\"https://twitter.com/ytabuchi/status/702634391957217280\">某さん</a>でしょうかw</p>\n",
      "date_published": "2016-02-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android/",
      "url": "https://blog.amay077.net/blog/2016/02/24/porting-droidkaigi2016app-to-xamarin-android/",
      "title": "DroidKaigi2016アプリを Xamarin.Android に移植した話",
      "content_html": "<p>DroidKaigi2016 の開催前、<a href=\"https://github.com/konifar/droidkaigi2016\">公式アプリが有志によって開発中</a> とのツイート(だったかな？)を見て、ふとこれを「Xamarin.Android に移植してみよう」と思い、夜な夜なぼちぼちと始めました。</p>\n<!--more-->\n<p>後付けですが、移植するにあたり調査したかったのは主に、</p>\n<ul>\n<li>Android-Java の OSSライブラリがどのくらい Xamarin.Android でも利用可能か？</li>\n<li>(勉強をサボっていた)Xamarin.Android での Material Design の適用方法</li>\n</ul>\n<p>です。</p>\n<h2 id=\"xamarin.android-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6(%E7%9F%A5%E3%82%89%E3%81%AA%E3%81%84%E4%BA%BA%E5%90%91%E3%81%91)\">Xamarin.Android について(知らない人向け) <a class=\"direct-link\" href=\"#xamarin.android-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6(%E7%9F%A5%E3%82%89%E3%81%AA%E3%81%84%E4%BA%BA%E5%90%91%E3%81%91)\">#</a></h2>\n<p>Xamarin.Android は、Android API(Javaクラスライブラリを含む)の薄いラッパーで、クラス・メソッド名などは殆どそのままに、言語が Java から C# になったようなものです。<br>\n　なので、 <code>activity_main.xml</code> などのリソースファイルもほぼそのまま転用可能です。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/3232064cc8880c809aee\">Xamarin.Android で作った HelloWorld のソースを眺めてみる</a></li>\n</ul>\n<p>尚、 Xamarin.Forms というワンソースで複数プラットフォームで動作するアプリを開発できるフレームワークとは別のものです。</p>\n<h2 id=\"android-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE-xamarin.android-%E3%81%B8%E3%81%AE%E7%A7%BB%E6%A4%8D%E6%96%B9%E6%B3%95\">Android プロジェクトの Xamarin.Android への移植方法 <a class=\"direct-link\" href=\"#android-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE-xamarin.android-%E3%81%B8%E3%81%AE%E7%A7%BB%E6%A4%8D%E6%96%B9%E6%B3%95\">#</a></h2>\n<p>すごく大雑把に、以下のような手順で移植します。</p>\n<ol>\n<li>Androidプロジェクト(以下 Java と表記)の <code>/res</code> 以下を Xamarin.Androidプロジェクト(以下 Xamarin)配下にコピー</li>\n<li>Java のソースコード群を、 package構成を崩さずに Xamarin.Android で再構成（結局のところコードの書き直し）</li>\n<li>Java側で使われているOSSライブラリと同等のものを、nuget・Xamarin Components で探してXamarin側に追加（なければ <code>.jar</code> ファイルを入手して Xamarin で使えるように Binding Library を作成）</li>\n<li>あとはひたすら try and error and error and error...</li>\n</ol>\n<h2 id=\"android-data-binding-%E3%82%92%E3%80%81xamarin-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%97%E3%81%9F%E3%81%8B%EF%BC%9F\">Android Data Binding を、Xamarin ではどうしたか？ <a class=\"direct-link\" href=\"#android-data-binding-%E3%82%92%E3%80%81xamarin-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%97%E3%81%9F%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>DroidKaigi2016 のアプリには <a href=\"http://developer.android.com/intl/ja/tools/data-binding/guide.html\">DataBinding</a> が使われています。ただ、 <code>BaseObservable</code> や <code>ObservalbeField</code> によるガッツリとした OneWay/TwoWay のデータバインディングではなく、POJOなデータクラスを使う <a href=\"https://msdn.microsoft.com/ja-jp/library/system.windows.data.bindingmode(v=vs.110).aspx\">OneTime</a> なものしかなかったので、Xamarin への移植に際しては <a href=\"https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md\">ReactiveProperty</a> や、 <a href=\"https://github.com/MvvmCross/MvvmCross\">MVVMCross</a> などのデータバインディング機能に頼る必要はありませんでした。</p>\n<p>一方、Android Data Binding のもう一つの(副次的な)機能である View binding(<code>findViewById</code> が要らなくなるアレ)の対応は大変でした。</p>\n<p>まず、<code>activity_main.xml</code> などのデータバインド範囲を括る <code>&lt;layout&gt;&lt;/layout&gt;</code> ですが、このタグは Xamarin Studio は解釈してくれないのでエラーになります。このタグはもれなくコメントアウトが必要でした。また、カスタムデータバインディングが使われている箇所も同じくです。<br>\n　なので当然、Android Studio(gradle)が生成する <code>DataBinding</code> クラスも使用できません。<br>\n　仕方ない(というか始めからわかっていましたが) <code>ActivityMainBinding</code> などに相当するクラスを必要を満たす範囲で自作しました。レガシーな <code>FindViewByID()</code> を使って。</p>\n<p>Windowsアプリ開発の世界では、「DSL で記述された画面レイアウトからUI要素変数を自動生成する」ことは、IDE である Visual Sutdio が普通に行ってくれます。Xamarinアプリ開発のIDEである Xamarin Studio も、iOS の <code>.storyboard</code> ファイルを読んで、自動的に <code>HogeViewController.designer.cs</code> にUI要素変数を生成してくれます。<br>\n　Xamarin.Android でも <code>MainActivity.designer.cs</code> とか生成してくれてもいいのになー、とは頭の片隅で思い続けています。(自作Plug-inとかでなんとかできるのかな？)</p>\n<h2 id=\"droidkaigi2016-%E3%81%A7%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bjava%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%80%81xamarin%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%97%E3%81%9F%E3%81%8B%EF%BC%9F\">DroidKaigi2016 で使われているJavaライブラリを、Xamarinではどうしたか？ <a class=\"direct-link\" href=\"#droidkaigi2016-%E3%81%A7%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8Bjava%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%80%81xamarin%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%97%E3%81%9F%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>DroidKaigi2016アプリでは非常にたくさんのOSSライブラリが<a href=\"https://github.com/konifar/droidkaigi2016#libraries\">使用されており</a>、それを眺めるだけでも非常に勉強になります。このソースを読んで初めて知ったものが何個もありました。<br>\n　アプリを Xamarin.Android へ移植するにあたり、これらにどのように対応したかを記します。</p>\n<h3 id=\"android-support-libraries\">Android Support Libraries <a class=\"direct-link\" href=\"#android-support-libraries\">#</a></h3>\n<p>これらは、nuget パッケージが用意されています。要注意なのは、Xamarin Component にも<a href=\"https://components.xamarin.com/view/xamandroidsupportdesign\">同じものが存在</a>していて、大抵はそちらの方が古くて動かない、ということです。</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Android.Support.CustomTabs/\">Xamarin.Android.Support.CustomTabs</a></li>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Android.Support.Design/\">Xamarin.Android.Support.Design</a></li>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Android.Support.v4/\">Xamarin.Android.Support.v4</a></li>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Android.Support.v7.AppCompat/\">Xamarin.Android.Support.v7.AppCompat</a></li>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Android.Support.v7.CardView/\">Xamarin.Android.Support.v7.CardView</a></li>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.Android.Support.v7.RecyclerView/\">Xamarin.Android.Support.v7.RecyclerView</a></li>\n</ul>\n<h3 id=\"dagger2\"><a href=\"http://google.github.io/dagger/\">Dagger2</a> <a class=\"direct-link\" href=\"#dagger2\">#</a></h3>\n<p>Dependency Injection を Annotation ベースで行うライブラリ。<br>\n　これはないかなーと思いましたがありました。Dagger(短剣) に対して、その名も Stiletto(短剣)ｗ</p>\n<ul>\n<li><a href=\"http://stiletto.bendb.com/\">Stiletto</a> - Stiletto is a .NET port of Dagger, the lightweight Android dependency injector from Square.</li>\n</ul>\n<p>使い方も殆ど一緒。どうも Dagger1 相当の機能のようですが、アプリ側は少しの修正で対応できました。<br>\n　もっとも Dagger すら使ったことがなかったので、その理解に少々時間を要しました。<br>\n　Stiletto は、Xamarin.iOS でも使えるようですが、残念ながら PCL対応していなさそう。PCL対応のプルリクを送るのは今後やってみたいことの一つです。</p>\n<h3 id=\"retrofit2\"><a href=\"http://square.github.io/retrofit/\">Retrofit2</a> <a class=\"direct-link\" href=\"#retrofit2\">#</a></h3>\n<p>RESTful API のクライアントをサクッと作れるライブラリ。これも Xamarin 用に移植してくれてる方がいます。</p>\n<ul>\n<li><a href=\"http://paulcbetts.github.io/refit/\">Refit by paulcbetts</a> - Refit is a library heavily inspired by Square's Retrofit library</li>\n</ul>\n<p>こちらも、 Xamarin.iOS でも利用可能、PCL対応済み、カンペキです。</p>\n<h3 id=\"picasso\"><a href=\"http://square.github.io/picasso/\">Picasso</a> <a class=\"direct-link\" href=\"#picasso\">#</a></h3>\n<p>多機能且つ使いやすい Image Loader の Picasso。これは Xamarin の人が nuget パッケージを用意してくれています。</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/Square.Picasso\">Square.Picasso</a></li>\n</ul>\n<p>Picasso が依存している <code>Square.OkHttp</code>, <code>Square.OkIO</code> も nuget パッケージが用意されていて、一緒に追加されます。</p>\n<h3 id=\"android-orma\"><a href=\"https://github.com/gfx/Android-Orma\">Android-Orma</a> <a class=\"direct-link\" href=\"#android-orma\">#</a></h3>\n<p>DroidKaigi当日には、作者 @gfx さんによる即席ランチセッションも聴けたORMライブラリ。若いライブラリなのでさすがに Xamarin版はありません。<br>\n　Xamarin.Android での ORMライブラリといえば <a href=\"https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/part_3_using_sqlite_orm/\">SQLite.NET</a> が有名ですが、使い方が面倒そうだったのと、このアプリのデータ構造と量で、リレーショナルDB使うこともないだろうと、 Key-Value Store である Akavache を使いました。これは以前 Qiita に書いたのでそちらを。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/356ad0028b7e6fbf089f\">クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する</a></li>\n</ul>\n<p>とはいえ、移植の際には、かなり強引な実装をしてしまいました。パフォーマンス悪いのは私の実装が原因です。</p>\n<h3 id=\"rxjava\"><a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> <a class=\"direct-link\" href=\"#rxjava\">#</a></h3>\n<p>これはもう説明不要でしょう。本家 <a href=\"http://Rx.NET\">Rx.NET</a> を使用します。</p>\n<ul>\n<li><a href=\"https://github.com/Reactive-Extensions/Rx.NET\">Reactive-Extensions/Rx.NET: The Reactive Extensions for .NET</a></li>\n</ul>\n<h3 id=\"rxandroid\"><a href=\"https://github.com/ReactiveX/RxAndroid\">RxAndroid</a> <a class=\"direct-link\" href=\"#rxandroid\">#</a></h3>\n<p>これを使う最大の理由である <code>AndroidSchedulers.mainThread()</code> は、 <a href=\"http://Rx.NET\">Rx.NET</a> では、 <code>observable.ObserveOn(SynchronizationContext.Current)</code> で代用できるので、不要でした。</p>\n<h3 id=\"threetenabp\"><a href=\"https://github.com/JakeWharton/ThreeTenABP\">ThreeTenABP</a> <a class=\"direct-link\" href=\"#threetenabp\">#</a></h3>\n<p>これも .NET の日付時刻系クラス(<code>DateTime</code>, <code>DateTimeOffset</code>, <code>TimeSpan</code>) で特に問題ありませんでした。しかし恥ずかしながらこのライブラリも知りませんで、Java では必須になりそうですね。</p>\n<h3 id=\"stetho\"><a href=\"http://facebook.github.io/stetho/\">Stetho</a> <a class=\"direct-link\" href=\"#stetho\">#</a></h3>\n<p>デバッグを強力に支援してくれるライブラリですね。これも知りませんでした。移植の時にはとりあえず関係なさそう、と思って代替品は探していません（汗</p>\n<h3 id=\"androidflowlayout\"><a href=\"https://github.com/LyndonChin/AndroidFlowLayout\">AndroidFlowLayout</a> <a class=\"direct-link\" href=\"#androidflowlayout\">#</a></h3>\n<p>View をいい感じに並べてくれるライブラリ。Xamarin.Android用の nuget パッケージがありました。</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/AndroidFlowLayout/\">AndroidFlowLayout - NuGet Gallery</a></li>\n</ul>\n<h3 id=\"google-play-services\">Google Play services <a class=\"direct-link\" href=\"#google-play-services\">#</a></h3>\n<p>Map とか、Analytics とか。こちらも nuget に一通りパッケージが揃っています。Xamarin Components より優先的に使いましょう。</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.GooglePlayServices.Maps/\">Xamarin Google Play Services - Maps - NuGet Gallery</a></li>\n<li><a href=\"https://www.nuget.org/packages/Xamarin.GooglePlayServices.Analytics/\">Xamarin Google Play Services - Analytics - Maps - NuGet Gallery</a></li>\n</ul>\n<h3 id=\"likebutton\"><a href=\"https://github.com/jd-alexander/LikeButton\">LikeButton</a> <a class=\"direct-link\" href=\"#likebutton\">#</a></h3>\n<p>Facebook の いいね!、Twitter の Fav! のようなボタンを提供してくれるライブラリ。押した時のアニメーションがイイ感じです。<br>\n　これの Xamarin 版は探してもなかったので、 LikeButton の <code>.jar</code> ファイルを入手して、自前で Java Binding Library プロジェクトを作って使用しています。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/DroidKaigi2016Xamarin/tree/master/LikeButton\">DroidKaigi2016Xamarin/LikeButton · amay077/DroidKaigi2016Xamarin</a></li>\n</ul>\n<p>これを nuget に放流するのはやりたいことの2つ目。いくつかやったら <a href=\"https://resources.xamarin.com/open-source-contributor.html\">Xamarin から subscription もらえる</a>だろうか。。。</p>\n<h3 id=\"parceler\"><a href=\"https://github.com/johncarl81/parceler\">parceler</a> <a class=\"direct-link\" href=\"#parceler\">#</a></h3>\n<p>Parcel のことが大嫌いじゃなくなるライブラリ。移植に際しては、ModelクラスはPOCO(POJOの.NET版と思ってください)にしたかったので直接の代替品は探しませんでした。<br>\n　ModelクラスのParcel化はなんと <a href=\"http://www.newtonsoft.com/json\">JSON.NET</a> でJSONを介しちゃいました。悪手ですがパフォーマンスが気になる程でないならいいでしょ。</p>\n<h3 id=\"crashlytics\"><a href=\"https://try.crashlytics.com/\">Crashlytics</a> <a class=\"direct-link\" href=\"#crashlytics\">#</a></h3>\n<p>クラッシュレポート解析サービスですね。Xamarin なら <a href=\"https://xamarin.com/insights\">Xamarin Insights</a> がビルトインで使えるので、通常はそうするでしょう。Crashlytics 自体の Xamarin.Android 用ライブラリは、今のところ<a href=\"https://twittercommunity.com/t/xamarin-and-fabric/37289/13\">存在しないみたい</a>です。</p>\n<h3 id=\"multiline-collapsingtoolbar\"><a href=\"https://github.com/opacapp/multiline-collapsingtoolbar\">multiline-collapsingtoolbar</a> <a class=\"direct-link\" href=\"#multiline-collapsingtoolbar\">#</a></h3>\n<p>Android Design Support Library の <code>CollapsingToolbarLayout</code> って、タイトルが複数行あると、展開しても表示されない(!)んですね。なんじゃそら！ってのを解決してくれるライブラリです。<br>\n　 Xamarin.Android向けのは探したけど見つかりませんでした。移植に際してクリティカルじゃなかったので、複数行にならない <code>CollapsingToolbarLayout</code> のままです。これも nuget パッケージ化したら需要あるかも。</p>\n<h3 id=\"circularreveal\"><a href=\"https://github.com/ozodrukh/CircularReveal\">CircularReveal</a> <a class=\"direct-link\" href=\"#circularreveal\">#</a></h3>\n<p>Lollipop で追加された CircularReveal アニメーションを、それ以前のOSでも行えるライブラリです。<br>\n　これもクリティカルでないので、Xamarin版には移植していません。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>DroidKaigi2016 の公式アプリは、ホストの @konifar さんはじめ、 <a href=\"https://github.com/konifar/droidkaigi2016/graphs/contributors\">35名</a> の精鋭有志の皆さんによる爆速開発で、 2/13 に v1.00 がリリース、イベント当日もアップデートされ、私も便利に利用させていただきました。<br>\n　<br>\n　一方、私の Xamarin.Android への移植は今やっと &quot;とりあえず&quot; 終わったばかり。<br>\n　しかも、移植の元にしたのが 2/10 付けのソースですが、その日から現在に至るまで本家にマージされた <strong>Pull Request の数は 200超！</strong> 。<br>\n　「これが若さか…。」これらの Xamarin版への移植はおじさんにはとても行う気が起きません。DroidKaigi2016公式アプリの Contributors の皆さんを尊敬します。<br>\n　<br>\n　が、ひとまず動くようになったので、ソースを公開します。モダンな Androidアプリを Xamarin.Android で実現する例としては有用だと思います。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/DroidKaigi2016Xamarin\">amay077/DroidKaigi2016Xamarin: DroidKaigi2016 アプリをこっそりXamarinに移植</a></li>\n</ul>\n<p>（できればこれを、 プラットフォーム非互換にできる箇所はPCLへ移動、各画面にViewModelを置いてMVVM化、Xamarin.iOS対応、Xamarin.Forms対応とか、いろいろと育てていきたいと思っているのですが、DroidKaigi参加直後で、あれもこれもやりたい病なので、実現は未定です。）</p>\n",
      "date_published": "2016-02-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/02/24/good-bye-docomo-and-hello-iij/",
      "url": "https://blog.amay077.net/blog/2016/02/24/good-bye-docomo-and-hello-iij/",
      "title": "docomo から MNP で IIJ mio に移行した",
      "content_html": "<p>今月、スマートフォンを docomo から解約し、MNP で IIJ mio（BIC SIM） に移行した。</p>\n<!--more-->\n<p>docomo の端末は、2年前のお正月に EDION で、当時新機種だった Xperia Z1f の一括0円セールをやっていたので飛びついたもの。それまでは au を使っていたけど、月々のコストが高いので脱庭を考えていた。その時 <a href=\"/blog/2013/08/28/au-vs-ipphone-with-mvno/\">MVNO に移行しようか考えたこともあった</a> けど、当時は au 回線のMVNOに選択肢はなかったので、docomo を2年間踏み台にして、MVNO にしようと思っていた(SOFTBANK はすでに眼中になかった)。今回それを実行したことになる。</p>\n<p>docomo の2年間は、Xperia Z1f が一括0円で入手できて、その月々サポートが毎月の料金を相殺してくれたので、月4,000円未満で運用できていた。私は2台持ちとかしないので、この金額に抑えられたのは本当にラッキーだった。</p>\n<p>そのまま docomo で機種変という道もあったけど、月々サポートは終了するわ、通話定額の高額プランに変更しないといけないわで、予定通り2年間でさよならした。</p>\n<p>MNP する直前の数ヶ月で、ちょっとした気づきがあったので、書いておこうと思う。</p>\n<h2 id=\"%E3%82%AD%E3%83%A3%E3%83%AA%E3%82%A2%E3%81%AE%E7%AB%AF%E6%9C%AB%E8%A3%9C%E5%84%9F%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%82%89-xperia-z1f-%E3%81%8C-xperia-z3-compact-%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%EF%BC%81\">キャリアの端末補償サービスを利用したら Xperia Z1f が Xperia Z3 compact になった！ <a class=\"direct-link\" href=\"#%E3%82%AD%E3%83%A3%E3%83%AA%E3%82%A2%E3%81%AE%E7%AB%AF%E6%9C%AB%E8%A3%9C%E5%84%9F%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E3%82%89-xperia-z1f-%E3%81%8C-xperia-z3-compact-%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F%EF%BC%81\">#</a></h2>\n<p>docomo の <a href=\"https://www.nttdocomo.co.jp/support/trouble/delivery/hoshyo_02/index.html\">ケータイ補償サービス</a> というのに加入していると、月々500円(2年総額12,000円)で、端末故障時には5,000円(今は7,500円らしい)で、リフレッシュ品とやらに交換してくれる。</p>\n<p>この「故障時」というのは相当ゆるいらしく、私も Z1f の電池持ちが悪くなってきたという理由で利用したが、何の問題もなく交換できた。</p>\n<p>ここで大きなサプライズがあって、オンラインで交換申請の手続きを進めていくと、 <strong>Xparia Z1f の交換用端末がなく、代替端末を選択してください</strong> とのこと。「Galaxy とかだったら嫌だなー」と思いながら代替機一覧を見ると何とその中に <strong>Xperia Z3 compact</strong> があった！もう完全にそれ一択。色は選べなかったけど問題ではない。Xperia Z3 compact は現在でも中古市場で 40,000〜50,000円 する優良端末。これがケータイ補償サービスのおかげで 18,000円 で機種変できたということになる。</p>\n<p>もともとは、Z1f をリフレッシュ品に交換して、MVNO移行後も使い続けるつもりだったが、いかんせん非力感は否めないので、いつか端末を替えなければと思っていたが、Xperia Z3 compact ならあと2年戦えそうだ。</p>\n<p>というわけで MVNO 利用時の最大の問題である端末の入手コストを、大幅に減らすことができた。</p>\n<p>「交換機がなくて上位機種に代替」というケースは稀だと思うが、そうでなくても前述の通り、ケータイ補償サービスの利用審査? はゆるいっぽいので、利用しないと損なのではないかと思う。</p>\n<h2 id=\"%E5%A5%91%E7%B4%84%E6%9B%B4%E6%96%B0%E6%9C%88%E3%81%8C%E5%AE%9F%E8%B3%AA25%E3%81%8B%E6%9C%88%E7%9B%AE%E3%81%A0%E3%81%A3%E3%81%9F%E7%BD%A0\">契約更新月が実質25か月目だった罠 <a class=\"direct-link\" href=\"#%E5%A5%91%E7%B4%84%E6%9B%B4%E6%96%B0%E6%9C%88%E3%81%8C%E5%AE%9F%E8%B3%AA25%E3%81%8B%E6%9C%88%E7%9B%AE%E3%81%A0%E3%81%A3%E3%81%9F%E7%BD%A0\">#</a></h2>\n<p>docomo の契約はいわゆる「2年縛り」。契約日が1月3日だったので、2年後の1月4日だったらMNP可能かと思ったら違った。</p>\n<p><a href=\"https://www.nttdocomo.co.jp/charge/data_xi/data_plan_ninen/notice/\">docomo のサイト</a> より引用</p>\n<blockquote>\n<p>契約期間は2年間（24か月）とし、 <strong>お申込み当日から翌月末日</strong> まで（ただし、お申込みが1日の場合は、当月末日まで）を1か月目とします。</p>\n</blockquote>\n<p>「お申込み当日から翌月末日を1か月目とします」というのがクセもので、1月3日の契約の場合、2月が1ヶ月目になる。そこから24ヶ月、2年後の1月末日が契約最終日となり、2月が更新可能月となる。1月3日に契約した身としてはほとんど <strong>「2年縛り＝25ヶ月縛り」</strong> だった。</p>\n<p>しかも、月々サポートは上記のようなことはなく、契約日の月を1ヶ月目として処理されていく。なので、 <strong>「25ヶ月縛りの最終月は月々サポートが効かない(終了している) ので、それまでより高い利用料を請求される」</strong> ことになる。なんか損した気分だった。</p>\n<h2 id=\"iij-mio-%EF%BC%88%E3%81%A8%E3%81%84%E3%81%86%E3%81%8B-bic-sim%EF%BC%89%E3%82%92%E9%81%B8%E3%82%93%E3%81%A0%E7%90%86%E7%94%B1\">IIJ mio （というか BIC SIM）を選んだ理由 <a class=\"direct-link\" href=\"#iij-mio-%EF%BC%88%E3%81%A8%E3%81%84%E3%81%86%E3%81%8B-bic-sim%EF%BC%89%E3%82%92%E9%81%B8%E3%82%93%E3%81%A0%E7%90%86%E7%94%B1\">#</a></h2>\n<p>最近は MVNO でググっても、アフィ目的の比較サイトばかりで、有用な情報がなかなか得られなくなってしまった感がある。</p>\n<p>IIJ を選んだ強い理由はない。 <a href=\"http://k-tai.impress.co.jp/cda/article/keyword/36137.html\">MVNE</a> だから、という点と、 docomo WiFi をそれなりに利用していて、それに変わる公衆無線LANサービスが使いたかったから。<a href=\"http://www.biccamera.com/bc/c/service/bicsim/onsei.jsp\">BIC SIM</a> は <a href=\"http://wi2.co.jp/jp/300/\">Wi2 300</a> の利用権が特典だったのでこれにした。</p>\n<p>プランも、おそらく大多数の人が利用しているであろう「音声通話付きSIM 3GB 1,600円/月」。 docomo でも月々のデータ使用量は2GB未満だった（何せ在宅勤務で家から出ないので）。</p>\n<h2 id=\"mnp-%E5%BE%8C%E3%81%AB%E8%A1%8C%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\">MNP 後に行ったこと <a class=\"direct-link\" href=\"#mnp-%E5%BE%8C%E3%81%AB%E8%A1%8C%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\">#</a></h2>\n<h3 id=\"%E3%83%86%E3%82%B6%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96\">テザリングの有効化 <a class=\"direct-link\" href=\"#%E3%83%86%E3%82%B6%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96\">#</a></h3>\n<p>悪しき docomo の亡霊さんは、 すでに知られている方法でお祓いした。一応、 Android アプリ開発者なので。</p>\n<ul>\n<li><a href=\"http://app-roid.com/blog-entry-1498.html\">ドコモ版XPERIA Z3（SO-01G）でMVNOのIIJmioでテザリングを有効化させる手順 Approid大好き</a></li>\n</ul>\n<h3 id=\"docomo-%E3%83%97%E3%83%AA%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96\">docomo プリインアプリを無効化 <a class=\"direct-link\" href=\"#docomo-%E3%83%97%E3%83%AA%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E7%84%A1%E5%8A%B9%E5%8C%96\">#</a></h3>\n<p>電話帳やら、メールやら、オートGPSとか。root取らないと消せないので「無効」状態に。なんか電池持ちが良くなった気がする？</p>\n<h3 id=\"%E3%81%BF%E3%81%8A%E3%81%BD%E3%82%93-%E3%82%A2%E3%83%97%E3%83%AA\">みおぽん アプリ <a class=\"direct-link\" href=\"#%E3%81%BF%E3%81%8A%E3%81%BD%E3%82%93-%E3%82%A2%E3%83%97%E3%83%AA\">#</a></h3>\n<p>高速通信を ON/OFF できるのは良い。試しに OFF 状態で Google Play Music をストリーミング再生してみたが、切れることなく再生できた。常用OFFでもそんなに困らないのではないか説。</p>\n<h2 id=\"mvno%E5%90%91%E3%81%91%E7%AB%AF%E6%9C%AB%E8%A3%9C%E5%84%9F%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E6%A4%9C%E8%A8%8E%E4%B8%AD\">MVNO向け端末補償サービスを検討中 <a class=\"direct-link\" href=\"#mvno%E5%90%91%E3%81%91%E7%AB%AF%E6%9C%AB%E8%A3%9C%E5%84%9F%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E6%A4%9C%E8%A8%8E%E4%B8%AD\">#</a></h2>\n<p>前出のとおり、うまく Xperia Z3 compact を入手できたわけだが、キャリアの補償サービスのようなものは MVNO では、MVNOが販売する端末を買わない限り期待できない。</p>\n<p>中古のスマホでも補償してくれるサービスがいくつかあるので、それらを検討しているところ。私は割と安心を求めるタイプらしい。検討中の中で最有力なのがこれ:</p>\n<ul>\n<li><a href=\"http://www.next-bb.com/terminal/\">NEXT BB 端末補償サービス</a></li>\n</ul>\n<p>月々600円と他サービスより高いが、「盗難」「紛失」も補償対象なのがポイント。キャリアの補償サービスに近い内容なのはこれくらいしかない。</p>\n<p>docomo 月々4000円が、 月々1600円 になったことを考えれば、600円足しても・・・と思うが、もうしばらく情報収集してみるつもり。</p>\n<p>とりあえず４年来の希望であった MVNO への移行が無事に出来てホッ。</p>\n<p><a href=\"http://tozaiuser.hatenablog.jp/entry/2016/01/10/154245\">総務省の介入で逆に高くなっちゃった</a> ３キャリアに戻ることは、たぶんないのだろうなあ、未来の状況次第だけど。</p>\n",
      "date_published": "2016-02-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava/",
      "url": "https://blog.amay077.net/blog/2016/02/08/serialize-operation-in-rxjava/",
      "title": "RxJava で Observable の並列処理を直列化する",
      "content_html": "<p><code>rx.Observable&lt;T&gt;</code> のオペレータは、通常は非同期で、並列に処理されます。</p>\n<!--more-->\n<p>例えば以下のような場合:</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token function\">fatTask</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br> <br><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Random</span> rand <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// ランダムにスリープした後 x を onNext する</span><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">fatTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>subscriber <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">long</span> sleep <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">nextDouble</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">10000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"fatTask(\"</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\") - start.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        executor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            subscriber<span class=\"token punctuation\">.</span><span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> sleep<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>このプログラムの出力はこうなります。</p>\n<blockquote>\n<p>出力:<br>\nfatTask(1) - start.<br>\nfatTask(2) - start.<br>\nfatTask(3) - start.<br>\nfatTask(4) - start.<br>\nfatTask(5) - start.<br>\nonNext - 3<br>\nonNext - 5<br>\nonNext - 4<br>\nonNext - 2<br>\nonNext - 1</p>\n</blockquote>\n<p>fatTask は 1,2,3,4,5 の順で <em>完了を待たずに</em> 呼びだされます。<br>\nが、それぞれ処理にかかる時間が異なるので、 <code>onNext</code> が呼ばれる順は 1〜 とは限りません。</p>\n<p>ソースとなる Stream の順番を崩したくない場合は、 <code>fatTask(1)</code> が完了してから <code>fatTask(2)</code> を開始する、というように直列化しなければなりません。</p>\n<h2 id=\"observable.concat(concatwith)\">Observable.Concat(concatWith) <a class=\"direct-link\" href=\"#observable.concat(concatwith)\">#</a></h2>\n<p>これを行うのが <code>Observable.Concat</code> です(RxJava では <code>Observable.concatWith</code> のようですね)。<br>\n複数の <code>Observable</code> を順に（完了してから次へ）処理していきます。</p>\n<h3 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h3>\n<p><code>toList</code> で一旦ただの <code>List</code> にしてから、<code>concatWith</code> で数珠つなぎにします。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>list <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// fatTask(1).contat(fatTask(2)).contat(fatTask(3))... </span><br>            <span class=\"token comment\">// にする（fold 使えれば…)</span><br>            <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">:</span> list<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>task <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    task <span class=\"token operator\">=</span> <span class=\"token function\">fatTask</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>                    task <span class=\"token operator\">=</span> task<span class=\"token punctuation\">.</span><span class=\"token function\">concatWith</span><span class=\"token punctuation\">(</span><span class=\"token function\">fatTask</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">return</span> task<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>このプログラムの出力はこうなります。</p>\n<blockquote>\n<p>出力<br>\nfatTask(1) - start.<br>\nonNext - 1<br>\nfatTask(2) - start.<br>\nonNext - 2<br>\nfatTask(3) - start.<br>\nonNext - 3<br>\nfatTask(4) - start.<br>\nonNext - 4<br>\nfatTask(5) - start.<br>\nonNext - 5</p>\n</blockquote>\n<p><code>fatTask(1)</code> の完了を待ってから、次の <code>fatTask(2)</code> が実行されています。</p>\n<p>※<br>\n<a href=\"http://Rx.NET\">Rx.NET</a> では、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span> <span class=\"token generic-method\"><span class=\"token function\">Concat</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span>IObservable<span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> sources<span class=\"token punctuation\">)</span></code></pre>\n<p>で、複数の <code>IObservable</code> を一括で渡せるのですが、 RxJava にはないようで、、、。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">concatEager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> sources<span class=\"token punctuation\">)</span></code></pre>\n<p>というのがあったんですが、期待通りうごいてくれず、 Eager? なんでしょう？</p>\n<h2 id=\"%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%8C%E7%84%A1%E9%99%90%E3%83%AA%E3%82%B9%E3%83%88%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">ソースが無限リストだったら？ <a class=\"direct-link\" href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%8C%E7%84%A1%E9%99%90%E3%83%AA%E3%82%B9%E3%83%88%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">#</a></h2>\n<p><code>toList</code> で一旦ただの List にしているのが非常に気に入らないですね。<br>\n<code>range(1, 5)</code> が <code>interval(1, TimeUnit.SECONDS)</code> のように無限の Stream だったら使えません。</p>\n<p>そこで、 <code>concat</code> には、こんな overload もあります。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">static</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> observables<span class=\"token punctuation\">)</span></code></pre>\n<p>Observable<T> を通知する Observable？ ややこしいですがこう使います。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 2. を concat する</span><br>    <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span> <br>        <span class=\"token comment\">// 1. Observable&lt;Long></span><br>        <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span> <br>            <span class=\"token comment\">// 2. Long を Observable&lt;Integer> に変換 </span><br>            <span class=\"token comment\">//    → Observable&lt;Observable&lt;Integer>> になる</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token function\">fatTask</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span><span class=\"token function\">intValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>このプログラムの出力はこうなります。</p>\n<blockquote>\n<p>出力<br>\nfatTask(0) - start.<br>\nonNext - 0<br>\nfatTask(1) - start.<br>\nonNext - 1<br>\nfatTask(2) - start.<br>\nonNext - 2<br>\n…つづく</p>\n</blockquote>\n<p>無限リストながら、並列処理せずに順序通り動いてくれます。</p>\n<p><code>interval</code> の値を単純に <code>map</code> で <code>Observable&lt;Integer&gt;</code> に変換してやります。するとこれは <code>Observable&lt;Observable&lt;Integer&gt;&gt;</code> になり、<code>concat</code> 可能になります。 <code>flatMap</code> だと平坦化されちゃうのでただの <code>map</code> です。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Observable は普通は非同期で並列処理。<br>\n非同期ながら直列化したい場合は <code>Observable.concat</code> でできます。</p>\n<ol>\n<li>GPS から緯度経度を取得</li>\n<li>なんか重い計算を行う</li>\n<li>結果をテキストファイルに書き出す</li>\n</ol>\n<p>みたいな処理をするとき 3. を 1. の順序と同じにしたいのでこれを使います。</p>\n<p>はじめ自分は <code>flatMap</code> で繋いでいくだけですべて直列化されているのかなーと勘違いしていたので、これを知った時は目からウロコでした。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://www.introtorx.com/content/v1.0.10621.0/12_CombiningSequences.html\">Intro to Rx - Combining sequences</a></li>\n<li><a href=\"http://reactivex.io/documentation/operators/concat.html\">ReactiveX - Concat operator</a></li>\n<li><a href=\"http://blog.okazuki.jp/entry/20120219/1329663635\">Reactive Extensions再入門 その４１「どんどん合成するよ」 - かずきのBlog@hatena</a></li>\n<li><a href=\"https://twitter.com/neuecc/status/695604984763650050\">https://twitter.com/neuecc/status/695604984763650050</a> - @neuecc さんありがとうございます！</li>\n</ul>\n",
      "date_published": "2016-02-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/02/05/difference-immediatescheduler-and-trumpolinescheduler/",
      "url": "https://blog.amay077.net/blog/2016/02/05/difference-immediatescheduler-and-trumpolinescheduler/",
      "title": "RxJava の ImmediateScheduler と TrampolineScheduler の違い",
      "content_html": "<p>RxJava のスケジューラの中に <a href=\"http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html\"><code>TrampolineScheduler</code></a> というのがあり、<a href=\"https://twitter.com/amay077/status/693341525464346624\">なんじゃこれ？</a>とつぶやいたところ、 <a href=\"http://reactivex.io/RxJava/javadoc/rx/schedulers/TrampolineScheduler.html\">Rx.NET の <code>CurrentThreadScheduler</code> と同じっぽい</a> と教えてもらいました。</p>\n<!--more-->\n<p>その流れで、類似の Scheduler である <a href=\"http://reactivex.io/RxJava/javadoc/rx/schedulers/ImmediateScheduler.html\">ImmediateScheduler</a> との違いについて語られているトピックを紹介してもらいました。</p>\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/amay077\">@amay077</a> この辺読みとくと良いと思います（tranpolineというキーワードも登場します） <a href=\"https://t.co/A5TzOiobsC\">https://t.co/A5TzOiobsC</a></p>&mdash; Atsushi Eno (@atsushieno) <a href=\"https://twitter.com/atsushieno/status/693396949643317248\">2016, 1月 30</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h1 id=\"currentthreadscheduler-vs-immediatescheduler\">CurrentThreadScheduler vs ImmediateScheduler <a class=\"direct-link\" href=\"#currentthreadscheduler-vs-immediatescheduler\">#</a></h1>\n<ul>\n<li><a href=\"https://social.msdn.microsoft.com/Forums/en-US/7f75482f-eff2-4938-9491-47fe870989e8/currentthreadscheduler-vs-immediatescheduler?forum=rx\">CurrentThreadScheduler vs ImmediateScheduler</a></li>\n</ul>\n<p>紹介してもらったこのディスカッションを、頑張って翻訳してみました（めちゃくちゃなとこは訂正願います）。<br>\nRxJava では <code>CurrentThreadScheduler</code> を <code>TrampolineScheduler</code> に読み替えてください。</p>\n<p>－－訳ここから－－</p>\n<h2 id=\"ohad-%E6%B0%8F%E3%81%AE%E8%B3%AA%E5%95%8F\">Ohad 氏の質問 <a class=\"direct-link\" href=\"#ohad-%E6%B0%8F%E3%81%AE%E8%B3%AA%E5%95%8F\">#</a></h2>\n<blockquote>\n<p>Hi<br>\nImmediateScheduler's Schedule method is pretty straightforward - it simply invokes the action.<br>\nIn contrast, CurrentThreadScheduler seems more involved - it creates something called a trampoline, which in turn iterates over an action queue, sleeping between invocations of items in the queue and so forth</p>\n</blockquote>\n<p>やあ、<br>\n<code>ImmediateScheduler.Schedule</code> メソッドは単純をアクションを呼び出します。<br>\n対照的に、 <code>CurrentThreadScheduler</code> は複雑に見えます。トランポリンと呼ばれるものを作り、それはアクション・キューで、順次スリープの間に呼び出されます。</p>\n<blockquote>\n<p>I've been trying to follow the code with reflector but I'm having a hard time understanding the difference. As far as I can tell, CurrentThreadSchedule's schedule method calls Trampoline 's Run method, which will end up blocking the current thread until the queued action is performed (on the current thread as well) - apparently just like in the case of ImmediateScheduler</p>\n</blockquote>\n<p>私はコードを追ってみましたが、理解するのに苦労しています。分かる範囲では、 <code>CurrentThreadSchedule.Schedule</code> メソッドは <code>Trampoline.Run</code> メソッドを呼び出しています。これは現在のスレッドを、キューのアクションが実行されるまで(カレントスレッドも同様に)ブロックしようとします。 - どうも <code>ImmediateScheduler</code> のようにみえます。</p>\n<blockquote>\n<p>I realize I'm missing something, so an explanation would be really appreciated<br>\nThanks !</p>\n</blockquote>\n<p>何か理解が足りないと思うので、説明してもらえると嬉しいです。</p>\n<blockquote>\n<p>EDIT - In the meantime I've found a couple of resources that may shed light on the subject, if anyone's interested:</p>\n</blockquote>\n<p>２つのリソースを見つけました。何かの手がかりになれば。</p>\n<p><a href=\"http://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx\">http://channel9.msdn.com/blogs/j.van.gogh/controlling-concurrency-in-rx</a></p>\n<p><a href=\"http://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx\">http://community.bartdesmet.net/blogs/bart/archive/2009/11/08/jumping-the-trampoline-in-c-stack-friendly-recursion.aspx</a></p>\n<h2 id=\"dave-%E6%B0%8F%E3%81%AE%E5%9B%9E%E7%AD%94\">Dave 氏の回答 <a class=\"direct-link\" href=\"#dave-%E6%B0%8F%E3%81%AE%E5%9B%9E%E7%AD%94\">#</a></h2>\n<blockquote>\n<p>Hi,</p>\n<p>The trampoline seems to serve three purposes:</p>\n</blockquote>\n<p>やあ、<br>\nトランポリンは３つの目的を持っているように見えます。</p>\n<blockquote>\n<p>1- Prevents dead-locks from scheduler reentrancy.</p>\n</blockquote>\n<p>1- スケジューラーの割り込みからデッドロックを防ぎます。</p>\n<blockquote>\n<p>2- Prevents infinite loops in observables that require recursion through scheduler reentrancy.</p>\n</blockquote>\n<p>2- スケジューラーの割り込みを使った再帰が必要な Observable の無限ループを防ぎます。</p>\n<blockquote>\n<p>3- Cooperative single-threaded multitasking; I guess it's similar to the proposed async/await feature in C# 5.0.  Calling CurrentThreadScheduler.Schedule is sort of like using await when the currently executing code was also scheduled via CurrentThreadScheduler.</p>\n</blockquote>\n<p>3- シングルスレッドでの「<a href=\"http://www.sophia-it.com/content/%E3%83%8E%E3%83%B3%E3%83%97%E3%83%AA%E3%82%A8%E3%83%B3%E3%83%97%E3%83%86%E3%82%A3%E3%83%96%E3%83%9E%E3%83%AB%E3%83%81%E3%82%BF%E3%82%B9%E3%82%AF\">協調的マルチタスキング</a>」; 私は C# 5.0 に提案されている async/await に近いものだと思います。<code>CurrentThreadScheduler.Schedule</code> の呼び出しは、現在実行中のコードも <code>CurrentThreadScheduler</code> でスケジュールされていたときに await を使用するようなものです。（訳注: C# の async/await は協調的マルチタスキングではないと思います。これは async/await 登場以前に予想で書かれたものかと。</p>\n<blockquote>\n<p>In the observable world, calling Subscribe should be an asynchronous operation.  There's a problem if the scheduling of an observable dead-locks or blocks the current thread indefinitely because it attempts to execute immediately and never completes.</p>\n</blockquote>\n<p>Observable の世界では、<code>Subscribe</code> の呼び出しは、非同期処理で行わなければなりません。Observable のスケジューリングがデッドロックまたはカレントスレッドを無期限にブロックする場合、すぐに実行しようとしても完了しないので、問題になります。</p>\n<blockquote>\n<p>Ignore the type of scheduler for a moment and consider a scheduled action that eventually, through some sequence of method calls, uses the same scheduler to schedule another action.</p>\n</blockquote>\n<p>ちょっとこのスケジューラを無視して、いずれは、いくつかのシーケンスは別のアクションをスケジュールするために、同じスケジューラを使用することを考えてみてください。</p>\n<blockquote>\n<p>With the ImmediateScheduler, the inner action is executed immediately.</p>\n</blockquote>\n<p><code>ImmediateScheduler</code> では、”内側のアクション” はすぐに実行されます。</p>\n<blockquote>\n<ul>\n<li>If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it's released by the outer action, then these actions dead-lock.</li>\n</ul>\n</blockquote>\n<ul>\n<li>外側のアクションが、内側のアクションが依存しているリソースを取得した場合、<br>\n内側のアクションは外側のアクションがリソースを開放するまでそれを取得できず、これらのアクションはデッドロックします。</li>\n</ul>\n<blockquote>\n<ul>\n<li>If the outer action depends upon the inner action, and the inner action depends upon the outer action, then this could result in an infinite loop that never yields control to other actions.</li>\n</ul>\n</blockquote>\n<ul>\n<li>外側のアクションは内部アクションに依存し、内部アクションは外側の行動に依存している場合、他のアクションに制御が移らない無限ループになります。</li>\n</ul>\n<blockquote>\n<p>For example: Observable.Return(1).Repeat().Take(1)</p>\n</blockquote>\n<p>例: <code>Observable.Return(1).Repeat().Take(1)</code></p>\n<blockquote>\n<p>By default, Return uses the ImmediateScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return.  Because there's no trampoline in Return, this pattern repeats itself, blocking the current thread indefinitely.  Calling Subscribe on this observable never returns.  See <a href=\"https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx\">this discussion</a> for more information.</p>\n</blockquote>\n<p>既定では、<code>Return</code> は <code>ImmediateScheduler</code> を使って <code>OnNext(1)</code> そして <code>OnCompleted()</code> を呼び出します。 <code>Repeat</code> はどんな並列性も使用しません、なのですぐに <code>OnCompleted</code> を検知して、すぐに <code>Return</code> を再購読します。なぜなら、 <code>Return</code> にはトランポリンがないので、このパターンは自分自身を繰り返し、無期限に現在のスレッドをブロックし続けます。この Observable を <code>Subscribe</code> すると処理が返ってきません。詳細については、<a href=\"https://social.msdn.microsoft.com/Forums/en-US/f9c1a7a6-d6a3-44fd-ba8c-e6845b1717b2/possible-bug-repeat-observables-using-immediate-scheduler?forum=rx\">この説明</a>を参照してください。</p>\n<blockquote>\n<p>With the CurrentThreadScheduler, the inner action is scheduled (queued) for execution when the outer action ends.  Conceptually, inner actions are bounced on the trampoline until the current thread is ready to execute them.</p>\n</blockquote>\n<p><code>CurrentThreadScheduler</code> では、内側のアクションは、外側のアクションが終了された時に実行されるようにスケジュールされます。コンセプトとしては、内側のアクションは、現在のスレッドが実行可能になるまでトランポリンの上で跳ねます。</p>\n<blockquote>\n<ul>\n<li>If the outer action acquires some resource on which the inner action depends, and the inner action cannot acquire this resource until it's released by the outer action, then these actions do not dead-lock because the inner action is not executed until the outer action completes.</li>\n</ul>\n</blockquote>\n<ul>\n<li>外側のアクションが、内側のアクションが依存しているリソースを取得し、内側のアクションは外側のアクションによってそれらが解放されるまで取得できない場合、これらのアクションはデッドロックしません、なぜなら。内側のアクションは外側のアクションが終了するまで実行されないためです。</li>\n</ul>\n<blockquote>\n<ul>\n<li>If the outer action recurses when the inner action completes, then there won't be an immediately infinite loop because the inner action does not complete until the outer action completes first.</li>\n</ul>\n</blockquote>\n<ul>\n<li>外側のアクションが内側のアクションが終了した時に再帰的な場合、無限ループになりません。なぜなら、内側のアクションは外側のアクションが完了するまで完了しないためです。</li>\n</ul>\n<blockquote>\n<p>For example: Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)</p>\n</blockquote>\n<p>例: <code>Observable.Return(1, Scheduler.CurrentThread).Repeat().Take(1)</code></p>\n<blockquote>\n<p>Here, Return is using the CurrentTheadScheduler to call OnNext(1) then OnCompleted().  Repeat does not introduce any concurrency, so it sees OnCompleted immediately and then immediately resubscribes to Return; however, this second subscription to Return schedules its (inner) actions on the trampoline because it's still executing on the OnCompleted callback from the first scheduled (outer) action, thus the repetition does not occur immediately.  This allows Repeat to return a disposable to Take, which eventually calls OnCompleted, cancels the repetition by disposing Repeat, and ultimately the call from Subscribe returns.</p>\n</blockquote>\n<p>ここでは、 <code>Return</code> は <code>CurrentTheadScheduler</code> を使って <code>OnNext(1)</code> そして <code>OnCompleted()</code> を呼び出します。 <code>Repeat</code> はどんな並列性も使用しません、なのですぐに <code>OnCompleted</code> を検知して、すぐに <code>Return</code> を再購読します。しかし、この２回目の <code>Return</code> の購読（内側のアクション）はトランポリンの上にあります、なぜなら、最初にスケジュールされたアクション（外側のアクション）の <code>OnCompleted</code> コールバックの上でまだ実行中であるからです、なので繰り返しはすぐに発生しません。<br>\nこれは、<code>Repeat</code> は <code>Take</code> に disposable(subscription) を返すことができます、それはやがて <code>OnCompleted</code> を呼び出し、<code>Subscribe</code> の返値から <code>Repeat</code> の破棄により繰り返しをキャンセルします。</p>\n<blockquote>\n<p>Keep in mind that the examples with Return and Repeat do not introduce any concurrency.  When you call Subscribe, it will not return until the observable completes regardless of which of these schedulers you choose.  With the ImmediateScheduler, Take calls OnCompleted but it cannot cancel the repetition, so Subscribe blocks indefinitely.  Alternatively, the CurrentThreadScheduler allows for cooperative single-threaded multitasking between the Return and Repeat operators, thus allowing Take to cancel the repetition without having to introduce any concurrency.</p>\n</blockquote>\n<p>覚えておいて欲しいのは、 <code>Return</code> → <code>Repeat</code> はどんな並列性も使用しないことです。<code>Subscribe</code> を呼び出すと、あなたが選択した Scheduler に関係なく、Observable が終了するまで処理を返しません。 <code>ImmediateScheduler</code> では、<code>Take</code> は <code>OnCompleted</code> を呼び出しますが、繰り返しをキャンセルできません。なので <code>Subscribe</code> は無期限にブロックしてしまいます。代わりに <code>CurrentThreadScheduler</code> は <code>Return</code> と <code>Repeat</code> 操作の間、協調的マルチタスキングが可能になります、なので、並行性を使用することなく、繰り返しをキャンセルすることができます。</p>\n<p>－－訳ここまで－－</p>\n<h1 id=\"%E3%81%A4%E3%81%BE%E3%82%8A%EF%BC%9F\">つまり？ <a class=\"direct-link\" href=\"#%E3%81%A4%E3%81%BE%E3%82%8A%EF%BC%9F\">#</a></h1>\n<p><code>ImmediateScheduler</code> が処理をただ単に(割り込んで)実行するだけであるのに対し、 <code>CurrentScheduler</code>(<code>TrampolineScheduler</code>) は、擬似的なマルチタスクを行う（懐かしの VB の <a href=\"http://detail.chiebukuro.yahoo.co.jp/qa/question_detail/q1112681621\"><code>DoEvents</code></a> かぁ？）ことでデッドロックを防いでいる、と理解しました。</p>\n<p>Dave 氏の回答にあった例</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Return</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hoge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>を実行すると、確かに処理が帰ってこない、<code>Debug.WriteLine</code> へ進まないんです。</p>\n<p>これはヤバい、<code>ImmediateScheduler</code> マジやべえと。<br>\nで、 RxJava でも同じだよねえと、</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// just が ImmediateScheduler 使うのか不安だったから subscribeOn しているよ</span><br><span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribeOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Schedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">immediate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">take</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hoge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>と書いて実行してみたら、処理が帰ってくる！ <code>Log.debug</code> も実行される！<br>\nなんだこの違いは？改善されているのか、試し方が悪いのか。。。</p>\n<p>なんだかモヤモヤした終わりかたですが、今回は <code>ImmediateScheduler</code> はちょっと要注意だというところまでです。</p>\n<blockquote>\n<p>In the observable world, calling Subscribe should be an asynchronous operation.</p>\n</blockquote>\n<p>との言葉通り、<a href=\"http://Rx.NET/RxJava\">Rx.NET/RxJava</a> を使うときは非同期にしたい事が全てだと思いますが、オペレータによっては既定で <code>ImmediateScheduler</code> を使うものもあるので、必ず <code>subscribeOn/observeOn</code> をするクセをつけておいた方がいいのかな？と思いました。</p>\n",
      "date_published": "2016-02-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/01/28/creating-android-databinding-with-mvvm-pattern-sample/",
      "url": "https://blog.amay077.net/blog/2016/01/28/creating-android-databinding-with-mvvm-pattern-sample/",
      "title": "Android Data Binding + MVVMパターンのサンプルを書いてみた",
      "content_html": "<p><code>notifyPropertyChanged</code> とか、<a href=\"https://ufcpp.wordpress.com/2009/12/28/inotifypropertychanged-%E3%81%AE%E5%AE%9F%E8%A3%85/\">どこかで見たことのある</a>機能が満載の <a href=\"http://developer.android.com/intl/ja/tools/data-binding/guide.html\">Android Data Binding</a> ですが、登場以来あまり追えてなかったのでやっとサンプルをつくってみました。</p>\n<!--more-->\n<p>といっても</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/8464a22e3063642112ed\">RxJava + MVVM パターンで作るストップウォッチアプリ - Qiita</a></li>\n</ul>\n<p>で作ったストップウォッチアプリを Data Binding 化しただけです。</p>\n<p><a href=\"http://qiita.com/amay077/items/8464a22e3063642112ed#model-viewmodel-viewmvvm-%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B\">前回</a> との違いを図に示します。</p>\n<p><img src=\"/img/posts/rxjava_mvvm_stopwatch_03.png\" alt=\"\"></p>\n<ul>\n<li>View-ViewModel で全面的に使用していた <code>rx.Observable&lt;T&gt;</code> の代わりに、<code>ObservableField&lt;T&gt;</code> を使用。</li>\n<li>View側で「オレオレDataBinding」を実装していた箇所を、Android の Data Binding に置き換え。つまりバインディングの定義はレイアウトxmlへ記述。</li>\n<li>Model は相変わらず <code>rx.Observable&lt;T&gt;</code> のまま。なので ViewModel で <code>rx.Observable&lt;T&gt;</code> → <code>ObservableField&lt;T&gt;</code> へ変換。</li>\n<li>メソッドとのバインドに <code>Command</code> を使用していたが、Android Data Binding の <a href=\"http://developer.android.com/intl/ja/tools/data-binding/guide.html#binding_events\">Binding Events</a> に置き換え。</li>\n<li>ListView とデータ群のバインディングの方法が分からなかったので、<a href=\"http://developer.android.com/intl/ja/tools/data-binding/guide.html#custom_setters\">カスタムBinding</a>で対応。(listItem のバインディングじゃなくて、リストの件数の増減を反映させるやつ。)</li>\n<li>ArrayAdapter 使ってたんだけどこいつは Binding に対応していない？ので Adapter を自作。</li>\n</ul>\n<h2 id=\"mainactivity-%E3%81%AE%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E5%AE%9A%E7%BE%A9\">MainActivity のバインディングの定義 <a class=\"direct-link\" href=\"#mainactivity-%E3%81%AE%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E5%AE%9A%E7%BE%A9\">#</a></h2>\n<p><code>activity_main.xml</code> はこんな感じ。</p>\n<p><code>@{ }</code> で  <code>MainViewModel</code> に用意した <code>ObservableField&lt;T&gt;</code> または、イベントハンドラとバインドしてます。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!--activity_main.xml--></span><br><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>tools</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/tools<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>app</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>variable</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewModel<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.amay077.stopwatchapp.viewmodel.MainViewModel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>data</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>paddingLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@dimen/activity_horizontal_margin<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>paddingRight</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@dimen/activity_horizontal_margin<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>paddingTop</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@dimen/activity_vertical_margin<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>paddingBottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@dimen/activity_vertical_margin<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>context</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/textTime<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">tools:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>00:00.000<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.formattedTime}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>textSize</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50sp<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>gravity</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>center_horizontal<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonStartStop<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.runButtonTitle}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>onClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.onClickStartOrStop}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonLap<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Lap<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>enabled</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.isRunning}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>onClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.onClickLap}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Switch</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/switchVisibleMillis<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>checked</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.isVisibleMillis}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>onClick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel.onClickToggleVisibleMillis}<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>小数点以下を表示<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ListView</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/listLaps<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">app:</span>formattedLaps</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@{viewModel}<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layout</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>ListView で <code>app:formattedLaps=&quot;@{viewModel}&quot;</code> としているところだけが特殊で、これは <code>MainActivity.java</code> に定義したカスタムSetter を呼び出します。</p>\n<p><code>MainActivity.java</code> はこんな感じ。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//MainActivity.java</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AppCompatActivity</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token comment\">/* final */</span>  <span class=\"token class-name\">MainViewModel</span> _viewModel<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CompositeSubscription</span> _subscriptions <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompositeSubscription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">ActivityMainBinding</span> binding <span class=\"token operator\">=</span> <span class=\"token class-name\">DataBindingUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        _viewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MainViewModel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        binding<span class=\"token punctuation\">.</span><span class=\"token function\">setViewModel</span><span class=\"token punctuation\">(</span>_viewModel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// ■ViewModel からの Message の受信（省略）</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">/**<br>     * ListView と ViewModel のカスタムバインディング<br>     *<br>     * TODO 本当は viewModel.formattedLaps とバインドしたい<br>     */</span><br>    <span class=\"token annotation punctuation\">@BindingAdapter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"formattedLaps\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setFormattedLaps</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListView</span> listView<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">MainViewModel</span> viewModel<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">LapAdapter</span> adapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LapAdapter</span><span class=\"token punctuation\">(</span>listView<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        listView<span class=\"token punctuation\">.</span><span class=\"token function\">setAdapter</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// formattedLaps が変化した時に呼ばれるイベントで、Adapterを洗い替え。</span><br>        viewModel<span class=\"token punctuation\">.</span>formattedLaps<span class=\"token punctuation\">.</span><span class=\"token function\">addOnPropertyChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">android<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span></span>Observable<span class=\"token punctuation\">.</span>OnPropertyChangedCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token namespace\">android<span class=\"token punctuation\">.</span>databinding<span class=\"token punctuation\">.</span></span>Observable</span> sender<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> propertyId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                adapter<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                adapter<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">.</span>formattedLaps<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// バインド時に値を更新</span><br>        adapter<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        adapter<span class=\"token punctuation\">.</span><span class=\"token function\">addAll</span><span class=\"token punctuation\">(</span>viewModel<span class=\"token punctuation\">.</span>formattedLaps<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        _viewModel<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>オレオレBindingがごっそり消えてスッキリ。<br>\n<code>setFormattedLaps</code> がカスタムSetterで、この中で <code>MainViewModel.formatterLaps</code> を監視し、値が変わったら Adapter を総入れ替えしてます。が、これが正しいやり方かわからない。<br>\n<a href=\"https://android.googlesource.com/platform/frameworks/data-binding/+/android-6.0.0_r7/extensions/baseAdapters/src/main/java/android/databinding/adapters\">extensions/baseAdapters/src/main/java/android/databinding/adapters</a> にはそれらしいのがないでござるよ。。。</p>\n<h2 id=\"viewmodel-%E5%81%B4\">ViewModel 側 <a class=\"direct-link\" href=\"#viewmodel-%E5%81%B4\">#</a></h2>\n<p>この辺みてください。大したことはやってないです。（急に雑になったw）</p>\n<ul>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java\">StopWatchSample/MainViewModel.java</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/ObservableUtil.java\">StopWatchSample/ObservableUtil.java</a></li>\n</ul>\n<p><code>ObservableUtil.toObservableField</code> とか、もうどっかの誰かがやってそうだし、事実上標準の何かが出てきそうな気がすごくします。</p>\n<h2 id=\"%E3%81%8A%E3%81%BE%E3%81%91\">おまけ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">#</a></h2>\n<h3 id=\"messenger-%E3%82%92-rxjava-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB%E3%81%97%E3%81%9F\">Messenger を RxJava ベースにした <a class=\"direct-link\" href=\"#messenger-%E3%82%92-rxjava-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB%E3%81%97%E3%81%9F\">#</a></h3>\n<ul>\n<li><a href=\"http://qiita.com/yyaammaa/items/57d8baa1e80346e67e47\">OttoからRxJavaへの移行ガイド - Qiita</a></li>\n<li><a href=\"http://qiita.com/kubode/items/a4ece37834446c9a39c8\">Android - RxJavaでEventBusを作った - Qiita</a></li>\n</ul>\n<p>らしいので、自作してた <code>Messenger</code> を <a href=\"https://github.com/amay077/StopWatchSample/blob/android_data_binding_v1_20160128/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/frameworks/messengers/Messenger.java\">RxJava ベースにしてみました</a>。<br>\nViewModel→Viewの通知<br>\nにしか使ってないので、あまり <code>rx.Observable&lt;T&gt;</code> にする旨味はなかったですね。あ、<code>ofType</code> って便利ですね。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>今回作ったアプリの全ソースは</p>\n<ul>\n<li><a href=\"https://github.com/amay077/StopWatchSample/tree/android_data_binding_v1_20160128/StopWatchAppXamarin/StopWatchApp.Android\">StopWatchApp.Android</a></li>\n</ul>\n<p>です。</p>\n<p>.NETアプリケーション開発では、ViewModel を View にバインドすることが殆どなので、典型的な例としてやってみました。</p>\n<p>レイアウトに直接バインドを定義できるので、コードビハインド(Javaのソース)はスッキリしますが、個人的にはあまり好きではありません。<br>\nコードビハインドに(<code>textTime.SetBinding(v =&gt; v.Text, viewModel.Time)</code> みたく)書いた方が、定義情報がまとまっていて管理しやすい、デバッグしやすいと思うからです。（同じ理由で、xmlに直接記述する <a href=\"http://developer.android.com/intl/ja/tools/data-binding/guide.html#expression_language\">Expression Language</a> も好きではありません。）<br>\nが、今のところ、Android Data Binding では、レイアウトXMLでしかバインディングを定義できないようですね。</p>\n<p>ともあれ、<a href=\"https://github.com/gueei/AndroidBinding\">AndroidBinding</a> とか Butter Knife はこれで駆逐されていく（前者はすでに息してなさそうですが）と思うので、新しいアプリ開発では積極的に使っていこうかなと思います。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://developer.android.com/intl/ja/tools/data-binding/guide.html\">Data Binding Guide ｜ Android Developers</a></li>\n<li><a href=\"http://qiita.com/izumin5210/items/2784576d86ce6b9b51e6#after-listview\">Android - Butter Knife、今までありがとう。 Data Binding、これからよろしく。 - Qiita</a></li>\n<li><a href=\"http://tech.recruit-mp.co.jp/mobile/android-data-binding/\">[Android] – Data Bindingつかってみた – NET BIZ DIV. TECH BLOG</a></li>\n</ul>\n",
      "date_published": "2016-01-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/01/21/ixjava-the-best-library-of-list-operations/",
      "url": "https://blog.amay077.net/blog/2016/01/21/ixjava-the-best-library-of-list-operations/",
      "title": "Android-Java でリスト操作するなら IxJava が決定版だと思う",
      "content_html": "<p>Android では Java8 が使えないため、 'Yet another Stream API' なライブラリがいくつかあります。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://qiita.com/tsumuchan/items/8e438a2ea653fa786c23\">Androidでリスト操作するなら、Lightweight-Stream-APIが便利 - Qiita</a></li>\n<li><a href=\"http://qiita.com/k--kato/items/ec7ab8b392fa8bb0a732\">JavaにC#のLINQを移植してみた - jLinqer - Qiita</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1217228/what-is-the-java-equivalent-for-linq\">What is the Java equivalent for LINQ? - Stack Overflow</a></li>\n</ul>\n<p>普段 C# を使っているため LINQ to Objects の便利さをなんとか Androidアプリ開発でも享受したい。<br>\nそこで個人的に「これだ！」と思っているライブラリが IxJava です。</p>\n<ul>\n<li><a href=\"https://github.com/akarnokd/ixjava\">akarnokd/ixjava: Interactive Extensions for Java</a></li>\n</ul>\n<h2 id=\"ixjava-%E3%81%A8%E3%81%AF%EF%BC%9F\">IxJava とは？ <a class=\"direct-link\" href=\"#ixjava-%E3%81%A8%E3%81%AF%EF%BC%9F\">#</a></h2>\n<p>一言でいえば <em>「LINQ to Objects の Java版」</em> です。</p>\n<p>README より、</p>\n<blockquote>\n<p>Interactive Extensions for Java, the dual of RxJava. Originally implemented in the Reactive4Java framework, now converted to work with RxJava.</p>\n<p>The aim is to provide pull-based datastream support with the same naming as in RxJava mainly for the pre-Java-8 world.</p>\n</blockquote>\n<p>開発者の akarnokd 氏は、 RxJava の登場以前から <a href=\"https://code.google.com/p/reactive4java/\">Reactive4Java</a> という「Java版Rx」を開発しており、これには大きく２つの機能が含まれていました。</p>\n<ul>\n<li><code>Reactive&lt;T&gt;</code> : Reactive Extension の Java実装</li>\n<li><code>Interactive&lt;T&gt;</code> : LINQ to Objects の Java実装</li>\n</ul>\n<p>そう、 akarnokd 氏は、Rx と共に LINQ も Java に移植していたのです。<br>\nその後、彼は RxJava への参加を表明し、 reactive4java は開発終了となりましたが、RxJava には LINQ 相当の機能は含まれません。<br>\nそこで彼は、 <code>Interactive&lt;T&gt;</code> だけを <em>IxJava</em> として切り離し、純粋な <em>「LINQ to Object for Java」</em> として開発続行したのです。</p>\n<p>akarnokd 氏は RxJava の <a href=\"https://github.com/ReactiveX/RxJava/graphs/contributors\">Contributors</a> を見ると中心的な開発者であると思われます。そんな彼が開発した ixjava も安心できる品質ではないかと思います。（ちょっと ixjava の知名度が低いのが残念ですが。ただ reactive4java の <code>Interactive&lt;T&gt;</code> を使ってきましたが問題はありません。）</p>\n<h2 id=\"%E4%BD%BF%E3%81%84%E6%96%B9%EF%BC%88android-%E3%81%AE%E5%A0%B4%E5%90%88%EF%BC%89\">使い方（Android の場合） <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9%EF%BC%88android-%E3%81%AE%E5%A0%B4%E5%90%88%EF%BC%89\">#</a></h2>\n<h3 id=\"%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95\">導入方法 <a class=\"direct-link\" href=\"#%E5%B0%8E%E5%85%A5%E6%96%B9%E6%B3%95\">#</a></h3>\n<p>Module の <code>build.gradle</code> に以下を追加するだけです。</p>\n<pre class=\"language-java\"><code class=\"language-java\">dependencies <span class=\"token punctuation\">{</span><br>    compile <span class=\"token string\">\"com.github.akarnokd:ixjava:0.90.0\"</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E4%BD%BF%E7%94%A8%E4%BE%8B\">使用例 <a class=\"direct-link\" href=\"#%E4%BD%BF%E7%94%A8%E4%BE%8B\">#</a></h3>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/9d2941283c4a5f61f302\">LINQ to Objects と Java8-Stream API の対応表 - Qiita</a></li>\n</ul>\n<p>のサンプルコードの一部を IxJava で書いてみました。</p>\n<h4 id=\"%E6%8A%BD%E5%87%BA(filter)%E3%80%81%E4%B8%A6%E3%81%B9%E6%9B%BF%E3%81%88(orderby)%E3%80%81%E5%B0%84%E5%BD%B1(map)\">抽出(filter)、並べ替え(orderBy)、射影(map) <a class=\"direct-link\" href=\"#%E6%8A%BD%E5%87%BA(filter)%E3%80%81%E4%B8%A6%E3%81%B9%E6%9B%BF%E3%81%88(orderby)%E3%80%81%E5%B0%84%E5%BD%B1(map)\">#</a></h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//ixjava</span><br><span class=\"token class-name\">Ix</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可視性向上の為のなんちゃってラムダ</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">orderBy</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// OrderByDescending がないので</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>//出力\n80 60 40 20 0\n</code></pre>\n<h4 id=\"%E5%B9%B3%E5%9D%A6%E5%8C%96%E3%81%97%E3%81%A6%E5%B0%84%E5%BD%B1(flatmap)\">平坦化して射影(flatMap) <a class=\"direct-link\" href=\"#%E5%B9%B3%E5%9D%A6%E5%8C%96%E3%81%97%E3%81%A6%E5%B0%84%E5%BD%B1(flatmap)\">#</a></h4>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//ixjava</span><br><span class=\"token class-name\">Ix</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>x −<span class=\"token operator\">></span> <span class=\"token class-name\">Ix</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>//出力\n10 \n20 21 \n30 31 32 \n40 41 42 43 \n50 51 52 53 54\n</code></pre>\n<h4 id=\"2%E3%81%A4%E3%81%AE%E5%80%A4%E3%82%92%E6%8F%83%E3%81%88%E3%81%A6%E6%B5%81%E3%81%99(zip)\">2つの値を揃えて流す(zip) <a class=\"direct-link\" href=\"#2%E3%81%A4%E3%81%AE%E5%80%A4%E3%82%92%E6%8F%83%E3%81%88%E3%81%A6%E6%B5%81%E3%81%99(zip)\">#</a></h4>\n<p>Stream API には無いが IxJava にはあるのだよ。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//ixjava</span><br><span class=\"token class-name\">Ix</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Ix</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fuga\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"piyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>    <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>//出力\n{ first = 1, second = hoge }\n{ first = 2, second = fuga }\n{ first = 3, second = piyo }\n</code></pre>\n<h4 id=\"ix-%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E4%B8%80%E8%A6%A7\">Ix<T> のメソッド一覧 <a class=\"direct-link\" href=\"#ix-%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E4%B8%80%E8%A6%A7\">#</a></h4>\n<p>あとはテキトーに抜き出したメソッド一覧を置いておきますね。<br>\nRxJava や LINQ とほとんど同じなのでだいたい想像付くと思います。<br>\n（何気に <code>toObservable</code> で <code>Observable&lt;T&gt;</code> にも変換できますね。）<br>\nあ、あとタイトルには Androidの〜 と書きましたが、普通の Java でもフツーに使えますので。</p>\n<ul>\n<li>aggregate</li>\n<li>all</li>\n<li>any</li>\n<li>argAndMax</li>\n<li>argAndMin</li>\n<li>averageBigDecimal</li>\n<li>averageBigInteger</li>\n<li>averageDouble</li>\n<li>averageFloat</li>\n<li>averageInt</li>\n<li>averageLong</li>\n<li>buffer</li>\n<li>call</li>\n<li>concat</li>\n<li>concatWith</li>\n<li>concatWithAll</li>\n<li>contains</li>\n<li>count</li>\n<li>countLong</li>\n<li>defer</li>\n<li>dematerialize</li>\n<li>distinct</li>\n<li>distinctNext</li>\n<li>doOnCompleted</li>\n<li>doOnNext</li>\n<li>doWhile</li>\n<li>empty</li>\n<li>endWith</li>\n<li>error</li>\n<li>filter</li>\n<li>filterIndexed</li>\n<li>first</li>\n<li>flatMap</li>\n<li>forEach</li>\n<li>from</li>\n<li>fromPart</li>\n<li>generate</li>\n<li>groupBy</li>\n<li>into</li>\n<li>isEmpty</li>\n<li>iterator</li>\n<li>join</li>\n<li>just</li>\n<li>last</li>\n<li>map</li>\n<li>mapIndexed</li>\n<li>materialize</li>\n<li>max</li>\n<li>maxBy</li>\n<li>mayBy</li>\n<li>memoize</li>\n<li>memoizeAll</li>\n<li>min</li>\n<li>minBy</li>\n<li>minxBy</li>\n<li>newBuilder</li>\n<li>ofType</li>\n<li>orderBy</li>\n<li>print</li>\n<li>println</li>\n<li>prune</li>\n<li>publish</li>\n<li>range</li>\n<li>removeAll</li>\n<li>repeat</li>\n<li>replay</li>\n<li>run</li>\n<li>scan</li>\n<li>share</li>\n<li>skipLast</li>\n<li>startWith</li>\n<li>subsequent</li>\n<li>sumBigDecimal</li>\n<li>sumBigInteger</li>\n<li>sumDouble</li>\n<li>sumFloat</li>\n<li>sumInt</li>\n<li>sumIntAsDouble</li>\n<li>sumLong</li>\n<li>sumLongAsDouble</li>\n<li>take</li>\n<li>takeLast</li>\n<li>toArray</li>\n<li>toBuilder</li>\n<li>toHashMap</li>\n<li>toHashMultimap</li>\n<li>toList</li>\n<li>toMap</li>\n<li>toMultimap</li>\n<li>toObservable</li>\n<li>zip</li>\n</ul>\n",
      "date_published": "2016-01-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2016/01/16/misunderstood-task-to-observable-conversion/",
      "url": "https://blog.amay077.net/blog/2016/01/16/misunderstood-task-to-observable-conversion/",
      "title": "Task→Observable 変換でハマったこと",
      "content_html": "<p>.NET の <code>Task&lt;T&gt;</code> は、Reactive Extensions が提供する拡張メソッド <code>ToObservable()</code> で <code>IObservable&lt;T&gt;</code> に変換できます。</p>\n<p>なにも考えずに <code>ToObservable()</code> を連発していたら、盛大にハマったのでメモ。</p>\n<!--more-->\n<h2 id=\"task.run().toobservable()-%E3%81%A8%E3%81%8B%E3%80%81%E6%84%8F%E5%91%B3%E3%81%AA%E3%81%84%E3%81%A3%E3%81%97%E3%82%87\">Task.Run().ToObservable() とか、意味ないっしょ <a class=\"direct-link\" href=\"#task.run().toobservable()-%E3%81%A8%E3%81%8B%E3%80%81%E6%84%8F%E5%91%B3%E3%81%AA%E3%81%84%E3%81%A3%E3%81%97%E3%82%87\">#</a></h2>\n<p>ダメなコード。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">IObservable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> incrementObservable <span class=\"token operator\">=</span> Task<span class=\"token punctuation\">.</span>Run <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\tDebug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"increment! - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span>ToObservable <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ready...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>incrementObservable <span class=\"token comment\">// インクリメント</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ３回繰り返す</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><br>\t\tx  <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"OnNext(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">x</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\tex <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"OnError(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">ex<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnCompleted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></code></pre>\n<p><code>incrementObservable</code> は、副作用ありありですが、外部変数 i を +1 して後続に流す <code>IObservable&lt;int&gt;</code> です。<br>\n　これを <code>.Repeat(3)</code> して <code>.Subscribe</code> してますから、</p>\n<blockquote>\n<p>Ready...<br>\nincrement! - 1<br>\nOnNext(1)<br>\nincrement! - 2<br>\nOnNext(2)<br>\nincrement! - 3<br>\nOnNext(3)<br>\nOnCompleted</p>\n</blockquote>\n<p>という出力を期待してました。<br>\nが、実際の出力はこう。</p>\n<blockquote>\n<p>increment! - 1<br>\nReady...<br>\nOnNext(1)<br>\nOnNext(1)<br>\nOnNext(1)<br>\nOnCompleted</p>\n</blockquote>\n<p>Subscribe する前に Task が実行されてるし、 repeat してるのに increment されない。。。</p>\n<p>「・・・ん？ Task.Run().ToObservable() って、タスクを実行した結果を IObservable 化してるだけじゃね？」</p>\n<p>コード見たまんまなんですが、これに気づくのに１時間かかりました。。。</p>\n<p>期待通り動くのはこう↓。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">IObservable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> incrementObservable <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">FromAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\tDebug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"increment! - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Ready...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>incrementObservable <span class=\"token comment\">// インクリメント</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">Repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ３回繰り返す</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><br>\t\tx  <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"OnNext(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">x</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\tex <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"OnError(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">ex<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span></span><span class=\"token string\">)\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OnCompleted\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br></code></pre>\n<p><code>Observable.FromAsync</code> で Task の実行そのものを IObservable 化します。<br>\nこれの結果は正しくこう↓なりました。</p>\n<blockquote>\n<p>Ready...<br>\nincrement! - 1<br>\nOnNext(1)<br>\nincrement! - 2<br>\nOnNext(2)<br>\nincrement! - 3<br>\nOnNext(3)<br>\nOnCompleted</p>\n</blockquote>\n<h2 id=\"task-%E3%81%AF%EF%BC%91%E5%9B%9E%E3%81%97%E3%81%8B%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\">Task は１回しか実行できない <a class=\"direct-link\" href=\"#task-%E3%81%AF%EF%BC%91%E5%9B%9E%E3%81%97%E3%81%8B%E5%AE%9F%E8%A1%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\">#</a></h2>\n<p>ところで、 <code>Task&lt;T&gt;</code> は一度実行すると、２度目は実行できません。（Furure や Promise もそうだっけ）</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> incrementTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>\ti<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>\tDebug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token interpolation-string\"><span class=\"token string\">$\"increment! - </span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">i</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>incrementTask<span class=\"token punctuation\">.</span><span class=\"token function\">RunSynchronously</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>incrementTask<span class=\"token punctuation\">.</span><span class=\"token function\">RunSynchronously</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre>\n<p>このコードは２回目の <code>RunSynchronously()</code> で例外がでます。</p>\n<p>となると、 <code>incrementTask.ToObservable()</code> したとしても、期待通り動いてくれなさそうです。<br>\n（そもそも Task は <code>Start</code> などしないと実行されないので、Observable のチェインの中でいつ呼ぶの？）</p>\n<p>というわけで、 <code>Task.ToObservable()</code> は、どういう時に使えばいいのかよくわかりませんでした。だれか教えて下さい。（汗）</p>\n",
      "date_published": "2016-01-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2015/12/24/creating-stopwatchapp-using-rxjava-and-mvvm-patternn/",
      "url": "https://blog.amay077.net/blog/2015/12/24/creating-stopwatchapp-using-rxjava-and-mvvm-patternn/",
      "title": "RxJava + MVVM パターンで作るストップウォッチアプリ",
      "content_html": "<p>これは <a href=\"http://qiita.com/advent-calendar/2015/rxjava\">RxJava Advent Calendar 2015 24日目</a> の記事です。</p>\n<p>先日、</p>\n<ul>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/2015/12/20/012007\">JXUGC #9 Xamarin.Forms Mvvm 実装方法 Teachathon を開催しました - Xamarin 日本語情報</a></li>\n</ul>\n<p>というイベントがありまして、エクセルソフトの田淵さんが作成したストップウォッチのアプリケーション(注:田淵さんはプログラマではないｗ)を、MVVM識者の方々が「MVVMとしてはこうあるべきだ」と叩きまくる、という恐ろしい?ものでした。</p>\n<!--more-->\n<p>私はこの勉強会には参加できなかったのですが、ストリーミングとか見て、</p>\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">僕もストップウォッチ作ってみるかー</p>&mdash; ジェットあめいカスタム (@amay077) <a href=\"https://twitter.com/amay077/status/677561989359472640\">2015, 12月 17</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>などとつぶやいたらご指名されてしまいました(^^)<br>\nこのイベントは Xamarin を使ったアプリ製作でしたが、せっかくなので <strong>RxJava + MVVM</strong> で作ってみました。<br>\n(ご指名に応えないといけないのでその後 Xamarin版も製作)</p>\n<h1 id=\"%E3%82%B9%E3%83%88%E3%83%83%E3%83%97%E3%82%A6%E3%82%A9%E3%83%83%E3%83%81%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E4%BB%95%E6%A7%98\">ストップウォッチアプリの仕様 <a class=\"direct-link\" href=\"#%E3%82%B9%E3%83%88%E3%83%83%E3%83%97%E3%82%A6%E3%82%A9%E3%83%83%E3%83%81%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E4%BB%95%E6%A7%98\">#</a></h1>\n<p>上記リンクからの引用です。</p>\n<ul>\n<li>Start/Stop ボタン、Lap ボタン</li>\n<li>StartするとラップボタンはEnable.ストップするとDisable\n<ul>\n<li>スタートしてからの経過時間をXX'XX.XXXみたいな感じで表示</li>\n</ul>\n</li>\n<li>履歴をListViewで残す</li>\n<li>ストップしたら結果をダイアログで出して分岐？</li>\n<li>今までのラップよりMin, Maxなどをダイアログに表示して次のページに遷移 ←ここ勝手に Toast に仕様変更しましたｗ</li>\n<li>スイッチの切り替えで、ミリ秒の桁を表示/非表示</li>\n</ul>\n<p>こんな機能を満たすサンプルを</p>\n<ol>\n<li>RxJava を使った Android アプリ(Java言語)</li>\n<li>Reactive Extensions, ReactiveProperty を使った Android アプリ(Xamarin, C#言語)</li>\n<li>Reactive Extensions, ReactiveProperty を使った iOS アプリ(Xamarin, C#言語)</li>\n</ol>\n<p>でそれぞれ作ってみました。</p>\n<h1 id=\"%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E3%80%81%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\">とりあえず、作ったもの <a class=\"direct-link\" href=\"#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E3%80%81%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%82%E3%81%AE\">#</a></h1>\n<p><img src=\"/img/posts/rxjava_mvvm_stopwatch_00.gif\" alt=\"つくったもの\"></p>\n<p>左は Android-Java製、右は Xamarin.iOS製です。(Xamarin.Android製は省略)</p>\n<h1 id=\"1.-rxjava-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F-android-%E3%82%A2%E3%83%97%E3%83%AA(java%E8%A8%80%E8%AA%9E)\">1. RxJava を使った Android アプリ(Java言語) <a class=\"direct-link\" href=\"#1.-rxjava-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F-android-%E3%82%A2%E3%83%97%E3%83%AA(java%E8%A8%80%E8%AA%9E)\">#</a></h1>\n<h2 id=\"model-viewmodel-view(mvvm)-%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B\">Model-ViewModel-View(MVVM) で考える <a class=\"direct-link\" href=\"#model-viewmodel-view(mvvm)-%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B\">#</a></h2>\n<p>構成図っぽいものを描くとこんな感じになります。</p>\n<p><img src=\"/img/posts/rxjava_mvvm_stopwatch_01.png\" alt=\"クラス図的なの\"></p>\n<h3 id=\"model\">Model <a class=\"direct-link\" href=\"#model\">#</a></h3>\n<p>この仕様だと、ストップウォッチの一通りの機能を満たすクラスが Model になります。これを <code>StopWatchModel</code> という名前にしました。</p>\n<p><strong>「ロジック」は、すべてこの層（このクラス）に書きます。</strong><br>\n　<br>\n　例えば、ストップウォッチのタイマーを実行するには、 RxJava で <code>Observable.interval</code> としますが、これを ViewModel層に書いたら「負け」です。<br>\n　<br>\nまた、ストップウォッチの実行は、画面の表示/破棄と連動しなくてよい(画面遷移しても計測し続けるべき)なので、StopWatchModel の生存期間は、アプリケーションの起動時から終了まで、という事になります。</p>\n<p>RxJava を全面的に使いたいので、 StopWatchModel のプロパティは全て <code>Observable&lt;T&gt;</code> にしました。RxJava を使わなかったらプロパティではなくコールバックですね。<br>\n　何かメソッドを実行したら、その結果は全て <code>Observable&lt;T&gt;</code> を通じて通知される仕組みです。なので原則として Model のメソッドの戻り値は <code>void</code> です。</p>\n<h3 id=\"viewmodel\">ViewModel <a class=\"direct-link\" href=\"#viewmodel\">#</a></h3>\n<p>しつこいようですが <strong>ここにロジックを書いたら負け</strong> です。<br>\n個人としては、条件分岐もしたくない、変数宣言もしたくない、くらいのつもりでいます。もし書いてしまったら「それはModelの方が適切ではないか？」を検討します。</p>\n<p>ViewModel の役割は、Model のプロパティ(コールバック)を、View用に変換して流すこと、Viewのための機能をコマンドとして公開することです。</p>\n<p>例えば、仕様の内、</p>\n<blockquote>\n<p>スイッチの切り替えで、ミリ秒の桁を表示/非表示</p>\n</blockquote>\n<p>が、「View用に変換」の良い例になります。<br>\n　私の実装では、ミリ秒の桁を表示するか否かの bool 値を、format関数の書式文字列に変換しています。(View側で format して表示しています。)<br>\n　↓のような感じです。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/** 時間の表示フォーマット */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> timeFormat<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field</span><br><br><br><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>timeFormat <span class=\"token operator\">=</span> _stopWatch<span class=\"token punctuation\">.</span>isVisibleMillis<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>visible <span class=\"token operator\">-></span> <br>    visible <span class=\"token operator\">?</span> <span class=\"token string\">\"mm:ss.SSS\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>RxJava で「変換」とくれば、 <code>map</code> など、 <code>Observable</code> の投影系のメソッドの出番となります。</p>\n<p>ViewModel が公開するプロパティも、基本的には <code>Observable&lt;T&gt;</code> になりました。(これはこのアプリの仕様上、OneWayバインディング＜=Modelによるデータの変化をViewに表示する＞だけで済んだためです。TwoWayバインディング＜=Viewからのデータの入力を受け付ける＞が必要な場合は、<code>Subject</code>など、データをセットできる機能が必要になります。)</p>\n<p>コマンドとは、Modelのメソッドを呼ぶためのものですが、それに加えて「そのコマンドが実行可能か？」を示すフラグも持ちます。さらにこのフラグも <code>Observable&lt;boolean&gt;</code> で表します。<br>\nこうする事で、「機能が利用可能な時のみボタンを Enable にする」のようなバインディングが可能になります。今回の仕様で言えば</p>\n<blockquote>\n<p>StartするとラップボタンはEnable.ストップするとDisable</p>\n</blockquote>\n<p>に該当します。</p>\n<p>コマンドのインターフェースは↓のようになります。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Command</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">/** このコマンドが実行可能かを示すフラグの更新を通知するObservable */</span><br>    <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">canExecuteObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">/** このコマンドの処理を実装する */</span><br>    <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>今回は、このインターフェースを ViewModel で匿名クラスを作ることで実装しました。↓のような感じです。この <code>commandLap</code> をラップボタンとバインドさせます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/** 経過時間の記録 */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Command</span> commandLap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">canExecuteObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> _stopWatch<span class=\"token punctuation\">.</span>isRunning<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 実行中のみ記録可能</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        _stopWatch<span class=\"token punctuation\">.</span><span class=\"token function\">lap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>あ、ViewModel は View とは疎結合に作ります。Viewを参照してはいけないのはもちろん、<code>TextView</code> や <code>Activity</code> などが import されていたら「負け」です。</p>\n<p>他には、Viewの状態を保持する役割も担いますが、本アプリの仕様では、それに該当する処理はありませんでした。</p>\n<h3 id=\"view\">View <a class=\"direct-link\" href=\"#view\">#</a></h3>\n<p>View層で行うことは、画面要素のレイアウトとViewModelとのバインディングです。それ以外の事は行いません。.NETの世界では、View層において値の変換を行う機能=ValueConverterが存在しますが、ValueConverterを使うべきかViewModelで行うべきかでよく議論になります。<br>\n　<br>\n　バインディングの実体は、ViewModelのプロパティである <code>Observable&lt;T&gt;</code> を <code>subscribe</code> して、Viewのプロパティにセットしているだけです。前述の通り今回は TwoWay は無いので楽です。TwoWay が出てくるとバインディングのフレームワークにお願いした方がよいです。<br>\n　<br>\n　例えば、 <code>Observalbe&lt;String&gt;</code> と TextViewのtextプロパティのバインディングは、下のようになります。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">TextViewBinder</span> <span class=\"token function\">toTextOneWay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    _subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><br>        prop<span class=\"token punctuation\">.</span><span class=\"token function\">observeOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AndroidSchedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">mainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> _textView<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// メソッドチェーンで連続して呼べるようにしてるだけ</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>.NETの世界では、このバインディングを画面定義ファイル(.xaml)に直接記述できます。<br>\nAndroidでも一部のライブラリや、<a href=\"http://developer.android.com/intl/ja/tools/data-binding/guide.html\">今後公式にデータバインディングがサポートされる模様</a>ですが、xml でのバンディングの記述は、デバッグしづらくなるので個人的にはそれほどメリットを感じないです。デザイナーとの分業と言っても別な理由で不可能なケースが多いと思います。</p>\n<h2 id=\"%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E3%82%84-toast-%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%AF%E8%AA%B0%E3%81%AE%E8%B2%AC%E5%8B%99%EF%BC%9F\">画面遷移や Toast の表示は誰の責務？ <a class=\"direct-link\" href=\"#%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E3%82%84-toast-%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%AF%E8%AA%B0%E3%81%AE%E8%B2%AC%E5%8B%99%EF%BC%9F\">#</a></h2>\n<p>大抵の MVVMフレームワーク に備わっている <code>Messenger</code> という機能を使います。Android界隈の人には「EventBus」と言った方がわかりやすいかも知れません。</p>\n<p>ViewModelが「画面遷移を要求するメッセージ」を投げ、それをViewが受信して画面遷移を行います。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//メッセージ送信側(MainViewModel.java)</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Command</span> commandNextView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// LapActivity へ遷移させる</span><br>        <span class=\"token comment\">// ほんとは LapViewModel.class を指定すべき(LapActivity は使いたくない)</span><br>        messenger<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StartActivityMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LapActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//メッセージ受信側(MainActivity.java)</span><br><span class=\"token comment\">// 画面遷移のメッセージ受信</span><br>_viewModel<span class=\"token punctuation\">.</span>messenger<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StartActivityMessage</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token function\">runOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">final</span> <span class=\"token class-name\">StartActivityMessage</span> m <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StartActivityMessage</span><span class=\"token punctuation\">)</span>message<span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\">Intent</span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">.</span>activityClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>今回は簡単な Messenger を実装しました。VM-&gt;Vの通知にしか使わないのでVM毎に一つ持つようにしています。</p>\n<h1 id=\"2.3.-reactive-extensions%2C-reactiveproperty-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F-android%2Fios-%E3%82%A2%E3%83%97%E3%83%AA(xamarin%2C-c%23%E8%A8%80%E8%AA%9E)\">2.3. Reactive Extensions, ReactiveProperty を使った Android/iOS アプリ(Xamarin, C#言語) <a class=\"direct-link\" href=\"#2.3.-reactive-extensions%2C-reactiveproperty-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F-android%2Fios-%E3%82%A2%E3%83%97%E3%83%AA(xamarin%2C-c%23%E8%A8%80%E8%AA%9E)\">#</a></h1>\n<p><a href=\"https://xamarin.com/\">Xamarin</a> は、 C# で Android/iOS が作れるプロダクトです。<br>\nRubyMotion のように、CocoaTouch や Android SDK の API をラップし、同じ名称のクラス,メソッドで C# から呼び出せるようにしています。</p>\n<ul>\n<li><a href=\"http://ytabuchi.hatenablog.com/\">Xamarin 日本語情報</a></li>\n<li><a href=\"http://qiita.com/amay077/items/2e86b44e5f274a34b2e9\">マカーの人が Xamarin について勘違いしていそうな５つのこと - Qiita</a></li>\n</ul>\n<p>.NETのオープンソース実装である mono 由来の製品であり、また Microsoft とのパートナーシップも結んでいることから、.NET の資産の多くが利用可能です。</p>\n<p>何が言いたいかと言うと、RxJava も MVVM パターンも、元は .NET のアプリケーション開発の分野で発案・成熟してきた考え方であり、豊富な.NET製ライブラリ(今回だと Reactive Extensions と ReactiveProperty)を使って Android/iOS アプリを開発できる、という事です。</p>\n<h2 id=\"model-viewmodel-view(mvvm)-%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B-2\">Model-ViewModel-View(MVVM) で考える <a class=\"direct-link\" href=\"#model-viewmodel-view(mvvm)-%E3%81%A7%E8%80%83%E3%81%88%E3%82%8B-2\">#</a></h2>\n<p>Xamarin でも MVVM の役割はまったく同じですが、<br>\n<strong>「Model-ViewModel を Android/iOS で使いまわせる」</strong><br>\nという大きなメリットがあります。</p>\n<p>Model と ViewModel からは、プラットフォームに依存するコードは排除できます(すべきです)。<br>\nXamarin(というか .NET) ではプラットフォーム非依存の処理をライブラリ化できます(これを PCL=Portable Class Library と言います)。</p>\n<p>Android と iOS でそれぞれに実装が必要なのは、View と、そのバインディングのみです。</p>\n<p><img src=\"/img/posts/rxjava_mvvm_stopwatch_02.png\" alt=\"クラス図的なの\"></p>\n<h2 id=\"reactive-extensions-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">Reactive Extensions について <a class=\"direct-link\" href=\"#reactive-extensions-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>本家<a href=\"https://github.com/Reactive-Extensions/Rx.NET\">Rx.NET</a>です。RxJava はこの Reactive Extensions を Java にポートしたものです。<br>\nRxJava には、いくつか便利なメソッドが追加されています(<code>compose</code> とか)が、殆ど同じです。<br>\nまた、 C# はラムダ式を標準でサポートしていることから、 retrolambda などに頼らなくても見やすいコードが書けるのは言うまでもないでしょう。</p>\n<h2 id=\"reactiveproperty-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">ReactiveProperty について <a class=\"direct-link\" href=\"#reactiveproperty-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p><a href=\"https://github.com/runceel/ReactiveProperty/blob/master/README-ja.md\">ReactiveProperty</a> は、Rxの機能を活かしてMVVMパターンの実装を手助けしてくれるライブラリです。</p>\n<ul>\n<li><a href=\"http://blog.okazuki.jp/entry/2015/02/22/212827\">MVVMとリアクティブプログラミングを支援するライブラリ「ReactiveProperty v2.0」オーバービュー - かずきのBlog@hatena</a></li>\n</ul>\n<p>Java版ストップウォッチでは、<code>StopWatchModel</code> や ViewModel のプロパティを全て <code>Observable&lt;T&gt;</code> としましたが、 Xamarin版では <code>ReactiveProperty&lt;T&gt;</code> としています。 <code>ReactiveProperty&lt;T&gt;</code> は <code>Observable&lt;T&gt;</code> から継承しているので、それほど大差はありませんが、<code>Subject</code> のように値の設定をサポートしていたり、バリデーション、エラー通知の仕組みが備わっています。</p>\n<p>また、ReactiveProperty は、 Android の View要素とのバインディング機能も持ちます。これを使うとバインディングが以下のように書けます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// TextView(textTime) と viewModel.Time のバインド</span><br><span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextView<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>textTime<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">SetBinding</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> <br>        _viewModel<span class=\"token punctuation\">.</span>Time<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">ObserveOnUIDispatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>iOS のバインディングはありませんが、 <s>ソースの一部を持ってくる事で、殆ど解決します</s> <a href=\"https://twitter.com/okazuki/status/679256704689684480\">ツイートしたら取り込んでもらえました(^^)</a> 。</p>\n<h1 id=\"%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9\">作ったアプリのソース <a class=\"direct-link\" href=\"#%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9\">#</a></h1>\n<ul>\n<li><a href=\"https://github.com/amay077/StopWatchSample\">amay077/StopWatchSample</a></li>\n</ul>\n<p>それぞれ、</p>\n<ol>\n<li><a href=\"https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppAndroid\">RxJava を使った Android アプリ(Java言語)</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.Android\">Reactive Extensions, ReactiveProperty を使った Android アプリ(Xamarin, C#言語)</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.iOS\">Reactive Extensions, ReactiveProperty を使った iOS アプリ(Xamarin, C#言語)</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/tree/master/StopWatchAppXamarin/StopWatchApp.Core\">Xamarin版アプリの Model, ViewModel</a></li>\n</ol>\n<p>にあります。</p>\n<p>Java版は、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/models/StopWatchModel.java\">StopWatchModel.java</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java\">MainViewModel.java</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/views/MainActivity.java\">MainActivity.java</a></li>\n</ul>\n<p>を見るとだいたい分かると思います。</p>\n<p>また、Java版 と Xamarin版では、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/models/StopWatchModel.java\">StopWatchModel.java</a> と <a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Core/Models/StopWatchModel.cs\">StopWatchModel.cs</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/viewmodel/MainViewModel.java\">MainViewModel.java</a> と <a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Core/ViewModels/MainViewModel.cs\">MainViewModel.cs</a></li>\n<li><a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppAndroid/app/src/main/java/com/amay077/stopwatchapp/views/MainActivity.java\">MainActivity.java</a> と <a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.Android/Views/MainActivity.cs\">MainActivity.cs</a> と <a href=\"https://github.com/amay077/StopWatchSample/blob/master/StopWatchAppXamarin/StopWatchApp.iOS/Views/MainViewController.cs\">MainViewController.cs</a></li>\n</ul>\n<p>あたりを見比べるといいと思います。</p>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h1>\n<p>MVVM と RxJava はとても相性がよいと感じました。</p>\n<p>Model → ViewModel → View と通知を伝搬させるのに、そのまま <code>Observable&lt;T&gt;</code> を繋げればよいのですから。加工が必要なら <code>map</code> などのオペレータを挟むだけ。<br>\nこれがコールバックだったら…恐ろしくて想像したくありません。</p>\n<p>Model が使用するDB層やWebAPIなども RxJava をサポートしていたら、もっと便利になると思います。(Realm は RxJava サポートが追加されたようですね！)</p>\n<p>View - ViewModel のデータバインディングにも RxJava は有効ですが、こちらは、Android公式の Data Binding がどう実装されるかで未来が変わってきそうです。</p>\n<p>Android-Java には、まだメジャーな MVVMフレームワークが無いので、登場が待たれるところです。</p>\n<h1 id=\"%E3%81%8A%E3%81%BE%E3%81%91%EF%BC%9A%E5%8F%8D%E7%9C%81%E3%81%AA%E3%81%A9\">おまけ：反省など <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91%EF%BC%9A%E5%8F%8D%E7%9C%81%E3%81%AA%E3%81%A9\">#</a></h1>\n<h2 id=\"view-%E3%81%8B-viewmodel-%E3%81%8B-model-%E3%81%8B%E5%95%8F%E9%A1%8C\">View か ViewModel か Model か問題 <a class=\"direct-link\" href=\"#view-%E3%81%8B-viewmodel-%E3%81%8B-model-%E3%81%8B%E5%95%8F%E9%A1%8C\">#</a></h2>\n<p>下は View に書かれている「現在時刻と表示書式文字列のどちらかが更新されたら、時刻をフォーマットして流す」という Observable です。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// フォーマットされた時間を表す Observable（time と timeFormat のどちらかが変更されたら更新）</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> formattedTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span><br>        _viewModel<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">,</span><br>        _viewModel<span class=\"token punctuation\">.</span>timeFormat<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> time<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> format<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">SimpleDateFormat</span> sdf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span>format<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">return</span> sdf<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>これは、ViewModel に用意すべきだったかも知れません。いやいや、フォーマットされた時間を通知する機能が Model にあってもおかしくないとも言えます。<br>\n実際、 <code>LapActivity</code> でも同じコードを書いているので D.R.Y原則にも反します。やっぱ Model に持たせるべきだったと反省。</p>\n<h2 id=\"model-%E3%81%AB%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%8C-void-%E3%81%A7%E3%81%AA%E3%81%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A1%E3%82%83%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C\">Model に戻り値が void でないメソッドを作っちゃった問題 <a class=\"direct-link\" href=\"#model-%E3%81%AB%E6%88%BB%E3%82%8A%E5%80%A4%E3%81%8C-void-%E3%81%A7%E3%81%AA%E3%81%84%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A1%E3%82%83%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C\">#</a></h2>\n<blockquote>\n<p>原則として Model のメソッドの戻り値は void です</p>\n</blockquote>\n<p>の原則に反して、戻り値で最速、最遅ラップ値を返してしまいました。<br>\nToast表示のためだけに取得できればいいやと思いこうしたのですが、これでは「最速、最遅ラップを常に画面に表示する」という仕様変更があっただけで破綻します。これは悪手でした、反省。</p>\n<p>だいたいラップの最大、最小の取得は、 <code>Observable&lt;List&lt;Long&gt;&gt; laps</code>  を <code>map</code> で変換すればよいだけの話ですね。LINQ あるいは Stream API が使えれば <code>List&lt;Long&gt;</code> から min/max を取得するのも簡単ですし。</p>\n<h2 id=\"timer-%E3%82%92-1ms-%E9%96%93%E9%9A%94%E3%81%AB%E3%81%97%E3%81%A1%E3%82%83%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C\">Timer を 1ms 間隔にしちゃった問題 <a class=\"direct-link\" href=\"#timer-%E3%82%92-1ms-%E9%96%93%E9%9A%94%E3%81%AB%E3%81%97%E3%81%A1%E3%82%83%E3%81%A3%E3%81%9F%E5%95%8F%E9%A1%8C\">#</a></h2>\n<p><code>Observable.interval(1ms)</code> ってやっちゃいましたが、START の時間を覚えておいて、LAP, STOP された時に、現在時刻との差分を取ればよかったですね。基本的なムダで反省。</p>\n<p><a href=\"http://www.moonmile.net/blog/archives/7627\">JXUG で話した MVVM の活用の解説を ｜ Moonmile Solutions Blog</a> より</p>\n<blockquote>\n<p>Lap ボタンを押したタイミングで DateTime.Now を取得すればよいわけで、何も定期的に内部データを更新する必要はありません</p>\n</blockquote>\n<p>その通りですね。。。</p>\n<h2 id=\"ui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B%E3%82%92%E3%81%A0%E3%82%8C%E3%81%8C%E3%82%84%E3%82%8B%E3%81%AE%E3%81%8B%E5%95%8F%E9%A1%8C\">UIスレッドへの変換をだれがやるのか問題 <a class=\"direct-link\" href=\"#ui%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%B8%E3%81%AE%E5%A4%89%E6%8F%9B%E3%82%92%E3%81%A0%E3%82%8C%E3%81%8C%E3%82%84%E3%82%8B%E3%81%AE%E3%81%8B%E5%95%8F%E9%A1%8C\">#</a></h2>\n<p>今回は、以下のように、自作したバインディングの中で <code>observeOn(AndroidSchedulers.mainThread())</code> 行っています。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">TextViewBinder</span> <span class=\"token function\">toTextOneWay</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> prop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    _subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><br>        prop<span class=\"token punctuation\">.</span><span class=\"token function\">observeOn</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AndroidSchedulers</span><span class=\"token punctuation\">.</span><span class=\"token function\">mainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> _textView<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これを ViewModel で行うこと(ViewModel が公開する Observable は必ずUIスレッドで実行されるというルール)もできます。<br>\nが、セオリーが分かっていません。とりあえず View側で observeOn しとけば安全かなと思って上記のようにしているだけです。使用するMVVMフレームワークの仕様にも依存しそうです。</p>\n<h2 id=\"stopwatchmodel-%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AF-hot%EF%BC%9F-%E3%81%9D%E3%82%8C%E3%81%A8%E3%82%82-cold%EF%BC%9F\">StopWatchModel のプロパティは Hot？ それとも Cold？ <a class=\"direct-link\" href=\"#stopwatchmodel-%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AF-hot%EF%BC%9F-%E3%81%9D%E3%82%8C%E3%81%A8%E3%82%82-cold%EF%BC%9F\">#</a></h2>\n<p>StopWatchModel の各プロパティである <code>Observable&lt;T&gt;</code> は、 <strong><code>subscribe</code> をトリガーに値が流れ始めるものではないので Hot</strong> ですね。</p>\n<p>また、<code>BehaviorSubject</code> を使っているので、 <code>subscribe</code> 時には、その時点の最新の値が流れてきます。</p>\n<p>シングルトンの <code>StopWatchModel</code> に対して、 <code>MainActivity</code> に続いて <code>LapActivity</code> でも購読した時に、正しくラップタイム群が表示できるのは、<code>BehaviorSubject</code> であるためですね。</p>\n<p><code>refCount</code> してないけど、ちゃんと破棄されているのかは未確認。。。</p>\n<h2 id=\"observalbe%3Clist%3Ct%3E%3E\">Observalbe&lt;List&lt;T&gt;&gt; <a class=\"direct-link\" href=\"#observalbe%3Clist%3Ct%3E%3E\">#</a></h2>\n<p>ラップタイム群を通知するプロパティは <code>Observalbe&lt;List&lt;T&gt;&gt;</code> にしています。<br>\nこの場合、List の中身を変更されても通知されないので  <code>Collections.unmodifiableList</code> で変更不可にしてから onNext で通知しています。LAPボタンが押される度に List を作りなおしている感じになります。</p>\n<p>ListView とのバインディングも同じで、onNext を受信する度に、ListView を洗い替えしています。<br>\nこのムダが嫌、大量データでパフォーマンスに問題が出る場合は、.NET にある <a href=\"https://msdn.microsoft.com/ja-jp/library/ms668604(v=vs.110).aspx\"><code>ObservableCollection&lt;T&gt;</code></a> のような仕組みを作る必要があります。(<a href=\"http://Rx.NET\">Rx.NET</a>, RxJava では管轄外かな？)</p>\n<p><code>ObservableCollection&lt;T&gt;</code> は、リストへの追加、削除、変更をアイテム毎に通知／監視できます(「 <em>項目X</em> が <em>2番目</em> に <em>追加</em> された」のような)。適切な通知とバインディングを実装すれば、ListView の差分更新が可能です（面倒ですが）。</p>\n<h1 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h1>\n<ul>\n<li><a href=\"http://ugaya40.hateblo.jp/entry/model-mistake\">MVVMのModelにまつわる誤解 - the sea of fertility</a></li>\n<li><a href=\"http://www.moonmile.net/blog/archives/7627\">JXUG で話した MVVM の活用の解説を ｜ Moonmile Solutions Blog</a> - タイマを View/ViewModel/Model に持つそれぞれの理由が解説されています。</li>\n<li><a href=\"http://qiita.com/hide92795/items/f7205c8171826cc2153b\">RxJava - Rxで知っておくと便利なSubjectたち - Qiita</a></li>\n<li><a href=\"http://qiita.com/amay077/items/4bb6b09a1911b074f50c\">RxJava - Hot Observable と ConnectableObservable について - Qiita</a></li>\n</ul>\n",
      "date_published": "2015-12-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2015/12/17/about-hot-observable-and-connectableobservable/",
      "url": "https://blog.amay077.net/blog/2015/12/17/about-hot-observable-and-connectableobservable/",
      "title": "Hot Observable と ConnectableObservable について",
      "content_html": "<p>これは <a href=\"http://qiita.com/advent-calendar/2015/rxjava\">RxJava Advent Calendar 2015 17日目</a> の記事です。</p>\n<p>空いてたので参加してみました。<br>\n普段は Xamarin(C#) + Reactive Extensions + ReactiveProperty で、Reactive + MVVM な Android/iOS両対応アプリを開発しています。</p>\n<!--more-->\n<h2 id=\"cold-vs-hot\">Cold vs Hot <a class=\"direct-link\" href=\"#cold-vs-hot\">#</a></h2>\n<p>Cold Observable は「あなただけの」Stream、Hot は「みんなの」Stream 。<br>\n（私的にはニコ動かニコ生か、みたいに理解してますが、その話はいいや）</p>\n<p>Cold は、あなたが subscribe した瞬間からデータが流れ始めます。<br>\nHot は、あなたが subscribe してもデータは流れ始めません(流れるかも知れません？)。</p>\n<p>では Hot Observable はいつからデータが流れ始める？Observable が生成された瞬間から？<br>\nその答え(の一つ)が <strong>ConnectableObservable</strong> 。</p>\n<h2 id=\"connectableobservable-%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E6%94%BE%E6%B5%81%E3%81%AE%E9%96%8B%E5%A7%8B%E3%81%A8%E5%81%9C%E6%AD%A2\">ConnectableObservable のデータ放流の開始と停止 <a class=\"direct-link\" href=\"#connectableobservable-%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E6%94%BE%E6%B5%81%E3%81%AE%E9%96%8B%E5%A7%8B%E3%81%A8%E5%81%9C%E6%AD%A2\">#</a></h2>\n<p>Cold Observable を Hot化する publish メソッドの返り値は ConnectableObservable。<br>\nHot は必ず ConnectableObservable。（←これ後で否定します）</p>\n<p>ConnectableObservable には connect メソッドがあります。<br>\nHot Observable のデータが流れ始めるのは、このメソッドを呼んだ瞬間から。<br>\nなので、どれだけ subscriber が居ようとも connect を呼ばなければデータは流れません。逆に subscriber が居なくても connect を呼べばデータが流れ始めます。</p>\n<p>connect メソッドの返り値は Subscription です。<br>\nSubscription の unsubscribe メソッドを呼ぶと、データの放流が停止します。これも subscriber が居ようが居まいが停止します。<br>\n再度 connect すると、 <strong>最初から</strong> データが流れ出します。再開ではありません。</p>\n<h2 id=\"%E5%AE%9F%E4%BE%8B\">実例 <a class=\"direct-link\" href=\"#%E5%AE%9F%E4%BE%8B\">#</a></h2>\n<h3 id=\"cold-observable\">Cold Observable <a class=\"direct-link\" href=\"#cold-observable\">#</a></h3>\n<p>Observable.interval は、一定時間置きにインクリメントされた値を流す <strong>Cold</strong> Observable。<br>\nなので、複数の subscriber が居たら、各々に独立した値を流します。</p>\n<p>Android の画面にボタンが２つ（buttonSubscribe1 と buttonSubscribe2）並んでるだけのサンプルです。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> tickObservable <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 可視性向上の為のなんちゃってラムダ</span><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonSubscribe1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonSubscribe1 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    tickObservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscriber1 - onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonSubscribe2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonSubscribe2 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    tickObservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscriber2 - onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>結果:<br>\nD/MainActivity: buttonSubscribe1 click!<br>\nD/MainActivity: subscriber1 - onNext - 0<br>\nD/MainActivity: subscriber1 - onNext - 1<br>\nD/MainActivity: subscriber1 - onNext - 2<br>\nD/MainActivity: subscriber1 - onNext - 3<br>\nD/MainActivity: subscriber1 - onNext - 4<br>\nD/MainActivity: subscriber1 - onNext - 5<br>\nD/MainActivity: buttonSubscribe2 click!<br>\nD/MainActivity: subscriber1 - onNext - 6<br>\nD/MainActivity: subscriber2 - onNext - 0<br>\nD/MainActivity: subscriber1 - onNext - 7<br>\nD/MainActivity: subscriber2 - onNext - 1<br>\nD/MainActivity: subscriber1 - onNext - 8<br>\nD/MainActivity: subscriber2 - onNext - 2</p>\n</blockquote>\n<p>buttonSubscribe1 を押すとデータ(０から連番)が流れ始めます。<br>\nしばらくして buttonSubscribe2 を押すと、1 とは関係なく、また 0 から流れ始めます。</p>\n<h3 id=\"hot(connectable)-observable\">Hot(Connectable) Observable <a class=\"direct-link\" href=\"#hot(connectable)-observable\">#</a></h3>\n<p>publish で Hot 化します。<br>\nconnect と unsubscribe を呼ぶためのボタン（buttonConnect, buttonDisConnect）を画面に追加してます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Subscription</span> _connection<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field です</span><br><br><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">ConnectableObservable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> tickObservable <span class=\"token operator\">=</span> <br>    <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// publish で Hot化</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonSubscribe1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonSubscribe1 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    tickObservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscriber1 - onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonSubscribe2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonSubscribe2 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    tickObservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscriber2 - onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonConnect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonConnect click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    _connection <span class=\"token operator\">=</span> tickObservable<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// データ放流開始</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonDisConnect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonDisConnect click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_connection <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        _connection<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// データ放流停止</span><br>        _connection <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>結果:<br>\nD/MainActivity: buttonSubscribe1 click!<br>\nD/MainActivity: buttonConnect click!      // ←数秒経過している<br>\nD/MainActivity: subscriber1 - onNext - 0<br>\nD/MainActivity: subscriber1 - onNext - 1<br>\nD/MainActivity: subscriber1 - onNext - 2<br>\nD/MainActivity: subscriber1 - onNext - 3<br>\nD/MainActivity: buttonSubscribe2 click!<br>\nD/MainActivity: subscriber1 - onNext - 4<br>\nD/MainActivity: subscriber2 - onNext - 4<br>\nD/MainActivity: subscriber1 - onNext - 5<br>\nD/MainActivity: subscriber2 - onNext - 5<br>\nD/MainActivity: subscriber1 - onNext - 6<br>\nD/MainActivity: subscriber2 - onNext - 6<br>\nD/MainActivity: buttonDisConnect click!<br>\n-これ以降 onNext は出力されない-</p>\n</blockquote>\n<p>buttonSubscribe1 を押しても、まだデータは流れてきません。<br>\n数秒後、buttonConnect を押すとデータが流れ始めます。<br>\nbuttonSubscribe2 を押すと、subscriber2 が増えますが、Hot(みんなの)Observable なので、流れてくる値とタイミングは subscriber1 と全く同じです。</p>\n<p>buttonDisConnect を押すと、データの放流が停止されます。(ちなみにもう一度 CONNECT すると、また 0 から値が流れます)<br>\nsubscriber1, subscriber2 にはもう onNext は呼ばれません。</p>\n<p>※サンプルでは onNext しか受信していませんが、 buttonDisConnect を押しても、 subscriber1, subscriber2 の onComplete や onError も呼ばれません。つまり、 <strong>「データの放流が停止されても、 subscriber はそれに気付けない」</strong> ということになります。これはこれでいいんだろか、という感じです。</p>\n<h2 id=\"connectableobservable.refcount-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">ConnectableObservable.refCount について <a class=\"direct-link\" href=\"#connectableobservable.refcount-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<blockquote>\n<p>Hot は必ず ConnectableObservable。（←これ後で否定します）</p>\n</blockquote>\n<p>否定始めます。</p>\n<p>ConnectableObservable では、データ放流の開始と停止は、 connect と unsubscribe に委ねられていました。</p>\n<p>refCount() を使うとそれを自動化できます。(refCount？参照カウントを返すメソッド？そう思っていましたが全然違いました。)<br>\nどういうことかと言うと、最初の subscriber が現れたらデータ放流を開始し、誰も subscriber が居なくなったら放流を停止する、というものです。<br>\nrefCount() の返値はただの Observable です、でも Hot です。はい否定しましたー。</p>\n<h3 id=\"%E5%AE%9F%E4%BE%8B-2\">実例 <a class=\"direct-link\" href=\"#%E5%AE%9F%E4%BE%8B-2\">#</a></h3>\n<p>publish した Hot Observable を refCount してデータ放流を自動制御してもらいます。<br>\n画面には、 buttonConnect, buttonDisConnect に代わり、buttonUnsubscribe1, buttonUnsubscribe2 を用意します。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">Subscription</span> _subscription1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field です</span><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">Subscription</span> _subscription2<span class=\"token punctuation\">;</span> <span class=\"token comment\">// field です</span><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">Subscription</span> _connection<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// field です</span><br><br><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> tickObservable <span class=\"token operator\">=</span> <br>    <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">interval</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">refCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返値は Connectable ではない</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonSubscribe1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonSubscribe1 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    _subscription1 <span class=\"token operator\">=</span> tickObservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscriber1 - onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonSubscribe2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonSubscribe2 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    _subscription2 <span class=\"token operator\">=</span> tickObservable<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"subscriber2 - onNext - \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonUnsubscribe1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonUnsubscribe1 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_subscription1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        _subscription1<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1購読終了</span><br>        _subscription1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonUnsubscribe2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"buttonUnsubscribe2 click!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_subscription2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        _subscription2<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2購読終了</span><br>        _subscription2 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<blockquote>\n<p>結果:<br>\nD/MainActivity: buttonSubscribe1 click!<br>\nD/MainActivity: subscriber1 - onNext - 0<br>\nD/MainActivity: subscriber1 - onNext - 1<br>\nD/MainActivity: subscriber1 - onNext - 2<br>\nD/MainActivity: buttonSubscribe2 click!<br>\nD/MainActivity: subscriber1 - onNext - 3<br>\nD/MainActivity: subscriber2 - onNext - 3<br>\nD/MainActivity: subscriber1 - onNext - 4<br>\nD/MainActivity: subscriber2 - onNext - 4<br>\nD/MainActivity: subscriber1 - onNext - 5<br>\nD/MainActivity: subscriber2 - onNext - 5<br>\nD/MainActivity: subscriber1 - onNext - 6<br>\nD/MainActivity: subscriber2 - onNext - 6<br>\nD/MainActivity: subscriber1 - onNext - 7<br>\nD/MainActivity: subscriber2 - onNext - 7<br>\nD/MainActivity: buttonUnsubscribe1 click!<br>\nD/MainActivity: subscriber2 - onNext - 8<br>\nD/MainActivity: subscriber2 - onNext - 9<br>\nD/MainActivity: subscriber2 - onNext - 10<br>\nD/MainActivity: subscriber2 - onNext - 11<br>\nD/MainActivity: buttonUnsubscribe2 click!<br>\n-これ以降 onNext は出力されない-</p>\n</blockquote>\n<p>buttonSubscribe1 を押すと、その時点でデータが流れ始めます(refCount による自動制御)。<br>\nbuttonSubscribe2 を押すと、subscriber1 と同じタイミングで、同じ値を受信できます(Hot だから)。<br>\nbuttonUnsubscribe1 を押すと、 subscriber1 は購読をやめますが、subscriber2 はまだ受信しています。<br>\nbuttonUnsubscribe2 を押すと、subscriber2 も購読をやめ、この時点でデータ放流が停止します(refCount による自動制御)。</p>\n<p>※ほんとにデータ放流終わってんの？を確認するには、 tickObservable に doOnNext を繋げて確認するとよいと思います。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Hot Observable は、ほとんどの場合(publish により生成されるので) ConnectableObservable。<br>\nConnectableObservable は、購読者の有無に関係なく connect でデータ放流開始、Subscription.unsubscribe でデータ放流停止。<br>\nrefCount により購読者の有無に連動したデータ放流の自動制御が可能。この場合 Hot だけど普通の Observable型。</p>\n<p>実際に Hot Observable を使う場合は、refCount() しとくのが無難かなー、と思いました。(購読者の unsubscribe を厳密に管理しておけば、という前提で)</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://www.introtorx.com/content/v1.0.10621.0/14_HotAndColdObservables.html\">Intro to Rx - Hot and Cold observables</a></li>\n<li><a href=\"https://github.com/ReactiveX/RxJava/wiki/Connectable-Observable-Operators\">Connectable Observable Operators · ReactiveX/RxJava Wiki</a></li>\n<li><a href=\"http://qiita.com/advent-calendar/2015/rxjava\">RxJava Advent Calendar 2015 を書かれた皆さん</a></li>\n</ul>\n",
      "date_published": "2015-12-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache/",
      "url": "https://blog.amay077.net/blog/2015/12/01/save-your-data-using-akavache/",
      "title": "クロスプラットフォーム対応KVS Akavache を使ってお手軽にデータを保存する",
      "content_html": "<p>これは <a href=\"http://qiita.com/advent-calendar/2015/xamarin\">Xamarin Advent Calendar 2015 1日目</a> の記事です。</p>\n<p>Xamarin Advent Calendar 2015、今日から開始です。<br>\n3年目になってもネタに尽きない Xamarin 、まだまだ盛り上がっております。</p>\n<p>かくいう自分は、<a href=\"http://qiita.com/amay077/items/0a3fa3dfac7f29a2807d\">前回の投稿</a> が約1年前と、完全に時代遅れになっております（仕事とスプラ...いえ何でもないです）。<br>\n最近のトピックスは他の方にお任せして、1年前からのネタを書きます。</p>\n<!--more-->\n<p>Xamarin でギョームアプリを開発している時に、Android/iOS で使える ORM を探していたというか、JSON のデータをお手軽に保存・読み出し→インスタンス化できるライブラリないかなーと探していました。</p>\n<p>Xamarin の公式ドキュメント</p>\n<ul>\n<li><a href=\"https://developer.xamarin.com/guides/cross-platform/application_fundamentals/data/\">Cross-Platform Data Access - Xamarin</a></li>\n</ul>\n<p>には、 <a href=\"http://SQLite.NET\">SQLite.NET</a> や <a href=\"http://ADO.NET\">ADO.NET</a> などが紹介されていますが、どれも面倒そう。そこで使ってみようと思ったのが <a href=\"http://qiita.com/amay077/items/f14e04d4e86c8a782c15\">2年前の投稿</a> でチラッと触れていた Akavache です。</p>\n<h1 id=\"akavache-%E3%81%A8%E3%81%AF\">Akavache とは <a class=\"direct-link\" href=\"#akavache-%E3%81%A8%E3%81%AF\">#</a></h1>\n<ul>\n<li>akavache/Akavache - <a href=\"https://github.com/akavache/Akavache\">https://github.com/akavache/Akavache</a></li>\n</ul>\n<p>以下、README から引用です。</p>\n<blockquote>\n<p>Akavache is an asynchronous, persistent (i.e. writes to disk) key-value store created for writing desktop and mobile applications in C#, based on SQLite3. Akavache is great for both storing important data (i.e. user settings) as well as cached local data that expires.</p>\n</blockquote>\n<p>(意訳)Akavacheは、C# による、SQLite3 をベースとした非同期で永続的なデスクトップとモバイルアプリケーション向けのキーバリューストアです。 ユーザー設定やキャッシュなどのローカルデータを保存するのに最適です。</p>\n<p>バックエンドは SQLite3 なので、まあ得体の知れないデータ形式ではない、と。ちなみに <a href=\"https://github.com/paulcbetts/AkavacheExplorer\">AkavacheExplorer</a> というデータビューアもあります。</p>\n<h1 id=\"%E5%AF%BE%E5%BF%9C%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0\">対応プラットフォーム <a class=\"direct-link\" href=\"#%E5%AF%BE%E5%BF%9C%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0\">#</a></h1>\n<blockquote>\n<p>Akavache is currently compatible with:</p>\n<ul>\n<li>Xamarin.iOS / Xamarin.Mac 32-bit</li>\n<li>Xamarin.Android</li>\n<li>.NET 4.5 Desktop (WPF)</li>\n<li>Windows Phone 8</li>\n<li>WinRT (Windows Store)</li>\n<li>Windows Phone 8.1 Universal Apps</li>\n</ul>\n</blockquote>\n<p>ほぼ全てやないかい！</p>\n<h1 id=\"%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">使ってみよう <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">#</a></h1>\n<p>せっかくなので Xamarin.Form で Akavache を使ったアプリを作ってみます。</p>\n<h3 id=\"1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%EF%BC%88%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%89%E3%81%AE%E4%BD%9C%E6%88%90\">1. プロジェクト（ソリューション）の作成 <a class=\"direct-link\" href=\"#1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%EF%BC%88%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%89%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>Xamarin.Forms App で、新しいプロジェクトを作成します。プロジェクト名は AkavacheSample とでもします。</p>\n<p>Shared Code: は、'Use Portable Class Library' を選択します。</p>\n<p>プロジェクトが3つ（AkavacheSample, AkavacheSample.Droid, AkavacheSample.iOS）作成されます。</p>\n<h3 id=\"2.-akavache-%E3%81%A8%E3%80%81%E4%BE%9D%E5%AD%98%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E5%B0%8E%E5%85%A5\">2. Akavache と、依存ライブラリの導入 <a class=\"direct-link\" href=\"#2.-akavache-%E3%81%A8%E3%80%81%E4%BE%9D%E5%AD%98%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AE%E5%B0%8E%E5%85%A5\">#</a></h3>\n<p><strong>3つのプロジェクトそれぞれで</strong> 、NuGet(メニュー → プロジェクト → Add NuGet Packages...) から、以下のパッケージを追加します（執筆時点の Akavache の最新バージョンは 4.1.2 です。）。</p>\n<ul>\n<li>Akavache.Core</li>\n<li>SQLitePCL.raw</li>\n<li>Akavache.SQLite3</li>\n<li>Akavache</li>\n</ul>\n<p>検索ボックスに 「sqlite akavache」と入力すると全部表示されると思います(↓こんな感じに)。</p>\n<p><img src=\"/img/posts/using_akavache_01.png\" alt=\"\"></p>\n<p>追加に失敗する場合は、上のリストの順番で一つずつ追加するとうまくいくと思います。</p>\n<h3 id=\"3.-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%94%BB%E9%9D%A2%E3%82%92%E4%BD%9C%E3%82%8B\">3. サンプルアプリの画面を作る <a class=\"direct-link\" href=\"#3.-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E7%94%BB%E9%9D%A2%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>サンプルアプリの画面レイアウトを作ります。XAML とか面倒なのでコードでバリッと。</p>\n<p>AkavacheSample プロジェクトの App.cs を以下のようにします。テキストボックス２つとボタン２つが縦に並んでいるだけの簡単な画面です。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//AkavacheSample.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Application</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nameEntry  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Entry</span> <span class=\"token punctuation\">{</span> Placeholder <span class=\"token operator\">=</span> <span class=\"token string\">\"名前を入力\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ageEntry   <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Entry</span> <span class=\"token punctuation\">{</span> Placeholder <span class=\"token operator\">=</span> <span class=\"token string\">\"年齢を入力(数値のみ)\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> saveButton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span> <span class=\"token punctuation\">{</span> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"保存\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> loadButton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span> <span class=\"token punctuation\">{</span> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"読み出し\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            <br>        <span class=\"token comment\">// The root page of your application</span><br>        MainPage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ContentPage</span><br>        <span class=\"token punctuation\">{</span><br>            Padding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thickness</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            Content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StackLayout</span><br>            <span class=\"token punctuation\">{</span><br>                VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                Children <span class=\"token operator\">=</span><br>                <span class=\"token punctuation\">{</span><br>                    nameEntry<span class=\"token punctuation\">,</span><br>                    ageEntry<span class=\"token punctuation\">,</span><br>                    saveButton<span class=\"token punctuation\">,</span><br>                    loadButton<br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 以下省略</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"4.-akavache-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E4%BF%9D%E5%AD%98%E3%81%A8%E8%AA%AD%E3%81%BF%E5%87%BA%E3%81%97\">4. Akavache を使って保存と読み出し <a class=\"direct-link\" href=\"#4.-akavache-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E4%BF%9D%E5%AD%98%E3%81%A8%E8%AA%AD%E3%81%BF%E5%87%BA%E3%81%97\">#</a></h3>\n<p>名前と年齢をひとまとめに保存したいので、Person というクラスを作ります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//Person.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> PersonName <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> PersonAge <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>あとはもう、一気に実装するだけです。<br>\n保存ボタンを押した時に、入力値を Person に詰めて、Akavache を使って保存します。<br>\n読み出しボタンを押した時に、Akavache から Person を読みだし、各テキストボックスにバラして設定します。</p>\n<p>Akavache はキー・バリュー・ストアなので、保存・読み出し時のキーを <code>&quot;person&quot;</code> としています。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//AkavacheSample.cs</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Application</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> nameEntry  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Entry</span> <span class=\"token punctuation\">{</span> Placeholder <span class=\"token operator\">=</span> <span class=\"token string\">\"名前を入力\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ageEntry   <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Entry</span> <span class=\"token punctuation\">{</span> Placeholder <span class=\"token operator\">=</span> <span class=\"token string\">\"年齢を入力(数値のみ)\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> saveButton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span> <span class=\"token punctuation\">{</span> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"保存\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> loadButton <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span> <span class=\"token punctuation\">{</span> Text <span class=\"token operator\">=</span> <span class=\"token string\">\"読み出し\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        saveButton<span class=\"token punctuation\">.</span>Clicked <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// Person に詰めて…</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Person</span> <span class=\"token punctuation\">{</span> <br>                PersonName <span class=\"token operator\">=</span> nameEntry<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> <br>                PersonAge  <span class=\"token operator\">=</span> Convert<span class=\"token punctuation\">.</span><span class=\"token function\">ToInt16</span><span class=\"token punctuation\">(</span>ageEntry<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span> <br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// 保存</span><br>            <span class=\"token keyword\">await</span> BlobCache<span class=\"token punctuation\">.</span>LocalMachine<span class=\"token punctuation\">.</span><span class=\"token function\">InsertObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person\"</span><span class=\"token punctuation\">,</span> person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        loadButton<span class=\"token punctuation\">.</span>Clicked <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// Akavache で Person を読み出し</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> loaded <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> BlobCache<span class=\"token punctuation\">.</span>LocalMachine<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetObject</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Person<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"person\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token comment\">// 各テキストボックスに設定</span><br>            nameEntry<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> loaded<span class=\"token punctuation\">.</span>PersonName<span class=\"token punctuation\">;</span><br>            ageEntry<span class=\"token punctuation\">.</span>Text  <span class=\"token operator\">=</span> loaded<span class=\"token punctuation\">.</span>PersonAge<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            <br>        <span class=\"token comment\">// The root page of your application</span><br>        MainPage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ContentPage</span><br>        <span class=\"token punctuation\">{</span><br>            Padding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thickness</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            Content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StackLayout</span><br>            <span class=\"token punctuation\">{</span><br>                VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                Children <span class=\"token operator\">=</span><br>                <span class=\"token punctuation\">{</span><br>                    nameEntry<span class=\"token punctuation\">,</span><br>                    ageEntry<span class=\"token punctuation\">,</span><br>                    saveButton<span class=\"token punctuation\">,</span><br>                    loadButton<br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">// 以下省略</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"5.-%E5%8B%95%E3%81%8B%E3%81%99%EF%BC%81\">5. 動かす！ <a class=\"direct-link\" href=\"#5.-%E5%8B%95%E3%81%8B%E3%81%99%EF%BC%81\">#</a></h3>\n<p>Android Player と iOS Simulater で動かしてみた、の図です。(途中、iPhone でキーボード出すのに苦労してるところは無視してください、Take2 の時間が無かったのですｗ)</p>\n<p><img src=\"/img/posts/using_akavache_02.gif\" alt=\"\"></p>\n<p>さすが Xamarin.Forms だ、(Android でも iPhone で動かしても)何とも無いぜ！</p>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h1>\n<p>Akavache を使って保存と読み出しを行う超簡単なサンプルを作ってみました。<br>\n作ったサンプルは <a href=\"https://github.com/amay077/AkavacheSample\">GitHub - amay077/AkavacheSample</a> においておきます。</p>\n<p>仕組みは理解できないけど、とても簡単に使えることが分かると思います。<br>\n追加されたパッケージを見ると、 <a href=\"http://JSON.NET\">JSON.NET</a> とか、Reactive Extensions とかが入っているので、まあだいたい察しが付くかと。。。</p>\n<p>ギョームアプリでがっつり使ってますが、今のところパフォーマンスとかデータ破損とか、そういう問題はないです。POCO なオブジェクトをローカル保存するのに、とても役立っています。</p>\n<p>というわけで Advent Calendar 初日のネタは以上です。</p>\n",
      "date_published": "2015-12-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/12/24/using-uialertcontroller-with-async-await/",
      "url": "https://blog.amay077.net/blog/2014/12/24/using-uialertcontroller-with-async-await/",
      "title": "UIAlertController を async/await 対応させて便利に使う",
      "content_html": "<p>これは <a href=\"http://qiita.com/advent-calendar/2014/xamarin\">Xamarin Advent Calendar 2014 23日目</a> の記事です。</p>\n<p>なんか空いてたのでエントリーしましたが、急だったので軽い話です。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/56abeeaa188f33cd56de\">iOS アプリでアラート出してボタンが押されるまで待つ？方法を Objective-C と Xamarin.iOS で比べてみた - Qiita</a></li>\n</ul>\n<p>の焼き直しみたいなものです。</p>\n<p>iOS8 では、<code>UIAlertDialog</code> が非推奨になり、代わりに <code>UIAlertController</code> を使えとのこと。</p>\n<p>普通に使うとこうなります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">button1<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> alert <span class=\"token operator\">=</span> UIAlertController<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"こんぼう をすてますか？\"</span><span class=\"token punctuation\">,</span> UIAlertControllerStyle<span class=\"token punctuation\">.</span>Alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    alert<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"はい\"</span><span class=\"token punctuation\">,</span> <br>        UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=></span> label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"こんぼう をすてました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>    alert<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"いいえ\"</span><span class=\"token punctuation\">,</span>  <br>        UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>     <br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">PresentViewController</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>このくらいなら問題ありません。</p>\n<p>次に、こんぼう をすてる前にもう一度問いかけるようにします。<br>\n２つ目の <code>UIAlertController</code> が入れ子になってしまって見づらい、 <strong>残念な感じ</strong> です。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">button1<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> alert <span class=\"token operator\">=</span> UIAlertController<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"こんぼう をすてますか？\"</span><span class=\"token punctuation\">,</span> UIAlertControllerStyle<span class=\"token punctuation\">.</span>Alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    alert<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"はい\"</span><span class=\"token punctuation\">,</span> <br>        UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 念押しの確認ダイアログ（入れ子でつらい</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> alert2 <span class=\"token operator\">=</span> UIAlertController<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ほんとうにすてますか？\"</span><span class=\"token punctuation\">,</span> UIAlertControllerStyle<span class=\"token punctuation\">.</span>Alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            alert2<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"もちろん\"</span><span class=\"token punctuation\">,</span> UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> _<span class=\"token operator\">=></span> <br>            <span class=\"token punctuation\">{</span><br>                label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"こんぼう をすてました\"</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        alert2<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"やめる\"</span><span class=\"token punctuation\">,</span>  UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> _<span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br><br>        <span class=\"token comment\">// アラート２の表示</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">PresentViewController</span><span class=\"token punctuation\">(</span>alert2<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br><br>    <span class=\"token comment\">// アラート１の表示</span><br>    alert<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"いいえ\"</span><span class=\"token punctuation\">,</span>  UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">PresentViewController</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Objective-C や Swift なら、ここで打つ手は今のところ無いでしょう。<br>\nしかし <strong>Xamarin には、C# には async/await がありまぁす！</strong><br>\nアラートの表示を async/await（というか Task）対応してみましょう。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> button1Title<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> button2Title<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> comp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> alert <span class=\"token operator\">=</span> UIAlertController<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> UIAlertControllerStyle<span class=\"token punctuation\">.</span>Alert<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    alert<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>button1Title<span class=\"token punctuation\">,</span> UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=></span> <br>    <span class=\"token punctuation\">{</span><br>        comp<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OKボタン</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>    alert<span class=\"token punctuation\">.</span><span class=\"token function\">AddAction</span><span class=\"token punctuation\">(</span>UIAlertAction<span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>button2Title<span class=\"token punctuation\">,</span>  UIAlertActionStyle<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">,</span> x<span class=\"token operator\">=></span> <br>    <span class=\"token punctuation\">{</span><br>        comp<span class=\"token punctuation\">.</span><span class=\"token function\">SetResult</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Cancel</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">PresentViewController</span><span class=\"token punctuation\">(</span>alert<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">return</span> comp<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>Task&lt;int&gt;</code> を返すメソッド <code>ShowDialog</code> です。<code>UIAlertController</code> のボタンが押されたら <code>SetResult</code> して Task の値を決定します。</p>\n<p>このメソッドを使う方は、こうなります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">button1<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"こんぼう をすてますか？\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"はい\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"いいえ\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <br>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ほんとうにすてますか？\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"もちろん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"やめる\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <br>        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br><br>    label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"こんぼう をすてました\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>なんて見やすいコードになったことでしょう。すばらしい！</p>\n<p>入れ子でなく、フラットに書けるので、こんな事もできます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">button1<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"こんぼう をすてますか？\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"はい\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"いいえ\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <br>    <span class=\"token punctuation\">{</span><br>        label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"それをすてるなんてとんでもない！\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>\tlabel1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"すてるのをやめました\"</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>こんぼうを捨てるのをあきらめるまで、なんどでも聞いてきます。<br>\nコールバックスタイルのメソッドでループとか、ベタに書くと頭痛いです。</p>\n<p>動かすとこんな感じです。</p>\n<p><img src=\"/img/posts/uialertcontroller_with_async_await_01.gif\" alt=\"\"></p>\n<p><code>ShowDialog</code> は拡張メソッドとして作成しておくと、呼び出しに便利かもしれません。<br>\nコールバックスタイルの機能を、Task化するパターンはよく使いそうな気がします。<code>TaskCompletionSource</code>、覚えておきましょう。</p>\n",
      "date_published": "2014-12-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/12/13/moving-shapes-its-easy/",
      "url": "https://blog.amay077.net/blog/2014/12/13/moving-shapes-its-easy/",
      "title": "図形の移動が、こんなに簡単に実装できる時代になりました",
      "content_html": "<p>これは <a href=\"http://qiita.com/advent-calendar/2014/foss4goss4g\">FOSS4G Advent Calendar 2014 12日目</a> の記事です。</p>\n<p>FOSS4G と言えば GIS、GIS と言えば図形編集ですね。図形を追加したり移動したり回転したりできる機能です。面倒なんですよ、これプログラミングするの。</p>\n<p>なにが面倒かというと、色んな状態（マウスの状態＜左/右ボタンが押されている/押されてない、マウスダウン時の座標、現在の座標＞、図形の状態＜選択されている/いない＞）などなどがコードの中に入り乱れて、スパゲッティコードになりがちというか「なります」。</p>\n<!--more-->\n<p>例えば「図形の移動」のフローは、</p>\n<ol>\n<li>図形をマウスダウン（＝選択）</li>\n<li>そのままマウスムーブ（＝移動）</li>\n<li>マウスボタンを離して終了</li>\n</ol>\n<p>と、極めて単純なんですね。これが普通にコーディングするとフラグや状態管理の嵐になってしまう。</p>\n<p>と言ってた時代は終わりました。<br>\n　例えば、下の画面。</p>\n<p><img src=\"/img/posts/simply_shape_dragging_using_rx_01.gif\" alt=\"\"></p>\n<p>これは、白い四角形をドラッグで移動できるというスマホアプリの例ですが、これの実装の主要部分はたったの <strong>６行</strong> です。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">DownEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1.図形をマウスダウン</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">MoveEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 2.そのままマウスムーブ</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">SetX</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>RawX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 移動の度に図形を移動</span><br>        rectangle<span class=\"token punctuation\">.</span><span class=\"token function\">SetY</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>RawY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>このコードをよく見ると、上に書いたフローと似ているのが分かります。人が考えたままコードに落とし込める。しかもフラグとか状態管理とかのゴミが一切ない。素晴らしい！(3. に該当するコードが必要な気がするけどまあいいや）</p>\n<p>これを実現しているのは<a href=\"http://ninjinkun.hatenablog.com/entry/introrxja\">リアクティブプログラミング</a>という概念。なんでもかんでもストリーム(時系列にデータが降ってくる何か)で捉えよう、イベントでさえも。イベントはストリームであるので、あとはストリームの加工や他のストリームとの合成でどうにかできてしまいます。</p>\n<p>リアクティブ＋図形うんぬんの他の例は、</p>\n<ul>\n<li><a href=\"http://act.neue.cc/rxjs/canvas.htm\">RxJS + Canvas</a></li>\n</ul>\n<p>などがあります。これは HTML なのですぐ試せますしコード（Javascript）も見られます。</p>\n<p>リアクティブプログラミング用の著名なライブラリはほとんどオープンソース、リアクティブプログラミング＋FOSS4G で <strong>RxGIS</strong> （なんかカッコいいから言ってみたかっただけ）</p>\n<p>いつかまたGIS作るみたいな仕事があったら、絶対 Rx 使ってつくるぞ！と思ってますのでよろしくお願いします。</p>\n<p>（上のコード例の全コードは <a href=\"https://gist.github.com/amay077/1d22ba8ffa8ad95e9393\">gist</a> にあります。）</p>\n",
      "date_published": "2014-12-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/12/09/making-like-screensaver-using-rxandroid/",
      "url": "https://blog.amay077.net/blog/2014/12/09/making-like-screensaver-using-rxandroid/",
      "title": "RxAndroid でスクリーンセーバー的な機能を作る",
      "content_html": "<p>これは <a href=\"http://qiita.com/advent-calendar/2014/android\">Android Advent Calendar 2014 8日目</a> の記事です。</p>\n<p>例えば◯秒間操作がなかったらパスキーロック画面を表示する、とかそういうの。普通に作るとタイマーを使って面倒な感じになっちゃいますが、<a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a> と <a href=\"https://github.com/ReactiveX/RxAndroid\">RxAndroid</a> を使うととても簡単にできます。</p>\n<!--more-->\n<h2 id=\"rxjava-%2B-rxanroid-%E3%81%AE%E5%A0%B4%E5%90%88\">RxJava + RxAnroid の場合 <a class=\"direct-link\" href=\"#rxjava-%2B-rxanroid-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>例えば、画面に <code>EditBox</code> と <code>Button</code> があって、「文字列の入力」と「ボタンが押されたか」を監視、◯秒間操作がなかったら××する、という処理をしたい時、RxJava+RxAndroid では以下のように書けます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//MyActivity.java</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"MyActivity\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Subscription</span> _subscription<span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_my<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">EditText</span> editName <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">EditText</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>editName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> buttonOk <span class=\"token operator\">=</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// OnTextChangeEvent や OnClickEvent をただの Void シグナルに変換</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Func1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> signalizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Func1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token class-name\">Void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> onClickEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 文字入力イベントのストリームと…</span><br>        _subscription <span class=\"token operator\">=</span> <span class=\"token class-name\">ViewObservable</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span>editName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>signalizer<span class=\"token punctuation\">)</span><br>                <span class=\"token comment\">// ボタン押されたのストリームを合体</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">mergeWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ViewObservable</span><span class=\"token punctuation\">.</span><span class=\"token function\">clicks</span><span class=\"token punctuation\">(</span>buttonOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>signalizer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token comment\">// 3秒間なんもなかったらエラーにする</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token annotation punctuation\">@Override</span><br>                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span> dummy<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token comment\">// 何かアクションがあったらこっち</span><br>                        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"文字が入力されたか、ボタンが押されたよ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Throwable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token annotation punctuation\">@Override</span><br>                    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token comment\">// 3秒間何もなかったらこっち</span><br>                        <span class=\"token function\">runOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                            <span class=\"token annotation punctuation\">@Override</span><br>                            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                                <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MyActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <br>                                    <span class=\"token string\">\"３秒間何も操作がありませんでした\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><br>                                    <span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                            <span class=\"token punctuation\">}</span><br>                        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// イベント系は無限ストリームだから開放してやらないとリークするはず</span><br>        _subscription<span class=\"token punctuation\">.</span><span class=\"token function\">unsubscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>ViewObservable.text(editName)</code> がテキストが入力される度にシグナルを発するストリーム、<code>ViewObservable.clicks(buttonOk)</code>がボタンが押される度にシグナルを発するストリームです。これらを <a href=\"http://rxmarbles.com/#merge\"><code>mergeWith</code></a> で合体させます。</p>\n<p>あとは <a href=\"https://github.com/ReactiveX/RxJava/wiki/Filtering-Observables#timeout\"><code>timeout</code></a> につなげるだけ。３秒以内にシグナルがあったら onNext→<code>new Action&lt;Void&gt;()</code>のとこ、3秒以上何も操作がなかったらタイムアウトして onError→<code>new Action&lt;Throwable&gt;()</code> のとこに飛びます。あとはご自由に、ここでは <code>Toast</code> を表示してるだけです。</p>\n<p>注意点は、イベントから生成されたストリームは無限、つまり <code>onComplete</code> は来ない。こういう <code>Observable</code> は自力での購読解除（<code>unsubscribe</code>）が必須です。</p>\n<p>これを動かすとこんな感じになります</p>\n<p><img src=\"/img/posts/make_screensaver_using_rxjava_01.gif\" alt=\"\"></p>\n<h2 id=\"xamarin.android-%2B-rx%E6%9C%AC%E5%AE%B6%E3%81%AE%E5%A0%B4%E5%90%88\">Xamarin.Android + Rx本家の場合 <a class=\"direct-link\" href=\"#xamarin.android-%2B-rx%E6%9C%AC%E5%AE%B6%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>さて Xamarin です。Xamarin では本家の <a href=\"https://rx.codeplex.com/\">Reactive Extensions</a> が使用できます。RxAndroid と同じことをやると下のように書けます、スマート。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//MainActivity.cs</span><br><span class=\"token punctuation\">[</span><span class=\"token function\">Activity</span><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"RxJavaSample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Icon <span class=\"token operator\">=</span> <span class=\"token string\">\"@drawable/icon\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>        <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> editName <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>EditText<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>editName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> buttonOk <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>buttonOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>TextChangedEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>editName<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TextChanged\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>_<span class=\"token operator\">=></span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">Merge</span><span class=\"token punctuation\">(</span>Observable<span class=\"token punctuation\">.</span><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">(</span>buttonOk<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Click\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>_<span class=\"token operator\">=></span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">,</span> <br>            e <span class=\"token operator\">=></span> <span class=\"token function\">RunOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Toast<span class=\"token punctuation\">.</span><span class=\"token function\">MakeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <br>                <span class=\"token string\">\"３秒間何も操作がありませんでした\"</span><span class=\"token punctuation\">,</span> ToastLength<span class=\"token punctuation\">.</span>Short<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Reactive Extensions を使うと、UIイベントをストリームに変換でき、合成・加工・フィルタなどして様々な応用ができます。しかしこれは Rx のパワーのまだ半分。もう半分は、WebAPI とか DB とか、Model 由来のレスポンスもストリーム化できること。どちらも Observable にしたら、あとはそれをつなぐだけでアプリ完成！<br>\n　さあみんなで Rx にロックインされましょう！</p>\n",
      "date_published": "2014-12-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin/",
      "url": "https://blog.amay077.net/blog/2014/12/02/mac-user-have-misunderstood-about-xamarin/",
      "title": "マカーの人が Xamarin について勘違いしていそうな５つのこと",
      "content_html": "<p>今年も始まりました <a href=\"http://qiita.com/advent-calendar/2014/xamarin\">Xamarin Advent Calendar 2014</a> 。<br>\n　思えば<a href=\"http://qiita.com/advent-calendar/2013/xamarin\">昨年の Advent Calendar</a> は、5名の方に参加していただいたものの「ほとんど俺」みたいな感じでしたが、今年はたくさん方に登録してもらえてとても嬉しいです。この1年の Xamarin の躍進ぶりを象徴していると思います。</p>\n<!--more-->\n<p>そんな Xamarin ですが、Microsoft とのパートナーシップが強力なおかげで、Windows系の開発者には広く知られて（そういう戦略なのは分かります）いますが、普段 Mac で iOS/Android アプリを開発してますみたいな人にはあまりリーチできていないかなあと思います。</p>\n<p>そこで初日の今日は、マカーの人が、勘違い・思い込んでいそうなことをいくつか払拭してみたいと思います。</p>\n<h2 id=\"q1.-xamarin-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF%E3%80%81visual-studio-%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">Q1. Xamarin を使うには、Visual Studio が必要なんでしょ？ <a class=\"direct-link\" href=\"#q1.-xamarin-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF%E3%80%81visual-studio-%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">#</a></h2>\n<p>A1: <strong>必要ありません。</strong> 「Xamarin Studio」という専用の統合開発環境で開発できます。私は Mac + Xamarin Studio で開発していますが、まったく問題を感じていません。<br>\n　また、iOSアプリのView部分は、Xcodeと同じ <code>.storyboard</code> ファイルを使用しますが、Xcode を使う必要もありません。Interface Builder と同じ（か部分的にはそれ以上）の機能を持つ <a href=\"http://developer.xamarin.com/guides/ios/user_interface/designer/\">UIデザイナー</a>が、Xamarin Studio には搭載されています。</p>\n<h2 id=\"q2.-xamarin-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF%E3%80%81windows-%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">Q2. Xamarin を使うには、Windows が必要なんでしょ？ <a class=\"direct-link\" href=\"#q2.-xamarin-%E3%82%92%E4%BD%BF%E3%81%86%E3%81%AB%E3%81%AF%E3%80%81windows-%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">#</a></h2>\n<p>A2: <strong>必要ありません。</strong> Mac のみで完結します。むしろ Windows だけでは iOSアプリのビルドができないので、<a href=\"http://developer.xamarin.com/guides/ios/getting_started/installation/windows/introduction_to_xamarin_ios_for_visual_studio/\">Mac にリモート接続</a>する必要があり、これがしばしばトラブルになります。（主にデモでｗ<br>\n　Microsoft がアピールするとどうしても Windows+Visual Studioの説明になってしまいますが、それはまやかしです（言い切った！</p>\n<h2 id=\"q3.-xamarin%E7%A4%BE%E3%81%A3%E3%81%A6%E3%80%81microsoft-%E3%81%AE%E5%AD%90%E5%88%86%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">Q3. Xamarin社って、Microsoft の子分みたいなもんでしょ？ <a class=\"direct-link\" href=\"#q3.-xamarin%E7%A4%BE%E3%81%A3%E3%81%A6%E3%80%81microsoft-%E3%81%AE%E5%AD%90%E5%88%86%E3%81%BF%E3%81%9F%E3%81%84%E3%81%AA%E3%82%82%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">#</a></h2>\n<p>A3: Xamarin社は独立した企業であり、Microsoftとは対等な立場です（と私は思っています）。「Microsoft に買収されればいいのに」という声をよく聞きますが、私は独立した企業である現在のポジションが Xamarin社にとってベストだと思っています。Microsoftにとってはモバイル開発者にリーチする重要なピースであり、Xamarin社としても他にないマーケットです。<br>\nまた、今年の Xamarin の大イベント <a href=\"https://evolve.xamarin.com/\">Evolve2014</a> には、Microsoft の他に IBM, Amazon, Google, Salesforce, Dropbox と言った、他ではちょっと見られないような豪華なスポンサー群になりました。これも Xamarin の中立な立ち位置がなせる技だと思います。<br>\nあ、最近の <a href=\"http://www.publickey1.jp/blog/14/jitnet_core_rutimenet_framework.html\">.NETのオープン化</a> の流れは、Xamarin の CTO であり Monoプロジェクトの生みの親であるスーパーハッカー、<a href=\"https://twitter.com/migueldeicaza\">ミゲル・デ・イカザ</a>氏が少なからず関係していると思っています。</p>\n<h2 id=\"q4.-c%23-%E8%A6%9A%E3%81%88%E3%82%8B%E3%81%AE%E3%81%97%E3%82%93%E3%81%A9%E3%81%84\">Q4. C# 覚えるのしんどい <a class=\"direct-link\" href=\"#q4.-c%23-%E8%A6%9A%E3%81%88%E3%82%8B%E3%81%AE%E3%81%97%E3%82%93%E3%81%A9%E3%81%84\">#</a></h2>\n<p>A4. <strong>あなたはあの Objective-C を覚えたのでしょう？</strong></p>\n<h2 id=\"q5.-swift-%E3%81%AE%E6%96%B9%E3%81%8C-c%23-%E3%82%88%E3%82%8A%E3%82%A4%E3%82%B1%E3%81%A6%E3%82%8B%E3%81%98%E3%82%83%E3%82%93%EF%BC%9F\">Q5. Swift の方が C# よりイケてるじゃん？ <a class=\"direct-link\" href=\"#q5.-swift-%E3%81%AE%E6%96%B9%E3%81%8C-c%23-%E3%82%88%E3%82%8A%E3%82%A4%E3%82%B1%E3%81%A6%E3%82%8B%E3%81%98%E3%82%83%E3%82%93%EF%BC%9F\">#</a></h2>\n<p>A5. 後発である Swift がイケてるのは誰もが認めるところでしょう（かつて Java に対する C# がそうであったように）「Swift は関数型言語だ」という意見には、Xamarin は F# を提案します。<a href=\"http://blog.xamarin.com/introduction-to-f-with-xamarin/\">Xamarinには F# の MVP（勝手に”数学ガール”だと思っている）</a>も居ます(←訂正:Xamarinの人じゃなかったです)し、日本でも <a href=\"http://www.slideshare.net/kusokuzeshiki/xamarinmvvm-crossf\">F#+Xamarin でアプリ開発されている型</a>も居らっしゃいます。</p>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h1>\n<p>ちょっと宗教論争っぽくなりかけたので、ここまでにしておきます。強く主張したいのは、モバイルアプリ開発者なら iOS だけ、Android だけ知っていても良いアプリは作れないでしょう。両方のプラットフォーム、開発言語、哲学を理解する必要があります。 <strong>Xamarin だから Swift を覚えなくていいという事はありません。</strong><br>\n　<br>\n　でも、同じ（少なくとも同じような機能をもった）アプリの同じロジックを、異なる言語でそれぞれ書いて、その後数年保守し続ける現状は、本当に最適なのでしょうか？同じコード、あるいは同じバイナリが iOS/Android で動作すれば、保守費用は半分です（SIer みたいな言い方だｗ）。</p>\n<p>「共通にできる選択肢、あるいはプラットフォームの文化にあわせて別々にできる選択肢」を自然な形で提供するのが Xamarin、 Java も Swift も C# も覚えて C# で D.R.Y するのが Xamarin です。</p>\n<p>最後に宣伝ですが、 <strong>Build INSIDER</strong> というWebサイトで「Xamarin逆引きTips」という連載をしています。</p>\n<ul>\n<li><a href=\"http://www.buildinsider.net/mobile/xamarintips\">Xamarin逆引きTips - Build Insider</a></li>\n</ul>\n<p>これは、.NET Framework は今まであまり使った事がない iOS/Android アプリ開発者をターゲットにしていて、説明もほぼ全てが Mac+Xamarin Studio を使って書いています。興味持ったら読んでもらえると嬉しいです。</p>\n<p>本日まったく登場しなかった Visual Studio や Windows Phone などの話は、明日以降登場すると思いますので、お楽しみに！それでは初日はこの辺で。</p>\n",
      "date_published": "2014-12-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/11/14/project-design-using-xamarin-forms/",
      "url": "https://blog.amay077.net/blog/2014/11/14/project-design-using-xamarin-forms/",
      "title": "Xamarin.Forms をガチで使うときのプロジェクト構成案",
      "content_html": "<p><a href=\"http://xamarin.com/forms\">Xamarin.Forms</a>（以下 XF とします）を本格的に開発に導入してみようと思ってるんだけど、その時のプロジェクト(アセンブリ)構成はこんな感じかな、というのを考えてみた。</p>\n<!--more-->\n<h2 id=\"%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88\">コンセプト <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%B3%E3%82%BB%E3%83%97%E3%83%88\">#</a></h2>\n<ul>\n<li>XF を使う理由は、Viewのワンソース化よりも <em>DataBinding機構が使えること</em></li>\n<li>いざという時逃げられるように XF への依存を最小限にする</li>\n<li>iOS/Android 対応アプリ開発のこと、他は知らん</li>\n<li>MVVM で PCL で、PCL のところを最大化する</li>\n</ul>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90%E5%9B%B3\">プロジェクト構成図 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E6%A7%8B%E6%88%90%E5%9B%B3\">#</a></h2>\n<p>角丸四角形がプロジェクトを、矢印は依存を示す。</p>\n<p><img src=\"/img/posts/project_design_using_xamarin_forms_01.png\" alt=\"\"></p>\n<p>左から説明。</p>\n<h3 id=\"xf.android%2C-xf.ios%2C-xf.core\">XF.Android, XF.iOS, XF.Core <a class=\"direct-link\" href=\"#xf.android%2C-xf.ios%2C-xf.core\">#</a></h3>\n<p>Xamarin.Forms ソリューションを作成するとテンプレで作られるプロジェクト群。<br>\n　XF.Core でプラットフォームに依存しないView（ボタンとか）を、XF.Android/XF.iOS でプラットフォーム固有のView（スライドメニューとかNotificationなど）を提供する。<br>\n　これらは BindableProperty を介して ViewModel とデータバインディングする。<br>\n　XF は他に、ServiceLocator や MessageCenter を提供するが、それらは使用しない（ロックインを防ぐため）<br>\n　結局この案では、「XF=View層のみ」となる。</p>\n<h3 id=\"app.core\">App.Core <a class=\"direct-link\" href=\"#app.core\">#</a></h3>\n<p>アプリのView以外の共通部分のプロジェクト。ViewModel と Model を含む。<br>\n　ViewModel から View へシグナルを送るために &quot;XFではない&quot; Messengerを使う。（MvvmLight とか Prism とかから引っこ抜いてくればいいかな？）<br>\n　Model にはビジネスロジックのみを記述し、通信処理やデータI/Oなどのプラットフォーム共通なAPIはModelから直接使い、プラットフォーム固有の機能は、ServiceInterface を使う。<br>\n　ServiceInteface は、ServiceLocator によって App.Android/iOS から実体が Inject される。ServiceLocator は &quot;XFではない&quot;…以下略<br>\n　Rx を使うので、たぶん Model のメソッドの返り値は全部 <code>IObservable&lt;T&gt;</code> になります。</p>\n<h3 id=\"app.android%2C-app.ios\">App.Android, App.iOS <a class=\"direct-link\" href=\"#app.android%2C-app.ios\">#</a></h3>\n<p>プラットフォーム固有のAPI層。例えば GPS とか、アプリ連携とか、アイテム課金とか。ServiceInterface に定義されている Interface を実装するところ。</p>\n<h2 id=\"%E6%87%B8%E6%A1%88\">懸案 <a class=\"direct-link\" href=\"#%E6%87%B8%E6%A1%88\">#</a></h2>\n<ul>\n<li>PUSH通知受信とか、本来は Platform Specific APIs で担当したいが、プラットフォームの都合で、View で受信しなければならない機能の落としどころ。</li>\n<li>App.core をもっと分割した方がよい「ViewModelからAPI呼ばないよね？」とか「App.AndroidからModelにアクセスできるのがイヤ」とかを厳格に制限しようと思ったら分割した方が良さそう。</li>\n<li>Model から左側を全部 <code>IObservable&lt;T&gt;</code> 化しようと思っているが、Callback→Observable変換をModelでやるか、API層でやるか。&quot;ビジネス&quot;ロジックではないので、右側かな。</li>\n<li>XF.Core にどれだけ詰め込むか。画面レイアウトもXFでできるだけ頑張る、画面遷移フレームワークもXFで用意する、か？Sketches がどこまで活用できるか？</li>\n</ul>\n<p>さて、どんなもんでしょ？</p>\n",
      "date_published": "2014-11-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/11/10/complex-validation-with-rxjava-and-rxandroid/",
      "url": "https://blog.amay077.net/blog/2014/11/10/complex-validation-with-rxjava-and-rxandroid/",
      "title": "「チェックAがONならば、項目Bは入力必須とする」という Validation を RxJava + RxAndroid でやる",
      "content_html": "<p>例えばショッピングサイトとかの発送先指定のフォーム『登録されている住所とは違う住所に送りたい時、「別の住所に送る」をチェックする、すると「住所2」が必須入力となり、入力するまで次へ進めない』的なちょっと込み入ったValidationをReactive ExtensionsのJava版、<a href=\"https://github.com/ReactiveX/RxJava\">RxJava</a>と<a href=\"https://github.com/ReactiveX/RxAndroid\">RxAndroid</a>でやってみました。</p>\n<!--more-->\n<h1 id=\"%E5%8B%95%E4%BD%9C%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\">動作イメージ <a class=\"direct-link\" href=\"#%E5%8B%95%E4%BD%9C%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8\">#</a></h1>\n<p>まずいきなり動作結果から。</p>\n<p><img src=\"/img/posts/complex_validation_with_rxjava_and_rxandroid.gif\" alt=\"\"></p>\n<ul>\n<li>住所1は入力必須。</li>\n<li>住所2は「住所2へ配送する」がチェックされている場合のみ、入力必須。</li>\n<li>必須項目が入力されていない場合はボタンを押せない</li>\n</ul>\n<p>こんな仕様です。</p>\n<h1 id=\"%E5%AE%9F%E8%A3%85\">実装 <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A3%85\">#</a></h1>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span><br><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_my<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// 「注文を確定する」ボタン</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Button</span> buttonSubmit <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>buttonSubmit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// チェックボックスのON/OFFをObservable化</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> useSecondaryAddress <span class=\"token operator\">=</span><br>            <span class=\"token class-name\">ViewObservable</span><span class=\"token punctuation\">.</span><span class=\"token function\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CheckBox</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>checkUseSecondary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Func1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OnCheckedChangeEvent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token annotation punctuation\">@Override</span><br>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnCheckedChangeEvent</span> onCheckedChangeEvent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span> onCheckedChangeEvent<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// 住所1をObservable化</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OnTextChangeEvent</span><span class=\"token punctuation\">></span></span> primaryAddress <span class=\"token operator\">=</span><br>            <span class=\"token class-name\">ViewObservable</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EditText</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>editPrimaryAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// 住所2をObservable化</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OnTextChangeEvent</span><span class=\"token punctuation\">></span></span> secondaryAddress <span class=\"token operator\">=</span><br>            <span class=\"token class-name\">ViewObservable</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EditText</span><span class=\"token punctuation\">)</span> <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>editSecondaryAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// チェックボックスと住所2の必須条件をObservable化</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> secondaryIsValid <span class=\"token operator\">=</span> <br>        <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>useSecondaryAddress<span class=\"token punctuation\">,</span> secondaryAddress<span class=\"token punctuation\">,</span><br>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Func2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">OnTextChangeEvent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token annotation punctuation\">@Override</span><br>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> useSecondary<span class=\"token punctuation\">,</span> <span class=\"token class-name\">OnTextChangeEvent</span> secondaryAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>useSecondary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br><br>                    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token class-name\">TextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>secondaryAddress<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><br>    <span class=\"token comment\">// 全部まとめると、</span><br>    <span class=\"token comment\">//  住所1は入力必須、</span><br>    <span class=\"token comment\">//  住所2はチェックボックスがONの時だけ入力必須</span><br>    <span class=\"token comment\">//  必須条件を満たしていたらtrueを流す</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> isValidAll <span class=\"token operator\">=</span> <span class=\"token class-name\">Observable</span><span class=\"token punctuation\">.</span><span class=\"token function\">combineLatest</span><span class=\"token punctuation\">(</span>primaryAddress<span class=\"token punctuation\">,</span> secondaryIsValid<span class=\"token punctuation\">,</span><br>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Func2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OnTextChangeEvent</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token annotation punctuation\">@Override</span><br>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Boolean</span> <span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OnTextChangeEvent</span> primaryAddress<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Boolean</span> isValidSecondary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValidSecondary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br><br>                    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token class-name\">TextUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>primaryAddress<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><br>    <span class=\"token comment\">// 購読、監視</span><br>    isValidAll<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onNext</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Boolean</span> isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 必須条件を満たしていたら「注文を確定する」を有効にする</span><br>            <span class=\"token function\">runOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token annotation punctuation\">@Override</span><br>                <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    buttonSubmit<span class=\"token punctuation\">.</span><span class=\"token function\">setEnabled</span><span class=\"token punctuation\">(</span>isValid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>ViewObservable.xxx</code> で、UI要素をObservable化します。これはRxAndroidの機能。これでテキストの変更とか、チェックボックスの変更のたびに、<code>OnNext</code>が発生するようになります。</p>\n<p>Validationでは、RxJavaの機能である <code>Observable.combineLatest</code>がキモで、こいつに2つのObservableを渡してやると、その片方が値が変化した時に、<code>T3 call(T1 a, T2 b)</code> が呼ばれます。T1、T2 は渡すObservableの型、T3は後続へ流す型で、Validationなので<code>Boolean</code>です。<br>\n上記 <code>secondaryIsValid</code> の実装では、「住所2に配送する」のチェックボックスと「住所2」のテキストボックスの2つのObservableを渡していて、</p>\n<ul>\n<li>「住所2に配送する」がOFFなら <code>true</code> を返す</li>\n<li>「住所2に配送する」がONで、且つ「住所2」が空でなければ <code>true</code> を返す</li>\n</ul>\n<p>としています。</p>\n<p>次に、<code>isValidAll</code> の実装では、「住所1」と <code>secondaryIsValid</code> を渡していて、</p>\n<ul>\n<li><code>secondaryIsValid</code> が <code>false</code> なら <code>false</code> を返す</li>\n<li><code>secondaryIsValid</code> が <code>true</code> で、且つ「住所1」が空でなければ <code>true</code> を返す</li>\n</ul>\n<p>という実装です。</p>\n<p>んで、こいつ(<code>isValidAll</code>)を購読(<code>subscribe</code>)すると、<code>onNext</code> にValidationの結果が通知されるので、ボタンの<code>Enabled</code>を切り替えます。</p>\n<p>conbimeLatest は、本家Rxなら obsA.CombineLatest(obsB, (tA, tB) =&gt; tX).CombineLatest(obsC, (tX, tC) =&gt; tY)... とチェインして書けるのですが、RxJava の combineLatest はなぜか static メソッドしかなくてチェインできません、残念。</p>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h1>\n<p>このレベルだと、すべてのUI要素に変更通知を仕込んで共通な関数を呼ぶ、的な実装で問題ないですが、要素や条件が増えてくると大変です。</p>\n<p>Observable と combineLatest を使うと、制約の一部を(Observableに)部分化できて、それらを組み合わせるのも自由自在(Observableだから)。</p>\n<p>Javaなのでかなり長ったらしくて読みづらいコードになってしまいました。</p>\n<p><strong><a href=\"http://xamarin.com/\">Xamarin.Android</a> + <a href=\"https://rx.codeplex.com/\">本家Reactive Extensions</a> + <a href=\"https://reactiveproperty.codeplex.com/\">ReactiveProporty</a> なら、相当スッキリするんだけどなあー</strong></p>\n",
      "date_published": "2014-11-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/10/30/reactivex-mvvm-databindings-relations/",
      "url": "https://blog.amay077.net/blog/2014/10/30/reactivex-mvvm-databindings-relations/",
      "title": "ReactiveX と MVVM と DataBinding の関係について図にしてみた",
      "content_html": "<ul>\n<li><a href=\"http://connpass.com/event/8680/\">ReactiveCocoa Tokyo #rac_tokyo - connpass</a></li>\n<li><a href=\"http://connpass.com/event/9061/\">RxJava Night #rxjnight - connpass</a></li>\n<li><a href=\"http://mozaic.fm/post/100741841543/10-node-js-sideshow\">#10 node.js sideshow ｜ mozaic.fm</a></li>\n</ul>\n<!--more-->\n<p>などなどをいろいろ眺めておりまして（東京うらやましい）、Reactive Extensions とか MVVM とかいろいろ熱い！楽しい！と思っているわけですが、いろいろなライブラリがあって、それらのカバーする範囲がいまいち明確になってない気がしたので、自分なりに整理してみました。</p>\n<p><img src=\"/img/posts/reactive_mvvm_databindings_relations_01.png\" alt=\"\"></p>\n<p>MVVM っていうと、Messenger とか DIコンテナ的なものとかもあるわけですが、主に DataBinding と Rx の違いにフィーチャーしたかったので除外しました。</p>\n<p>DataBinding は、<a href=\"http://www.atmarkit.co.jp/ait/articles/1008/03/news097_3.html\">DependencyProperty</a> や <a href=\"http://blog.falafel.com/learning-xamarin-custom-renderers-in-xamarin-forms/\">BindableProperty</a> みたいなものがあるかどうかという感じで考えていて、「XAMLとかのマークアップでバインディング指定できなければならない」という考えではないです。</p>\n<p>View, DataBinding, ViewModel, ReactiveX の各ブロックは基本的にはどの組み合わせでもよくて（特に ReactiveX は他とは別の世界のものなので）、しかし中には ReactiveProperty のように ReactiveX に依存しつつ ViewModel の機能を提供するものがあったり、ReactiveCocoa のように「全部入り」のものがあったりします。また、View と ViewModel を繋ぐためにはなんらかの DataBinding が必要です。</p>\n<p>という理解なんですが、あってますかね？</p>\n<p>私は Xamarin 推しの人なので、 <strong>Xamarin.Forms + ReactiveProperty が、MVVM+Rx のパワーをフル活用できて、しかも iOS/Android で大部分のコードが共有できるという最強の組み合わせなんですよ！</strong> というのを言いたいわけです。</p>\n<h2 id=\"links\">Links <a class=\"direct-link\" href=\"#links\">#</a></h2>\n<ul>\n<li>Xamarin.Forms - <a href=\"http://xamarin.com/forms\">Build a Native Android UI &amp; iOS UI with Xamarin.Forms - Xamarin</a></li>\n<li>Prism - <a href=\"http://compositewpf.codeplex.com/releases/view/117297\">patterns &amp; practices: Prism - Download: Prism 5.0 for .NET 4.5</a></li>\n<li>MVVM Light Toolkit - <a href=\"https://mvvmlight.codeplex.com/\">MVVM Light Toolkit - Home</a></li>\n<li>Reactive Extensions - <a href=\"https://rx.codeplex.com/\">Rx (Reactive Extensions) - Home</a></li>\n<li>ReactiveProperty - <a href=\"https://reactiveproperty.codeplex.com/\">ReactiveProperty - MVVM Extensions for Rx - Home</a></li>\n<li>ReactiveUI - <a href=\"https://github.com/reactiveui/reactiveui\">reactiveui/ReactiveUI</a></li>\n<li>MvvmCross - <a href=\"https://github.com/MvvmCross/MvvmCross\">MvvmCross/MvvmCross</a></li>\n<li>RxJava - <a href=\"https://github.com/ReactiveX/RxJava\">ReactiveX/RxJava</a></li>\n<li>RxAndroid - <a href=\"https://github.com/ReactiveX/RxAndroid\">ReactiveX/RxAndroid</a></li>\n<li>android-binding - <a href=\"https://github.com/gueei/AndroidBinding\">gueei/AndroidBinding</a></li>\n<li>ReactiveCocoa - <a href=\"https://github.com/ReactiveCocoa/ReactiveCocoa\">ReactiveCocoa/ReactiveCocoa</a></li>\n</ul>\n",
      "date_published": "2014-10-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/09/23/views-zorder/",
      "url": "https://blog.amay077.net/blog/2014/09/23/views-zorder/",
      "title": "ボタンを重ねた時の ZOrder に関する Tips",
      "content_html": "<p>Android 開発でボタンを意図的に重ねたい時ってあんまりないんですけど、業務アプリなんか作ってますとたまにありまして。</p>\n<!--more-->\n<p>具体的には、</p>\n<ul>\n<li><a href=\"http://coliss.com/articles/build-websites/operation/css/10-css-breadcrumbs.html\">デザインの勉強にもなる、CSSで実装するパンくずのまとめ ｜ コリス</a></li>\n</ul>\n<p>みたいなパンくずリストを作りたい時。変な形のボタンを作るのは骨が折れるので、ボタンを重ねて、左側の方が手前に表示されるようにしたいわけです。(なぜそうしたいかはたぶん伝わらないので割愛)</p>\n<p>つまりはボタンを重ねた時の ZOrder（Z-index）を制御したいわけです。</p>\n<p>でいろいろトライ。</p>\n<h2 id=\"linearlayout-%E3%81%AE%E5%A0%B4%E5%90%88\">LinearLayout の場合 <a class=\"direct-link\" href=\"#linearlayout-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>LinearLayout で横並びにする場合。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30dp<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>horizontal<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FF0000<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AAA<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#00FF00<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BBB<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-10dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#0000FF<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CCC<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-10dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"%E7%B5%90%E6%9E%9C\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C\">#</a></h3>\n<p><img src=\"/img/posts/zorder_test_01.png\" alt=\"\"></p>\n<p>だめだー。<br>\nLinearLayout の Zorder は、並び順と連動してしまうので、右（若しくは下）ほど手前になってしまいます。</p>\n<p>ちなみに、「<code>view.bringToFront()</code> を叩けばいいんじゃね？」と思い、<code>buttonA.bringToFront()</code> を実行すると、</p>\n<p>じゃん↓</p>\n<p><img src=\"/img/posts/zorder_test_02.png\" alt=\"\"></p>\n<p>見事に AAA が右端にいったｗ</p>\n<h2 id=\"relativelayout-%E3%81%AE%E5%A0%B4%E5%90%88%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89\">RelativeLayout の場合（その１） <a class=\"direct-link\" href=\"#relativelayout-%E3%81%AE%E5%A0%B4%E5%90%88%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89\">#</a></h2>\n<p>普通に RelativeLayout で、「BはAの右、CはBの右」と制約をつけてみます。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RelativeLayout</span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30dp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonA<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FF0000<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AAA<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonB<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_toRightOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonA<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#00FF00<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BBB<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-10dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonC<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_toRightOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonB<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#0000FF<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CCC<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-10dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RelativeLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"%E7%B5%90%E6%9E%9C-2\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C-2\">#</a></h3>\n<p><img src=\"/img/posts/zorder_test_03.png\" alt=\"\"></p>\n<p>んんー、まだダメかー。</p>\n<h2 id=\"relativelayout-%E3%81%AE%E5%A0%B4%E5%90%88%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%92%EF%BC%89\">RelativeLayout の場合（その２） <a class=\"direct-link\" href=\"#relativelayout-%E3%81%AE%E5%A0%B4%E5%90%88%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%92%EF%BC%89\">#</a></h2>\n<p>その１の制約はそのままに、XML上での並び順を C、B、A に変えてみましょう。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RelativeLayout</span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>30dp<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonC<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_toRightOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonB<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#0000FF<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>CCC<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-10dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonB<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_toRightOf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonA<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#00FF00<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>BBB<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_marginLeft</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-10dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/buttonA<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FF0000<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AAA<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>50dp<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RelativeLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"%E7%B5%90%E6%9E%9C-3\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C-3\">#</a></h3>\n<p><img src=\"/img/posts/zorder_test_04.png\" alt=\"\"></p>\n<p>よしっ！期待した表示になりました。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>総合しますと、ZOrder は、LinearLayout でも RelativeLayout でも、XMLでは後で記述したものが手前になります。</p>\n<p>LinearLayout は、上から下、または左から右に並べるしかできないので、それに逆らうような ZOrder は付けられません。</p>\n<p>RelativeLayout は、制約に基づき描画されるので、XMLの記述順を工夫することで ZOrder をある程度コントロールできます。</p>\n<p>以上、誰得Tips でした。</p>\n<p>冒頭のようなパンくずリストをAndroidで作る方法教えてください。。。(FragmentBreadCrumbs もパンくずっぽくないじゃないですかぁ)</p>\n",
      "date_published": "2014-09-23T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/09/16/xamarin-user-meetup-in-autum-2014/",
      "url": "https://blog.amay077.net/blog/2014/09/16/xamarin-user-meetup-in-autum-2014/",
      "title": "秋の Xamarin 勉強会いろいろ",
      "content_html": "<p>なんか今年(2014年)の秋は Xamarin についての勉強会がめじろ押しで、嬉しいというか羨ましい限りです。</p>\n<p>ざっとまとめて見ました。あ、ほぼ関東圏です。</p>\n<!--more-->\n<h2 id=\"%E3%80%909%2F20%E3%83%BB%E5%93%81%E5%B7%9D%E3%80%91xamarin.ios-%E3%81%A7%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%82%92%E8%B6%85%E3%81%88%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%3A-atnd\">【9/20・品川】<a href=\"https://atnd.org/events/55564\">Xamarin.iOS でデバイスを超えるプログラミング : ATND</a> <a class=\"direct-link\" href=\"#%E3%80%909%2F20%E3%83%BB%E5%93%81%E5%B7%9D%E3%80%91xamarin.ios-%E3%81%A7%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%82%92%E8%B6%85%E3%81%88%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0-%3A-atnd\">#</a></h2>\n<p>Xamarin.iOS の、特に Objective-C で作成されたライブラリを Xamarin.iOS で使う「Binding」についてのお話が聞けるのは大変希少です。</p>\n<h2 id=\"%E3%80%909%2F20%E3%83%BB%E5%93%81%E5%B7%9D%E3%80%919%E6%9C%8820%E6%97%A5-.net%E3%83%A9%E3%83%9C-%E5%8B%89%E5%BC%B7%E4%BC%9A-2014%E5%B9%B49%E6%9C%88(%E6%9D%B1%E4%BA%AC%E9%83%BD)\">【9/20・品川】<a href=\"http://kokucheese.com/event/index/215384/\">9月20日 .NETラボ 勉強会 2014年9月(東京都)</a> <a class=\"direct-link\" href=\"#%E3%80%909%2F20%E3%83%BB%E5%93%81%E5%B7%9D%E3%80%919%E6%9C%8820%E6%97%A5-.net%E3%83%A9%E3%83%9C-%E5%8B%89%E5%BC%B7%E4%BC%9A-2014%E5%B9%B49%E6%9C%88(%E6%9D%B1%E4%BA%AC%E9%83%BD)\">#</a></h2>\n<p>セッションの一つに</p>\n<ul>\n<li>「Xamarin.FormsのMVVM」のお話（Microsoft MVP for Visual C# 増田 智明）</li>\n</ul>\n<p>があります。Xamarin.Forms は iOS/Android/WinPhone でUIを共通化する新しいフレームワークで、且つ、MVVMフレームワークでもあります。これも大変価値のあるセッションです。</p>\n<h2 id=\"%E3%80%909%2F30%E3%83%BB%E6%B8%8B%E8%B0%B7%E3%80%91%E3%80%8Cxamarin%E3%80%8D%E3%81%A3%E3%81%A6%E4%BD%95%EF%BC%9F-w%E3%82%A8%E3%83%90%E3%83%B3%E3%82%B8%E3%82%A7%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E7%89%B9%E6%BF%83%E3%80%8Cxamarin%E3%80%8D%E5%8B%89%E5%BC%B7%E4%BC%9A---connpass\">【9/30・渋谷】<a href=\"http://connpass.com/event/8706/\">「Xamarin」って何？ Wエバンジェリストによる特濃「Xamarin」勉強会 - connpass</a> <a class=\"direct-link\" href=\"#%E3%80%909%2F30%E3%83%BB%E6%B8%8B%E8%B0%B7%E3%80%91%E3%80%8Cxamarin%E3%80%8D%E3%81%A3%E3%81%A6%E4%BD%95%EF%BC%9F-w%E3%82%A8%E3%83%90%E3%83%B3%E3%82%B8%E3%82%A7%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AB%E3%82%88%E3%82%8B%E7%89%B9%E6%BF%83%E3%80%8Cxamarin%E3%80%8D%E5%8B%89%E5%BC%B7%E4%BC%9A---connpass\">#</a></h2>\n<p>「Xamarinって何？」というタイトルの通り、Xamarin を知らない／興味のある方向けのセッションと思います。エクセルソフト田淵さんとMS渡辺さんは Xamarin について各所でプレゼンしまくってるので、これからXamarinを始めてみようという方にはピッタリだと思います。</p>\n<h2 id=\"%E3%80%9010%2F18%E3%83%BB%E6%B8%8B%E8%B0%B7%E3%80%91xamarin-day---%E3%82%8F%E3%82%93%E3%81%8F%E3%81%BE%E5%90%8C%E7%9B%9F\">【10/18・渋谷】<a href=\"http://www.wankuma.com/seminar/20141018tokyo92/\">Xamarin Day - わんくま同盟</a> <a class=\"direct-link\" href=\"#%E3%80%9010%2F18%E3%83%BB%E6%B8%8B%E8%B0%B7%E3%80%91xamarin-day---%E3%82%8F%E3%82%93%E3%81%8F%E3%81%BE%E5%90%8C%E7%9B%9F\">#</a></h2>\n<p>わんくま同盟で、一日Xamarinぶち抜きしてくれるとは嬉しい限りですね。<br>\n勝手なイメージですが、わんくまはマイクロソフト系開発者が多いと思うので、Windows や Visual Studio での Xamarin 開発についてのセッションが多いのではないでしょうか。</p>\n<h2 id=\"%E3%80%9010%2F6-10%E3%83%BB%E3%82%A2%E3%83%A1%E3%83%AA%E3%82%AB%E3%80%91xamarin-evolve-2014\">【10/6-10・アメリカ】<a href=\"https://evolve.xamarin.com/\">Xamarin Evolve 2014</a> <a class=\"direct-link\" href=\"#%E3%80%9010%2F6-10%E3%83%BB%E3%82%A2%E3%83%A1%E3%83%AA%E3%82%AB%E3%80%91xamarin-evolve-2014\">#</a></h2>\n<p>Xamarin 社主催の年に一度の大イベント「Evolve 2014」です。Apple でいうところの WWDC、Google で言えば I/O のような大きなイベントです。<br>\nMicrosoft, IBM, Amazon, Salesforce とかなんだこの豪華なスポンサーは！<br>\n昨年は KeyNote がライブ配信されたので、今年もあるんじゃないかと思います。新しい Feature の発表もあるかもしれないので、必見です。日本のXamarin開発の第一人者 @iseebi さんも現地で参加されるとのことで、Live で盛り上がりましょう！</p>\n<h2 id=\"%E3%80%90%E6%99%82%E6%9C%9F%E6%9C%AA%E5%AE%9A%E3%80%91%E7%AC%AC2%E5%9B%9E-japan-xamarin-user-group-conference\">【時期未定】第2回 Japan Xamarin User Group Conference <a class=\"direct-link\" href=\"#%E3%80%90%E6%99%82%E6%9C%9F%E6%9C%AA%E5%AE%9A%E3%80%91%E7%AC%AC2%E5%9B%9E-japan-xamarin-user-group-conference\">#</a></h2>\n<p>日本唯一の Xamarin ユーザーコミュニティ JXUG の第2回コンファレンス、秋くらいに開催されるんじゃないかなーと、期待も込めて書かせて頂きました。</p>\n<p>最新情報は <a href=\"https://www.facebook.com/groups/778386365523431/\">Japan Xamarin User Group (JXUG)</a> に参加してチェックしましょう。</p>\n<p>すごい！１年前からは想像もできないくらいに Xamarin が盛り上がってきていて、ひたすら Qiita にネタを投稿してきた身としてはとても嬉しいです。地方在住者にはなかなか参加が厳しいですが、関東から次第に全国にコミュニティが広がっていってくれたらいいなと思います。</p>\n",
      "date_published": "2014-09-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/09/10/xamarin-forms-view-equal-width-and-fill-layouting/",
      "url": "https://blog.amay077.net/blog/2014/09/10/xamarin-forms-view-equal-width-and-fill-layouting/",
      "title": "Xamarin.Forms で複数ボタンの均等割り付けをする",
      "content_html": "<p>Android では、例えば画面の幅に対して、複数のボタンを同じ幅でいい感じに Fill させることができます。(これを均等割り付けというのが正しいのかはよくわかりませんが)</p>\n<!--more-->\n<ul>\n<li><a href=\"http://inujirushi123.blog.fc2.com/blog-entry-106.html\">LinearLayout を使って均等割り付け : layout_weight - 戌印-INUJIRUSHI- （Androidあれこれ） -</a></li>\n<li><a href=\"http://blog.imho.jp/2011/08/android-linearlayout.html\">Androidレイアウトの要点だけ: LinearLayoutでパーツを均等に配置したい ｜ スマートフォン要点だけブログ</a></li>\n</ul>\n<p>これで画面の解像度が違っても、横向きになっても、同じ幅のボタンで埋まる、という事ができます。</p>\n<p><a href=\"http://xamarin.com/forms\">Xamarin.Forms</a> でこれを実現するにはどうしたら良いか、試してみました。</p>\n<h2 id=\"stacklayout-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E8%A9%A6%E3%81%BF\">StackLayout を利用した試み <a class=\"direct-link\" href=\"#stacklayout-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E8%A9%A6%E3%81%BF\">#</a></h2>\n<p>Xamarin.Forms では、LinearLayout に相当するレイアウトとして <a href=\"http://iosapi.xamarin.com/?link=T%3aXamarin.Forms.StackLayout\">StackLayout</a> があります。</p>\n<p>まずはこれを利用してみます。</p>\n<p><code>StackLayout</code> を <code>Orientation = Horizontal</code> とし、<code>Children</code> にボタンを3つ配置しています。ボタンの幅は全て <code>HorizontalOptions = FillAndExpand</code> とします。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Page</span> <span class=\"token function\">GetMainPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span>\t<br>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ContentPage</span><br>        <span class=\"token punctuation\">{</span> <br>            Content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StackLayout</span><br>            <span class=\"token punctuation\">{</span><br>                HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>                VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                Orientation <span class=\"token operator\">=</span> StackOrientation<span class=\"token punctuation\">.</span>Horizontal<span class=\"token punctuation\">,</span><br>                Children <span class=\"token operator\">=</span> <br>                <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>                    <span class=\"token punctuation\">{</span><br>                        VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                        HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>                        Text <span class=\"token operator\">=</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span><br>                        TextColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">,</span><br>                        BackgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Aqua<span class=\"token punctuation\">,</span><br>                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>                    <span class=\"token punctuation\">{</span><br>                        VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                        HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>                        Text <span class=\"token operator\">=</span> <span class=\"token string\">\"two two\"</span><span class=\"token punctuation\">,</span><br>                        TextColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">,</span><br>                        BackgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Fuschia<span class=\"token punctuation\">,</span><br>                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>   <br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>                    <span class=\"token punctuation\">{</span><br>                        VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                        HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>                        Text <span class=\"token operator\">=</span> <span class=\"token string\">\"three three three\"</span><span class=\"token punctuation\">,</span><br>                        TextColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">,</span><br>                        BackgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Lime<span class=\"token punctuation\">,</span><br>                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これを iOS/Android 双方で実行すると、こうなりました。</p>\n<p><img src=\"/img/posts/xamarin_forms_view_equal_width_and_fill_layouting_01.png\" alt=\"\"></p>\n<p>うーん、そうじゃない（汗<br>\nどうやらボタンのテキストが全て表示されるように頑張ってくれちゃうようです。<br>\nまあ、これはこれで使える感じもします。</p>\n<h2 id=\"grid-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E8%A9%A6%E3%81%BF\">Grid を利用した試み <a class=\"direct-link\" href=\"#grid-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E8%A9%A6%E3%81%BF\">#</a></h2>\n<p>他のレイアウトで考えてみます。Android の TableLayout に相当する <a href=\"http://iosapi.xamarin.com/?link=T%3aXamarin.Forms.Grid\">Grid</a> を使ってみます。</p>\n<p>さっきの <code>App.cs</code> の実装を次のように変えます。</p>\n<p><code>Grid</code> に1行3列の表を定義します。<br>\n列の定義 <code>ColumnDefinition</code> で幅を <code>new GridLength(1, GridUnitType.Star)</code> としているのは、「3列とも同じ比率の幅とする」ことを意味しています。(ということは比率を2:1:1にしたければ、最初の列だけ<code>2</code>にすればOKです)</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Page</span> <span class=\"token function\">GetMainPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span>\t<br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> grid <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Grid</span><br>        <span class=\"token punctuation\">{</span><br>            HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>            VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>            RowDefinitions <span class=\"token operator\">=</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RowDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Height <span class=\"token operator\">=</span> GridLength<span class=\"token punctuation\">.</span>Auto <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>            ColumnDefinitions <span class=\"token operator\">=</span> <br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ColumnDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Width <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GridLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> GridUnitType<span class=\"token punctuation\">.</span>Star<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ColumnDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Width <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GridLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> GridUnitType<span class=\"token punctuation\">.</span>Star<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ColumnDefinition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> Width <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GridLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> GridUnitType<span class=\"token punctuation\">.</span>Star<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        grid<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>        <span class=\"token punctuation\">{</span><br>            VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>            HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>            Text <span class=\"token operator\">=</span> <span class=\"token string\">\"one\"</span><span class=\"token punctuation\">,</span><br>            TextColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">,</span><br>            BackgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Aqua<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        grid<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>        <span class=\"token punctuation\">{</span><br>            VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>            HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>            Text <span class=\"token operator\">=</span> <span class=\"token string\">\"two two\"</span><span class=\"token punctuation\">,</span><br>            TextColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">,</span><br>            BackgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Fuschia<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        grid<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>        <span class=\"token punctuation\">{</span><br>            VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>            HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>            Text <span class=\"token operator\">=</span> <span class=\"token string\">\"three three three\"</span><span class=\"token punctuation\">,</span><br>            TextColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Black<span class=\"token punctuation\">,</span><br>            BackgroundColor <span class=\"token operator\">=</span> Color<span class=\"token punctuation\">.</span>Lime<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ContentPage</span><br>        <span class=\"token punctuation\">{</span> <br>            Content <span class=\"token operator\">=</span> grid<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これを iOS/Android 双方で実行すると、こうなりました。</p>\n<p><img src=\"/img/posts/xamarin_forms_view_equal_width_and_fill_layouting_02.png\" alt=\"\"></p>\n<p>おーけー、意図したレイアウトになりました。ボタンに入りきらないテキストはiOSだと省略され、Androidだと折り返されるという違いはありますが、レイアウトの一貫性は保つことができました。</p>\n<p>ちなみに横向きにしても大丈夫です。</p>\n<p><img src=\"/img/posts/xamarin_forms_view_equal_width_and_fill_layouting_03.png\" alt=\"\"></p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Xamarin.Forms でも、Android+LinearLayoutのような均等配置ができました。<br>\n　クロスプラットフォームなので、iOSでも同じように動作します。<br>\niPhone6 が発表されてiOS開発でも多解像度対応が必須になるので、これは有用な感じがします。<br>\n（というか Storyboard の AutoLayout では、これと同じことができる気がしないのですが。。。）</p>\n",
      "date_published": "2014-09-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/09/09/using-xamarin-forms-with-reactiveproperty/",
      "url": "https://blog.amay077.net/blog/2014/09/09/using-xamarin-forms-with-reactiveproperty/",
      "title": "Xamarin.Forms と ReactiveProperty で快適MVVM生活",
      "content_html": "<p><a href=\"http://www.buildinsider.net/mobile/xamarintips/0005\">Xamarin.Forms</a> は、Xamarin に新たに搭載されたクロスプラットフォームUIフレームワーク＆MVVMフレームワークです。</p>\n<!--more-->\n<p><a href=\"http://okazuki.hatenablog.com/entry/2014/05/07/014133\">ReactiveProperty</a> は、MVVMの(特に ViewModelの)実装を強力にサポートしてくれる、<a href=\"http://www.atmarkit.co.jp/fdotnet/introrx/index/\">Reactive Extensions</a> を基盤としたライブラリです。</p>\n<p>両者を組み合わせると、Android/iOSアプリが COOL な感じで書けるんじゃないか、という事で試してみました。</p>\n<h2 id=\"0.-%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9\">0. 環境など <a class=\"direct-link\" href=\"#0.-%E7%92%B0%E5%A2%83%E3%81%AA%E3%81%A9\">#</a></h2>\n<p>Mac + Xamarin Studio を使いますが、Windows + Visual Studio + Xamarin-Addin でもイケると思います。</p>\n<h2 id=\"1.-%E5%B0%8E%E5%85%A5\">1. 導入 <a class=\"direct-link\" href=\"#1.-%E5%B0%8E%E5%85%A5\">#</a></h2>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">プロジェクトの作成 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>新規ソリューションを、［C#］−［Mobile Apps］−［Blank App(Xamarin.Forms Portable)］で作成します。</p>\n<h3 id=\"pcl-%E3%81%AE-profile-%E3%82%92%E5%A4%89%E6%9B%B4\">PCL の Profile を変更 <a class=\"direct-link\" href=\"#pcl-%E3%81%AE-profile-%E3%82%92%E5%A4%89%E6%9B%B4\">#</a></h3>\n<p>作成されたソリューションの一番上にあるプロジェクト(.Android とか .iOS が付いていないやつ)のプロジェクト設定を開いて Profile を <strong>PCL 4.5 - Profile49</strong> に変更します。元々の Profile78 では ReactiveProperty が Nuget からインストールできないためです。最近のプラットフォームを対象にするなら、あまり影響はなさそうです。</p>\n<p><img src=\"/img/posts/using_xamarin_forms_with_reactiveproperty_01.png\" alt=\"\"></p>\n<h3 id=\"nuget-%E3%81%A7-reactive-extensions-%E3%81%A8-reactiveproperty-%E3%82%92%E8%BF%BD%E5%8A%A0\">Nuget で Reactive Extensions と ReactiveProperty を追加 <a class=\"direct-link\" href=\"#nuget-%E3%81%A7-reactive-extensions-%E3%81%A8-reactiveproperty-%E3%82%92%E8%BF%BD%E5%8A%A0\">#</a></h3>\n<p>メニューの［プロジェクト］ー［Add Packages］で Nuget のダイアログを開き、図のように 「Reactive Extensions - Main Library」と「ReactiveProperty Portable」を追加します。</p>\n<p><img src=\"/img/posts/using_xamarin_forms_with_reactiveproperty_02.png\" alt=\"\"></p>\n<p>（Reactive Extensions の追加の際、なにやらWarningが出るようですが、とりあえず進めます。）</p>\n<h2 id=\"2.-viewmodel-%E3%81%AE%E5%AE%9F%E8%A3%85\">2. ViewModel の実装 <a class=\"direct-link\" href=\"#2.-viewmodel-%E3%81%AE%E5%AE%9F%E8%A3%85\">#</a></h2>\n<p>PCL のプロジェクトに、<code>FirstViewModel.cs</code> を作成します。<br>\n　<code>FirstViewModel</code> は、以下のようなプロパティとコマンドを持ちます。</p>\n<ul>\n<li>InputTextプロパティ : EditBox の入力に応じて更新</li>\n<li>DisplayTextプロパティ : InputText の変化から1秒後に、InputText を大文字にして更新</li>\n<li>Clearコマンド : InputText が 'clear' の時のみ有効。実行すると InputText を空にする。</li>\n</ul>\n<p>これらの実装が下のようになります。</p>\n<p><strong>FirstViewModel.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Codeplex<span class=\"token punctuation\">.</span>Reactive</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FormsWithRxProperty<span class=\"token punctuation\">.</span>ViewModels</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstViewModel</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> _inputText <span class=\"token operator\">=</span> <br>            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hoge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> InputText <br>        <span class=\"token punctuation\">{</span> <br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _inputText<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> DisplayText<br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveCommand</span> Clear<br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">FirstViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// DisplayText は、InputText の変更から1秒後に大文字にして更新</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>DisplayText <span class=\"token operator\">=</span> _inputText<br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Delay</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">ToUpper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// InputText が `clear` の時に実装可能</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Clear <span class=\"token operator\">=</span> _inputText<br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"clear\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveCommand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token comment\">// 実行されたら、InputText を空にする</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Clear<span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> _inputText<span class=\"token punctuation\">.</span>Value <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>面倒な <code>INotifyPropertyChanged</code> の実装が必要なく、すっきりと記述できます。<br>\n　また、他のプロパティに関連して(反応して)値が変化するプロパティや、コマンドの利用可否などが、Reactive Extensions の機能により、流れるように記述できます。</p>\n<h2 id=\"3.-%E7%94%BB%E9%9D%A2%E5%8F%8A%E3%81%B3-viewmodel-%E3%81%A8%E3%81%AE-binding-%E3%81%AE%E5%AE%9F%E8%A3%85\">3. 画面及び ViewModel との Binding の実装 <a class=\"direct-link\" href=\"#3.-%E7%94%BB%E9%9D%A2%E5%8F%8A%E3%81%B3-viewmodel-%E3%81%A8%E3%81%AE-binding-%E3%81%AE%E5%AE%9F%E8%A3%85\">#</a></h2>\n<p>画面(UI)は、Xamarin.Forms の恩恵で、Android/iOS 共通で実装できます。XAML も使えますが、よく知らないのでコードでUIを記述します。</p>\n<p>PCL のプロジェクトに、 <code>FirstPage.cs</code> を作成し、以下のように実装します。</p>\n<p><strong>FirstPage.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">FormsWithRxProperty<span class=\"token punctuation\">.</span>ViewModels</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FormsWithRxProperty<span class=\"token punctuation\">.</span>Pages</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstPage</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ContentPage</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">FirstPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// UI</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> entry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Entry</span><br>            <span class=\"token punctuation\">{</span><br>                Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello, Forms!\"</span><span class=\"token punctuation\">,</span><br>                VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> label <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Label</span><br>            <span class=\"token punctuation\">{</span><br>                VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>CenterAndExpand<span class=\"token punctuation\">,</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>            <span class=\"token punctuation\">{</span><br>                Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Clear (type 'clear' to enable)\"</span><span class=\"token punctuation\">,</span><br>                VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>                HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>FillAndExpand<span class=\"token punctuation\">,</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StackLayout</span><br>            <span class=\"token punctuation\">{</span><br>                Padding <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thickness</span><span class=\"token punctuation\">(</span><span class=\"token number\">50f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Start<span class=\"token punctuation\">,</span><br>                HorizontalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Fill<span class=\"token punctuation\">,</span><br>                Orientation <span class=\"token operator\">=</span> StackOrientation<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">,</span><br>                Children <span class=\"token operator\">=</span><br>                <span class=\"token punctuation\">{</span><br>                    entry<span class=\"token punctuation\">,</span><br>                    label<span class=\"token punctuation\">,</span><br>                    button<br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// ViewModel との Binding</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>BindingContext <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FirstViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            entry<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SetBinding</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FirstViewModel<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Entry<span class=\"token punctuation\">.</span>TextProperty<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">=></span>vm<span class=\"token punctuation\">.</span>InputText<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            label<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SetBinding</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FirstViewModel<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Label<span class=\"token punctuation\">.</span>TextProperty<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">=></span>vm<span class=\"token punctuation\">.</span>DisplayText<span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            button<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">SetBinding</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FirstViewModel<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Button<span class=\"token punctuation\">.</span>CommandProperty<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">=></span>vm<span class=\"token punctuation\">.</span>Clear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ちょっと長いですが、画面に「エディットボックス」「ラベル」「ボタン」が縦に並んでいるだけです。</p>\n<p>下部の４行で、<code>FirstViewModel</code> の各プロパティ、コマンドと Bind しています。</p>\n<p>もともとあった <code>App.cs</code> は、<code>FirstPage</code> を生成するだけにします。</p>\n<p><strong>App.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">FormsWithRxProperty<span class=\"token punctuation\">.</span>Pages</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FormsWithRxProperty</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Page</span> <span class=\"token function\">GetMainPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span>\t<br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">FirstPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E5%8B%95%E3%81%8B%E3%81%99%EF%BC%81\">動かす！ <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%99%EF%BC%81\">#</a></h2>\n<p>.Android か .iOS の付いたプロジェクトをスタートアップにして、実行します。</p>\n<p><img src=\"/img/posts/using_xamarin_forms_with_reactiveproperty_03.gif\" alt=\"\"></p>\n<h3 id=\"%E8%BF%BD%E8%A8%98-2014.9.10\">追記 2014.9.10 <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98-2014.9.10\">#</a></h3>\n<p>実機で動作確認するの忘れてました（実機はAOTなのに対してiOSシミュレータはJITなのでリフレクションとかが普通に動いてしまう）。<br>\n実機でも問題なく動作しました！</p>\n<h2 id=\"%E8%BF%BD%E8%A8%98-2014.9.11-inotifypropertychanged-%E3%81%AE%E5%88%A9%E7%94%A8\">追記 2014.9.11 INotifyPropertyChanged の利用 <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98-2014.9.11-inotifypropertychanged-%E3%81%AE%E5%88%A9%E7%94%A8\">#</a></h2>\n<p>ViewModel は <code>INotifyPropertyChanged</code> を実装して作成するのが一般的です。既にそのようにして作られた ViewModel でも <code>IObservable</code> 化して、ReactiveProperty で利用できます。</p>\n<p><strong>SecondViewModel.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecondViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">INotifyPropertyChanged</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> ValidationAttr <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">event</span> <span class=\"token class-name\">PropertyChangedEventHandler</span> PropertyChanged<span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _myName <span class=\"token operator\">=</span> <span class=\"token string\">\"HoGe\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> MyName <br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _myName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">set</span> <br>        <span class=\"token punctuation\">{</span> <br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_myName <span class=\"token operator\">==</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br><br>            _myName <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span><br>            <span class=\"token function\">PropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PropertyChangedEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ReactiveProperty<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> LowerText <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ICommand</span> _resetCommand<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">ICommand</span> ResetCommand<br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">get</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> _resetCommand <span class=\"token operator\">??</span> <span class=\"token punctuation\">(</span>_resetCommand <span class=\"token operator\">=</span> <br>                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> MyName <span class=\"token operator\">=</span> <span class=\"token string\">\"XAAAAMAAARIN!!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">SecondViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>LowerText <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">ObserveProperty</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>MyName<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">ToLower</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">ToReactiveProperty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><img src=\"/img/posts/using_xamarin_forms_with_reactiveproperty_04.png\" alt=\"\"></p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Reactive Extensions のメリットを活かして MVVM を構築できる ReactiveProperty と、ワンソースで Android/iOS の画面を定義でき、さらに Binding までも共通にできる Xamarin.Forms の組み合わせは、今後のモバイルアプリケーション開発をとても効率的にしてくれます、 <strong>そしてなにより楽しい！</strong></p>\n<p>今回のサンプルプログラムは</p>\n<ul>\n<li><a href=\"https://github.com/amay077/XamarinFormsWithReactivePropertySample/tree/master\">amay077/XamarinFormsWithReactivePropertySample</a></li>\n</ul>\n<p>に置きましたので、是非試してみてください。</p>\n<h3 id=\"reactiveproperty\">ReactiveProperty <a class=\"direct-link\" href=\"#reactiveproperty\">#</a></h3>\n<ul>\n<li><a href=\"http://okazuki.hatenablog.com/entry/2014/05/07/014133\">ReactiveProperty オーバービュー - かずきのBlog@hatena</a></li>\n<li><a href=\"https://reactiveproperty.codeplex.com/releases/view/132232\">ReactiveProperty - MVVM Extensions for Rx - Download: ReactiveProperty v1.0</a></li>\n<li><a href=\"http://neue.cc/2011/08/26_341.html\">neue cc - ReactiveProperty : Rx + MVVMへの試み</a></li>\n<li><a href=\"http://yone64.wordpress.com/2014/06/20/reactiveproperty%E3%82%92%E4%BD%BF%E3%81%84%E3%81%9F%E3%81%84%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AE%E3%80%81reactiveextensions%E5%85%A5%E9%96%80%EF%BC%88%E3%81%9D%E3%81%AE%EF%BC%91%EF%BC%89/\">ReactivePropertyを使いたい人のための、ReactiveExtensions入門（その１） ｜ 泥庭</a></li>\n</ul>\n<h3 id=\"xamarin.forms\">Xamarin.Forms <a class=\"direct-link\" href=\"#xamarin.forms\">#</a></h3>\n<ul>\n<li><a href=\"http://developer.xamarin.com/guides/cross-platform/xamarin-forms/\">Xamarin.Forms ｜ Xamarin</a></li>\n<li><a href=\"http://www.buildinsider.net/mobile/insidexamarin/14\">Xamarin.Formsの基本構想と仕組み - Build Insider</a></li>\n<li><a href=\"http://www.buildinsider.net/tagcloud?tag=Xamarin.Forms\">Xamarin.Forms - Build Insider</a></li>\n<li><a href=\"http://furuya02.hatenablog.com/entry/2014/08/08/003036\">Xamarin.Forms ListViewでTwitter風のレイアウトを作成してみました（機種依存コードなし） - SIN@SAPPOROWORKSの覚書</a></li>\n</ul>\n",
      "date_published": "2014-09-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/09/01/run-application-on-system-startup/",
      "url": "https://blog.amay077.net/blog/2014/09/01/run-application-on-system-startup/",
      "title": "システムの起動時にアプリを起動する",
      "content_html": "<p>ググれば出てくるんだけど、情報が古いので書きなおしてみた。</p>\n<!--more-->\n<h2 id=\"%E5%85%A8%E4%BD%93\">全体 <a class=\"direct-link\" href=\"#%E5%85%A8%E4%BD%93\">#</a></h2>\n<p>Android OS の起動が終わると <code>android.intent.action.BOOT_COMPLETED</code> がブロードキャストされるので、それを捕まえて任意の処理をする。</p>\n<h2 id=\"%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%AB%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%95%E3%82%8C%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89\">起動時に呼び出されるコード <a class=\"direct-link\" href=\"#%E8%B5%B7%E5%8B%95%E6%99%82%E3%81%AB%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%95%E3%82%8C%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p>ブロードキャストを捕まえたときに呼ばれるコード。<code>MyActivity</code> を開始している。BroadcastReceiver から Activity を開始するには <code>Intent.FLAG_ACTIVITY_NEW_TASK</code> が必要なので注意。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">StartupReceiver</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BroadcastReceiver</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"StartupReceiver\"</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReceive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Intent</span> intent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onReceive:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">MyApplication</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Intent</span> intentActivity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MyActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        intentActivity<span class=\"token punctuation\">.</span><span class=\"token function\">setFlags</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Intent</span><span class=\"token punctuation\">.</span>FLAG_ACTIVITY_NEW_TASK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        context<span class=\"token punctuation\">.</span><span class=\"token function\">startActivity</span><span class=\"token punctuation\">(</span>intentActivity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"androidmanifest.xml-%E3%81%A7%E5%8F%97%E4%BF%A1%E7%99%BB%E9%8C%B2\">AndroidManifest.xml で受信登録 <a class=\"direct-link\" href=\"#androidmanifest.xml-%E3%81%A7%E5%8F%97%E4%BF%A1%E7%99%BB%E9%8C%B2\">#</a></h2>\n<p><code>StartupReceiver</code> を登録する。<br>\n忘れちゃいけないのが <code>android.permission.RECEIVE_BOOT_COMPLETED</code> による権限の設定。これがないと受信できない。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.amay077.reboottest<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.RECEIVE_BOOT_COMPLETED<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@drawable/ic_launcher<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyActivity<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>receiver</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.StartupReceiver<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.BOOT_COMPLETED<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.DEFAULT<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>receiver</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"%E7%AB%AF%E6%9C%AB%E3%82%92%E5%86%8D%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E8%A9%A6%E3%81%99\">端末を再起動して試す <a class=\"direct-link\" href=\"#%E7%AB%AF%E6%9C%AB%E3%82%92%E5%86%8D%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E8%A9%A6%E3%81%99\">#</a></h2>\n<ul>\n<li><a href=\"http://9ensan.com/blog/smartphone/android/android-boot_completed-adb-shell-am-broadcast/\">AndroidのBOOT_COMPLETEDの受信とテスト ｜ 9ensanのLifeHack</a></li>\n</ul>\n<p>で知った <code>adb shell am broadcast -a android.intent.action.BOOT_COMPLETED</code> は GenyMotion でも使えました。<br>\n<code>RECEIVE_BOOT_COMPLETED</code> の位置によっては、テストが成功したりしなかったりだと書かれておられますが、上記の <code>AndroidManifest.xml</code> では、テストも実際の再起動も成功しました。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://techbooster.jpn.org/andriod/application/1100/\">システムの起動時にサービスを実行する « Tech Booster</a>(2010年なのでだいぶ古い、要注意)</li>\n<li><a href=\"http://9ensan.com/blog/smartphone/android/android-boot_completed-adb-shell-am-broadcast/\">AndroidのBOOT_COMPLETEDの受信とテスト ｜ 9ensanのLifeHack</a>(2012年、まだまだ古い)</li>\n<li><a href=\"http://stackoverflow.com/questions/20441308/boot-completed-not-working-android/20441442#20441442\">broadcastreceiver - BOOT_COMPLETED not working Android - Stack Overflow</a>(2013年、これなら何とか)</li>\n<li><a href=\"https://groups.google.com/forum/#!topic/android-group-japan/D1EKohMIji0\">BOOT_COMPLETEDが受信出来ない - Google グループ</a> SDカードにインストールされるとこのブロードキャストを受信できないそうです</li>\n</ul>\n",
      "date_published": "2014-09-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/31/xamarin-ios-designer-does-not-support-manual-unwind-segue/",
      "url": "https://blog.amay077.net/blog/2014/08/31/xamarin-ios-designer-does-not-support-manual-unwind-segue/",
      "title": "Xamarin Studio の iOSデザイナでは、Unwind Segue に Identifier が付けられないようです",
      "content_html": "<ul>\n<li><a href=\"http://www.buildinsider.net/mobile/xamarintips/0016\">Xamarin.iOSでの画面遷移で「戻る」を実現するには？（Storyboard、Unwind Segue使用） - Build Insider</a></li>\n</ul>\n<p>に Unwind Segue について書きましたが、載せきれなかったことを補足します。</p>\n<!--more-->\n<p>上記Tipsでは、Unwind Segueを作るのに、ボタンとExitを結んでますが、<code>PerformSegue</code>で Unwind Segue を使いたい場合もありましょう。</p>\n<p><code>PerformsSegue</code>に渡す Identifier はどこで付与するの？とあちこち探しましたが、どうも現在の Xamarin Studio（のiOSデザイナ）はまだ対応していないようです。というか、そもそもコントロールから引っ張るタイプのUnwind Segueしか作れないみたいです。</p>\n<p>Xcode の Interface Builder では</p>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/technotes/tn2298/_index.html#//apple_ref/doc/uid/DTS40013591-CH1-TNTAG2-ADDING_AN_UNWIND_SEGUE_TO_A_STORYBOARD\">Technical Note TN2298: Using Unwind Segues</a></li>\n</ul>\n<p>にあるように、「ViewControllerのアイコンをExitアイコンへControl+ドラッグ＆ドロップする」で、”Manual” Unwind Segue が作成できるのですが、Xamarin Studio では、それっぽい操作をしても反応がありません。</p>\n<p>当然ながら、Xcode で作成した Segue は Xamarin Studio でも使えるので、Manual Unwind Segue の作成と Identifier の付与は Xcode で行って、Xamarin側で <code>PerformSegue</code> を呼び出せばいいと思います。</p>\n",
      "date_published": "2014-08-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use/",
      "url": "https://blog.amay077.net/blog/2014/08/28/place-of-debug-keystore-that-xamarin-to-use/",
      "title": "Xamarin.Android が使用する debug.keystore の在処",
      "content_html": "<p>Google Maps などを使用する時、開発中ならば <code>debug.keystore</code> のフィンガープリント(SHA1)を取得する必要がありますが、 debug.keystore がどこにあるのか分からなくてハマった。</p>\n<!--more-->\n<h2 id=\"%E7%B5%90%E8%AB%96\">結論 <a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a></h2>\n<p>から書いておくと</p>\n<ul>\n<li><a href=\"http://developer.xamarin.com/guides/android/platform_features/maps_and_location/maps/obtaining_a_google_maps_api_key/\">Obtaining a Google Maps API Key ｜ Xamarin</a></li>\n</ul>\n<p>に書いてある通りで、</p>\n<ul>\n<li>Windows - <code>C:¥Users¥[USERNAME]¥AppData¥Local¥Xamarin¥Mono for Android¥debug.keystore</code></li>\n<li>OSX - <code>/Users/[USERNAME]/.local/share/Xamarin/Mono for Android/debug.keystore</code></li>\n</ul>\n<p>がそれぞれ使われる。</p>\n<h2 id=\"%E3%81%AA%E3%81%9C%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E3%81%8B%EF%BC%9F\">なぜハマったか？ <a class=\"direct-link\" href=\"#%E3%81%AA%E3%81%9C%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E3%81%8B%EF%BC%9F\">#</a></h2>\n<h3 id=\"eclipse-%E3%81%A8%E5%90%8C%E3%81%98%E3%81%A0%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%A6%E3%81%9F\">Eclipse と同じだと思ってた <a class=\"direct-link\" href=\"#eclipse-%E3%81%A8%E5%90%8C%E3%81%98%E3%81%A0%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%A6%E3%81%9F\">#</a></h3>\n<p>Java での Android 開発時に設定したディレクトリを使ってくれると思い込んでた。けどよく考えればあれは Android SDK ではなく Eclipse 固有の設定だったのよね。</p>\n<h3 id=\"%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%8F%A4%E3%81%84%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%A6%E3%81%9F\">ドキュメントが古いと思ってた <a class=\"direct-link\" href=\"#%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%81%8C%E5%8F%A4%E3%81%84%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%A6%E3%81%9F\">#</a></h3>\n<p>上記で紹介した「Obtaining a Google Maps…」の記事が古いと思ってた。なぜならディレクトリ名に <code>Mono for Android</code> が含まれていて、これは Xamarin.Android の旧製品名だったから。</p>\n<h3 id=\"spotlight%E6%A4%9C%E7%B4%A2%E3%81%A7%E3%83%92%E3%83%83%E3%83%88%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F\">Spotlight検索でヒットしなかった <a class=\"direct-link\" href=\"#spotlight%E6%A4%9C%E7%B4%A2%E3%81%A7%E3%83%92%E3%83%83%E3%83%88%E3%81%97%E3%81%AA%E3%81%8B%E3%81%A3%E3%81%9F\">#</a></h3>\n<p>Mac を使っているのだけど、Spotlight検索（所謂PC内検索）で <code>debug.keystore</code> がヒットしたのがいつもJava-Android開発で使ってる１つだけだったので、.local の中にあるとは気付けず。。。隠しディレクトリだからヒットしないよね。</p>\n<p>こんなことでハマるのは自分くらいだろうけど、メモしときます。。</p>\n",
      "date_published": "2014-08-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/19/git-refresh-remote-branches/",
      "url": "https://blog.amay077.net/blog/2014/08/19/git-refresh-remote-branches/",
      "title": "Git でリモートリポジトリの更新が反映されないとき",
      "content_html": "<p>GitHub のWebサイトでブランチを削除したあと、クライアント（SourceTreeとか）のリモートブランチの表示に、削除したはずのブランチが残っていて、気持ち悪いなあ、と思っていた。</p>\n<!--more-->\n<p>git のコマンド一発だった。</p>\n<pre><code>git remote update -p\n</code></pre>\n<p>これでクライアント側のリモート情報がリフレッシュされる。</p>\n",
      "date_published": "2014-08-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/16/make-google-cardboard/",
      "url": "https://blog.amay077.net/blog/2014/08/16/make-google-cardboard/",
      "title": "Google Cardboard を作ってきました",
      "content_html": "<ul>\n<li><a href=\"http://connpass.com/event/7735/\">日本Androidの会浜松支部 第40回ミーティング #jaghama - connpass</a></li>\n</ul>\n<p>で Google Cardboard のクローンを作りました。</p>\n<!--more-->\n<p>段ボールやレンズ、磁石などの材料は主催の方が用意してくださった( <a href=\"https://twitter.com/macha1972\">@macha1972</a> さんありがとうございます )ので、カッターとガムテープと筆記具くらいを持参するだけですみました。</p>\n<p><img src=\"/img/posts/make-google-cardboard-01.jpg\" alt=\"\"></p>\n<p><a href=\"https://developers.google.com/cardboard/\">公式サイト</a> からダウンロードできる型紙を印刷して、段ボールに貼り付け、段ボールを切っていきます。</p>\n<p>段ボールが意外と厚くて切るのに苦労しました。</p>\n<p><img src=\"/img/posts/make-google-cardboard-02.jpg\" alt=\"\"></p>\n<p>ここまでくるのに約3時間…（-_-;）<br>\n早い人は2時間くらいで終わってたかな・・・。</p>\n<p><img src=\"/img/posts/make-google-cardboard-03.jpg\" alt=\"\"></p>\n<p>切っちゃえば組み立ては簡単(先駆者さんに聞きながらできたからw)<br>\n「バター風味」がいい感じに露出しているのは偶然だw</p>\n<p>使用した端末は公式に対応しているとされる Galaxy Nexus だったので稼働に特に問題はありません(磁石のスイッチが反応しづらいかなという程度)でしたが、端末の磁場センサーの位置によっては、スイッチの位置を反対側に移動させる必要があるみたいです。(Xperia の人はそうしてました)</p>\n<p>さっそく <a href=\"https://play.google.com/store/apps/details?id=com.google.samples.apps.cardboarddemo&amp;hl=ja\">Cardboardアプリ</a> で体験…これはスゴイ！<br>\n以前に Ocufes豊橋 で Oculas Lift は体験済みだったのですが、それに匹敵する没入感です。</p>\n<ul>\n<li><a href=\"https://play.google.com/store/apps/details?id=com.divegames.divecitycoaster&amp;hl=ja\">Dive City Rollercoaster</a> というアプリが面白いですね。</li>\n</ul>\n<p>帰宅後、さっそく子供らも体験、しばらくの間ハマってました。</p>\n<p><img src=\"/img/posts/make-google-cardboard-04.jpg\" alt=\"\"></p>\n<p>子供の夏休みの自由工作にでもできるかなーと思いますが、大人で3時間かかるのは結構つらいかも。</p>\n<p>カッターで段ボールを切るのに力入れすぎて指にマメできたし…。</p>\n<p>ワークショップ中のその他の写真は</p>\n<ul>\n<li><a href=\"https://www.facebook.com/media/set/?set=o.282944361773276&amp;type=3\">日本Androidの会 浜松支部の写真・動画 - Facebookグループ</a></li>\n</ul>\n<p>からどうぞ。</p>\n",
      "date_published": "2014-08-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/07/what-is-skitch-png/",
      "url": "https://blog.amay077.net/blog/2014/08/07/what-is-skitch-png/",
      "title": "「Skitch PNG」とはなにか？",
      "content_html": "<p>画像に文字や図形を描くとき多用している Skitch ですが、ファイルのエクスポートに「Skitch PNG」という謎のファイル形式があるのを発見。</p>\n<!--more-->\n<p><img src=\"/img/posts/skitch_png_01.png\" alt=\"\"></p>\n<p>調べてみると、</p>\n<ul>\n<li><a href=\"http://www.addictivetips.com/mac-os/skitch-updated-with-a-special-format-that-keeps-annotations-editable/\">Skitch For Mac Updated With A Format That Keeps Annotations Editable</a></li>\n</ul>\n<blockquote>\n<p>Skitch PNG is a new format for saving pictures that you’ve annotated in Skitch. These are almost like regular PNGs, except that you can open them in Skitch later on and edit the previous annotations.</p>\n</blockquote>\n<p>な、なんだってー！PNG なのに <strong>「アノテーションが再編集可能」</strong> だってー！！</p>\n<h2 id=\"%E8%A9%A6%E3%81%97%E3%81%AB\">試しに <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%AB\">#</a></h2>\n<p><img src=\"/img/posts/skitch_png_02.png\" alt=\"\"></p>\n<p><a href=\"http://www.gatag.net/10/16/2009/110000.html\">photo by Nesster, CC-BY</a></p>\n<p>上の画像、「Skitch PNG」で保存したものですが、Skitch で開き直すと、下図のように文字や矢印が再編集できます。</p>\n<p><img src=\"/img/posts/skitch_png_03.png\" alt=\"\"></p>\n<p>これからはこれをデフォで使っていこうと思います。<br>\nちなみに「モザイク」は復元できないみたいです。うむ安全設計。</p>\n",
      "date_published": "2014-08-07T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/06/trying-auto-rebalancing-by-elasticsearch-on-docker/",
      "url": "https://blog.amay077.net/blog/2014/08/06/trying-auto-rebalancing-by-elasticsearch-on-docker/",
      "title": "Elasticsearch の Auto-Rebalancing を Docker で試す",
      "content_html": "<p>Linuxど素人の Docker 入門第二弾です。<br>\nちょっと Docker おもしろくなってきたかも。</p>\n<!--more-->\n<p><a href=\"http://www.elasticsearch.org/\">Elasticsearch</a> というのは、Apache Solr と並ぶ（むしろ Solr より流行ってきた？）全文検索システムなんですが、複数のサーバにデータを分散配置して並列処理やフェイルオーバーができたりします。</p>\n<p>んで、Auto-Rebalancing というのは、サーバ（ノードというらしい）を追加した時に、そのサーバの役割が自動的に決まって、他のサーバからデータを分けて貰って、全体としてデータの平衡化が行われる事です。</p>\n<p>Docker なら、サーバーの起動が容易なので、Auto-Rebalancing を試すのに持ってこいだと思い、やってみました。</p>\n<p>全体的には、</p>\n<ul>\n<li><a href=\"http://inokara.hateblo.jp/entry/2013/11/15/042752\">elasticsearch と elasticsearch-head を docker でサクッと試す - ようへいの日々精進 XP</a></li>\n</ul>\n<p>を参考にしています。</p>\n<h2 id=\"ubuntu-%E3%81%AE-docker-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB-elasticsearch-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">ubuntu の Docker コンテナに Elasticsearch をインストール <a class=\"direct-link\" href=\"#ubuntu-%E3%81%AE-docker-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%AB-elasticsearch-%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h2>\n<p><a href=\"/blog/2014/08/05/docker-try-first/\">昨日</a>使った ubuntu のコンテナに Elasticsearch をインストールします。</p>\n<p>Elasticsearch のインストールは、</p>\n<ul>\n<li><a href=\"https://gist.github.com/wingdspur/2026107\">Install ElasticSearch on Ubuntu 12.04</a></li>\n</ul>\n<p>を参考にしました。（なんか Elasticsearch を導入済みのコンテナとか Dockerfile もあったみたい）</p>\n<p>次に、Elasticsearch の管理GUIを提供するプラグイン elasticsearch-head を導入します。</p>\n<p>elasticsearch-head については、こちらがとても参考になりました。</p>\n<ul>\n<li><a href=\"http://yuheikagaya.hatenablog.jp/entry/2013/07/14/185752\">elasticsearchのGUI「elasticsearch-head」がとても便利 - yuhei.kagaya</a></li>\n</ul>\n<p>インストールは、以下のコマンド一発です。(./ を付けないとうまく動いてくれなかった)</p>\n<pre><code>[ root@bb638d1f825f:/ ]$ cd elasticsearch/bin\n[ root@bb638d1f825f:/ ]$ ./plugin -install mobz/elasticsearch-head\n</code></pre>\n<h2 id=\"elasticsearch-%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%81%AE%E8%A8%AD%E5%AE%9A\">Elasticsearch のクラスタの設定 <a class=\"direct-link\" href=\"#elasticsearch-%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%BF%E3%81%AE%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p>複数の Elasticsearch を動かす場合、共通のグループ名を付ける必要があります。</p>\n<p><code>elasticsearch.yml</code> を編集して、グループ名を付けます。</p>\n<pre><code>[ root@bb638d1f825f:/ ]$ vim elasticsearch/config/elasticsearch.yml\n</code></pre>\n<pre class=\"language-json\"><code class=\"language-json\">cluster.name<span class=\"token operator\">:</span> amaycluster</code></pre>\n<p>Elasticsearch の分散環境での使用については、</p>\n<ul>\n<li><a href=\"http://dev.classmethod.jp/cloud/aws/use-elasticsearch-2-use-cluster/\">Cluster機能を使う – AWSで始めるElasticSearch(2) ｜ Developers.IO</a></li>\n</ul>\n<p>を参考にしました。<br>\n「EC2ではマルチキャストが使えない」などと書かれていますが、これは Docker なのでスルーで。結果的には <code>elasticsearch.yml</code> は上記の修正しかしていません。</p>\n<h2 id=\"elasticsearch-%E8%A8%AD%E5%AE%9A%E6%B8%88%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%82%8B\">Elasticsearch 設定済のイメージを作る <a class=\"direct-link\" href=\"#elasticsearch-%E8%A8%AD%E5%AE%9A%E6%B8%88%E3%81%AE%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>ここまでで一旦コンテナを終了し、<code>docker commit</code> で保存します。<br>\n<code>docker images</code> でイメージが作成できたのが確認できます。</p>\n<pre><code>docker@boot2docker:~$ docker commit -m &quot;Setting Elasticsearch cluster&quot; bb638d1f825f amay077/es_cluster\n\ndocker@boot2docker:~$ docker images\nREPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\namay077/es_cluster         latest              b9d05b77d71a        9 hours ago         1.075 GB\nubuntu                     latest              ba5877dc9bec        2 weeks ago         192.7 MB\n</code></pre>\n<h2 id=\"%E8%A4%87%E6%95%B0%E3%81%AE-docker-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%80%81%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C%E3%81%A7-elasticsearch-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">複数の Docker コンテナを起動し、それぞれで Elasticsearch を起動する <a class=\"direct-link\" href=\"#%E8%A4%87%E6%95%B0%E3%81%AE-docker-%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%97%E3%80%81%E3%81%9D%E3%82%8C%E3%81%9E%E3%82%8C%E3%81%A7-elasticsearch-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">#</a></h2>\n<p>下のようなコマンドで、コンテナを起動し、Elasticsearch を開始します。<br>\n（<code>/bin/bash</code> の代わりに直接 elasticsearch を開始してもよいと思いますが、後で直接コンソールに接続したいかなーと思いまして。）</p>\n<pre><code>docker@boot2docker:~$ docker run -i -t -p 9200:9200 -p 9300:9300 amay077/es_cluster /bin/bash\n\n[ root@bb638d1f825f:/ ]$ /elasticsearch/bin/elasticsearch -d\n#Control+p, Control+q でデタッチ\n</code></pre>\n<p>1つ起動した時点で、ホストPC（Mac）のブラウザから <a href=\"http://localhost:9200/_plugin/head/\">http://localhost:9200/_plugin/head/</a> にアクセスします。<br>\nあ、その前に VirtualBox の設定で、9200と9300のポートフォワーディングを行う必要があります。</p>\n<p><img src=\"/img/posts/trying-auto-rebalancing-by-elasticsearch-on-docker_04.png\" alt=\"\"></p>\n<p>設定できたら先のアドレスにアクセスすると elasticsearch-head の管理画面が表示されるはずです。</p>\n<p>続いて、さっきのコマンドを複数回実行し、複数の Elasticsearch を起動します。<br>\n<code>-p 9200:9200</code> のところが重複するとエラーになるので <code>-p 9201:9200</code> などとズラしましたが、これで正しかったのかわかりません。</p>\n<h2 id=\"elasticsearch-%E3%81%AB%E3%83%87%E3%83%BC%E3%82%BF%E6%8A%95%E5%85%A5\">Elasticsearch にデータ投入 <a class=\"direct-link\" href=\"#elasticsearch-%E3%81%AB%E3%83%87%E3%83%BC%E3%82%BF%E6%8A%95%E5%85%A5\">#</a></h2>\n<p>Elasticsearch へのデータ投入は、ホストPC（Mac）の Terminal から、</p>\n<pre><code>curl -XPOST 'http://localhost:9200/mytest/memo/' -d '{ &quot;name&quot; : &quot;kappa&quot;, &quot;date&quot; : &quot;2013-09-07&quot;, &quot;message&quot; : &quot;test1&quot; }'\ncurl -XPOST 'http://localhost:9200/mytest/memo/' -d '{ &quot;name&quot; : &quot;kappa&quot;, &quot;date&quot; : &quot;2013-09-07&quot;, &quot;message&quot; : &quot;test2&quot; }'\ncurl -XPOST 'http://localhost:9200/mytest/memo/' -d '{ &quot;name&quot; : &quot;kappa&quot;, &quot;date&quot; : &quot;2013-09-07&quot;, &quot;message&quot; : &quot;test3&quot; }'\n…続く\n</code></pre>\n<p>のような感じで、3万件ほど投入しました。</p>\n<p>投入後、 <a href=\"http://localhost:9200/_plugin/head/\">http://localhost:9200/_plugin/head/</a> を見ると、</p>\n<p><img src=\"/img/posts/trying-auto-rebalancing-by-elasticsearch-on-docker_01.png\" alt=\"\"></p>\n<p>となっています。４台のサーバにデータが分散して登録されたことが分かります。四角内の数字（0〜4）は、「データが5つに分割され」て、その「ブロックがどのサーバに配置されているか」を示していて、太枠がプライマリ、細枠がスレーブであることを示しています。<br>\nいずれのサーバが死んでも、データの欠損なくサービス継続できることを示しています。</p>\n<h2 id=\"%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">ノードを追加してみる <a class=\"direct-link\" href=\"#%E3%83%8E%E3%83%BC%E3%83%89%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>５台目の Elasticsearh を追加してみます。</p>\n<pre><code>docker@boot2docker:~$ docker run -i -t -p 9204:9200 -p 9304:9300 amay077/es_cluster /bin/bash\n\n[ root@de6d825fa34d:/ ]$ /elasticsearch/bin/elasticsearch -d\n#Control+p, Control+q でデタッチ\n</code></pre>\n<p>その後 elasticsearch-head を見ると、</p>\n<p><img src=\"/img/posts/trying-auto-rebalancing-by-elasticsearch-on-docker_01.png\" alt=\"\"></p>\n<p>となり、しばらくしてから Refresh すると、</p>\n<p><img src=\"/img/posts/trying-auto-rebalancing-by-elasticsearch-on-docker_03.png\" alt=\"\"></p>\n<p>となります。</p>\n<p>追加された「Isaiah Bradley」サーバには、データブロック１と３のスレーブの役割が与えられ、データが移動されたことが分かります。（移動中は色が変わったけどスクショ撮れなかった）</p>\n<p>このように Elasticsearch の Auto-Rebalancing を、Docker を使うことでお手軽に試すことができました。（実運用では Elasticsearch に Docker は、、、使わないですよねたぶん）</p>\n",
      "date_published": "2014-08-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/05/docker-try-first/",
      "url": "https://blog.amay077.net/blog/2014/08/05/docker-try-first/",
      "title": "いまさら Docker やってみた",
      "content_html": "<p>いまさら感満載なんですが、Docker やってみました。</p>\n<!--more-->\n<p>ホストPCはMacです。</p>\n<h2 id=\"docker-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">Docker のインストール <a class=\"direct-link\" href=\"#docker-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h2>\n<p>Macなので事前に VirtualBox を入れて置く必要があります。</p>\n<p>あとは、</p>\n<ul>\n<li><a href=\"http://dev.classmethod.jp/tool/docker/getting-started-docker-on-osx/\">はじめてのDocker on Mac OS X ｜ Developers.IO</a></li>\n</ul>\n<p>を参考に。</p>\n<p>Docker と boot2docker のバージョンはこんな感じでした。</p>\n<pre><code>$ docker -v\nDocker version 1.1.2, build d84a070\n\n$ boot2docker version\nClient version: v1.1.2\nGit commit: a229ac1\n</code></pre>\n<h2 id=\"boot2docker-%E7%B5%8C%E7%94%B1%E3%81%A7-docker-%E3%81%AE%E8%B5%B7%E5%8B%95\">boot2docker 経由で Docker の起動 <a class=\"direct-link\" href=\"#boot2docker-%E7%B5%8C%E7%94%B1%E3%81%A7-docker-%E3%81%AE%E8%B5%B7%E5%8B%95\">#</a></h2>\n<p><code>boot2docker up</code> で Docker (というか Tiny Core Linux らしい)を起動。</p>\n<pre><code>$ boot2docker up\n2014/08/05 21:47:19 Waiting for VM to be started...\n.......\n2014/08/05 21:47:41 Started.\n2014/08/05 21:47:41 Your DOCKER_HOST env variable is already set correctly.\n</code></pre>\n<p><code>set:export DOCKER_HOST=</code> とか出たらホスト（Mac） .bash_profile にそのまま追記します。（上はすでに追加済なので <code>already</code> と出てます）</p>\n<h2 id=\"boot2docker-%E3%81%8B%E3%82%89-docker-%E3%81%AB%E6%8E%A5%E7%B6%9A\">boot2docker から Docker に接続 <a class=\"direct-link\" href=\"#boot2docker-%E3%81%8B%E3%82%89-docker-%E3%81%AB%E6%8E%A5%E7%B6%9A\">#</a></h2>\n<p><code>boot2docker ssh</code> で Docker に接続。</p>\n<pre><code>$ boot2docker ssh\n                        ##        .\n                  ## ## ##       ==\n               ## ## ## ##      ===\n           /&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;\\___/ ===\n      ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~\n           \\______ o          __/\n             \\    \\        __/\n              \\____\\______/\n _                 _   ____     _            _\n| |__   ___   ___ | |_|___ \\ __| | ___   ___| | _____ _ __\n| '_ \\ / _ \\ / _ \\| __| __) / _` |/ _ \\ / __| |/ / _ \\ '__|\n| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &lt;  __/ |\n|_.__/ \\___/ \\___/ \\__|_____\\__,_|\\___/ \\___|_|\\_\\___|_|\nboot2docker: 1.1.2\n             master : 740106c - Thu Jul 24 03:24:10 UTC 2014\ndocker@boot2docker:~$ \n</code></pre>\n<h2 id=\"docker-%E5%86%85%E3%81%A7-ubuntu-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">Docker 内で ubuntu を起動する <a class=\"direct-link\" href=\"#docker-%E5%86%85%E3%81%A7-ubuntu-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">#</a></h2>\n<p><code>docker run</code> で docker のイメージを（無ければダウンロードして）起動し、後続のコマンドを実行して終わる。<br>\n下記の場合 bash を起動しているので、<code>exit</code> すると終わる。</p>\n<pre><code>docker@boot2docker:~$ sudo docker run -i -t ubuntu /bin/bash ＜--docker内\nUnable to find image 'ubuntu' locally\nPulling repository ubuntu\nba5877dc9bec: Download complete \n511136ea3c5a: Download complete \n9bad880da3d2: Download complete \n25f11f5fb0cb: Download complete \nebc34468f71d: Download complete \n2318d26665ef: Download complete \nroot@c8b319b2b306:/# ＜--ubuntu に入った\n</code></pre>\n<h2 id=\"%E3%82%A2%E3%82%BF%E3%83%83%E3%83%81%E3%81%A8%E3%81%8B%E3%83%87%E3%82%BF%E3%83%83%E3%83%81%E3%81%A8%E3%81%8B\">アタッチとかデタッチとか <a class=\"direct-link\" href=\"#%E3%82%A2%E3%82%BF%E3%83%83%E3%83%81%E3%81%A8%E3%81%8B%E3%83%87%E3%82%BF%E3%83%83%E3%83%81%E3%81%A8%E3%81%8B\">#</a></h2>\n<p>CTRL+p → CTRL+q と押すと、Ubuntu からデタッチして docker に戻る。（ubuntu は終わらない）</p>\n<p><code>docker ps</code> とすると起動している ubuntu の一覧が見える。</p>\n<pre><code>ocker@boot2docker:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\nc8b319b2b306        ubuntu:latest       /bin/bash           5 minutes ago       Up 5 minutes                            prickly_tesla       \n</code></pre>\n<p>もう一度 <code>sudo docker run -i -t ubuntu /bin/bash</code> とすると、ubuntu がもう１個起動する。<br>\nCTRL+p → CTRL+q でデタッチして、<code>docker ps</code> すると、２つになってるのが分かる。</p>\n<pre><code>docker@boot2docker:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n4744cf404fda        ubuntu:latest       /bin/bash           4 seconds ago       Up 4 seconds                            distracted_einstein   \nc8b319b2b306        ubuntu:latest       /bin/bash           8 minutes ago       Up 8 minutes                            prickly_tesla         \n</code></pre>\n<p>起動中の ubuntu に入るには、<code>docker attach c8b319b2b306</code> などとする。この場合 bash が実行中なので ubuntu のコンソールになる。</p>\n<pre><code>docker@boot2docker:~$ docker attach c8b319b2b306\n\nroot@c8b319b2b306:/# \n</code></pre>\n<h2 id=\"%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bos%E3%81%AE%E5%89%8A%E9%99%A4\">起動しているOSの削除 <a class=\"direct-link\" href=\"#%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%84%E3%82%8Bos%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h2>\n<p><code>docker attach</code> して <code>exit</code> するか、docker側から <code>docker kill c8b319b2b306</code> などとする。</p>\n<p><code>docker ps</code> すると、削除されたのが分かる。</p>\n<pre><code>docker@boot2docker:~$ docker ps\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n4744cf404fda        ubuntu:latest       /bin/bash           3 minutes ago       Up 3 minutes                            distracted_einstein   \n</code></pre>\n<h2 id=\"os%E3%81%AE%E7%8A%B6%E6%85%8B%E3%81%AE%E4%BF%9D%E5%AD%98%E3%81%A8%E5%BE%A9%E5%85%83\">OSの状態の保存と復元 <a class=\"direct-link\" href=\"#os%E3%81%AE%E7%8A%B6%E6%85%8B%E3%81%AE%E4%BF%9D%E5%AD%98%E3%81%A8%E5%BE%A9%E5%85%83\">#</a></h2>\n<p>docker から起動した ubuntu は揮発性なので、終了すると状態が消えてしまう。<br>\nが、ほんとは消えてなくて、終了した後で、履歴からイメージを作成することができる。</p>\n<p>まず、ubuntu にて適当なファイルを作成。</p>\n<pre><code>root@4744cf404fda:/# echo 'Hello' &gt;&gt; mytext\n\nroot@4744cf404fda:/# ls\nbin   dev  home  lib64\tmnt\topt   root  sbin  sys  usr\nboot  etc  lib\t media\tmytext\tproc  run   srv   tmp  var\n</code></pre>\n<p>確かに <code>mytext</code> が作成されているのを確認したら、<code>exit</code> で終了、docker に戻る。</p>\n<p><code>sudo docker run -i -t ubuntu /bin/bash</code> で ubuntu を起動し、<code>ls</code> で、内容を確認。</p>\n<pre><code>root@3d15ee0cc161:/# ls\nbin  boot  dev\tetc  home  lib\tlib64  media  mnt  opt\tproc  root  run  sbin  srv  sys  tmp  usr  var\n</code></pre>\n<p><code>mytext</code> は消えている。<br>\n確認後 <code>exit</code> で終了。</p>\n<p><code>docker ps -a</code> で履歴も含めて状態を見る。</p>\n<pre><code>docker@boot2docker:~$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                      PORTS               NAMES\n3d15ee0cc161        ubuntu:latest       /bin/bash           19 seconds ago      Exited (0) 12 seconds ago                       dreamy_hawking        \n4744cf404fda        ubuntu:latest       /bin/bash           8 minutes ago       Exited (0) 30 seconds ago                       distracted_einstein   \n16d24570a714        ubuntu:latest       /bin/bash           12 minutes ago      Exited (0) 12 minutes ago                       focused_wilson        \n</code></pre>\n<p><code>mytext</code> を保存したのは 4744cf404fda の ubuntu なので、これを保存する。<br>\n<code>docker commit</code> で git ライクにコミットすると保存される。</p>\n<pre><code>docker@boot2docker:~$ docker commit -m &quot;Add mytext&quot; 4744cf404fda amay077/mytext_container\n\n467f6424ae4a7b813f51356a019ef6ee2467fe2f1f52d8ea7a2e32ddc0b63edd\n</code></pre>\n<p><code>docker images</code> を実行して保存されているイメージのリストを見る。</p>\n<pre><code>REPOSITORY                 TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\namay077/mytext_container   latest              467f6424ae4a        50 seconds ago      192.7 MB\nubuntu                     latest              ba5877dc9bec        2 weeks ago         192.7 MB\nd\n</code></pre>\n<p><code>amay077/mytext_container</code> が確かに保存されてる。</p>\n<p>そのイメージを使ってインスタンスを起動する。</p>\n<pre><code>docker@boot2docker:~$ sudo docker run -i -t amay077/mytext_container /bin/bash\n\nroot@0f6e755990ff:/# ls\nbin   dev  home  lib64\tmnt\topt   root  sbin  sys  usr\nboot  etc  lib\t media\tmytext\tproc  run   srv   tmp  var\n\nroot@0f6e755990ff:/# cat mytext\nHello\n</code></pre>\n<p>確かに mytext が保存された状態になっている。</p>\n<h2 id=\"%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A8%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E5%89%8A%E9%99%A4\">コンテナとイメージの削除 <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%81%A8%E3%82%A4%E3%83%A1%E3%83%BC%E3%82%B8%E3%81%AE%E5%89%8A%E9%99%A4\">#</a></h2>\n<p>いきなり「コンテナ」ってｗ</p>\n<p>イメージから起動した「モノ」をコンテナというらしい。<br>\n起動して終了したもの（<code>docker ps -a</code> で見られるもの）もコンテナというらしい。</p>\n<p>OSを終了してから、<code>docker rm 3d15ee0cc161</code> などで個別に削除してもよいが、面倒なので、<br>\n<code>docker rm `docker ps -a -q</code> とすると、起動してないコンテナを一括削除できる。</p>\n<pre><code>docker@boot2docker:~$ docker rm `docker ps -a -q`\n3d15ee0cc161\n4744cf404fda\n16d24570a714\n57ee3aa4a7d2\nc8b319b2b306\n\ndocker@boot2docker:~$ docker ps -a\nCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES\n</code></pre>\n<p>続いて、イメージの削除は <code>docker rmi amay077/mytext_container</code> などで行う。</p>\n<pre><code>docker@boot2docker:~$ docker rmi amay077/mytext_container\n\ndocker@boot2docker:~$ docker images\nREPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE\nubuntu              latest              ba5877dc9bec        2 weeks ago         192.7 MB\n</code></pre>\n<p>ubuntu だけになった。<br>\n<code>docker rmi ubuntu</code> もするときれいサッパリ。</p>\n<p>今日はここまで。</p>\n<h2 id=\"%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88\">参考サイト <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88\">#</a></h2>\n<ul>\n<li><a href=\"http://dev.classmethod.jp/tool/docker/getting-started-docker-on-osx/\">はじめてのDocker on Mac OS X ｜ Developers.IO</a></li>\n<li><a href=\"http://apatheia.info/blog/2013/06/17/docker/\">仮想環境構築に docker を使う - apatheia.info</a></li>\n<li><a href=\"http://blog.n-z.jp/blog/2013-12-24-docker-rm.html\">Dockerで不要になったコンテナやイメージを削除する - @znz blog</a></li>\n</ul>\n<p>WEB+DB PRESS vol.81 の Immutable Infrastructure の特集も、参考になりました。</p>\n",
      "date_published": "2014-08-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/08/04/raspberry-try-first/",
      "url": "https://blog.amay077.net/blog/2014/08/04/raspberry-try-first/",
      "title": "いまさら Raspberry Pi やってみた",
      "content_html": "<p>昨年の秋に買って以来放置してしまってた Raspberry Pi、ふと思い立って動かしてみました。</p>\n<!--more-->\n<p>当時は、買ったはよかったものの、余ってるSDカードがなくてそのまま「寝て」しまってました。</p>\n<h2 id=\"os-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">OS のインストール <a class=\"direct-link\" href=\"#os-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h2>\n<ul>\n<li><a href=\"http://qiita.com/tomk79/items/cdc1b88358afba2c6337\">RaspberryPi - Raspberry Pi に入門してみた。 - Qiita</a></li>\n</ul>\n<p>に沿ってやりました。ZIPファイルのダウンロードが300MBほど経過したところで終わってしまったので、BitTorrent を使ってみました。<br>\nMac なので、<a href=\"https://www.transmissionbt.com/\">Transmission</a> というクライアントを使用しました。速いっすね BitTorrent。</p>\n<p>RaspberryPiへの給電は MacMini のUSBポートから、ディスプレイはHDMIで行いました。<br>\nSDカードは、以前使っていたスマホに刺さっていたmicroSDカード＋SDカードアダプタにて、そのためか、少し衝撃を与えるとOSが再起動してしまうという gkbr な環境です。</p>\n<h2 id=\"wifi-%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B\">WiFi に接続する <a class=\"direct-link\" href=\"#wifi-%E3%81%AB%E6%8E%A5%E7%B6%9A%E3%81%99%E3%82%8B\">#</a></h2>\n<p>有線LANが余ってなかったので、WiFiでやることにしました。ちょうど使わなくなったノートPCにWiFiドングルが刺さってました。</p>\n<p>WiFi に接続するための設定は、</p>\n<ul>\n<li><a href=\"http://kingyo-bachi.blogspot.jp/2013/07/raspberry-pilan.html\">コチョナナバ: Raspberry Piを無線LAN対応させてみた</a></li>\n</ul>\n<p>を参考にしましたが、設定後再起動してもIPアドレスが取得できず、結局 <code>startx</code> で GUI を立ち上げ、GUIのWiFi設定ツールで設定したところ、接続できるようになりました。その後の再起動でも自動的にWiFiに接続できるようになりました。</p>\n<p>Raspberry Pi のUSBポートは２つしかないのに、GUIでのWiFi設定を行うにはマウスとキーボードとWiFiドングルが必要で、キーボードとマウスを抜き差ししながら、しかも本体にできるだけ衝撃を与えないようにするのが大変でした（^_^;）</p>\n<p>GUIのWiFi設定ツールで設定した後の <code>wpa_supplicant.conf</code> はこんな感じになっていました。</p>\n<pre class=\"language-json\"><code class=\"language-json\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br>update_config=<span class=\"token number\">1</span><br><br>network=<span class=\"token punctuation\">{</span><br>\tssid=<span class=\"token string\">\"&lt;WiFi-APのSSID>\"</span><br>\tpsk=<span class=\"token string\">\"&lt;WiFi-APの接続生パスワード>\"</span><br>\tproto=RSN<br>\tkey_mgmt=WPA-PSK<br>\tpairwise=TKIP<br>\tauth_alg=OPEN<br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"root-%E3%81%AE%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E8%A8%AD%E5%AE%9A\">root のパスワードを設定 <a class=\"direct-link\" href=\"#root-%E3%81%AE%E3%83%91%E3%82%B9%E3%83%AF%E3%83%BC%E3%83%89%E3%82%92%E8%A8%AD%E5%AE%9A\">#</a></h2>\n<p><code>sudo passwd root</code> で root のパスワードを設定しました。（こんなことすらググらないと分からない程度のLinux力ですorz）</p>\n<h2 id=\"ssh%E3%81%A7%E6%8E%A5%E7%B6%9A\">SSHで接続 <a class=\"direct-link\" href=\"#ssh%E3%81%A7%E6%8E%A5%E7%B6%9A\">#</a></h2>\n<p>前出のコチョバナナさんの続きで、 <code>avahi-deamon</code> を導入して、DHCPでIPアドレスが変わっても、<code>ssh raspberrypi.local</code> で接続できるようにしました。</p>\n<p>とりあえずここまで。<br>\nカメラとかセンサーはないので、これから何しようか考えます。</p>\n<p>一連のセットアップで一番苦労したのは vi のテキスト入力です。。。</p>\n",
      "date_published": "2014-08-04T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/07/30/bought-type-cover/",
      "url": "https://blog.amay077.net/blog/2014/07/30/bought-type-cover/",
      "title": "タイプカバーを買いました",
      "content_html": "<p><a href=\"/blog/2014/07/18/welcome-surface-pro-3/\">先日買った Surface Pro 3</a> 用のタイプカバーを買いました。</p>\n<!--more-->\n<p><img src=\"/img/posts/bought_type_cover_01.jpg\" alt=\"\"></p>\n<p><a href=\"http://xamarin.com\">Xamarin</a> カラーの <strong>シアン！</strong></p>\n<p>キーボードの打感は、個人的には良好。普段 MacBookAir やApple純正のあのうす～いキーボードに慣れているので、なんなく順応できますね。</p>\n<p>これでお出かけ時に持っていけるぞ。</p>\n<p>こうなってくると次は外出時のバッテリー問題を解決したい！<br>\nMacBookAir には、<a href=\"http://www.amazon.co.jp/gp/product/B00456DWUA/ref=as_li_ss_tl?ie=UTF8&amp;camp=247&amp;creative=7399&amp;creativeASIN=B00456DWUA&amp;linkCode=as2&amp;tag=oku2008-22\">HyperJuice</a> を使っていて、実質半日くらいは持つのですが、こいつで Surface にも給電できないかなーと思ってます。変換コネクタみたいなのでないかな？</p>\n",
      "date_published": "2014-07-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/07/18/welcome-surface-pro-3/",
      "url": "https://blog.amay077.net/blog/2014/07/18/welcome-surface-pro-3/",
      "title": "Surface Pro 3 買いました",
      "content_html": "<p><a href=\"http://www.amazon.co.jp/gp/product/B00KQ5AAUY?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00KQ5AAUY&amp;linkCode=shr&amp;tag=oku2008-22\">Surface Pro 3</a> を買いました。</p>\n<!--more-->\n<p><img src=\"/img/posts/welcome-surface-pro-3_01.png\" alt=\"\"></p>\n<p>このところ Mac ばかり使ってたので、Windows 機は久しく買ってませんでした。自作でないものはホントに久しぶり。</p>\n<p>Macbook Air と並べてみました。</p>\n<p><img src=\"/img/posts/welcome-surface-pro-3_02.png\" alt=\"\"></p>\n<p>重さはそんなに変わらないですね。</p>\n<p>まだタイプカバーを買ってないのでがつがつ使い倒せません。（ヤマダでテレビ買った時に半ば強制的に作らされたカード付属のポイントで買いたい）<br>\nあと、保護フィルム要るのかな？</p>\n<p>これで Windows Store Apps の開発もできるぞ。</p>\n",
      "date_published": "2014-07-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/07/16/display-git-diff-summary/",
      "url": "https://blog.amay077.net/blog/2014/07/16/display-git-diff-summary/",
      "title": "git で過去との差分のサマリーを表示する",
      "content_html": "<p>「現在のソースコードは、過去のバージョンからどのくらい修正したか？」を知りたい時に使います。</p>\n<!--more-->\n<h2 id=\"%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">コマンド <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89\">#</a></h2>\n<pre><code>git diff --stat &lt;コミットID&gt;\n\n例）git diff --stat c7378a8\n</code></pre>\n<h2 id=\"%E7%B5%90%E6%9E%9C\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C\">#</a></h2>\n<pre><code> amay077lib                                         |   0\n .../android/fujiphoto/logic/PhotoItemLogic.java    |   1 -\n .../android/fujiphoto/viewmodel/YmapBinder.java    |  24 +-\n graphics/app_icon.svg                              | 436 +++++++++++++++++++++\n graphics/camera.svg                                |  97 +++++\n graphics/circle_small.svg                          |  87 ++++\n graphics/fuji.svg                                  | 118 ++++++\n graphics/loading.svg                               | 142 +++++++\n graphics/pegman.svg                                | 176 +++++++++\n graphics/photo_loading.svg                         | 142 +++++++\n graphics/photo_loading_large.svg                   |  92 +++++\n\n 11 files changed, 1301 insertions(+), 14 deletions(-)\n</code></pre>\n",
      "date_published": "2014-07-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/07/08/create-distinct-array-in-fsharp/",
      "url": "https://blog.amay077.net/blog/2014/07/08/create-distinct-array-in-fsharp/",
      "title": "ランダムで且つ重複しない数値リストを作る",
      "content_html": "<p>F# 入門中です。</p>\n<!--more-->\n<p><a href=\"http://www.shuzan.jp/kentei/flash/\">フラッシュ暗算</a>ぽいアプリを作っていて、次々と表示する数値は、</p>\n<ul>\n<li>ランダムで</li>\n<li>一度使った数値は二度と使わなくて</li>\n<li>０も使わない</li>\n</ul>\n<p>というルールにしています（公式ルールは知らない）</p>\n<p><code>makeRandomList</code> の引数 <code>rand</code> は <code>System.Random</code> のインスタンス、<code>count</code> は生成するリストの要素数、<code>arr</code> は生成した数値群(=再帰処理で値の既出判定に使う)としています。</p>\n<p><code>rand.Next(10)</code> で得た値が、0 もしくは <code>arr</code> に存在する場合は、もう一度同じパラメータで再帰呼び出し、そうでない場合は <code>count</code> を減算しつつ、<code>arr</code> に値を連結して再帰呼び出しします。<code>count</code> が <code>0</code> になったら <code>arr</code> を返して終わります。</p>\n<pre class=\"language-fsharp\"><code class=\"language-fsharp\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">rec</span> makeRandomList <span class=\"token operator\">=</span> <span class=\"token keyword\">fun</span> <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">:</span><span class=\"token class-name\">Random</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">:</span><span class=\"token class-name\">int</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">:</span><span class=\"token class-name\">List</span><span class=\"token operator\">&lt;</span>int<span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span><br>    <span class=\"token keyword\">match</span> count <span class=\"token keyword\">with</span><br>    <span class=\"token operator\">|</span> <span class=\"token number\">0</span> <span class=\"token operator\">-></span> arr<br>    <span class=\"token operator\">|</span> _ <span class=\"token operator\">-></span> <br>        <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> rand<span class=\"token punctuation\">.</span><span class=\"token function\">Next</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1桁の数値</span><br>        <span class=\"token keyword\">if</span> n <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> arr <span class=\"token operator\">|></span> List<span class=\"token punctuation\">.</span>exists <span class=\"token punctuation\">(</span><span class=\"token keyword\">fun</span> x<span class=\"token operator\">-></span>x<span class=\"token operator\">=</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">then</span> <br>            makeRandomList <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span> <br>        <span class=\"token keyword\">else</span> makeRandomList <span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">,</span> count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span> @ arr<span class=\"token punctuation\">)</span><br><br><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> makeRandomList <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Random</span><span class=\"token punctuation\">(</span>DateTime<span class=\"token punctuation\">.</span>Now<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><br><span class=\"token keyword\">for</span> x <span class=\"token keyword\">in</span> arr <span class=\"token keyword\">do</span><br>    Console<span class=\"token punctuation\">.</span>WriteLine x<br><br><span class=\"token comment\">// 出力例</span><br><span class=\"token number\">7</span><br><span class=\"token number\">5</span><br><span class=\"token number\">4</span></code></pre>\n<p>こんな感じで書けばいいのかなあ。<br>\nなんかところどころ手続き型の書き方になってる気がしますが、C# で <code>while</code> で処理するよりはスマートにできた気がします。</p>\n",
      "date_published": "2014-07-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/07/01/sqlclient-require-business-edition/",
      "url": "https://blog.amay077.net/blog/2014/07/01/sqlclient-require-business-edition/",
      "title": "Xamarin で System.Data.SqlClient を使うには BUSINESS 版以上が必要です",
      "content_html": "<p>当方 Xamarin INDIE 版しか買えないしがない個人開発者です。</p>\n<!--more-->\n<p>Xamarin で <code>System.Data.SqlClient.SqlCommand</code> などを使ったプロジェクトをビルドしたら、ビルド時にこんなダイアログボックスが。</p>\n<p><img src=\"/img/posts/xamarin_requires_business_edition_when_using_sqlclient_01.png\" alt=\"\"></p>\n<p><img src=\"/img/posts/xamarin_requires_business_edition_when_using_sqlclient_02.png\" alt=\"\"></p>\n<p>どうやら、特定のクラスを使用するには BUSINESS 版以上が必要なようです。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/ab90c74e78dd87ba31fb\">Xamarin でビルドを自動化するには Business 版以上が必要です</a></li>\n</ul>\n<p>といい、INDIE 版の制限事項が後出しで判明するのなんとかならないですかね。</p>\n<p>今回は .NET のプロジェクトを Xamarin に移植する際に発覚したもので、特に <code>SqlClient</code> は使ってなかったので削除して解決しました。</p>\n<p>Xamarin で <code>SqlClient</code> って何に使うんだろ？イントラ？あるいは SQL Server Compact が使える？まさかね。</p>\n",
      "date_published": "2014-07-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/07/01/listview-supports-swapitem-by-dragdrop/",
      "url": "https://blog.amay077.net/blog/2014/07/01/listview-supports-swapitem-by-dragdrop/",
      "title": "ドラッグ＆ドロップで並び替えできる ListView",
      "content_html": "<p>最近こういうUI見たことないなあ、と思いながらも、実装の必要があったので、いろいろ先駆者さま達の足跡を辿り、最終的に、</p>\n<!--more-->\n<ul>\n<li><a href=\"http://shogogg.hatenablog.jp/entry/20110118/1295326773\">ドラッグ＆ドロップで並び替えできる ListView - パンダのメモ帳</a></li>\n</ul>\n<p>が自分のやりたい事に最も近く、割と新し（といっても３年前…）かったので参考にしました。</p>\n<p>ただ、こちらの実装だと、ListView の上にマージンがあるとドラッグ中のアイテムの描画がすこしバグってたので、修正して使いました。</p>\n<p>こんな感じ↓です。</p>\n<p><img src=\"/img/posts/drag_and_drop_listview_01.gif\" alt=\"\"> capture by <a href=\"http://www.cockos.com/licecap/\">LICEcap</a></p>\n<p>修正後のソースです。</p>\n<p>修正箇所は２つ</p>\n<ol>\n<li><code>mActionDownEvent</code> を参照の保持でなく、 <code>obtain</code> してクローンを保持するように（＋ <code>recycle</code> で破棄）。<code>onTouchEvent</code> の 引数 <code>event</code> は、内部で使いまわされるようで、参照のコピーでは、値が勝手に変わっていました。</li>\n<li><code>updateLayoutParams</code> はスクリーン座標を前提に。元は <code>listView.getTop() + event.getY()</code> でしたが、これではステータスバーとActionBarの高さが考慮されないようだったので、<code>event.getRawY()</code> を使うようにしました。</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>graphics<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>graphics<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>graphics<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>graphics<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PixelFormat</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AttributeSet</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Gravity</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">WindowManager</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AdapterView</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AdapterView<span class=\"token punctuation\">.</span>OnItemLongClickListener</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ListView</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SortableListView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ListView</span> <span class=\"token keyword\">implements</span><br>        <span class=\"token class-name\">OnItemLongClickListener</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SCROLL_SPEED_FAST <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SCROLL_SPEED_SLOW <span class=\"token operator\">=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Bitmap<span class=\"token punctuation\">.</span>Config</span> DRAG_BITMAP_CONFIG <span class=\"token operator\">=</span> <span class=\"token class-name\">Bitmap<span class=\"token punctuation\">.</span>Config</span><span class=\"token punctuation\">.</span>ARGB_8888<span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> mSortable <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> mDragging <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">DragListener</span> mDragListener <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDragListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> mBitmapBackgroundColor <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">argb</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0xFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Bitmap</span> mDragBitmap <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ImageView</span> mDragImageView <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span> mLayoutParams <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MotionEvent</span> mActionDownEvent<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> mPositionFrom <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token comment\">/** コンストラクタ */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SortableListView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setOnItemLongClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** コンストラクタ */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SortableListView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AttributeSet</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setOnItemLongClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** コンストラクタ */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SortableListView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AttributeSet</span> attrs<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> defStyle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">,</span> defStyle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setOnItemLongClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ドラッグイベントリスナの設定 */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setDragListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DragListener</span> listener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        mDragListener <span class=\"token operator\">=</span> listener<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ソートモードの切替 */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setSortable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span> sortable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>mSortable <span class=\"token operator\">=</span> sortable<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ソート中アイテムの背景色を設定 */</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        mBitmapBackgroundColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ソートモードの設定 */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">getSortable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> mSortable<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** MotionEvent から position を取得する */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">eventToPosition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token function\">pointToPosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** タッチイベント処理 */</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mSortable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getAction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_DOWN<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token function\">storeMotionEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">case</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_MOVE<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">duringDrag</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">case</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_UP<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stopDrag</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">case</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_CANCEL<span class=\"token operator\">:</span><br>            <span class=\"token keyword\">case</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span>ACTION_OUTSIDE<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">stopDrag</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onTouchEvent</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** リスト要素長押しイベント処理 */</span><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onItemLongClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AdapterView</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span></span> parent<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> view<span class=\"token punctuation\">,</span><br>            <span class=\"token keyword\">int</span> position<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token function\">startDrag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ACTION_DOWN 時の MotionEvent をプロパティに格納 */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">storeMotionEvent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        mActionDownEvent <span class=\"token operator\">=</span> <span class=\"token class-name\">MotionEvent</span><span class=\"token punctuation\">.</span><span class=\"token function\">obtain</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 複製しないと値が勝手に変わる</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ドラッグ開始 */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startDrag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// イベントから position を取得</span><br>        mPositionFrom <span class=\"token operator\">=</span> <span class=\"token function\">eventToPosition</span><span class=\"token punctuation\">(</span>mActionDownEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// 取得した position が 0未満＝範囲外の場合はドラッグを開始しない</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mPositionFrom <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        mDragging <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// View, Canvas, WindowManager の取得・生成</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> view <span class=\"token operator\">=</span> <span class=\"token function\">getChildByIndex</span><span class=\"token punctuation\">(</span>mPositionFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Canvas</span> canvas <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Canvas</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">WindowManager</span> wm <span class=\"token operator\">=</span> <span class=\"token function\">getWindowManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// ドラッグ対象要素の View を Canvas に描画</span><br>        mDragBitmap <span class=\"token operator\">=</span> <span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token function\">createBitmap</span><span class=\"token punctuation\">(</span>view<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> view<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                DRAG_BITMAP_CONFIG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        canvas<span class=\"token punctuation\">.</span><span class=\"token function\">setBitmap</span><span class=\"token punctuation\">(</span>mDragBitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        view<span class=\"token punctuation\">.</span><span class=\"token function\">draw</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// 前回使用した ImageView が残っている場合は除去（念のため？）</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDragImageView <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            wm<span class=\"token punctuation\">.</span><span class=\"token function\">removeView</span><span class=\"token punctuation\">(</span>mDragImageView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token comment\">// ImageView 用の LayoutParams が未設定の場合は設定する</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mLayoutParams <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token function\">initLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token comment\">// ImageView を生成し WindowManager に addChild する</span><br>        mDragImageView <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ImageView</span><span class=\"token punctuation\">(</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        mDragImageView<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span>mBitmapBackgroundColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        mDragImageView<span class=\"token punctuation\">.</span><span class=\"token function\">setImageBitmap</span><span class=\"token punctuation\">(</span>mDragBitmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        wm<span class=\"token punctuation\">.</span><span class=\"token function\">addView</span><span class=\"token punctuation\">(</span>mDragImageView<span class=\"token punctuation\">,</span> mLayoutParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// ドラッグ開始</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDragListener <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            mPositionFrom <span class=\"token operator\">=</span> mDragListener<span class=\"token punctuation\">.</span><span class=\"token function\">onStartDrag</span><span class=\"token punctuation\">(</span>mPositionFrom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> <span class=\"token function\">duringDrag</span><span class=\"token punctuation\">(</span>mActionDownEvent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ドラッグ処理 */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">duringDrag</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mDragging <span class=\"token operator\">||</span> mDragImageView <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> <span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// スクロール速度の決定</span><br>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> speed<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> fastBound <span class=\"token operator\">=</span> height <span class=\"token operator\">/</span> <span class=\"token number\">9</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> slowBound <span class=\"token operator\">=</span> height <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getEventTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">getDownTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// ドラッグの開始から500ミリ秒の間はスクロールしない</span><br>            speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">&lt;</span> slowBound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            speed <span class=\"token operator\">=</span> y <span class=\"token operator\">&lt;</span> fastBound <span class=\"token operator\">?</span> <span class=\"token operator\">-</span>SCROLL_SPEED_FAST <span class=\"token operator\">:</span> <span class=\"token operator\">-</span>SCROLL_SPEED_SLOW<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">></span> height <span class=\"token operator\">-</span> slowBound<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            speed <span class=\"token operator\">=</span> y <span class=\"token operator\">></span> height <span class=\"token operator\">-</span> fastBound <span class=\"token operator\">?</span> SCROLL_SPEED_FAST<br>                    <span class=\"token operator\">:</span> SCROLL_SPEED_SLOW<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>            speed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token comment\">// スクロール処理</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>speed <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 横方向はとりあえず考えない</span><br>            <span class=\"token keyword\">int</span> middlePosition <span class=\"token operator\">=</span> <span class=\"token function\">pointToPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middlePosition <span class=\"token operator\">==</span> <span class=\"token class-name\">AdapterView</span><span class=\"token punctuation\">.</span>INVALID_POSITION<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                middlePosition <span class=\"token operator\">=</span> <span class=\"token function\">pointToPosition</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> middle <span class=\"token operator\">+</span> <span class=\"token function\">getDividerHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                        <span class=\"token operator\">+</span> <span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">final</span> <span class=\"token class-name\">View</span> middleView <span class=\"token operator\">=</span> <span class=\"token function\">getChildByIndex</span><span class=\"token punctuation\">(</span>middlePosition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>middleView <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token function\">setSelectionFromTop</span><span class=\"token punctuation\">(</span>middlePosition<span class=\"token punctuation\">,</span> middleView<span class=\"token punctuation\">.</span><span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> speed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token comment\">// ImageView の表示や位置を更新</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDragImageView<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            mDragImageView<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span>INVISIBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>            mDragImageView<span class=\"token punctuation\">.</span><span class=\"token function\">setVisibility</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span><span class=\"token punctuation\">.</span>VISIBLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token function\">updateLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">getRawY</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ここだけスクリーン座標を使う</span><br>        <span class=\"token function\">getWindowManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">updateViewLayout</span><span class=\"token punctuation\">(</span>mDragImageView<span class=\"token punctuation\">,</span> mLayoutParams<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDragListener <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            mPositionFrom <span class=\"token operator\">=</span> mDragListener<span class=\"token punctuation\">.</span><span class=\"token function\">onDuringDrag</span><span class=\"token punctuation\">(</span>mPositionFrom<span class=\"token punctuation\">,</span><br>                    <span class=\"token function\">pointToPosition</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ドラッグ終了 */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">stopDrag</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MotionEvent</span> event<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span> isDrop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>mDragging<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isDrop <span class=\"token operator\">&amp;&amp;</span> mDragListener <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            mDragListener<span class=\"token punctuation\">.</span><span class=\"token function\">onStopDrag</span><span class=\"token punctuation\">(</span>mPositionFrom<span class=\"token punctuation\">,</span> <span class=\"token function\">eventToPosition</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        mDragging <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>mDragImageView <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token function\">getWindowManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">removeView</span><span class=\"token punctuation\">(</span>mDragImageView<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            mDragImageView <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <span class=\"token comment\">// リサイクルするとたまに死ぬけどタイミング分からない by vvakame</span><br>            <span class=\"token comment\">// mDragBitmap.recycle();</span><br>            mDragBitmap <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <br>            mActionDownEvent<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            mActionDownEvent <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** 指定インデックスのView要素を取得する */</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">View</span> <span class=\"token function\">getChildByIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token function\">getChildAt</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">-</span> <span class=\"token function\">getFirstVisiblePosition</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** WindowManager の取得 */</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">WindowManager</span> <span class=\"token function\">getWindowManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">WindowManager</span><span class=\"token punctuation\">)</span> <span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span><br>                <span class=\"token class-name\">Context</span><span class=\"token punctuation\">.</span>WINDOW_SERVICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ImageView 用 LayoutParams の初期化 */</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        mLayoutParams <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>gravity <span class=\"token operator\">=</span> <span class=\"token class-name\">Gravity</span><span class=\"token punctuation\">.</span>TOP <span class=\"token operator\">|</span> <span class=\"token class-name\">Gravity</span><span class=\"token punctuation\">.</span>LEFT<span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>flags <span class=\"token operator\">=</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">.</span>FLAG_NOT_FOCUSABLE<br>                <span class=\"token operator\">|</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">.</span>FLAG_NOT_TOUCHABLE<br>                <span class=\"token operator\">|</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">.</span>FLAG_KEEP_SCREEN_ON<br>                <span class=\"token operator\">|</span> <span class=\"token class-name\">WindowManager<span class=\"token punctuation\">.</span>LayoutParams</span><span class=\"token punctuation\">.</span>FLAG_LAYOUT_NO_LIMITS<span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>format <span class=\"token operator\">=</span> <span class=\"token class-name\">PixelFormat</span><span class=\"token punctuation\">.</span>TRANSLUCENT<span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>windowAnimations <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token function\">getLeft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> <span class=\"token function\">getTop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ImageView 用 LayoutParams の座標情報を更新 */</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">updateLayoutParams</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> rawY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        mLayoutParams<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span>  rawY <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ドラッグイベントリスナーインターフェース */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">DragListener</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">/** ドラッグ開始時の処理 */</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">onStartDrag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">/** ドラッグ中の処理 */</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">onDuringDrag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> positionFrom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> positionTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">/** ドラッグ終了＝ドロップ時の処理 */</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onStopDrag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> positionFrom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> positionTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">/** ドラッグイベントリスナー実装 */</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SimpleDragListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">DragListener</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">/** ドラッグ開始時の処理 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">onStartDrag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> position<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token comment\">/** ドラッグ中の処理 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">onDuringDrag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> positionFrom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> positionTo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> positionFrom<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token comment\">/** ドラッグ終了＝ドロップ時の処理 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">onStopDrag</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> positionFrom<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> positionTo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> positionFrom <span class=\"token operator\">!=</span> positionTo <span class=\"token operator\">&amp;&amp;</span> positionFrom <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><br>                    <span class=\"token operator\">||</span> positionTo <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n",
      "date_published": "2014-07-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/06/17/hooking-back-key-in-xamarin-forms/",
      "url": "https://blog.amay077.net/blog/2014/06/17/hooking-back-key-in-xamarin-forms/",
      "title": "Xamarin.Forms、Android での BACK キーの制御",
      "content_html": "<p><a href=\"http://qiita.com/amay077/items/12979585ac3e2dcacacb\">Xamarin.Forms でどうにかしたい iOS と Android の違い</a> の「BACKキーの制御」の <strong>現時点(1.1.0.6201)</strong> での回答。</p>\n<!--more-->\n<p>Android の BACKキーの制御を、Xamarin.Forms ではどう扱えるかを調べた。</p>\n<h2 id=\"%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA\">シナリオ <a class=\"direct-link\" href=\"#%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA\">#</a></h2>\n<p>Xamarin.Forms による画面１(MainPage)、２(SecondPage)があり、MainPage では BACKキーで戻る(=アプリ終了)事ができるが、SecondPage ではBACKキーが効かない、ようにしたい。</p>\n<h2 id=\"%E5%AF%BE%E7%AD%96\">対策 <a class=\"direct-link\" href=\"#%E5%AF%BE%E7%AD%96\">#</a></h2>\n<p>まず画面１と２はこんな感じ。ボタンを押したら画面２へ遷移するだけ。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// 画面１</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainPage</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ContentPage</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">MainPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Button</span><br>        <span class=\"token punctuation\">{</span><br>            Text <span class=\"token operator\">=</span> <span class=\"token string\">\"To Second\"</span><span class=\"token punctuation\">,</span><br>            VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">,</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        button<span class=\"token punctuation\">.</span>Clicked <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Navigation<span class=\"token punctuation\">.</span><span class=\"token function\">PushAsync</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">SecondPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        Content <span class=\"token operator\">=</span> button<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 画面２</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecondPage</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ContentPage</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">SecondPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        Content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Label</span><br>        <span class=\"token punctuation\">{</span><br>            Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Second\"</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ここからが本題。<br>\nまず Android側のエントリポイントである <code>MainActivity.cs</code> は以下のように、<code>ContentPage</code> プロパティを設ける。そして <code>OnBackPressed</code> メソッドを override して、MainPage だったら OnBackPressed を親へ伝搬する。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"ScrollTest.Android.Android\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">AndroidActivity</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span><span class=\"token function\">Init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token function\">SetPage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NavigationPage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MainPage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">internal</span> <span class=\"token return-type class-name\">Page</span> ContentPage<br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnBackPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ContentPage <span class=\"token keyword\">is</span> <span class=\"token class-name\">MainPage</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnBackPressed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に、MainActivity.ContentPage への設定を行うコードは以下の通り。<br>\nPageRenderer を拡張して ExportRenderer することで、すべての Page にフックをかけ、Page の表示時に MainActivity.ContentPage に設定する。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>Android</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">ScrollTest<span class=\"token punctuation\">.</span>Android</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Views</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Graphics</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">ExportRenderer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">ContentPage</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyPageRenderer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">ScrollTest<span class=\"token punctuation\">.</span>Android</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyPageRenderer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">PageRenderer</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementChangedEventArgs<span class=\"token punctuation\">&lt;</span>Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Page<span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// なんとなく不安なので weak にしてみた</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> activity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">WeakReference<span class=\"token punctuation\">&lt;</span>MainActivity<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Context <span class=\"token keyword\">as</span> <span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            e<span class=\"token punctuation\">.</span>NewElement<span class=\"token punctuation\">.</span>Appearing <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> __<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">MainActivity</span> a<span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>activity<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetTarget</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">out</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    a<span class=\"token punctuation\">.</span>ContentPage <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>NewElement<span class=\"token punctuation\">;</span>    <br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これで、画面１(MainPage)の時だけ BACKキーが効くようにできる。</p>\n<h3 id=\"appearing-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%EF%BC%9F\"><code>Appearing</code> イベントが必要なの？ <a class=\"direct-link\" href=\"#appearing-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%EF%BC%9F\">#</a></h3>\n<p>Xamarin.Forms の Android実装では、画面遷移の度に <strong>「同じインスタンスの MainActivity」</strong> が使いまわされる、さらに <code>OnElementChanged</code> は、各Pageにつき１度しか発生しない。その為、画面１→２→１と遷移すると <code>MainActivity.ContentPage</code> は <code>SecondPage</code> のままになってしまう。ので <code>Appearing</code> イベントで表示の度に MainActivity.ContentPage を設定する必要がある。</p>\n<h3 id=\"androidactivity-%E3%81%AB-static-%E3%81%AA-backpressed-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%8C%E3%81%82%E3%82%8B%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9%E2%80%A6\"><code>AndroidActivity</code> に static な <code>BackPressed</code> イベントがあるんだけど… <a class=\"direct-link\" href=\"#androidactivity-%E3%81%AB-static-%E3%81%AA-backpressed-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%8C%E3%81%82%E3%82%8B%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9%E2%80%A6\">#</a></h3>\n<p>イベントハンドラの定義は<br>\n<code>public delegate bool BackButtonPressedEventHandler(object sender, EventArgs e);</code><br>\nとなっていて、<code>true</code> を返すと BACK キーを無効にできるようなのだけど、<code>sender</code> は <code>MainActivity</code>だし、<code>EventArgs</code> は Page を取得できないしで使えないじゃん。。。</p>\n<p>なんだかすごく発展途上な気がする、その内いろいろ整備されそうなので、それまで待った方が良い気がします。。。</p>\n",
      "date_published": "2014-06-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/06/17/autoreleasepool-in-swift/",
      "url": "https://blog.amay077.net/blog/2014/06/17/autoreleasepool-in-swift/",
      "title": "Swift で @autoreleasepool どうやるの？",
      "content_html": "<p><code>autoreleasepool { }</code> だそうです。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/24152050/what-is-the-equivalent-of-autoreleasepool-in-swift\">automatic ref counting - What is the equivalent of @autoreleasepool in Swift? - Stack Overflow</a></li>\n</ul>\n<p>こんな感じで使うようです。</p>\n<pre><code>for i in 1...10000 {\n  autoreleasepool {\n    // do heavy work\n  }\n}\n</code></pre>\n<p><a href=\"http://qiita.com/amay077/items/95a4139e6f553d8a56a1\">iOS - ARC のメモリ解放タイミングを調べた</a> は Swift でも有効なようで。</p>\n<p><s><a href=\"http://swift-lang.org/tryswift/\">http://swift-lang.org/tryswift/</a> で試してみたら &quot;unexpected token: autoreleasepool&quot; で怒られた。。。Xcode6 を入れないと動かせないんですかね。</s></p>\n",
      "date_published": "2014-06-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/06/13/convert-xamarin-forms-label-to-native-uilabel/",
      "url": "https://blog.amay077.net/blog/2014/06/13/convert-xamarin-forms-label-to-native-uilabel/",
      "title": "Xamarin.Forms の Label から iOS の UILabel を取り出す",
      "content_html": "<p><a href=\"http://qiita.com/amay077/items/12979585ac3e2dcacacb\">Xamarin.Forms でどうにかしたい iOS と Android の違い</a> の「文字の自動縮小」の自己回答。</p>\n<!--more-->\n<p>Xamarin.Forms で定義した <code>Label</code> は、iOS では <code>UILabel</code> となるはずなので、その過程のどこかでフックできれば <code>UILabel.AdjustsFontSizeToFitWidth</code> が仕込める、と目論んで、ホントにできたのでメモ。</p>\n<h2 id=\"%E8%A6%81%E7%82%B9\">要点 <a class=\"direct-link\" href=\"#%E8%A6%81%E7%82%B9\">#</a></h2>\n<p><s>Forms→ネイティブのフックは PageRenderer でできる。その中で得られる UIView（のサブクラス）は、Label と UILabel の両方の参照を持っているので、あとは使うだけ。</s></p>\n<p><strong>ページでなく、UIパーツレベルでフックできたので、全面的に書き換えた。</strong></p>\n<h2 id=\"%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">やってみる <a class=\"direct-link\" href=\"#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>参考にしたのは <a href=\"https://github.com/xamarin/xamarin-forms-samples/tree/master/Forms2Native\">https://github.com/xamarin/xamarin-forms-samples/tree/master/Forms2Native</a> 。</p>\n<p>このサンプルをちょっと改造して試した。</p>\n<p>まずは Forms側の MySecondPage.cs を修正。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySecondPage</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ContentPage</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Label</span> MyLabel <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> MySecondPage <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>MyLabel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Label</span><br>        <span class=\"token punctuation\">{</span><br>            Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Too loooooooooooooooooooooooong label\"</span><span class=\"token punctuation\">,</span><br>            Font <span class=\"token operator\">=</span> Font<span class=\"token punctuation\">.</span><span class=\"token function\">SystemFontOfSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">30d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>            LineBreakMode <span class=\"token operator\">=</span> LineBreakMode<span class=\"token punctuation\">.</span>NoWrap<br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        Content <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StackLayout</span><br>        <span class=\"token punctuation\">{</span><br>            Orientation <span class=\"token operator\">=</span> StackOrientation<span class=\"token punctuation\">.</span>Vertical<span class=\"token punctuation\">,</span><br>            VerticalOptions <span class=\"token operator\">=</span> LayoutOptions<span class=\"token punctuation\">.</span>CenterAndExpand<span class=\"token punctuation\">,</span><br>            Children <span class=\"token operator\">=</span> <br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>MyLabel<br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ラベルを配置。とても文字が長いので全部は表示しきれない。</p>\n<p>次に iOS側に MyLabelRenderer.cs を作成。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Forms2Native</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Forms<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">.</span>iOS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>UIKit</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span><span class=\"token class-name\">ExportRenderer</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">Label</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">MyLabelRenderer</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Forms2Native</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLabelRenderer</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">LabelRenderer</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ElementChangedEventArgs<span class=\"token punctuation\">&lt;</span>Label<span class=\"token punctuation\">></span></span> e<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnElementChanged</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Control<span class=\"token punctuation\">.</span>AdjustsFontSizeToFitWidth <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>ExportRenderer</code> で「Formsの<code>Label</code>は、<code>MyLabelRenderer</code>を使う」と定義している。<br>\nするとすべての <code>Label</code> の生成時を <code>OnElementChanged</code> でフックでき、<code>Control</code> で <code>UILabel</code> は取り出せるので、あとはご自由に、という感じ。</p>\n<p>この実装だと、すべての Label に Ajusts が適用されてしまう。個別に行いたい場合は、Forms側に Labelから派生した <code>AjustableLabel</code> を作成して使い、<code>ExportRenderer(typeof(Label),…</code> のところを <code>ExportRenderer(typeof(AjustableLabel),…</code> にすればいけるはず。そしてこの方法はカスタムビューを作る手順に通じる（というかそのもの？）はず。</p>\n<p>ちなみにこの <code>OnElementChanged</code> は、Nuget の Xamarin.Formsパッケージの Ver1.1.0.6201から利用できる。</p>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\">実行する <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\">#</a></h2>\n<p>こんな感じで、ちゃんと文字サイズが縮小されました。</p>\n<p><img src=\"/img/posts/getting_uilabel_from_xamarin_forms.png\" alt=\"\"></p>\n<p>Android の方も同じ要領でいけるは…ず。</p>\n",
      "date_published": "2014-06-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/06/10/difference-ios-and-android-in-xamarin-forms/",
      "url": "https://blog.amay077.net/blog/2014/06/10/difference-ios-and-android-in-xamarin-forms/",
      "title": "Xamarin.Forms でどうにかしたい iOS と Android の違い",
      "content_html": "<p>Xamarin.Forms で簡単な iOS/Android 両対応アプリを作ってみてて、悩ましい点がいくつか見つかってるので、挙げてみる。</p>\n<!--more-->\n<h2 id=\"%E4%B8%8D%E5%8F%AF%E8%A6%96%E3%81%AE%E6%89%B1%E3%81%84\"><s>不可視の扱い</s> <a class=\"direct-link\" href=\"#%E4%B8%8D%E5%8F%AF%E8%A6%96%E3%81%AE%E6%89%B1%E3%81%84\">#</a></h2>\n<p><s>Forms 側のパーツには <code>IsVisible = true | false</code> がある。<br>\niOS は <code>true | false</code> なのでいいけど、Android の Visibility は、 <code>Visible | Invisible | Gone</code> の3つある。</s></p>\n<p><s>Forms 側での <code>IsVisible = false</code> は、Android では <code>Invisible</code> に相当するみたい。つまり StackLayout とかで「不可視なパーツが <strong>詰められない</strong>」。 iOS の <code>Visible = false</code> は <strong>詰められる</strong> 模様。</s></p>\n<p><code>IsVisible = false</code> は Android ではちゃんと <code>Gone</code> になってました、すいませんでした。</p>\n<h2 id=\"%E7%A9%BA%E6%96%87%E5%AD%97%E3%81%AE%E6%89%B1%E3%81%84\">空文字の扱い <a class=\"direct-link\" href=\"#%E7%A9%BA%E6%96%87%E5%AD%97%E3%81%AE%E6%89%B1%E3%81%84\">#</a></h2>\n<p>IsVisible と勘違いしてたのはこっちだった。</p>\n<p>StackLayout に、Label を2つ積んで、上の Label を空文字にすると、iOSでは詰められるけど、Androidでは空白が空くみたい。こっちはちゃんと裏をとった(汗)</p>\n<p><a href=\"https://gist.github.com/amay077/cf0f4ca1aa14d54bac9a\">https://gist.github.com/amay077/cf0f4ca1aa14d54bac9a</a></p>\n<h2 id=\"%E7%94%BB%E9%9D%A2%E5%9B%9E%E8%BB%A2%E6%99%82%E3%81%AE%E5%86%8D%E6%A7%8B%E7%AF%89\">画面回転時の再構築 <a class=\"direct-link\" href=\"#%E7%94%BB%E9%9D%A2%E5%9B%9E%E8%BB%A2%E6%99%82%E3%81%AE%E5%86%8D%E6%A7%8B%E7%AF%89\">#</a></h2>\n<p>Android だと、画面を回転させると <code>onCreate</code> からやり直しなのは常識。<br>\nForms アプリを Android で動かして回転させると、なんと <strong>RootPage まで戻って</strong> しまう。なんじゃこりゃ。</p>\n<h2 id=\"%E5%9B%9E%E9%81%BF%E6%96%B9%E6%B3%95\">回避方法 <a class=\"direct-link\" href=\"#%E5%9B%9E%E9%81%BF%E6%96%B9%E6%B3%95\">#</a></h2>\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p><a href=\"https://twitter.com/amay077\">@amay077</a> あとAndroidの回転問題（バグです）はとりあえず ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation で回避するといいそうです（そりゃそうだ…）</p>&mdash; Atsushi Eno (@atsushieno) <a href=\"https://twitter.com/atsushieno/statuses/476645011602165760\">2014, 6月 11</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>こんな感じっすね。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <br>    ConfigurationChanges <span class=\"token operator\">=</span> ConfigChanges<span class=\"token punctuation\">.</span>ScreenSize <span class=\"token operator\">|</span> ConfigChanges<span class=\"token punctuation\">.</span>Orientation <span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">AndroidActivity</span></span><br><span class=\"token punctuation\">{</span></code></pre>\n<h2 id=\"back%E3%82%AD%E3%83%BC%E3%81%AE%E6%89%B1%E3%81%84\">BACKキーの扱い <a class=\"direct-link\" href=\"#back%E3%82%AD%E3%83%BC%E3%81%AE%E6%89%B1%E3%81%84\">#</a></h2>\n<p>iOS なら <code>NavigationPage.SetHasNavigationBar(page, false)</code> としてしまえば、ナビゲーションバーが表示されなくなるので、前の画面に戻ることはできなくなるが、Android の BACKキーを無効にするにはどうしたら。。。</p>\n<h3 id=\"%E8%87%AA%E5%B7%B1%E8%A7%A3%E6%B1%BA\">自己解決 <a class=\"direct-link\" href=\"#%E8%87%AA%E5%B7%B1%E8%A7%A3%E6%B1%BA\">#</a></h3>\n<p><code>AndroidActivity</code> のサブクラスで、<code>OnBackPressed</code> を override して実装を潰してしまえばよい。けど画面毎に「戻る／戻れない／Confirm出す」とか細かい制御ができるのかは不明。</p>\n<h2 id=\"%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB\">デフォルトスタイル <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%95%E3%82%A9%E3%83%AB%E3%83%88%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB\">#</a></h2>\n<p>iOS は白基調、Androidは黒基調なので、Forms側で <code>TextColor = Color.Black</code> などとすると、当たり前だが Android で見えない。<br>\niOS はスタイル変えるのしんどいので、Android側の Theme を <code>Theme.Holo.Light</code> にしとく。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"MyApp\"</span><span class=\"token punctuation\">,</span>  <br> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <br> Theme <span class=\"token operator\">=</span> <span class=\"token string\">\"@android:style/Theme.Holo.Light\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">AndroidActivity</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">/* 以下省略 */</span></code></pre>\n<h2 id=\"%E8%B5%B7%E5%8B%95%E6%99%82\">起動時 <a class=\"direct-link\" href=\"#%E8%B5%B7%E5%8B%95%E6%99%82\">#</a></h2>\n<p>Android 側の起動時に ActionBar の付いた空白画面が表示される時間が割とながくて気になる(Galaxy Nexus だけど)。Forms の画面をロードするのに時間がかかるのだろうか？<br>\nActionBar だけでも消したくて Theme を <code>Theme.Holo.Light.NoActionBar</code> にしてみたら Page が表示されなくなった。。。</p>\n<p>NoActionBar な Theme を使うと Activity.ActionBar が null になるんだけど、Xamarin.Forms がそれに対応してない気がした（スタックトレース見ると UpdateActionBar で NullReferenceException だし）ので、<a href=\"https://bugzilla.xamarin.com/buglist.cgi?product=Forms&amp;component=Forms&amp;resolution=---&amp;list_id=92025\">Bugzilla</a> に登録してみた、初めて。どうなるやら。</p>\n<h2 id=\"%E6%96%87%E5%AD%97%E3%81%AE%E8%87%AA%E5%8B%95%E7%B8%AE%E5%B0%8F\">文字の自動縮小 <a class=\"direct-link\" href=\"#%E6%96%87%E5%AD%97%E3%81%AE%E8%87%AA%E5%8B%95%E7%B8%AE%E5%B0%8F\">#</a></h2>\n<p>iOS の <code>UITextField</code> は <code>adjustsFontSizeToFitWidth</code> を設定するとパーツのサイズに合わせて文字サイズを自動拡縮してくれる機能があったけど、Forms の <code>Label</code> にはそんなものはありません。<code>PageRenderer</code> を使って iOS 独自処理しないとダメ。</p>\n<h3 id=\"%E8%87%AA%E5%B7%B1%E8%A7%A3%E6%B1%BA-2\">自己解決 <a class=\"direct-link\" href=\"#%E8%87%AA%E5%B7%B1%E8%A7%A3%E6%B1%BA-2\">#</a></h3>\n<p>やはり PageRenderer 使うとできた → <a href=\"http://qiita.com/amay077/items/8eaa595cc2fc88797b2f\">Xamarin.Forms の Label から iOS の UILabel を取り出す</a></p>\n<h2 id=\"iphone-%E3%81%A8-ipad\">iPhone と iPad <a class=\"direct-link\" href=\"#iphone-%E3%81%A8-ipad\">#</a></h2>\n<p>StackLayout や RelativeLayout でUIを書けば、相対的な位置関係は iPhone と同じものが iPad でも再現されるが、サイズをリテラルで指定するところは、特にインテグレーションしてくれるわけでないので、プラットフォーム毎に調整が必要。例えば文字サイズは、iPad では iPhone より大きな値にしないと残念な感じに。</p>\n<p>他にも見つけたら書きます。</p>\n",
      "date_published": "2014-06-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/06/08/xamarin-forms-is-not-windows-forms/",
      "url": "https://blog.amay077.net/blog/2014/06/08/xamarin-forms-is-not-windows-forms/",
      "title": "Xamarin.Forms は Windows.Forms じゃないよ",
      "content_html": "<ul>\n<li><a href=\"http://www.buildinsider.net/mobile/xamarintips/0005\">iOS／Androidの画面レイアウトを共通化するには？（Xamarin.Forms） - Build Insider</a></li>\n</ul>\n<p>に書ききれなかったことなど。</p>\n<!--more-->\n<h2 id=\"%E5%90%8D%E5%89%8D%E3%81%A9%E3%81%86%E3%82%88%EF%BC%9F\">名前どうよ？ <a class=\"direct-link\" href=\"#%E5%90%8D%E5%89%8D%E3%81%A9%E3%81%86%E3%82%88%EF%BC%9F\">#</a></h2>\n<p><strong>Xamarin.Forms</strong> って名前、どうしても Windows.Forms を連想するけど全然別ものだから。とはいえ、あんまり WPF の経験がないので、Windows.Forms にそれほどイヤな印象がない。VB6時代なんて、画面に Fill するのすらゴリゴリ実装が必要だったし。</p>\n<h2 id=\"%E5%89%8D%E8%BA%AB%E3%81%AF-monotouch.dialog-%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99\">前身は MonoTouch.Dialog じゃないかと思います <a class=\"direct-link\" href=\"#%E5%89%8D%E8%BA%AB%E3%81%AF-monotouch.dialog-%E3%81%98%E3%82%83%E3%81%AA%E3%81%84%E3%81%8B%E3%81%A8%E6%80%9D%E3%81%84%E3%81%BE%E3%81%99\">#</a></h2>\n<p>MonoTouch.Dialog というのは、Xamarin の CTO でありスーパーハッカーのミゲル氏が開発した、簡単なコードで iOS の UI を実装できるライブラリ（「Dialog」だけど、「ダイアログボックス」とは関係ない。 ）</p>\n<ul>\n<li><a href=\"https://github.com/migueldeicaza/MonoTouch.Dialog\">migueldeicaza/MonoTouch.Dialog</a></li>\n</ul>\n<p>たぶんだけど、Xamarin.Forms はこれの思想がベースにあって、他のプラットフォームやXAML対応が行われたんじゃないかと勝手に思ってます。（いつか紹介しようと思ってたけどこれでお役御免になってしまったかも）</p>\n<h2 id=\"android-%E3%81%AE-ui%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E4%BC%BC%E3%81%A6%E3%82%8B%E3%82%88%E3%81%86%E3%81%AA%E2%80%A6\">Android の UIフレームワークに似てるような… <a class=\"direct-link\" href=\"#android-%E3%81%AE-ui%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%AB%E4%BC%BC%E3%81%A6%E3%82%8B%E3%82%88%E3%81%86%E3%81%AA%E2%80%A6\">#</a></h2>\n<p><a href=\"http://developer.xamarin.com/guides/cross-platform/xamarin-forms/controls/layouts/\">StackLayout</a> は LinearLayout相当、RelativeLayout も、同名クラスがあるし、割と Android の UI の考え方をベースにしてるのかなと予想。Windows Phone はあまり経験がないので知らない。。。</p>\n<h2 id=\"hoge.ios-%E3%81%A8%E3%81%84%E3%81%86%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%E3%81%8C%E3%82%AD%E3%83%A9%E3%82%A4\">Hoge.iOS というプロジェクト名がキライ <a class=\"direct-link\" href=\"#hoge.ios-%E3%81%A8%E3%81%84%E3%81%86%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E5%90%8D%E3%81%8C%E3%82%AD%E3%83%A9%E3%82%A4\">#</a></h2>\n<p>プラットフォームの識別子をプロジェクト名につけるのが良いんだけど、 <code>HelloForms.iOS</code> とか「iOS」とつけるのが嫌い。名前空間名とかが小文字で始まってしまうのが気持ち悪くて。<br>\nMvvmCross などでは、iOS は <code>XXX.Touch</code> 、Android は <code>XXX.Droid</code> としていて、こっちの方が好み。</p>\n<h2 id=\"xaml-%E3%81%AF%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%8C%E7%84%A1%E3%81%84%E3%81%A8%E3%83%84%E3%83%A9%E3%81%84\">XAML はデザイナーが無いとツラい <a class=\"direct-link\" href=\"#xaml-%E3%81%AF%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%83%BC%E3%81%8C%E7%84%A1%E3%81%84%E3%81%A8%E3%83%84%E3%83%A9%E3%81%84\">#</a></h2>\n<p>WPFじゃなくてもXAMLって言っていいんだ、というのを初めて知ったｗ<br>\nXamarin Studio のXMLデザイナーは補完も効かないしツラい。コードでUI作るのにも限界があるので、今年の <a href=\"https://evolve.xamarin.com/\">Evolve</a> あたりで「Xamarin.Forms のUIデザイナー発表ばばーん！！」を期待してます。</p>\n<h2 id=\"%E3%82%BF%E3%83%96%E3%81%AE%E4%BD%8D%E7%BD%AE%E3%81%8C%E4%B8%8A%E3%81%A8%E3%81%8B%E4%B8%8B%E3%81%A8%E3%81%8B%E3%81%A9%E3%81%86%E3%81%A7%E3%82%82%E3%81%84%E3%81%84\">タブの位置が上とか下とかどうでもいい <a class=\"direct-link\" href=\"#%E3%82%BF%E3%83%96%E3%81%AE%E4%BD%8D%E7%BD%AE%E3%81%8C%E4%B8%8A%E3%81%A8%E3%81%8B%E4%B8%8B%E3%81%A8%E3%81%8B%E3%81%A9%E3%81%86%E3%81%A7%E3%82%82%E3%81%84%E3%81%84\">#</a></h2>\n<p>「UIはプラットフォームの流儀に合わせるべき」という説明に必ずと言っていいほど登場するのがタブバーの位置が Androidだと上で、iOSだと下、ってやつ。<br>\n個人的にはどうでもいい。タブの切り替えをよく使うなら指の届きやすい画面下部に配置すべきだし、同じアプリならiOS版とAndroid版でUIを変えるべきでないと思っている。（かと言って、iOS版のUIをそっくりそのままAndroidに移植すればいいという話でもない）。 <strong>プロダクトのUXは、プラットフォームのUXより優先されるべき</strong> 、と思ってる。</p>\n<h2 id=\"%E4%B8%8A%E5%8F%B8%E3%81%B8%E3%81%AE%E6%8F%90%E6%A1%88%E3%81%AB%E3%81%AF%E5%A5%BD%E6%9D%90%E6%96%99%E3%81%8B%E3%81%A8\">上司への提案には好材料かと <a class=\"direct-link\" href=\"#%E4%B8%8A%E5%8F%B8%E3%81%B8%E3%81%AE%E6%8F%90%E6%A1%88%E3%81%AB%E3%81%AF%E5%A5%BD%E6%9D%90%E6%96%99%E3%81%8B%E3%81%A8\">#</a></h2>\n<ul>\n<li>私「iOS/Android 両方開発するなら Xamarin 使いましょう！」</li>\n<li>上「そうか、それは１ソースで両対応できるのか？」</li>\n<li>私「いえ、画面はプラットフォーム毎に書きます、カメラとかも別です。共通化できるのはコアロジックです。」</li>\n<li>上「なんだその程度か」</li>\n<li>私「…」</li>\n</ul>\n<p>というよくある話には、「画面が１ソースで共通にできる Xamarin.Forms」は、説得材料としては、とりわけ対PhoneGapには効果高いんじゃないかと思います。毒りんごかどうかはともかく。。。</p>\n",
      "date_published": "2014-06-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/05/14/find-new-api-in-ios4-supported-code/",
      "url": "https://blog.amay077.net/blog/2014/05/14/find-new-api-in-ios4-supported-code/",
      "title": "iOS4.x 対応のソースコードから「新しいAPI」を使っている箇所を探す",
      "content_html": "<p>アプリを iOS4.x でも動作させたい場合、Xcode のプロジェクト設定で Deployment Target を &quot;4.x&quot; (4.3とか) に設定します。<br>\n一方で Base SDK は最新のものしか選べません、今だと &quot;7.1&quot;。</p>\n<!--more-->\n<p>この状態だと、コード中で iOS5以降に追加された API を使っていると、iOS4.x端末では当然クラッシュします。</p>\n<p>Target を 4.x にしてるんだから、クラッシュしそうなコードがあったら Xcode が検出して警告して欲しいんですが、そういう機能はないみたいです。(実はあるのでしょうか？ Android だと警告どころかビルドエラーになるので、iOSアプリ開発は大変不便だな、と思ってしまいます。Obj-C は JavaScript みたいなもんだから仕方がない、のは分かりますが)</p>\n<p><a href=\"http://oclint.org/\">OCLint</a> という静的コード解析ツールを見つけましたが、機能をざっと見ても、APIバージョンをチェックするものはなさそうです。（試したことはありません）</p>\n<p>しかし「動かしてみないと分からない」のは不安すぎるので、なんとかして「新しいAPIを使っていないか？」をチェックする方法を考えて、行ってみました。</p>\n<h2 id=\"%E6%96%B0%E3%81%97%E3%81%84api%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E7%AE%87%E6%89%80%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%8B%E6%96%B9%E6%B3%95\">新しいAPIを使っている箇所を見つける方法 <a class=\"direct-link\" href=\"#%E6%96%B0%E3%81%97%E3%81%84api%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E7%AE%87%E6%89%80%E3%82%92%E8%A6%8B%E3%81%A4%E3%81%91%E3%82%8B%E6%96%B9%E6%B3%95\">#</a></h2>\n<h3 id=\"a.-ios-developer-center-%E3%81%AB-api-%E3%81%AE%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9%E3%81%8C%E3%81%BE%E3%81%A8%E3%82%81%E3%82%89%E3%82%8C%E3%81%9F%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">A. iOS Developer Center に API の更新内容がまとめられたページがあります。 <a class=\"direct-link\" href=\"#a.-ios-developer-center-%E3%81%AB-api-%E3%81%AE%E6%9B%B4%E6%96%B0%E5%86%85%E5%AE%B9%E3%81%8C%E3%81%BE%E3%81%A8%E3%82%81%E3%82%89%E3%82%8C%E3%81%9F%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8C%E3%81%82%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">#</a></h3>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/releasenotes/General/iOS50APIDiff/index.html#//apple_ref/doc/uid/TP40011042\">iOS 4.3 to iOS 5.0 API Differences</a></li>\n<li><a href=\"https://developer.apple.com/LIBRARY/ios/releasenotes/General/iOS60APIDiffs/index.html\">iOS 5.1 to iOS 6.0 API Differences</a></li>\n<li><a href=\"https://developer.apple.com/LIBRARY/IOS/releasenotes/General/iOS70APIDiffs/index.html\">iOS 6.1 to iOS 7.0 API Differences</a></li>\n</ul>\n<h3 id=\"b.-%E3%81%93%E3%82%8C%E3%82%89%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8B%E3%82%89%E3%80%8C%E5%A4%89%E6%9B%B4%E3%81%AE%E3%81%82%E3%81%A3%E3%81%9F-api-%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%80%8D%E3%82%92%E6%8A%BD%E5%87%BA%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\">B. これらのページから「変更のあった API のリスト」を抽出します。 <a class=\"direct-link\" href=\"#b.-%E3%81%93%E3%82%8C%E3%82%89%E3%81%AE%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%8B%E3%82%89%E3%80%8C%E5%A4%89%E6%9B%B4%E3%81%AE%E3%81%82%E3%81%A3%E3%81%9F-api-%E3%81%AE%E3%83%AA%E3%82%B9%E3%83%88%E3%80%8D%E3%82%92%E6%8A%BD%E5%87%BA%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\">#</a></h3>\n<p>具体的には以下のようなリストを作ります。</p>\n<blockquote>\n<p>Added vImageAlphaBlend_ARGB8888<br>\nAdded vImageAlphaBlend_ARGBFFFF<br>\n…</p>\n</blockquote>\n<p>この作業は自動化したいのですが、お試しなので手動でテキストエディタと <strong>EXCEL</strong> を駆使して作成しました。</p>\n<h3 id=\"c.-%E3%81%82%E3%81%A8%E3%81%AF%E3%80%81%E8%87%AA%E5%88%86%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%80%81%E9%A0%86%E6%AC%A1-grep-%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">C. あとは、自分のソースコードに対して、順次 grep をかけるスクリプトを作ります。 <a class=\"direct-link\" href=\"#c.-%E3%81%82%E3%81%A8%E3%81%AF%E3%80%81%E8%87%AA%E5%88%86%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E5%AF%BE%E3%81%97%E3%81%A6%E3%80%81%E9%A0%86%E6%AC%A1-grep-%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%99%E3%80%82\">#</a></h3>\n<p>修正リストの中には、 <code>-[ALAsset setImageData:metadata:completionBlock:]</code> のように名前付き引数だったりする API もあるので、正規表現でなるべくヒットするように置換します。</p>\n<pre><code>#  find_new_api.sh\ngrep -nr &quot;ALAsset.*setImageData.*metadata.*completionBlock:.*;&quot; ./src/*\ngrep -nr &quot;vImageAlphaBlend_ARGB8888.*;&quot; ./src/*\ngrep -nr &quot;vImageAlphaBlend_ARGBFFFF.*;&quot; ./src/*\n…\n</code></pre>\n<h3 id=\"d.-%E3%81%93%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E4%BD%95%E3%81%8B%E5%87%BA%E3%81%9F%E3%82%89%E3%80%81%E3%81%9D%E3%81%93%E3%81%8C%E3%80%8C%E6%96%B0%E3%81%97%E3%81%84api%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E7%AE%87%E6%89%80%E3%80%8D%E3%81%A7%E3%81%99%E3%80%82\">D. このスクリプトを実行して何か出たら、そこが「新しいAPIを使ってる箇所」です。 <a class=\"direct-link\" href=\"#d.-%E3%81%93%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6%E4%BD%95%E3%81%8B%E5%87%BA%E3%81%9F%E3%82%89%E3%80%81%E3%81%9D%E3%81%93%E3%81%8C%E3%80%8C%E6%96%B0%E3%81%97%E3%81%84api%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E7%AE%87%E6%89%80%E3%80%8D%E3%81%A7%E3%81%99%E3%80%82\">#</a></h3>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<h3 id=\"%E6%B3%A8%E6%84%8F%E7%82%B9\">注意点 <a class=\"direct-link\" href=\"#%E6%B3%A8%E6%84%8F%E7%82%B9\">#</a></h3>\n<ul>\n<li>クラス自体が追加されているものも、メソッドの追加として探しているので、他のクラスと誤認することがあります。</li>\n<li>正規表現が完全に正しいかよくわかりません（ソースコードに改行含む場合とか）</li>\n</ul>\n<p>簡単で、不格好な方法ですが、十分に機能してくれますし、開発者の知識やテストだけに頼るのに比べれば随分と安心できます。</p>\n<p>APIの更新情報を JSON か何かで提供してくれたら、もうちょっと楽なんですけども。。。</p>\n<p>iOSアプリの開発者のみなさんは、どうやって iOS の下位バージョン互換性を担保しているのでしょうか？</p>\n",
      "date_published": "2014-05-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/05/13/chain-of-resposibility-using-rx/",
      "url": "https://blog.amay077.net/blog/2014/05/13/chain-of-resposibility-using-rx/",
      "title": "Rx で Chain of Responsibility",
      "content_html": "<p>今さらだけど GoF の Chain of Responsibility パターン。「自分に処理できないタスクは上へ投げる」ってやつ。Reactive な感じでやるとこんな感じかなあと思って書いてみた。</p>\n<!--more-->\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> document <span class=\"token operator\">=</span> <span class=\"token string\">\"有給届\"</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> kakariCho <span class=\"token operator\">=</span> <span class=\"token function\">CreateManager</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"係長\"</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"遅刻届\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> kaCho <span class=\"token operator\">=</span> <span class=\"token function\">CreateManager</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"課長\"</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"有給届\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> buCho <span class=\"token operator\">=</span> <span class=\"token function\">CreateManager</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"部長\"</span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">,</span> d <span class=\"token operator\">=></span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">,</span> <span class=\"token string\">\"退職届\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <br>        kakariCho<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// 係長</span><br>        kaCho<span class=\"token punctuation\">,</span>      <span class=\"token comment\">// 課長</span><br>        buCho       <span class=\"token comment\">// 部長</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 最初の１人に承認されたら終了</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span>TimeSpan<span class=\"token punctuation\">.</span><span class=\"token function\">FromDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 猶予１日</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <br>        <span class=\"token punctuation\">?</span> <span class=\"token string\">\"あなたの届書は却下されました\"</span> <br>        <span class=\"token punctuation\">:</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\"が承認しました\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/// 管理職を作成する（役職名、渡された届書、自分に承認できる届書）</span><br><span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">CreateManager</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> managerTitle<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> document<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Predicate<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> canIAccept<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=></span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">canIAccept</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <br>        <span class=\"token punctuation\">{</span><br>            o<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>managerTitle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 承認</span><br>        <span class=\"token punctuation\">}</span><br>        o<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>管理職の人を <code>IObservable</code> に見立てて、自分が処理できるなら <code>OnNext</code> を呼ぶ、処理できないなら <code>OnNext</code> は呼ばずに <code>OnComplete</code> しちゃう。<br>\nで、係長・課長・部長の IObservable を <code>Concat</code> で役職の低い順につなげて、 <code>FirstOrDefault()</code> で最初の承認がもらえるまで待つ、みたいな。</p>\n<p>係長・課長・部長が誰も承認しなかった時、タイムアウトするまで待ちが発生しちゃうのが難点。→ <code>Take(1)</code> じゃなくて <code>FirstOrDefault</code> すればいいみたい。誰も承認しなかった場合 <code>default(string)</code> つまり空文字が流れてくる。</p>\n<p>あと、係長→課長→部長と管理職のハンコリレーが必要な場合に対応できていない、Concat なので係長の結果を課長に引き継いでないから。</p>\n<p>んーどうしようか。。。</p>\n",
      "date_published": "2014-05-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/04/23/put-and-get-enum-from-intent/",
      "url": "https://blog.amay077.net/blog/2014/04/23/put-and-get-enum-from-intent/",
      "title": "Intent に Enum を詰めて、取り出す",
      "content_html": "<p>タイトルの通りです。</p>\n<!--more-->\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">MyTypes</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token class-name\">One</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token class-name\">Two</span><span class=\"token punctuation\">,</span><br>\t<span class=\"token class-name\">Three</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\">intent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">MyType<span class=\"token punctuation\">.</span>Two</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">MyTypes</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyTypes</span><span class=\"token punctuation\">)</span>intent<span class=\"token punctuation\">.</span><span class=\"token function\">getSerializableExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>取り出すのは <code>getSerializableExtra</code> であることに注意。</p>\n<p>なんか int に変換されそうじゃん、と思って <code>getIntExtra</code> を使うと取り出せない。</p>\n",
      "date_published": "2014-04-23T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/04/04/command-line-building-requires-buisiness-license/",
      "url": "https://blog.amay077.net/blog/2014/04/04/command-line-building-requires-buisiness-license/",
      "title": "Xamarin でビルドを自動化するには Business 版以上が必要です",
      "content_html": "<p>Xamarin でも、リリース用アプリのビルド→署名→テストとか、自動化したいじゃないですか。</p>\n<!--more-->\n<p>Win/Visual Studio の場合は <code>msbuild</code>、Mac/Xamarin Studio の場合は <code>xbuild</code> でそれが可能との情報を得て試してみたところ、、、</p>\n<pre><code>$ xbuild HogeAppAndroid.csproj \n\nXBuild Engine Version 3.2.6.0\nMono, Version 3.2.6.0\nCopyright (C) Marek Sieradzki 2005-2008, Novell 2008-2011.\n\nBuild started 2014/04/04 13:13:59.\n__________________________________________________\nProject &quot;...HogeAppAndroid/HogeAppAndroid/HogeAppAndroid.csproj&quot; (default target(s)):\n\tTarget _SetLatestTargetFrameworkVersion:\n: error XA9008: Building from the command-line requires a Business License.\n\tTask &quot;ResolveSdks&quot; execution -- FAILED\n\tDone building target &quot;_SetLatestTargetFrameworkVersion&quot; in project &quot;...HogeAppAndroid/HogeAppAndroid/HogeAppAndroid.csproj&quot;.-- FAILED\nDone building project &quot;...HogeAppAndroid/HogeAppAndroid/HogeAppAndroid.csproj&quot;.-- FAILED\n</code></pre>\n<p><strong>“Building from the command-line requires a Business License.”</strong></p>\n<p>だそうです。</p>\n<p>Starter Edition, Indie Edition では、コマンドラインからのビルドは許可されていないようです。</p>\n<ul>\n<li><a href=\"https://store.xamarin.com/\">Store - Xamarin</a></li>\n</ul>\n<p>の比較表ではちょっと分からなかったな。。。</p>\n<p>Win/Visual Studio な人は自動的に Business Edition 以上だから問題ないのですが、個人だから Business版買えないよ、Starter/Indie だけど (なんちゃって)CI とかやりたいよ、という人はあきらめるしかないみたいです。</p>\n<p>…手動でやります。</p>\n",
      "date_published": "2014-04-04T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/04/03/notice-for-fromeventpattern-in-xamarin-ios/",
      "url": "https://blog.amay077.net/blog/2014/04/03/notice-for-fromeventpattern-in-xamarin-ios/",
      "title": "Xamarin.iOS で FromEventPattern を使うときの注意点",
      "content_html": "<p>Reactive Extensions の <code>FromEventPattern</code> を使うと、イベントを <code>IObservable</code> に変換できて、複数のイベントに時系列な関係を与えたり、他のストリーム処理とシームレスに扱えたりします。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://www.atmarkit.co.jp/fdotnet/introrx/introrx_02/introrx_02_02.html\">イベント・プログラミングとRx － ＠IT</a></li>\n</ul>\n<p>Xamarin .iOS でも .Android でもこの機能を使うことができて大変便利ですが、Xamarin.iOS の場合 AOT による制限に気をつける必要があります。</p>\n<p>以下は、なんの変哲もない、「ボタンを押したらタイトルを ”Clicked!” に変える」コードです。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">MyButton<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> MyButton<span class=\"token punctuation\">.</span><span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clicked!\"</span><span class=\"token punctuation\">,</span> UIControlState<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>これを FromEventPattern を使うとこう書けます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Observable<span class=\"token punctuation\">.</span><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">(</span>MyButton<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TouchUpInside\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> MyButton<span class=\"token punctuation\">.</span><span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clicked!\"</span><span class=\"token punctuation\">,</span> UIControlState<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>このコード、iOSシミュレータでは正常に動作しますが、 <strong>実機では、ビルドは通りますが動作しません。</strong> 実行時にこんなエラーがでます。</p>\n<blockquote>\n<p>System.InvalidOperationException: Could not find event 'TouchUpInside' on object of type 'MonoTouch.UIKit.UIButton'.</p>\n</blockquote>\n<p><code>TouchUpInside</code> が無いと言われます。</p>\n<p>これは AOT により生成されたコードに、このイベントが含まれないのだと推測します。イベント名を文字列リテラルで指定しているので、そこまでの解析は期待できないですよね。</p>\n<p>シミュレータで動作したのは、この場合は AOT でなく JIT で動作しているため。以下でも言及されています。</p>\n<ul>\n<li><a href=\"http://www.buildinsider.net/mobile/insidexamarin/05\">Xamarin.iOSの仕組みとアプリケーションの構成 - Build Insider</a></li>\n</ul>\n<blockquote>\n<p>対象がiOSシミュレーターである場合と、iOSデバイスである場合とで、大きく異なる。iOSシミュレーターは、エミュレーターではなく、あくまでMac OS Xが動作しているx86 CPUの上で動作している仮想マシンであり、アプリケーションはJITによって動作する。iOSデバイスはARMであり、iOSデバイス用にビルドされたアプリケーションはAOTによってARMのCPU命令に変換されており、ARM上でしか動作しない。</p>\n</blockquote>\n<p>Xamarin.iOS では実機で動作させないと安心ならないと言われる所以です。</p>\n<p>さて、このケースでは、FromEventPattern の別なオーバーロードを使うことで解決です。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">Observable<span class=\"token punctuation\">.</span><span class=\"token function\">FromEventPattern</span><span class=\"token punctuation\">(</span><br>  h <span class=\"token operator\">=></span> MyButton<span class=\"token punctuation\">.</span>TouchUpInside<span class=\"token operator\">+=</span>h<span class=\"token punctuation\">,</span> <br>  h <span class=\"token operator\">=></span> MyButton<span class=\"token punctuation\">.</span>TouchUpInside<span class=\"token operator\">-=</span>h<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> MyButton<span class=\"token punctuation\">.</span><span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Clicked!\"</span><span class=\"token punctuation\">,</span> UIControlState<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Xamarin.iOS の制限事項は以下に。</p>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/ios/advanced_topics/limitations/\">Limitations ｜ Xamarin</a></li>\n</ul>\n<p>これまでこの制限に引っかかった事がなかったのですが、初めて引っかかりました。</p>\n<p>メソッドを文字列リテラルで書いた時点で私の負けです、本当にありがとうございました。</p>\n",
      "date_published": "2014-04-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/04/01/receive-intent-by-xamarin-android/",
      "url": "https://blog.amay077.net/blog/2014/04/01/receive-intent-by-xamarin-android/",
      "title": "Xamarin.Android で Intent を受けとるには？",
      "content_html": "<p>例えば、他のアプリからテキストを「送る」して、自作の Xamarin アプリでそれを受け取りたい時。</p>\n<!--more-->\n<p>普通の Android アプリ開発だと <code>AndroidManifest.xml</code> にこう書く。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span><br>  <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.intenttest.MainActivity<span class=\"token punctuation\">\"</span></span><br>  <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.SEND<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.DEFAULT<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>data</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>mimeType</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/plain<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Xamarin.Android では、Activity のソースファイルの属性として、以下のように書く。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">IntentFilter</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> Intent<span class=\"token punctuation\">.</span>ActionSend <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <br>  Categories <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span> Intent<span class=\"token punctuation\">.</span>CategoryDefault <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>  DataMimeType <span class=\"token operator\">=</span> <span class=\"token string\">\"text/plain\"</span> <span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>テキストでない場合は、mimetype を適宜変更する。省略したら動作しなかった。</p>\n",
      "date_published": "2014-04-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/03/20/linq-to-objects-vs-java8-stream-api/",
      "url": "https://blog.amay077.net/blog/2014/03/20/linq-to-objects-vs-java8-stream-api/",
      "title": "LINQ to Objects と Java8-Stream API の対応表",
      "content_html": "<p>Java8 で <code>filter</code> や <code>map</code> が使えるようになったー！<br>\nというわけで .NET の LINQ to Objects との対応表を作ってみました。</p>\n<!--more-->\n<ul>\n<li>LINQ - <a href=\"http://msdn.microsoft.com/ja-jp/library/system.linq.enumerable(v=vs.110).aspx\">Enumerable クラス (System.Linq)</a></li>\n<li>Java8 - <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html\">Stream (Java Platform SE 8 )</a></li>\n</ul>\n<p>の比較です。</p>\n<p>Java の方は</p>\n<ul>\n<li><a href=\"http://download.java.net/jdk8/docs/api/java/util/stream/Collectors.html\">Collectors (Java Platform SE 8 )</a></li>\n</ul>\n<p>も使います。</p>\n<p>まだ試したものは少ないので間違ってるかもしれない ＆ カテゴライズが適当 なので、編集リクエストしてもらえるとありがたいです。</p>\n<table>\n<thead>\n<tr>\n<th>機能</th>\n<th>LINQ</th>\n<th>Java8</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>【基本的なやつ】</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>抽出</td>\n<td>Where</td>\n<td>filter</td>\n</tr>\n<tr>\n<td>射影</td>\n<td>Select</td>\n<td>map</td>\n</tr>\n<tr>\n<td>並べ替え</td>\n<td>OrderBy / OrderByDescending</td>\n<td>sorted</td>\n</tr>\n<tr>\n<td>後続を並べ替え</td>\n<td>ThenBy / ThenByDescending</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>平坦化して射影</td>\n<td>SelectMany</td>\n<td>flatMap</td>\n</tr>\n<tr>\n<td><strong>【抽出系】</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>ｎ件飛ばす</td>\n<td>Skip</td>\n<td>skip</td>\n</tr>\n<tr>\n<td>条件を満たすまで飛ばす</td>\n<td>SkipWhile</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>ｎ件まで流す</td>\n<td>Take</td>\n<td>limit</td>\n</tr>\n<tr>\n<td>条件を満たすまで流す</td>\n<td>TakeWhile</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td><strong>【合成系】</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>連結</td>\n<td>Concat</td>\n<td>concat</td>\n</tr>\n<tr>\n<td>積集合</td>\n<td>Intersect</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>和集合</td>\n<td>Union</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>差集合</td>\n<td>Except</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>内部結合</td>\n<td>Join</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>外部結合</td>\n<td>GroupJoin</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>並びを逆にする</td>\n<td>Reverse</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>2つの値を揃えて流す</td>\n<td>Zip</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td><strong>【グループ化、集計系】</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>重複を無くす</td>\n<td>Distinct</td>\n<td>distinct</td>\n</tr>\n<tr>\n<td>畳み込み</td>\n<td>Aggregate</td>\n<td>reduce</td>\n</tr>\n<tr>\n<td>グループ化</td>\n<td>GroupBy</td>\n<td>Collectors.groupingBy</td>\n</tr>\n<tr>\n<td>平均</td>\n<td>Average</td>\n<td>IntStream.average /  Collectors.summarizingXXX</td>\n</tr>\n<tr>\n<td>件数</td>\n<td>Count / LongCount</td>\n<td>count</td>\n</tr>\n<tr>\n<td>最大</td>\n<td>Max</td>\n<td>max</td>\n</tr>\n<tr>\n<td>最小</td>\n<td>Min</td>\n<td>min</td>\n</tr>\n<tr>\n<td>合計</td>\n<td>Sum</td>\n<td>IntStream.sum / Collectors.summarizingXXX</td>\n</tr>\n<tr>\n<td>先頭</td>\n<td>First / FirstOrDefault</td>\n<td>findFirst</td>\n</tr>\n<tr>\n<td>終端</td>\n<td>Last / LastOrDefault</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>とりあえず値を得る</td>\n<td></td>\n<td>findAny</td>\n</tr>\n<tr>\n<td>集計用の汎用関数？</td>\n<td></td>\n<td>collect</td>\n</tr>\n<tr>\n<td>1件の値を得る</td>\n<td>Single / SingleOrDefault</td>\n<td></td>\n</tr>\n<tr>\n<td>空なら既定値を返す</td>\n<td>DefaultIfEmpty</td>\n<td></td>\n</tr>\n<tr>\n<td>全データが条件にマッチするか？</td>\n<td>All</td>\n<td>allMatch</td>\n</tr>\n<tr>\n<td>いずれかのデータが条件にマッチするか？</td>\n<td>Any</td>\n<td>anyMatch</td>\n</tr>\n<tr>\n<td>いずれかのデータも条件にマッチしないか？</td>\n<td></td>\n<td>noneMatch</td>\n</tr>\n<tr>\n<td><strong>【生成系】</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>空っぽ</td>\n<td>Empty</td>\n<td>empty</td>\n</tr>\n<tr>\n<td>範囲を生成</td>\n<td>Range</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>繰り返す</td>\n<td>Repeat</td>\n<td>n/a</td>\n</tr>\n<tr>\n<td>無限リスト生成</td>\n<td></td>\n<td>generate / iterate</td>\n</tr>\n<tr>\n<td><strong>【その他】</strong></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>SequenceEqual</td>\n<td></td>\n</tr>\n<tr>\n<td>列挙</td>\n<td>ToList().ForEach</td>\n<td>forEach</td>\n</tr>\n<tr>\n<td>なんか Action を挟む(デバッグ用？)</td>\n<td></td>\n<td>peek</td>\n</tr>\n</tbody>\n</table>\n<p>ううむ、合成系の機能はほとんどないようです…ので自力でやるしか。<br>\n以下、サンプル。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">サンプル <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">#</a></h2>\n<p>LINQ の方は Mac+Mono(Xamarin) で試しています（ぼそり</p>\n<h3 id=\"%E6%8A%BD%E5%87%BA(where)%E3%80%81%E4%B8%A6%E3%81%B9%E6%9B%BF%E3%81%88(orderby)%E3%80%81%E5%B0%84%E5%BD%B1(select)\">抽出(Where)、並べ替え(OrderBy)、射影(Select) <a class=\"direct-link\" href=\"#%E6%8A%BD%E5%87%BA(where)%E3%80%81%E4%B8%A6%E3%81%B9%E6%9B%BF%E3%81%88(orderby)%E3%80%81%E5%B0%84%E5%BD%B1(select)\">#</a></h3>\n<p>0〜9 を、偶数値だけ抽出して、降順にソートして、値を10倍して、出力。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br>Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">OrderByDescending</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y <span class=\"token operator\">-</span> x<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>80 60 40 20 0\n</code></pre>\n<h3 id=\"%E5%B9%B3%E5%9D%A6%E5%8C%96%E3%81%97%E3%81%A6%E5%B0%84%E5%BD%B1(selectmany)\">平坦化して射影(SelectMany) <a class=\"direct-link\" href=\"#%E5%B9%B3%E5%9D%A6%E5%8C%96%E3%81%97%E3%81%A6%E5%B0%84%E5%BD%B1(selectmany)\">#</a></h3>\n<p>1〜5のリストから、「n×10から始まるn件」のリストを生成。(結果見たほうが分かりやすいな（^_^;)</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">//C#</span><br>Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span> <span class=\"token operator\">*</span> x<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">*</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">boxed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>10 \n20 21 \n30 31 32 \n40 41 42 43 \n50 51 52 53 54\n</code></pre>\n<h3 id=\"%E6%8A%BD%E5%87%BA%E7%B3%BB(take%2C-skip)\">抽出系(Take, Skip) <a class=\"direct-link\" href=\"#%E6%8A%BD%E5%87%BA%E7%B3%BB(take%2C-skip)\">#</a></h3>\n<p>1〜10のリストの3件飛ばして、5件取得。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br>Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">Skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 無限リストでも limit あるから大丈夫</span><br><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterate</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x<span class=\"token operator\">-></span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">skip</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">limit</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>4 5 6 7 8\n</code></pre>\n<p>LINQ には件数でなく条件を指定できる <code>TakeWhile</code> <code>SkipWhile</code> がありますが、Java にはなさそうなので <code>filter</code> で代用しないといけなさそう。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br>Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">SkipWhile</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">TakeWhile</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x <span class=\"token operator\">&lt;</span> <span class=\"token number\">9</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h3 id=\"%E9%80%A3%E7%B5%90(concat)\">連結(Concat) <a class=\"direct-link\" href=\"#%E9%80%A3%E7%B5%90(concat)\">#</a></h3>\n<p>2つのリストをつなげる</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">Concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><br>  <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>  <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>なんで static メソッドやねん…。</p>\n<pre><code>1 2 3 30 20 10\n</code></pre>\n<h3 id=\"%E7%A9%8D%E9%9B%86%E5%90%88(intersect)%E3%80%81%E5%92%8C%E9%9B%86%E5%90%88(union)%E3%80%81%E5%B7%AE%E9%9B%86%E5%90%88(except)\">積集合(Intersect)、和集合(Union)、差集合(Except) <a class=\"direct-link\" href=\"#%E7%A9%8D%E9%9B%86%E5%90%88(intersect)%E3%80%81%E5%92%8C%E9%9B%86%E5%90%88(union)%E3%80%81%E5%B7%AE%E9%9B%86%E5%90%88(except)\">#</a></h3>\n<p>積集合：2つのリストから重複をなくす。<br>\n和集合：2つのリストをマージする。<br>\n差集合：リスト1を基準にリスト2との差分を得る。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> list1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> list2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>list1<span class=\"token punctuation\">.</span><span class=\"token function\">Intersect</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <br>list1<span class=\"token punctuation\">.</span><span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <br>list1<span class=\"token punctuation\">.</span><span class=\"token function\">Except</span><span class=\"token punctuation\">(</span>list2<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token comment\">// 自力で実現かよｗ</span><br>list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">anyMatch</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-></span> y <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>  list2<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneMatch</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-></span> y <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> list2<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">noneMatch</span><span class=\"token punctuation\">(</span>y <span class=\"token operator\">-></span> y <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>4 5 6 // 積\n1 2 3 4 5 6 8 7 // 和\n1 2 3 // 差\n</code></pre>\n<h3 id=\"%E5%86%85%E9%83%A8%E7%B5%90%E5%90%88(join)\">内部結合(Join) <a class=\"direct-link\" href=\"#%E5%86%85%E9%83%A8%E7%B5%90%E5%90%88(join)\">#</a></h3>\n<p>商品マスタと売上テーブルを INNER JOIN する的な。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> master <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Grape\"</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <br><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sales <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">400</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            <br>master<span class=\"token punctuation\">.</span><span class=\"token function\">Join</span><span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">,</span> <br>  outer<span class=\"token operator\">=></span>outer<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <br>  inner<span class=\"token operator\">=></span>inner<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <br>  <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> o<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">.</span>Sales <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token comment\">// 自力</span><br><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> master <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grape\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> sales <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>master<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">flatMap</span><span class=\"token punctuation\">(</span>outer <span class=\"token operator\">-></span> sales<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>inner <span class=\"token operator\">-></span> outer<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> inner<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>outer<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>{ Name = Apple, Sales = 100 }\n{ Name = Grape, Sales = 200 }\n{ Name = Grape, Sales = 300 }\n</code></pre>\n<h3 id=\"%E5%A4%96%E9%83%A8%E7%B5%90%E5%90%88(groupjoin)\">外部結合(GroupJoin) <a class=\"direct-link\" href=\"#%E5%A4%96%E9%83%A8%E7%B5%90%E5%90%88(groupjoin)\">#</a></h3>\n<p>商品マスタと売上テーブルを OUTER JOIN する的な。結合先のテーブルに行が見つからなかったものは null になる。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> master <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Apple\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Grape\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> Name <span class=\"token operator\">=</span> <span class=\"token string\">\"Orange\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <br><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sales <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// Orange は無い</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">400</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            <br>master<span class=\"token punctuation\">.</span><span class=\"token function\">GroupJoin</span><span class=\"token punctuation\">(</span>sales<span class=\"token punctuation\">,</span> <br>  outer<span class=\"token operator\">=></span>outer<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <br>  inner<span class=\"token operator\">=></span>inner<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <br>  <span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> o<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> FirstOfSales <span class=\"token operator\">=</span> i<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span><br>    x<span class=\"token operator\">=></span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">?</span><span class=\"token punctuation\">)</span>x<span class=\"token punctuation\">.</span>Sales<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">FirstOrDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 無かったら null にしたいので null許容型にしてから FirstOrDefault</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>たぶん普通は First じゃなくて Sum とか使うんだろう。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token comment\">// これも自力</span><br><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> master <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Grape\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> sales <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>master<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>outer<span class=\"token operator\">-></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Optional</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>outer<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>  sales<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>inner<span class=\"token operator\">-></span>inner<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> outer<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Id でフィルタ</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-></span>x<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Sales だけに射影</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 同一Id中の先頭</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>[.NET]\n{ Name = Apple, FirstOfSales = 100 }\n{ Name = Grape, FirstOfSales = 200 }\n{ Name = Orange, FirstOfSales = } // 相手が居ないやつは null になる\n\n[Java]\nApple=Optional[100]\nGrape=Optional[200]\nOrange=Optional.empty // Option だから empty になるのは良い\n</code></pre>\n<h3 id=\"2%E3%81%A4%E3%81%AE%E5%80%A4%E3%82%92%E6%8F%83%E3%81%88%E3%81%A6%E6%B5%81%E3%81%99(zip)\">2つの値を揃えて流す(Zip) <a class=\"direct-link\" href=\"#2%E3%81%A4%E3%81%AE%E5%80%A4%E3%82%92%E6%8F%83%E3%81%88%E3%81%A6%E6%B5%81%E3%81%99(zip)\">#</a></h3>\n<p>２つのリストの値をひとつずつセットにして流す。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fuga\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"piyo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">Zip</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token comment\">// FIXME どうやるの？ Streams.zip はどこいった？</span></code></pre>\n<pre><code>{ x = 1, y = hoge }\n{ x = 2, y = fuga }\n{ x = 3, y = piyo }\n</code></pre>\n<h3 id=\"%E9%87%8D%E8%A4%87%E3%82%92%E7%84%A1%E3%81%8F%E3%81%99(distinct)\">重複を無くす(Distinct) <a class=\"direct-link\" href=\"#%E9%87%8D%E8%A4%87%E3%82%92%E7%84%A1%E3%81%8F%E3%81%99(distinct)\">#</a></h3>\n<p>重複する数値リストから重複をなくす。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">Distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">distinct</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>1 3 4 2\n</code></pre>\n<h3 id=\"%E7%95%B3%E3%81%BF%E8%BE%BC%E3%81%BF\">畳み込み <a class=\"direct-link\" href=\"#%E7%95%B3%E3%81%BF%E8%BE%BC%E3%81%BF\">#</a></h3>\n<p>いろいろな集計の素、畳み込み。言語により fold とか reduce とか aggregate とか、いろいろな呼び名がありますね。<br>\nよい例が浮かなかったので Max を実装してみました。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> max <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Aggregate</span><span class=\"token punctuation\">(</span>Int32<span class=\"token punctuation\">.</span>MinValue<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MIN_VALUE<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>7\n</code></pre>\n<h3 id=\"%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E5%8C%96\">グループ化 <a class=\"direct-link\" href=\"#%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E5%8C%96\">#</a></h3>\n<p>リストの要素をキーにしてグループ化する。Salesは合計を計算する。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sales <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span> <br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">100</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">200</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">300</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span> Id <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> Sales <span class=\"token operator\">=</span> <span class=\"token number\">400</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>            <br>sales<span class=\"token punctuation\">.</span><span class=\"token function\">GroupBy</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">=></span>x<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>Id<span class=\"token punctuation\">,</span> groupedSales<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>Id<span class=\"token punctuation\">,</span> <br>    SumOfSales <span class=\"token operator\">=</span> groupedSales<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span> element <span class=\"token operator\">=></span> element<span class=\"token punctuation\">.</span>Sales<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Sales は合計する</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <br>  <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>（LINQ ではありませんが、 <code>List.LookUp</code> を使って実現することもできるようです → <a href=\"http://qiita.com/amay077/items/9d2941283c4a5f61f302#comment-82388821b902ad7999b0\">コメント:2014/03/22 00:29</a>）</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token comment\">// javafx に Pair があったので Tuple 代わりに使っちゃった</span><br><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">400</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">entrySet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// group化の結果が Map なので、エントリを Stream 化</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><br>    x<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// Key が Id に相当</span><br>    x<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">summingInt</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-></span>y<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Value が List なのでまた Stream 化して合計を得る</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Collectors.groupingBy 使わずに Map.merge を使ったほうが分かりやすい気も。。。</span><br>list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><br>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>  <span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> map<span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span><span class=\"token function\">getKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 同じキーの値を加算してく</span><br>  <span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> left<span class=\"token punctuation\">.</span><span class=\"token function\">putAll</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">+</span> <span class=\"token string\">\":\"</span> <span class=\"token operator\">+</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Java の方、カオスすぎる…。.NET の <code>IGrouping</code> を Map でやってるからだな。</p>\n<pre><code>[.NET]\n{ Id = 1, SumOfSales = 100 }\n{ Id = 2, SumOfSales = 500 } // ID=2 の Sales が合計されている\n{ Id = 3, SumOfSales = 400 }\n\n[Java]\n1=100\n2=500\n3=400\n</code></pre>\n<h3 id=\"%E5%90%88%E8%A8%88(sum)%E3%80%81%E6%9C%80%E5%A4%A7(max)%E3%80%81%E6%9C%80%E5%B0%8F(min)%E3%80%81%E5%B9%B3%E5%9D%87(average)%E3%80%81%E4%BB%B6%E6%95%B0(count)%E3%80%81%E5%85%88%E9%A0%AD(first)%E3%80%81%E7%B5%82%E7%AB%AF(last)\">合計(Sum)、最大(Max)、最小(Min)、平均(Average)、件数(Count)、先頭(First)、終端(Last) <a class=\"direct-link\" href=\"#%E5%90%88%E8%A8%88(sum)%E3%80%81%E6%9C%80%E5%A4%A7(max)%E3%80%81%E6%9C%80%E5%B0%8F(min)%E3%80%81%E5%B9%B3%E5%9D%87(average)%E3%80%81%E4%BB%B6%E6%95%B0(count)%E3%80%81%E5%85%88%E9%A0%AD(first)%E3%80%81%E7%B5%82%E7%AB%AF(last)\">#</a></h3>\n<p>集計いろいろ。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// C#</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> list1 <span class=\"token operator\">=</span> Enumerable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum={0}\"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max={0}\"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Max</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Min={0}\"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count={0}\"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First={0}\"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last={0}\"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Average={0}\"</span><span class=\"token punctuation\">,</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">Average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Java</span><br><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> list1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">IntSummaryStatistics</span> stats <span class=\"token operator\">=</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">summarizingInt</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">-></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Max,Min,Count,Average が取得できる</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Sum=\"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Max=\"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Min=\"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getMin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Count=\"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"First=\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// summarizing では取れない</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Last=\"</span> <span class=\"token operator\">+</span> list1<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sorted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> y<span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">findFirst</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">orElse</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 微妙</span><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Average=\"</span> <span class=\"token operator\">+</span> stats<span class=\"token punctuation\">.</span><span class=\"token function\">getAverage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Average=\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">IntStream</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 型指定 Stream なら average, sum がある（結果は Option に包まれる）</span></code></pre>\n<pre><code>Sum=45\nMax=9\nMin=0\nCount=10\nFirst=0\nLast=9\nAverage=4.5\n</code></pre>\n<p>…疲れた。。。</p>\n",
      "date_published": "2014-03-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/03/19/pair-iterator-implements-by-linq/",
      "url": "https://blog.amay077.net/blog/2014/03/19/pair-iterator-implements-by-linq/",
      "title": "ふたつの Iterator を LINQ で",
      "content_html": "<p>ふたつの Iterator を LINQ で</p>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/Nagise/20140315/1394884271\">ふたつのIterator - プログラマーの脳みそ</a></li>\n</ul>\n<p>を拝見しました。</p>\n<!--more-->\n<p>コメントで「Zip じゃん」というのがあり、「確かに！」と思ったのでやってみました。</p>\n<h2 id=\"c%EF%BC%83-%E3%81%AE%E5%A0%B4%E5%90%88\">C＃ の場合 <a class=\"direct-link\" href=\"#c%EF%BC%83-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// using using System.Linq;</span><br><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arr1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> arr2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fuga\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"piyo\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>arr1<span class=\"token punctuation\">.</span><span class=\"token function\">Zip</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>  <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>Console<span class=\"token punctuation\">.</span>WriteLine<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"%E7%B5%90%E6%9E%9C\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C\">#</a></h4>\n<pre><code>{ x = 1, y = hoge }\n{ x = 2, y = fuga }\n{ x = 3, y = piyo }\n</code></pre>\n<p>うむ、シンプル。要素数が違ってても少ない方に合わせてくれます。</p>\n<h2 id=\"java-%E3%81%AE%E5%A0%B4%E5%90%88\">Java の場合 <a class=\"direct-link\" href=\"#java-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p><a href=\"https://code.google.com/p/reactive4java/\">reactive4java</a> というライブラリがありまして、これは Java で Reactive Extensions を実現するライブラリなのですが、LINQ的な機能が <code>Interactive</code> というクラスで提供されています。</p>\n<p>これを使うと Zip ができます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//import hu.akarnokd.reactive4java.base.Func2;</span><br><span class=\"token comment\">//import hu.akarnokd.reactive4java.interactive.Interactive;</span><br><br><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> array1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> array2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">asList</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"fuga\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"piyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> zippedIter <span class=\"token operator\">=</span> <br>\t\t<span class=\"token class-name\">Interactive</span><span class=\"token punctuation\">.</span><span class=\"token function\">zip</span><span class=\"token punctuation\">(</span>array1<span class=\"token punctuation\">,</span> array2<span class=\"token punctuation\">,</span> <br>\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Func2</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> x<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>zippedIter<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">=</span> zippedIter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"StartupActivity\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x=%d, y=%s\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ああ、Android で試したので <code>Pair</code> とか使ってしまった。<br>\n普通の Java の場合は自作の Tuple などに置き換えを。</p>\n<h4 id=\"%E7%B5%90%E6%9E%9C-2\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C-2\">#</a></h4>\n<pre><code>x=1, y=hoge \nx=2, y=fuga \nx=3, y=piyo \n</code></pre>\n<p>C# より冗長ですけど、いい感じで利用できるのではと思います。</p>\n<p>reactive4java が Java8 のラムダ式に対応してくれると、上のコードはもっと簡潔に書けます。</p>\n<p><a href=\"https://code.google.com/p/reactive4java/wiki/Reactive4Java8\">Reactive4Java8</a> には、対応してる感じが見られますが、<a href=\"https://code.google.com/p/reactive4java/\">Top ページ</a> によると、どうやら、「reactive4java の開発は終了し、<a href=\"https://github.com/Netflix/RxJava\">RxJava</a> の開発に参加するつもりだ」みたいなことが書いてあります。</p>\n<p>また、RxJava でなく reactive4java を使う利点として、<code>Interactive</code> 機能群の存在を挙げています。<br>\n単純に LINQ 的な機能を Java で使いたいならば、 reactive4java はまだまだ役に立つと思います。</p>\n<p>最後に、もしあなたが Android 開発をしていて、Java の冗長さに嫌気がさしているなら、<a href=\"http://xamarin.com/csharp\"><strong>Xamarin へどうぞ</strong></a></p>\n",
      "date_published": "2014-03-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/03/19/android-memory-leaks-improvements/",
      "url": "https://blog.amay077.net/blog/2014/03/19/android-memory-leaks-improvements/",
      "title": "Activity がメモリリークしにくくなってる件",
      "content_html": "<p>2009年の情報なんですけどね。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://android-developers.blogspot.jp/2009/01/avoiding-memory-leaks.html\">Avoiding memory leaks ｜ Android Developers Blog</a></li>\n<li><a href=\"http://d.hatena.ne.jp/androidzaurus/20090121/1232519066\">Avoiding memory leaks （超訳） - Android Zaurusの日記</a></li>\n<li><a href=\"http://tomokey.blogspot.jp/2011/05/android.html\">暇なメモ帳: Androidのソースコードレビュー(メモリリーク)</a></li>\n</ul>\n<p>Android でメモリリークする典型的なパターンとして上で紹介されているものがあって、日頃はこうならないように気をつけて実装をしているわけです。</p>\n<p>また、メモリリークの調査方法もたくさん情報があります。</p>\n<ul>\n<li><a href=\"http://rainbowdevil.jp/?p=1187\">Androidでメモリリークの調査と、そのヒープダンプから画像を抽出する » RainbowDevilsLand</a></li>\n<li><a href=\"http://tlync.hateblo.jp/entry/20111220/1324372308\">富豪的 Android プログラマの為の Eclipse Memory Analyzer Tool 入門 - sandbox</a></li>\n</ul>\n<p>日頃、Xamarin.Android を触っているので、「Xamarin でも同じようにリークするよね」と思いやってみたところ全然リークしなかったので、もしや Android-Java でもリークしないんじゃ？と考え、試してみたのが以下の内容です。</p>\n<h2 id=\"%E8%A9%A6%E3%81%97%E3%81%9F\">試した <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%9F\">#</a></h2>\n<p>以下の2つのパターンについて試しました</p>\n<ol>\n<li>Avoiding memory leaks の 2番目の例。Activity への強参照を持った Drawable を static なメンバにキープしちゃう件。画面が回転した時に、Activity がリークしてしまう、とされる。</li>\n<li>暇なメモ帳さんの「問題3」＋α。非static な Inner クラスが Activity の強参照を持ってる、且つ、このオブジェクトを Activity の static メンバにしちゃう。</li>\n</ol>\n<h2 id=\"%E7%B5%90%E8%AB%96\">結論 <a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a></h2>\n<p>から言うと、</p>\n<p><strong>1. はリークせず、2. はリークしました。</strong></p>\n<p>あれれ？</p>\n<h2 id=\"%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B31%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\">パターン1のテストコード <a class=\"direct-link\" href=\"#%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B31%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p>ほぼ元コードのコピペだけど、クラスが破棄された(<code>finalize</code>)時にログ吐くようにしています。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Drawable</span> sBackground<span class=\"token punctuation\">;</span><br>    <br>\t<span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onCreate:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>        <span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Button</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        button<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Leaks are bad\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sBackground <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            sBackground <span class=\"token operator\">=</span> <span class=\"token function\">getResources</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDrawable</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>drawable<span class=\"token punctuation\">.</span>ic_launcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        button<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundDrawable</span><span class=\"token punctuation\">(</span>sBackground<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>\t<br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onDestroy:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"finalize:\"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E7%A2%BA%E8%AA%8D%E6%89%8B%E9%A0%86\">確認手順 <a class=\"direct-link\" href=\"#%E7%A2%BA%E8%AA%8D%E6%89%8B%E9%A0%86\">#</a></h3>\n<ol>\n<li>このアプリを実行。Android2.3 のエミュレータ(4.0 の実機でも試した)。</li>\n<li>画面を回転させる（Ctrl+F11）</li>\n<li>DDMS から GC を走らせる</li>\n<li>LogCat を収集</li>\n</ol>\n<p><img src=\"/img/posts/improve_activity_leaks_02.png\" alt=\"\"><br>\n<img src=\"/img/posts/improve_activity_leaks_03.png\" alt=\"\"></p>\n<p>Logcat の出力結果はこう。</p>\n<pre><code>03-19 21:28:09.539: D/MainActivity(382): onCreate:1079076320\n03-19 21:29:15.979: D/MainActivity(382): onDestroy:1079076320\n03-19 21:29:15.989: D/MainActivity(382): onCreate:1079106528 ←横画面のActivity\n03-19 21:29:33.939: D/MainActivity(382): finalize:1079076320\n</code></pre>\n<p>ちゃんと GC を走らせた後、 Activity の <code>finalize</code> が呼ばれています。<br>\nMAT でも確認したけど、リークは発見できませんでした。</p>\n<h2 id=\"%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B32%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\">パターン2のテストコード <a class=\"direct-link\" href=\"#%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B32%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p>こんな実装は早々お目にかからないと思うけど、非static な Inner クラスのインスタンスを、Activity の static メンバにしちゃうぞ、と。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"MainActivity\"</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">SomeInnerClass</span> innerClass<span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onCreate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>innerClass <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            innerClass <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SomeInnerClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"onDestroy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Throwable</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"finalize\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">finalize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">SomeInnerClass</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E7%A2%BA%E8%AA%8D%E6%89%8B%E9%A0%86-2\">確認手順 <a class=\"direct-link\" href=\"#%E7%A2%BA%E8%AA%8D%E6%89%8B%E9%A0%86-2\">#</a></h3>\n<p>パターン1と同じです。</p>\n<p>Logcat の出力結果はこちら。</p>\n<pre><code>03-19 21:42:55.289: D/MainActivity(476): onCreate\n03-19 21:43:05.369: D/MainActivity(476): onDestroy\n03-19 21:43:05.549: D/MainActivity(476): onCreate\n</code></pre>\n<p>ご覧のとおり、<code>finalize</code> が呼ばれない、つまり Activity がリークしています。</p>\n<h2 id=\"%E8%80%83%E5%AF%9F%E3%81%A3%E3%81%BD%E3%81%84%E3%81%AE\">考察っぽいの <a class=\"direct-link\" href=\"#%E8%80%83%E5%AF%9F%E3%81%A3%E3%81%BD%E3%81%84%E3%81%AE\">#</a></h2>\n<p>パターン2 がリークするのは当然と言えます。<br>\nActivity への強参照を持ったオブジェクトを、static フィールドで保持し続けてしまうので、Activity が破棄されない。</p>\n<p>パターン1 も同じ理屈だと思うのですが（少なくとも冒頭の記事の説明ではそう）。これがリークしないのは、Android SDK が改善された(例えば、今まで Activity の強参照を持ってたのが弱参照に変わった)とか、Dalvik の GC が改善されたとかでしょうか？</p>\n<p>まあ4年も経てば常識も変わるということで、Activity に関しては以前ほど神経質にならなくてもいいかもしれませんが、メモリリークの可能性が消えることは有り得ないので、このアンチパターンはこれからも遵守していかないといけませんね。</p>\n",
      "date_published": "2014-03-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/03/10/using-uialertview-objc-vs-xamarin/",
      "url": "https://blog.amay077.net/blog/2014/03/10/using-uialertview-objc-vs-xamarin/",
      "title": "iOS アプリでアラート出してボタンが押されるまで待つ？方法を Objective-C と Xamarin.iOS で比べてみた",
      "content_html": "<p>なんか割とニーズがあるみたいで。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://teapipin.blog10.fc2.com/blog-entry-224.html\">【Objective-C】アラート（UIAlertView）でボタンを押すまで次の処理を待つ方法 - creativi.tea</a></li>\n<li><a href=\"http://cocoadays.blogspot.jp/2011/05/ios.html\">Cocoaの日々: [iOS] 非同期処理を同期処理に変える</a></li>\n<li><a href=\"http://qiita.com/edo_m18/items/cb1d9061d91e572b58eb\">[Objective-C] UIAlertViewを同期処理する - Qiita </a></li>\n</ul>\n<h2 id=\"objective-c-%E3%81%AE%E5%A0%B4%E5%90%88\">Objective-C の場合 <a class=\"direct-link\" href=\"#objective-c-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p><code>UIAlertView</code> は、結果を受け取るのが deletgate で、 Objective-C では、(Blocks を使わなければ) 受け取りが別メソッドになってしまう、しかも複数のアラートの結果が同じメソッドに飛んでくるので、tag値で分岐…とかいろいろで、ホントに使うのが面倒ですね。</p>\n<p>さらに、「アラートの結果を受け取ってから、次の処理を行う」という処理を素直に記述したいと思うと、上で示したような「アラートを表示して、結果が得られるまで while で待つ」というなんとも不格好なコードになってしまいます。下にも書いてみました。（あ、メンバ変数も使わざるを得ないし。）</p>\n<pre><code>//HogeViewController.m\n@implementation HogeViewController {\n    NSInteger _buttonIndex;\n}\n\n- (IBAction)buttonTouchUp:(id)sender\n{\n    UIAlertView *alert = [[UIAlertView alloc] initWithTitle:nil\n                                message:NSLocalizedString(@&quot;なにか押して&quot;,@&quot;&quot;)\n                               delegate:self\n                      cancelButtonTitle:@&quot;Cancel&quot;\n                      otherButtonTitles:@&quot;OK&quot;, nil];\n    [alert show];\n    \n    // ボタンが押されるまで待つ\n    _buttonIndex = -1;\n    while (_buttonIndex == -1) {\n        [[NSRunLoop currentRunLoop]\n         runUntilDate:[NSDate dateWithTimeIntervalSinceNow:0.5f]]; // 0.5秒\n    }\n    \n    label1.text = [NSString stringWithFormat:@&quot;%d 番目のボタンを押したね&quot;, (int)_buttonIndex];\n}\n\n-(void)alertView:(UIAlertView*)alertView clickedButtonAtIndex:(NSInteger)buttonIndex\n{\n\t_buttonIndex = buttonIndex;\n}\n</code></pre>\n<p><code>[NSRunLoop runUntilDate]</code> なんて VB6 の <code>DoEvents</code> ですもんねなつかしい。</p>\n<h2 id=\"xamarin.ios(c%23)-%E3%81%AE%E5%A0%B4%E5%90%88\">Xamarin.iOS(C#) の場合 <a class=\"direct-link\" href=\"#xamarin.ios(c%23)-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>Objective-C ではややこしかった「アラートを出す→ボタンを押す→次の処理へ」という流れ、 Xamarin.iOS と C# ならこんなにシンプルに書けます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnButtonTouch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> buttonIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">MsgBox</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"なにか押して\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Cancel\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> buttonIndex<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"番目を押したね\"</span><span class=\"token punctuation\">;</span>  <br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">MsgBox</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> title<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> message<span class=\"token punctuation\">,</span> <br>    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> cancelButtonTitle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> buttons<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> comp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TaskCompletionSource<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> alert <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIAlertView</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> cancelButtonTitle<span class=\"token punctuation\">,</span> buttons<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    alert<span class=\"token punctuation\">.</span>Clicked <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> comp<span class=\"token punctuation\">.</span><span class=\"token function\">TrySetResult</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>ButtonIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    alert<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token keyword\">return</span> comp<span class=\"token punctuation\">.</span>Task<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>VB6 が懐かしくて <code>MsgBox</code> ってメソッドにしちゃいましたよ。</p>\n<p><code>MsgBox</code> は、Task を返す <strong>非同期な</strong> メソッドです。この非同期処理が終了するのは、<code>TaskCompletionSource.TrySetResult</code> が呼び出された時、つまりアラートのボタンが押された時です。この非同期処理の戻り値はもちろん押したボタンのインデックスです。</p>\n<p>非同期メソッドである <code>MsgBox</code> を呼び出す側には、キーワード <code>await</code> が付いています。<br>\nこれをつけると、次行以降の処理は、非同期の MsgBox が完了した後、順次実行されます、つまり待っているわけではなく、どちらかというと、 <strong>処理を後続に付け足す</strong> 感じ。<br>\nさらに、この後続処理はUIスレッドで実行されるので、UIパーツへのアクセスも問題ありません。</p>\n<p><code>async</code> はメソッド内で <code>await</code> を使うときにつけるお約束。</p>\n<p>async/await は一見、ただの同期処理に見えるので理解して使う必要がありますが、Objective-C のコードに比べて、とても簡潔に、流れるように書くことができるのが分かると思います。</p>\n<p><strong>C# の非常に強力な言語機能は、<a href=\"https://xamarin.com/\">Xamarin</a> を選択する大きな理由の一つです。</strong></p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4613071/messagebox-show-and-dialogresult-equivalent-in-monotouch\">c# - Messagebox.Show and DialogResult equivalent in MonoTouch - Stack Overflow</a></li>\n<li><a href=\"http://ufcpp.wordpress.com/2012/11/12/asyncawait%e3%81%a8%e5%90%8c%e6%99%82%e5%ae%9f%e8%a1%8c%e5%88%b6%e5%be%a1/\">async/awaitと同時実行制御 ｜ ++C++; // 未確認飛行 C ブログ</a></li>\n<li><a href=\"http://www.slideshare.net/bleistift/asyncawait2\">async/await不要論</a></li>\n</ul>\n",
      "date_published": "2014-03-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/02/27/using-reactiveui-on-xamarin-ios/",
      "url": "https://blog.amay077.net/blog/2014/02/27/using-reactiveui-on-xamarin-ios/",
      "title": "MVVMフレームワーク「ReactiveUI」を Xamarin.iOS で使ってみる",
      "content_html": "<p>ReactiveUI は、Reactive Extensions を全面的に取り入れた クロスプラットフォームな MVVMフレームワークです。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://www.reactiveui.net/\">ReactiveUI</a></li>\n</ul>\n<p>作者は GitHub の中の人 <a href=\"http://twitter.com/xpaulbettsx\">Paul Betts</a> 氏、<a href=\"http://xamarin.com/mvp\">Xamarin の MVP</a> でもあります。</p>\n<p>元々は WPF, Silverlight, WinRT, Windows Phone に対応していましたが、Xamarin.iOS や Xamarin.Android, Xamarin.Mac にも <a href=\"http://blog.paulbetts.org/index.php/2013/03/12/reactiveui-4-5-is-released/\">対応が進んで来た</a> ので、使ってみる事にしました。</p>\n<p>Visual Studio + WPF 等なら、nuget から取得できて楽なんでしょうけども、なにせ Mac なので、Xamarin Studio のみでいきます。</p>\n<h2 id=\"%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">とりあえず使ってみる <a class=\"direct-link\" href=\"#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>Github が公開した <a href=\"http://log.paulbetts.org/open-source-githubs-xamarin-starter-apps/\">GitHub's Xamarin starter apps</a>, これに ReactiveUI も含まれているので、こちらを Clone して Xamarin Studio で開いてビルド、すぐ動きます。</p>\n<p><img src=\"/img/posts/using_reactiveui_01.png\" alt=\"\"></p>\n<p>これ、ViewModel側で UUID を生成して、View側の Label にバインドしているのですが、何ともシンプル過ぎて…。</p>\n<p>それでもこのフレームワークの構成を知るには十分です。</p>\n<h2 id=\"reactiveui-%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE\">ReactiveUI に必要なもの <a class=\"direct-link\" href=\"#reactiveui-%E3%81%AB%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%82%E3%81%AE\">#</a></h2>\n<p>ソリューションツリーを見ると次の4つのプロジェクトがあります。</p>\n<ul>\n<li>Starter-Core-Android</li>\n<li>Starter-Core-iOS</li>\n<li>Starter-Android</li>\n<li>Starter-iOS</li>\n</ul>\n<h3 id=\"viewmodel-model%E5%B1%A4\">ViewModel-Model層 <a class=\"direct-link\" href=\"#viewmodel-model%E5%B1%A4\">#</a></h3>\n<p>Starter-Core-xxx は、ディレクトリ的には同じ場所にあり、Android用とiOS用のプロジェクトファイル(.csproj)が用意してあるだけです。ここはアプリケーションの ViewModel-Model層になります。PCL化はされていないようですね(その内、とサイトに書いてありました)。</p>\n<p>サンプルで用意されてる ViewModel を見てみます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">ReactiveUI</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>Serialization</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Starter<span class=\"token punctuation\">.</span>Core<span class=\"token punctuation\">.</span>ViewModels</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataContract</span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ReactiveObject</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _TheGuid<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataMember</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> TheGuid <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _TheGuid<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">RaiseAndSetIfChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _TheGuid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">TestViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            TheGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>MvvmCross とか、他の MVVM-FW とだいたい同じですね(そりゃそうだ)。<br>\n基底クラスの <code>ReactiveObject</code> が、BaseViewModel的な役割をします。(が、Reactive を冠しているだけに、随所で Rx の力が発揮される、はずです←まだ分かってない)</p>\n<p>このコードでは、TestViewModel の生成と同時に、Guid を生成して、<code>TheGuid</code> プロパティに設定しています。</p>\n<h3 id=\"view%E5%B1%A4\">View層 <a class=\"direct-link\" href=\"#view%E5%B1%A4\">#</a></h3>\n<p>Starter-Android, Starter-iOS はそれぞれの View層になります。</p>\n<p>Starter-iOS の TestViewController.cs を見てみます。</p>\n<p><strong>TestViewController.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Starter<span class=\"token punctuation\">.</span>Views</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ReactiveViewController</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IViewFor<span class=\"token punctuation\">&lt;</span>TestViewModel<span class=\"token punctuation\">></span></span></span><br>    <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token punctuation\">[</span>省略<span class=\"token punctuation\">]</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OneWayBind</span><span class=\"token punctuation\">(</span>ViewModel<span class=\"token punctuation\">,</span> vm <span class=\"token operator\">=></span> vm<span class=\"token punctuation\">.</span>TheGuid<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>TheGuid<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> BlobCache<span class=\"token punctuation\">.</span>LocalMachine<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestViewModel\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TestViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token class-name\">TestViewModel</span> _ViewModel<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">TestViewModel</span> ViewModel <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _ViewModel<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">RaiseAndSetIfChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _ViewModel<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token punctuation\">[</span>省略<span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>UIViewController</code> ではなく <code>ReactiveViewController</code> から派生させてます。この辺もよくあるやり方。<code>IViewFor</code> は、今はスルーで。</p>\n<p>バインドは <code>this.OneWayBind</code> で。<br>\nViewModel の TheGuid プロパティを、View の TheGuidラベルの Text プロパティへ単方向(OneWay)バインドしてます。</p>\n<p>TestViewModel の生成は、ここでは Akavache というストレージライブラリの生成を待ってから行っていますが、Akavache を使わない場合は普通に <code>this.ViewModel = new TestViewModel()</code> で OK でしょう。</p>\n<p>これで、TestViewModelの生成 → Guidの生成 → vm.TheGuidプロパティへ設定 → vm より TheGuid の変更が通知される → View側のBindingが変更を検知 → Viewのラベルを書き換える、という流れになります。</p>\n<h2 id=\"%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E6%8B%A1%E5%BC%B5%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">ちょっと拡張してみる <a class=\"direct-link\" href=\"#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E6%8B%A1%E5%BC%B5%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<h3 id=\"%E5%8F%8C%E6%96%B9%E5%90%91%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0\">双方向バインディング <a class=\"direct-link\" href=\"#%E5%8F%8C%E6%96%B9%E5%90%91%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0\">#</a></h3>\n<p>ViewModel→View だけでなく、View→ViewModel もやってみましょう。</p>\n<p>まず TestViewModel にプロパティを追加します。<br>\nプロパティは <code>MyName</code> とします。<br>\n初期値として &quot;Enter your name&quot; とでも設定しましょうか。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Starter<span class=\"token punctuation\">.</span>Core<span class=\"token punctuation\">.</span>ViewModels</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataContract</span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ReactiveObject</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _TheGuid<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataMember</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> TheGuid <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _TheGuid<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">RaiseAndSetIfChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _TheGuid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _myName<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataMember</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> MyName <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _myName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">RaiseAndSetIfChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> _myName<span class=\"token punctuation\">,</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">TestViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            TheGuid <span class=\"token operator\">=</span> Guid<span class=\"token punctuation\">.</span><span class=\"token function\">NewGuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>MyName <span class=\"token operator\">=</span> <span class=\"token string\">\"Enter your name\"</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に Interface Builder で TestViewController に、UITextField と UILabel を追加し、Outlet を &quot;MyText&quot;, &quot;MyLabel&quot; とします。これで Xamarin.iOS から <code>MyText</code>, <code>MyLabel</code> でインスタンスにアクセスできるはず、ですよね。</p>\n<p><code>MyText</code>, <code>MyLabel</code> に、vm.MyName をバインドします。</p>\n<p><strong>TestViewController.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Starter<span class=\"token punctuation\">.</span>Views</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ReactiveViewController</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IViewFor<span class=\"token punctuation\">&lt;</span>TestViewModel<span class=\"token punctuation\">></span></span></span><br>    <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token punctuation\">[</span>省略<span class=\"token punctuation\">]</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OneWayBind</span><span class=\"token punctuation\">(</span>ViewModel<span class=\"token punctuation\">,</span> vm <span class=\"token operator\">=></span> vm<span class=\"token punctuation\">.</span>TheGuid<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>TheGuid<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>ViewModel<span class=\"token punctuation\">,</span> vm<span class=\"token operator\">=></span> vm<span class=\"token punctuation\">.</span>MyName<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>MyText<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">OneWayBind</span><span class=\"token punctuation\">(</span>ViewModel<span class=\"token punctuation\">,</span> vm <span class=\"token operator\">=></span> vm<span class=\"token punctuation\">.</span>MyName<span class=\"token punctuation\">,</span> v <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>MyLabel<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            ViewModel <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> BlobCache<span class=\"token punctuation\">.</span>LocalMachine<span class=\"token punctuation\">.</span><span class=\"token function\">GetOrCreateObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"TestViewModel\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TestViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token punctuation\">[</span>省略<span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>編集できる <code>MyText</code> は <code>this.Bind</code> を使って双方向バインドします。プロパティの値を表示するだけの <code>MyLabel</code> は、 <code>this.OneWayBind</code> で。</p>\n<p>これで動かしてみます。</p>\n<p><img src=\"/img/posts/using_reactiveui_02.gif\" alt=\"\"></p>\n<p>UITextField への入力が、vm.MyName へ適用され、その変更を MyLabel に表示させる、という流れです。</p>\n<p>今日はこの辺で。まだ全然 Reactive じゃないですが、次回以降、Command の実装やバインディングについて試してみようと思います。</p>\n<p>ここまでのコードは、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/starter-mobile/tree/N_plus_1\">https://github.com/amay077/starter-mobile/tree/N_plus_1</a></li>\n</ul>\n<p>に置いておきます。徐々に進化させていこうと思います。</p>\n",
      "date_published": "2014-02-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/02/27/slides-from-my-xamarin-introduction/",
      "url": "https://blog.amay077.net/blog/2014/02/27/slides-from-my-xamarin-introduction/",
      "title": "Xamarin によるクロスプラットフォームモバイルアプリ開発、資料と補足",
      "content_html": "<p>2/26 の <a href=\"http://atnd.org/events/47898\">うずらインキュベータ</a> という勉強会で、Xamarin の話をしました。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://www.slideshare.net/slideshow/embed_code/31674661\">Xamarin によるクロスプラットフォームモバイルアプリ開発</a></li>\n</ul>\n<p>45分という長い時間話すのは勉強会では初めてだったのですが、なんとか説明し切ることができました。（ちょっとデモが中途半端になってしまいましたが）</p>\n<p>資料は <a href=\"http://qiita.com/tags/xamarin\">Qiita に書いてきた</a> 内容のまとめみたいなものですが、少し補足します。</p>\n<h2 id=\"xamarin-%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E7%B5%8C%E9%A8%93%E3%81%82%E3%82%8B%E3%81%AE%EF%BC%9F\">Xamarin で作った経験あるの？ <a class=\"direct-link\" href=\"#xamarin-%E3%81%A7%E4%BD%9C%E3%81%A3%E3%81%9F%E7%B5%8C%E9%A8%93%E3%81%82%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h2>\n<p>仕事では、まだ無いです（^_^;）<br>\n個人アプリでは「<a href=\"https://itunes.apple.com/us/app/fu-shifoto/id806913229\">富士フォト</a>」というのを iOS 用は Xamarin.iOS で作りました。<a href=\"https://play.google.com/store/apps/details?id=com.amay077.android.fujiphoto\">Android</a> は Java ですが Xamarin 化したいな。</p>\n<h2 id=\"win%2Bvisual-studio-%E3%81%A7%E3%81%AF%E3%83%80%E3%83%A1%E3%81%AA%E3%81%AE%EF%BC%9F\">Win+Visual Studio ではダメなの？ <a class=\"direct-link\" href=\"#win%2Bvisual-studio-%E3%81%A7%E3%81%AF%E3%83%80%E3%83%A1%E3%81%AA%E3%81%AE%EF%BC%9F\">#</a></h2>\n<p>個人の見解ですから（^_^;）<br>\n私も元々は Windowsの開発がメインで Visual Studio の強力さは知っていますが、iOS やるならどういう形にせよ Mac+Xcode を扱わないといけないので、慣れておいた方がよいかなと。</p>\n<p>また、Microsoft との提携以降、Microsoft のエバンジェリストさんや MVP の方々が Visual Studio + Xamarin の話をものすごく展開されているので、そちらにお任せした次第です。</p>\n<h2 id=\"%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E3%81%A8%E3%81%93\">実行モデルのとこ <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB%E3%81%AE%E3%81%A8%E3%81%93\">#</a></h2>\n<p>JavaSE が .NET に置き換わる図になっていますが、実際には少し違っていて、JavaSE のラッパもあります。例えば文字列型には、<code>System.String</code> と <code>Java.Lang.String</code> があります。当然、理由がなければ前者を使った方がよいわけですが。</p>\n<p>iOS のスタックに関しては、実はどこからどこまでが「CocoaTouch」なのかよく分かってません。</p>\n<h2 id=\"%E4%BB%96%E3%81%AE%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\">他のクロスプラットフォーム開発ツールとの比較 <a class=\"direct-link\" href=\"#%E4%BB%96%E3%81%AE%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA%E3%83%84%E3%83%BC%E3%83%AB%E3%81%A8%E3%81%AE%E6%AF%94%E8%BC%83\">#</a></h2>\n<p>Titanium, AIR については2年くらい前に少し触ったことがあります。PhoneGap と DelphiXE についてはスペックを見て＆詳しい方からの情報を元にしてます。</p>\n<p>Titanium は次期 <a href=\"http://titanium-mobile.jp/38\">Ti.Next</a> では JavaScriptCore を使ってすんごく速くなるそうですし、AIR も当時よりだいぶ <a href=\"http://www.slideshare.net/pik256/dev-sumi2014-13c4rev\">高速になったらしい</a> です。</p>\n<h2 id=\"c%23-%E3%81%AE%E3%81%A8%E3%81%93\">C# のとこ <a class=\"direct-link\" href=\"#c%23-%E3%81%AE%E3%81%A8%E3%81%93\">#</a></h2>\n<p><a href=\"https://xamarin.com/csharp\">https://xamarin.com/csharp</a> よりは悪意のないコードかとｗ<br>\n（Objective-C と比較しようとすると Obj-C の方が画面に入らないので Java との比較にしました。）</p>\n<p>こんなところで。<br>\n何かおかしなところがあったらコメント頂けるとありがたいです。</p>\n",
      "date_published": "2014-02-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/02/27/make-shoddy-colorpicker/",
      "url": "https://blog.amay077.net/blog/2014/02/27/make-shoddy-colorpicker/",
      "title": "手抜きカラー選択ダイアログを作る",
      "content_html": "<p>Android で「定められた色リストから１つ選択する」ダイアログを作ります。</p>\n<!--more-->\n<h2 id=\"%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F%E3%82%B3%E3%83%BC%E3%83%89\">さっそくコード <a class=\"direct-link\" href=\"#%E3%81%95%E3%81%A3%E3%81%9D%E3%81%8F%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p><code>AlertDialog</code> には自作の <code>Adapter</code> が設定できるので、「項目値を背景色にする Adapter」を作って設定すれば OK でした。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> _colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 色リスト</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> ID_COLOR_PICKER <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// 背景に色リストを適用する ListAdapter</span><br>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorListAdapter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">ArrayAdapter</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ColorListAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> colors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token namespace\">android<span class=\"token punctuation\">.</span></span>R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>simple_list_item_1<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">View</span> <span class=\"token function\">getView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> convertView<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewGroup</span> parent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">TextView</span> view <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">getView</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> convertView<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tview<span class=\"token punctuation\">.</span><span class=\"token function\">setBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tview<span class=\"token punctuation\">.</span><span class=\"token function\">setTextColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>TRANSPARENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 色値が表示されないように隠す</span><br>\t\t\t<span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token function\">showDialog</span><span class=\"token punctuation\">(</span>ID_COLOR_PICKER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ダメよ直接 Dialog.show() しちゃ</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Dialog</span> <span class=\"token function\">onCreateDialog</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">case</span> ID_COLOR_PICKER<span class=\"token operator\">:</span><br>\t    \t<span class=\"token class-name\">ColorListAdapter</span> adapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ColorListAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> _colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t    \t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AlertDialog<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><br>\t\t    \t<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select color\"</span><span class=\"token punctuation\">)</span><br>\t\t    \t<span class=\"token punctuation\">.</span><span class=\"token function\">setAdapter</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DialogInterface<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DialogInterface</span> dialog<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t    \t        <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <br>\t\t    \t        \t\t<span class=\"token string\">\"You picked index=\"</span> <span class=\"token operator\">+</span> which<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreateDialog</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>キャストしてるところがちょっと不安ですけど、まあいいでしょう。</p>\n<h2 id=\"%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">動かしてみる <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>こんな感じです。だいぶ味気ないけど、要件は満たします。</p>\n<p><img src=\"/img/posts/making_shoddy_color_picking_dialog_01.png\" alt=\"\"></p>\n<h2 id=\"xamarin-%E3%81%A7%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">Xamarin でも作ってみる <a class=\"direct-link\" href=\"#xamarin-%E3%81%A7%E3%82%82%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>本題とまったく関係ありませんが、同じものを Xamarin.Android で作ると、こうなります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"ColorPickerSample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Color<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> Color<span class=\"token punctuation\">.</span>Red<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">,</span> Color<span class=\"token punctuation\">.</span>Green <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ID_COLOR_PICKER <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">ColorListAdapter</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">ArrayAdapter<span class=\"token punctuation\">&lt;</span>Color<span class=\"token punctuation\">></span></span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">ColorListAdapter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> colors<span class=\"token punctuation\">)</span> <br>            <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> Android<span class=\"token punctuation\">.</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>SimpleListItem1<span class=\"token punctuation\">,</span> colors<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">View</span> <span class=\"token function\">GetView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> position<span class=\"token punctuation\">,</span> <span class=\"token class-name\">View</span> convertView<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ViewGroup</span> parent<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> view <span class=\"token operator\">=</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetView</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">,</span> convertView<span class=\"token punctuation\">,</span> parent<span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><br>            view<span class=\"token punctuation\">.</span><span class=\"token function\">SetBackgroundColor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token function\">GetItem</span><span class=\"token punctuation\">(</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            view<span class=\"token punctuation\">.</span><span class=\"token function\">SetTextColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>Transparent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 色値が表示されないように隠す</span><br>            <span class=\"token keyword\">return</span> view<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">ShowDialog</span><span class=\"token punctuation\">(</span>ID_COLOR_PICKER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Dialog</span> <span class=\"token function\">OnCreateDialog</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> id<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">case</span> ID_COLOR_PICKER<span class=\"token punctuation\">:</span><br>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> adapter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ColorListAdapter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> _colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AlertDialog<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token punctuation\">.</span><span class=\"token function\">SetTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Select color\"</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token punctuation\">.</span><span class=\"token function\">SetAdapter</span><span class=\"token punctuation\">(</span>adapter<span class=\"token punctuation\">,</span> <br>                        <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Toast<span class=\"token punctuation\">.</span><span class=\"token function\">MakeText</span><span class=\"token punctuation\">(</span><br>                            <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"You picked index=\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>Which<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>                            ToastLength<span class=\"token punctuation\">.</span>Long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token punctuation\">.</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span><br>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreateDialog</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Android API は同じなのでほとんど同じ、言語仕様の特性で少しコンパクトになりますかね。</p>\n<p>では、また。</p>\n",
      "date_published": "2014-02-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/02/11/introduce-quickcross/",
      "url": "https://blog.amay077.net/blog/2014/02/11/introduce-quickcross/",
      "title": "MvvmCross だけじゃない！クロスプラットフォームMVVMフレームワーク「QuickCross」を試す",
      "content_html": "<p><a href=\"http://amay077.github.io/blog/2013/12/25/using-mvvmcross-the-x-platform-mvvm-framework/\">以前、MvvmCross を紹介しました</a> が、Xamarin で使える同種のフレームワークはまだいくつかあります。</p>\n<!--more-->\n<p>今回は、その中の一つ、「QuickCross」を見てみます</p>\n<ul>\n<li><a href=\"https://github.com/MacawNL/QuickCross\">MacawNL/QuickCross</a></li>\n</ul>\n<h2 id=\"%E3%81%AA%E3%81%9C%E4%BB%96%E3%81%AEmvvm%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B%EF%BC%9F\">なぜ他のMVVMフレームワークが必要なのか？ <a class=\"direct-link\" href=\"#%E3%81%AA%E3%81%9C%E4%BB%96%E3%81%AEmvvm%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%8C%E5%BF%85%E8%A6%81%E3%81%AA%E3%81%AE%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p><a href=\"https://github.com/MacawNL/QuickCross#why-another-cross-platform-mvvm-framework\">Why another cross-platform Mvvm framework?</a> にて、MvvmCross があるのになぜ？という事を説明しています。</p>\n<p>要約すると、MvvmCross は、高機能だが Fat で複雑で、拡張が大変であるのに対し、QuickCross は、軽量で生産性が高く、拡張が簡単である、との事です。</p>\n<h2 id=\"%E4%B8%BB%E3%81%AA%E6%A9%9F%E8%83%BD\">主な機能 <a class=\"direct-link\" href=\"#%E4%B8%BB%E3%81%AA%E6%A9%9F%E8%83%BD\">#</a></h2>\n<p><a href=\"https://github.com/MacawNL/QuickCross#features\">Features</a> より。</p>\n<ul>\n<li>Xamarin.iOS, Xamarin.Android, Windows Phone, Windows Store Apps に対応。</li>\n<li>バイナリは使ってない！Snippet と、プロジェクトにソースコードの追加を行うだけです。</li>\n<li>ViewModel や View の追加は package manager console からコマンドを実行して行います。</li>\n<li>いくつかのコードスニペットを提供します。</li>\n<li>以下略…</li>\n</ul>\n<h2 id=\"%E4%BB%95%E7%B5%84%E3%81%BF\">仕組み <a class=\"direct-link\" href=\"#%E4%BB%95%E7%B5%84%E3%81%BF\">#</a></h2>\n<p><img src=\"https://raw.github.com/MacawNL/QuickCross/master/assets/quickcross_pattern.png\" alt=\"\"><br>\nvia <a href=\"https://github.com/MacawNL/QuickCross#features\">https://github.com/MacawNL/QuickCross#features</a></p>\n<p>Navigator って概念があるのが MvvmCross と違うとこですかね。</p>\n<h2 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h2>\n<p><a href=\"https://github.com/MacawNL/QuickCross#getting-started\">Getting Started</a> を見てください。</p>\n<p>Nuget の Package manager console を使う必要があるので、Mac と Xamarin Studio 、そして Indie Edition では試せません、残念。<br>\nVisual Studio ＋ Xamarin Business Edition以上を使ってる方、試してみてください。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F\">サンプルを動かしてみた <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<p>Getting Started は試せませんでしたが、github に含まれるサンプルは Mac + Xamarin Studio でも動かせました。</p>\n<p><a href=\"https://github.com/MacawNL/QuickCross/blob/master/QuickCross.ios.sln\">QuickCross.ios.sln</a> を Xamarin Studio で開いて実行したところ↓</p>\n<p><img src=\"/img/posts/introduce_quickcross_01.png\" alt=\"\"></p>\n<p>MvvmCross と同じく、ViewModel などは Shared プロジェクトの方にあります。<br>\nShared プロジェクトは PCL にできるんじゃないかなーと思いやってみましたが、</p>\n<ul>\n<li>Profile147(.NET4.0) では <code>System.Windows.Input.ICommand</code> が無いと言われ</li>\n<li>Profile78(.NET4.5) では、この<a href=\"https://bugzilla.xamarin.com/show_bug.cgi?id=17247\">バグ</a> にエンカウント</li>\n</ul>\n<p>してビルドできませんでした、残念。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>MvvmCross は確かに大規模すぎて使うのが大変です。拡張するには Plugin を自作する事になりますし。<br>\nQuickCross は、すべてのソースコードがプロジェクトにあるので、カスタマイズが手軽に行えそうだというのは分かりました。</p>\n<p>Xamarin Starter Edition の場合、64kbyte までのバイナリ制限があるので、MvvmCross は使えませんが、QuickCross なら使えるかも知れません。</p>\n<p>ただ残念なのは、Nuget の Package Manager Console を使う必要があるために、Visual Studio が必要で、その為には Xamarin も Business Edition 以上が必要になってしまう所です。</p>\n<p>Xamarin Studio のみでも使えるくらい Lightweight だったら、もっと試してみたくなるフレームワークです。</p>\n",
      "date_published": "2014-02-11T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/29/displaying-view-lifecycle-comparison-ios-android/",
      "url": "https://blog.amay077.net/blog/2014/01/29/displaying-view-lifecycle-comparison-ios-android/",
      "title": "iOS と Android で画面表示時のコールバックを比較する",
      "content_html": "<p>モバイル開発における画面のライフサイクル、重要ですね。<br>\niOS と Android で「ざっくりとは同じでしょ？」などと思っていましたが、調べてみたら結構違ってました。</p>\n<!--more-->\n<p>と言うのも、こちら</p>\n<ul>\n<li><a href=\"http://blog.jarinosuke.com/entry/uiviewcontroller_view_coding_pattern\">メモリ管理・レイアウトの観点からみた UIViewController の view の扱い - jarinosuke blog</a></li>\n</ul>\n<p>のエントリが大変参考になったので、「Android と比べるとどうか？」と興味が沸いたのです。</p>\n<h2 id=\"%E7%94%BB%E9%9D%A2%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E6%99%82\">画面が表示される時 <a class=\"direct-link\" href=\"#%E7%94%BB%E9%9D%A2%E3%81%8C%E8%A1%A8%E7%A4%BA%E3%81%95%E3%82%8C%E3%82%8B%E6%99%82\">#</a></h2>\n<p>iOS/Android の <code>UIViewController</code>, <code>Activity</code> に備わってるコールバックの、画面表示時での発生順をそれぞれ調べて発生順に並べてみました。同じような意味のコールバックは横に並べて書きました。</p>\n<table>\n<thead>\n<tr>\n<th>順番</th>\n<th>イベント</th>\n<th>iOS(UIViewController)</th>\n<th>Android(Activity)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>クラスが生成された時</td>\n<td>init</td>\n<td>ctor(コンストラクタ)</td>\n</tr>\n<tr>\n<td>2</td>\n<td>画面がロードされる前</td>\n<td>loadView</td>\n<td>onCreate</td>\n</tr>\n<tr>\n<td>3</td>\n<td>(画面が再度開始される前)</td>\n<td></td>\n<td>onRestart ※停止状態(onStop)から復帰する時のみ</td>\n</tr>\n<tr>\n<td>4</td>\n<td>画面が開始される前</td>\n<td></td>\n<td>onStart</td>\n</tr>\n<tr>\n<td>5</td>\n<td>画面がロードされた後</td>\n<td>viewDidLoad</td>\n<td>onPostCreate</td>\n</tr>\n<tr>\n<td>6</td>\n<td>画面が表示され始める前</td>\n<td></td>\n<td>onResume ※一時停止(Pause)からの復帰はここから</td>\n</tr>\n<tr>\n<td>7</td>\n<td>画面が表示され始めた後</td>\n<td></td>\n<td>onPostResume</td>\n</tr>\n<tr>\n<td>8</td>\n<td>UIの配置が行われる前</td>\n<td>viewWillLayoutSubviews</td>\n<td></td>\n</tr>\n<tr>\n<td>9</td>\n<td>UIの配置が行われた後</td>\n<td>viewDidLayoutSubviews</td>\n<td></td>\n</tr>\n<tr>\n<td>10</td>\n<td>画面が表示される直前</td>\n<td>viewWillAppear</td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>画面が表示された直後</td>\n<td>viewDidAppear</td>\n<td></td>\n</tr>\n<tr>\n<td>12</td>\n<td>画面にフォーカスが移った直後</td>\n<td></td>\n<td>onWindowFocusChanged(true) ※表示される度に呼ばれる</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"oncreate-%E3%81%AF%E7%94%9F%E6%88%90%E5%89%8D%EF%BC%9F%E5%BE%8C%EF%BC%9F\">onCreate は生成前？後？ <a class=\"direct-link\" href=\"#oncreate-%E3%81%AF%E7%94%9F%E6%88%90%E5%89%8D%EF%BC%9F%E5%BE%8C%EF%BC%9F\">#</a></h3>\n<p>iOS というか CocoaTouch の命名文化って、will とか did とか、時系列が明確に分かるものが多いので良いですね。<br>\nそれに比べて Android は…。 onCreate は前？後？ onPostCreate があるので「前」ですね。</p>\n<h3 id=\"ui%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AF%E3%81%84%E3%81%A4%E6%B1%BA%E3%81%BE%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%9F\">UIパーツのサイズはいつ決まるのか？ <a class=\"direct-link\" href=\"#ui%E3%83%91%E3%83%BC%E3%83%84%E3%81%AE%E3%82%B5%E3%82%A4%E3%82%BA%E3%81%AF%E3%81%84%E3%81%A4%E6%B1%BA%E3%81%BE%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%9F\">#</a></h3>\n<p>iOS の方は 9. <code>viewDidLayoutSubviews</code> の時です。<br>\n冒頭で紹介したエントリにも以下のように書かれています。</p>\n<blockquote>\n<p>self.view の subviews.frame の調整、すなわちレイアウト処理は全てここで記述するべきです。</p>\n</blockquote>\n<p>Android の方は問題です。<br>\n<code>Button</code> などの生成は <code>onCreate</code> で行うのが一般的ですが、この時点では、まだレイアウトされていません。なので大抵の場合 <code>button1.Height = 0</code> です。<br>\nでは、いつのタイミングで <code>button1.Height</code> に適切な値が格納されるかと言うと…、 12. <code>onWindowFocusChanged(true)</code> まで待たないといけません。しかもこのコールバックは、Focus が変わる度に呼ばれるので、「最初の１回」だけを取得しようと思ったら別のフラグが必要になります、あーめんどい。</p>\n<p>続きは</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4393612/when-can-i-first-measure-a-view\">android - When Can I First Measure a View? - Stack Overflow</a></li>\n</ul>\n<p>で。私は <code>View.post</code> する方法が一番簡単だと思いました。</p>\n<h3 id=\"onresume%2Fonpostresume-%E3%81%AE%E5%91%BD%E5%90%8D%E3%81%8C...\">onResume/onPostResume の命名が... <a class=\"direct-link\" href=\"#onresume%2Fonpostresume-%E3%81%AE%E5%91%BD%E5%90%8D%E3%81%8C...\">#</a></h3>\n<p>「画面が表示され始める前/画面が表示され始めた後」なんて無理やりな名前を付けてしまいました。<br>\n特に <code>onPostResume</code> は無理がありすぎ。<br>\n名前からは <code>viewDidAppear</code> に相当するとも捉えられますが、まだこの時点ではレイアウトが完了していないという、中途半端なタイミングです。何のために使えば良いのでしょう？</p>\n<h3 id=\"%E5%9B%9E%E8%BB%A2%E3%81%97%E3%81%9F%E3%82%89%E3%81%A9%E3%81%86%E3%81%AA%E3%82%8B%E3%81%AE%EF%BC%9F\">回転したらどうなるの？ <a class=\"direct-link\" href=\"#%E5%9B%9E%E8%BB%A2%E3%81%97%E3%81%9F%E3%82%89%E3%81%A9%E3%81%86%E3%81%AA%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h3>\n<p>iOS の場合は、8.<code>viewWillLayoutSubviews</code> からやり直しです。つまり、ここに適切に縦横対応のレイアウト処理を記述しておけば、<code>didRotateFromInterfaceOrientation</code>など、他のコールバックでの処理は通常必要ないと思います。</p>\n<p>Android の場合は、AndroidManifest.xml への設定なしだと、なんと 1.コンストラクタ からやりなおしです。とその前に当然 <code>onDestroy</code> や <code>OnSaveInstanceState</code> が呼ばれるわけですが、、、それはまた別の機会に。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A3%E3%81%BD%E3%81%84%E3%82%82%E3%81%AE\">まとめっぽいもの <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A3%E3%81%BD%E3%81%84%E3%82%82%E3%81%AE\">#</a></h2>\n<p>iOS プログラミングでは今まで <code>viewDidLoad</code> で、UIパーツを生成してレイアウト処理してるプログラムが多いように思いますが、それは間違いで、「loadView で生成して、viewDidLayoutSubviews でレイアウト」とするのが最も効率的なようです。</p>\n<p>Android でも、onCreate でレイアウト処理するとハマることがありそうです(<a href=\"http://qiita.com/amay077/items/070ac1db6b52dd03505f\">実際ありました</a>)。ちょっと注意しといた方がよさそうです。</p>\n<p>「画面が破棄される時」「メモリが足りなくなった時」「回転した時」とか、書くこと沢山あるんですけど、ありすぎてもうダメです。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<h3 id=\"ios\">iOS <a class=\"direct-link\" href=\"#ios\">#</a></h3>\n<ul>\n<li><a href=\"https://developer.apple.com/library/ios/Documentation/UIKit/Reference/UIViewController_Class/Reference/Reference.html#//apple_ref/occ/instm/UIViewController\">UIViewController Class Reference</a></li>\n<li><a href=\"http://blog.jarinosuke.com/entry/uiviewcontroller_view_coding_pattern\">メモリ管理・レイアウトの観点からみた UIViewController の view の扱い - jarinosuke blog</a></li>\n<li><a href=\"https://gist.github.com/shinyaohira/6482235\">iOS View Controllerプログラミングガイド</a></li>\n</ul>\n<h3 id=\"android\">Android <a class=\"direct-link\" href=\"#android\">#</a></h3>\n<ul>\n<li><a href=\"http://developer.android.com/training/basics/activity-lifecycle/starting.html\">Starting an Activity ｜ Android Developers</a></li>\n<li><a href=\"http://developer.android.com/reference/android/app/Activity.html\">Activity ｜ Android Developers</a></li>\n<li><a href=\"http://qiita.com/amay077/items/070ac1db6b52dd03505f\">moveCamera(CameraUpdateFactory.newLatLngBounds(… で落ちる</a></li>\n</ul>\n",
      "date_published": "2014-01-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/29/closure-like-statement-comparison-with-objc-java-csharp/",
      "url": "https://blog.amay077.net/blog/2014/01/29/closure-like-statement-comparison-with-objc-java-csharp/",
      "title": "Objective-C と Java と C# でクロージャ的な書き方の比較",
      "content_html": "<p>クロージャとかラムダとか匿名** とか名前はいろいろですけど、各言語の書き方と動き（特に変数の扱い）について比べてみました。</p>\n<p>ついでに非同期処理の例にもなってしまいました。</p>\n<!--more-->\n<h3 id=\"objective-c\">Objective-C <a class=\"direct-link\" href=\"#objective-c\">#</a></h3>\n<p>Blocks を使います。</p>\n<pre class=\"language-objc\"><code class=\"language-objc\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>__block <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br><br>dispatch_queue_t q_global <span class=\"token operator\">=</span> <span class=\"token function\">dispatch_get_global_queue</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token function\">dispatch_async</span><span class=\"token punctuation\">(</span>q_global<span class=\"token punctuation\">,</span> <span class=\"token operator\">^</span><span class=\"token punctuation\">{</span><br>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// できない(コンパイルエラー</span><br>    y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// できる</span><br>    <br>    <span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token punctuation\">[</span><span class=\"token keyword\">self</span> dispValue<span class=\"token punctuation\">:</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// self の参照カウンタが+1される</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>普通に宣言した変数を Block の中で使うと、自動的に「キャプチャ」され、変数の複製される。この変数には、 Block 内では代入できずコンパイルエラーとなる。<br>\n<code>__block</code> を付けた変数は、Block 内外で同じ実体を参照でき、代入もできる。<br>\n<code>self</code> やプロパティを Block 内で使用すると参照カウンタがインクリメントされ、明示的に release しないとリークする。<br>\nあるいは、Block 外で <code>__weak</code> を付けた変数に代入しておくと、これは参照カウンタがインクリメントされない。</p>\n<h3 id=\"java-6-(android-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AA%E3%81%AE%E3%81%A7%E2%80%A6)\">Java 6 (Android ベースなので…) <a class=\"direct-link\" href=\"#java-6-(android-%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AA%E3%81%AE%E3%81%A7%E2%80%A6)\">#</a></h3>\n<p>匿名クラスです。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>executor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\ty <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// できない(コンパイルエラー</span><br>\t\t<span class=\"token keyword\">int</span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span> <span class=\"token comment\">// できない(コンパイルエラー</span><br>\t\t<br>\t\t<span class=\"token class-name\">String</span> typeName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Runnable になる</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Java は匿名クラスの実装中に使える変数はかなり制限がある。<br>\n普通に宣言した変数は、匿名クラス内では使えない(コンパイルエラー)。<br>\n<code>final</code> を付けて宣言した変数は、匿名クラス内では参照のみ可能。ちょうど Objective-C の通常変数を Block 内で使った時と同じ。<br>\nObj-C の <code>self</code> にあたる <code>this</code> は匿名クラス内では、その匿名クラスを示す。</p>\n<h3 id=\"c%EF%BC%83\">C＃ <a class=\"direct-link\" href=\"#c%EF%BC%83\">#</a></h3>\n<p>ラムダ式です。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> y <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><br>Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span><br>    y <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これはダメ、const だから。</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> typeName <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>C# はかなりゆる〜い印象。<br>\n普通に宣言した変数を、ラムダ式の中でも自由に read/write できてしまう。write できちゃうのはこわい。<br>\n<code>this</code> は、ラムダ式の外側のクラスを示す。</p>\n<h2 id=\"%E6%89%80%E6%84%9F\">所感 <a class=\"direct-link\" href=\"#%E6%89%80%E6%84%9F\">#</a></h2>\n<p>個人的には、Java のガチガチなのが好きかも。できる事が限定されているのでミスしにくい。<br>\nObjective-C は、ローカル変数は良いけど、self とか使っちゃうミス起こしそう。<br>\nC# は、普通に書き換えられて超不安、という感じ。なるべく const 使うようにしたい。</p>\n<p>しかし記述量は C# が一番少ないですね、Xamarin いいよ Xamarin。。。</p>\n",
      "date_published": "2014-01-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/28/cannot-using-int-type-in-objc-dictionary/",
      "url": "https://blog.amay077.net/blog/2014/01/28/cannot-using-int-type-in-objc-dictionary/",
      "title": "Objective-C の Dictionary は、キーに基本データ型が使えないのね ",
      "content_html": "<pre><code>くやしいので他の言語と比較しておく。\n当然ながら Dictionary に限った話でない（はず）。\n&lt;!--more--&gt;\n### Objective-C\n\n</code></pre>\n<p>NSMutableDictionary* dic = [[NSMutableDictionary alloc] init];<br>\n[dic setObject:@&quot;hoge&quot; forKey:[NSNumber numberWithInt:1]]; // これは OK<br>\n[dic setObject:@&quot;huga&quot; forKey:@1]; // これも OK (@1 は NSNumber のリテラル構文なので)<br>\n[dic setObject:@&quot;piyo&quot; forKey:2]; // これはダメ（落ちる</p>\n<pre><code>\nキーと値が他の言語と逆なのにまずハマって、\nキーに int型 の値を入れてたのに気づかずまたハマった。\nせめてコンパイルエラーにして欲しいよ。\n言語仕様上、型指定できないのでキーも値もどんな型でも突っ込めちゃう、こわい。\n\n### Java\n\n```java\nMap&lt;Integer, String&gt; dic = new HashMap&lt;Integer, String&gt;();\nMap&lt;int, String&gt; dic = new HashMap&lt;int, String&gt;(); // これはダメ(コンパイルできない)\ndic.put(Integer.valueOf(1), &quot;hoge&quot;); // OK\ndic.put(2, &quot;piyo&quot;); // これも OK（へー\n</code></pre>\n<p>int と Integer ってのがあって、int を使って HashMap を宣言できない。<br>\nこれはコンパイル時に分かるので良いけど、int と Integer の変換が必要なことがしばしば。</p>\n<h3 id=\"c%EF%BC%83\">C＃ <a class=\"direct-link\" href=\"#c%EF%BC%83\">#</a></h3>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> dic <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 型推論＆Generic</span><br>dic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hoge\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// OK</span><br>dic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"piyo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>dic<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"huga\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </code></pre>\n<p>一番スッキリ書けますね。</p>\n<p>…Xamarin いいよ、Xamarin</p>\n",
      "date_published": "2014-01-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/24/my-favorite-apps-in-mac/",
      "url": "https://blog.amay077.net/blog/2014/01/24/my-favorite-apps-in-mac/",
      "title": "Mac に入れてるアプリ一覧",
      "content_html": "<p>環境移行するときの為の備忘録。<br>\nあんまりカスタマイズしない方だったけど３０超えてた。</p>\n<!--more-->\n<h2 id=\"%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA\">カスタマイズ <a class=\"direct-link\" href=\"#%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA\">#</a></h2>\n<ol>\n<li>XtraFinder : 標準Finderのタブよりこっちの方が好き。フォルダから Terminal を開けるのが地味に便利。</li>\n<li>Sublime Text 2 : 常用テキストエディタ</li>\n<li>CopyPath : Finder で選択したファイルのパスをクリップボードにコピる</li>\n<li>ClipMenu : クリップボード履歴と定型文呼び出し</li>\n<li>FreeMemory : メモリ解放してくれる系からテキトーに選んだ</li>\n<li>Google IME : ATOK 買うお金がない</li>\n</ol>\n<h2 id=\"%E3%83%96%E3%83%AD%E3%82%B0%E6%9B%B8%E3%81%8F%E6%99%82\">ブログ書く時 <a class=\"direct-link\" href=\"#%E3%83%96%E3%83%AD%E3%82%B0%E6%9B%B8%E3%81%8F%E6%99%82\">#</a></h2>\n<ol>\n<li>Kobito : Qiita 投稿＆Markdown エディタとして</li>\n<li>Skitch : スクショ撮り＆注釈入れに</li>\n<li>ImageOptim : 画像圧縮</li>\n<li>LICEcap : スクリーンをGIFアニメとして記録できる、便利</li>\n</ol>\n<h2 id=\"%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8\">クラウドストレージ <a class=\"direct-link\" href=\"#%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B9%E3%83%88%E3%83%AC%E3%83%BC%E3%82%B8\">#</a></h2>\n<ol>\n<li>Dropbox : おなじみ</li>\n<li>Bitcasa : 無制限Bytes/$10/Month プラン（既得権益♪）</li>\n</ol>\n<p>Evernote、Google Drive、Skydrive は Web で十分。</p>\n<h2 id=\"%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%81%A8%E3%81%8B%E9%9B%BB%E8%A9%B1%E3%81%A8%E3%81%8B\">チャットとか電話とか <a class=\"direct-link\" href=\"#%E3%83%81%E3%83%A3%E3%83%83%E3%83%88%E3%81%A8%E3%81%8B%E9%9B%BB%E8%A9%B1%E3%81%A8%E3%81%8B\">#</a></h2>\n<ol>\n<li>Skype : 主にお仕事連絡用</li>\n<li>Line : 家族連絡用</li>\n<li>Linphone : 050plus の発着信に使ってたけど最近使えなくなった(泣</li>\n</ol>\n<h2 id=\"%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6\">ブラウザ <a class=\"direct-link\" href=\"#%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6\">#</a></h2>\n<ol>\n<li>Google Chrome : 常用</li>\n<li>Firefox : 主にテスト用ですね</li>\n</ol>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%AE%E3%81%8A%E4%BB%95%E4%BA%8B%E3%81%A7%E4%BD%BF%E3%81%86\">プログラム開発のお仕事で使う <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E9%96%8B%E7%99%BA%E3%81%AE%E3%81%8A%E4%BB%95%E4%BA%8B%E3%81%A7%E4%BD%BF%E3%81%86\">#</a></h2>\n<ol>\n<li>Xamarin Studio : Xamarin 推しですから</li>\n<li>SourceTree : git/hg、SVN も git-svn でやってる</li>\n<li>Brackets : Web開発はこれで</li>\n<li>Eclipse : 仕方なく</li>\n<li>Xcode : 仕方なく</li>\n<li>astah community : UML 描くのに</li>\n<li>MacWinZipper : 日本語が化けないZIP圧縮/解凍ツール</li>\n</ol>\n<h2 id=\"%E3%81%9D%E3%81%AE%E4%BB%96\">その他 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">#</a></h2>\n<ol>\n<li>VMware Fusion : Windows 使う時はこれで</li>\n<li>Sophos Anti-Virus : 一応のセキュリティ担保</li>\n<li>Fitbit Connect : Fitbix Flex 買ったら付いてきた</li>\n<li>Keynote : 買ったけど最近使ってないなあ</li>\n<li>VLC : 定番</li>\n<li>HandBrake : 定番</li>\n<li>Cyberbuck : FTP とか S3 とか</li>\n<li>radikoro : たまにラジオ聴いてる</li>\n</ol>\n<p>Word や Excel は、VMware の Windows で使ってます。Office の Mac版使うよりストレス溜まりません。</p>\n",
      "date_published": "2014-01-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/18/viewcontroller-is-nil-when-viewdidload/",
      "url": "https://blog.amay077.net/blog/2014/01/18/viewcontroller-is-nil-when-viewdidload/",
      "title": "ViewController の ViewDidLoad で this が nil になった件",
      "content_html": "<p>Xamarin Studio + Xcode で Storyboard でアプリを作っていた。複数ある画面の内、ある一つの画面に遷移すると落ちる現象に見舞われていろいろ調べていた。</p>\n<!--more-->\n<p>Xamarin Studio で該当画面の ViewController の ViewDidLoad にブレークポイントを仕掛けて停止させ、ウォッチしてみたところ、なんと this が「nil」になっていた。</p>\n<p>これのおかげで、ViewController に配置した UILabel などにもアクセスできない。</p>\n<p>ViewController を作りなおしてみたり、呼び出し方法を変えてみたりいろいろやってみたけど解消せず。</p>\n<p>30分ほど悪戦苦闘した後、実機にインストールされている該当アプリを一旦削除し、Xamarin Studio も終了させた後に再起動、ソリューションをクリーンして再ビルドして実行してみたところ、問題が解消した。</p>\n<p>なにがしかのトラブルが起きた時は、まずは端末内のアプリを消してみると良いのかも知れない。（これまでの経験的に）</p>\n",
      "date_published": "2014-01-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk/",
      "url": "https://blog.amay077.net/blog/2014/01/16/notice-for-coordinatebounds-in-gmapiossdk/",
      "title": "Google Maps Component for iOS の CoordinateBounds について",
      "content_html": "<p>すごくニッチな話ですけど、Xamarin Components にある Google Maps を Xamarin.iOS で使った。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://components.xamarin.com/view/googlemapsios\">Google Maps /Components</a></li>\n</ul>\n<p>このライブラリの中に <code>CoordinateBounds</code> という「領域」を表すクラスがある。これは <a href=\"https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja\">GMSCoordinateBounds</a> の Binding だ。</p>\n<p>で、CoordinateBounds には <code>Including</code> (<a href=\"https://developers.google.com/maps/documentation/ios/reference/interface_g_m_s_coordinate_bounds?hl=ja#a63cffdf310ca19c6bab74c9a4034aadd\">includingCoordinate</a>) というメソッドがあって、これを呼ぶと指定した座標が入るように領域を拡幅してくれる、便利だ。</p>\n<p>で、最初はこのクラスをこう使っていた。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoordinateBounds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">Including</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">34d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">134d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">Including</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">33d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">133d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">Including</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">35d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">135d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>動かしてみて、この使い方だと <code>bounds</code> から期待した結果が得られないことに気づいた。範囲が -180〜+180 になってしまった。</p>\n<p>正しくはこう。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bounds <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CoordinateBounds</span><span class=\"token punctuation\">(</span><br>    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">34d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">134d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">33d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">133d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>bounds<span class=\"token punctuation\">.</span><span class=\"token function\">Including</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span><span class=\"token punctuation\">(</span><span class=\"token number\">35d</span><span class=\"token punctuation\">,</span> <span class=\"token number\">135d</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>これだと結果は、正しく [33,133 - 35,135] を返す。</p>\n<p>処理上、生成時に２つの座標が揃ってないケースだったので、「あ、デフォルトコンストラクタあるじゃん」と使ってたらハマった。本家 iOS 版の方には引数無しの initXXX は無かった。</p>\n<p>Objective-C の仕様上 alloc して init しないのを防げない、んだっけ？<br>\nだから、Xamarin.iOS の Binding でデフォルトコンストラクタを隠せないのかな？<br>\n突っ込んで調べてないけど、Binding ライブラリを使う時は注意しましょう、ちゃんと本家のAPIリファレンスを見ましょう、というお話でした。</p>\n",
      "date_published": "2014-01-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/16/failed-to-load-aot-module-in-aot-only-mode/",
      "url": "https://blog.amay077.net/blog/2014/01/16/failed-to-load-aot-module-in-aot-only-mode/",
      "title": "Xamarin.iOS でエラー “Failed to load AOT module ... in aot-only mode”",
      "content_html": "<p>Xamarin.iOS で Binding プロジェクトをプロジェクトに追加して実機で実行したら、起動時に落ちるようになってしまった。</p>\n<!--more-->\n<p>Xamarin.iOS で Binding プロジェクトをプロジェクトに追加して実機で実行したら、起動時に落ちるようになってしまった。</p>\n<p>ログには、</p>\n<blockquote>\n<p>Failed to load AOT module ‘/xxx/Hoge.dll.dylib' in aot-only mode.</p>\n</blockquote>\n<p>というエラーが出ていた。</p>\n<p>実機からアプリを削除して、<br>\nソリューションを「再ビルド」したら直った。小ネタ過ぎる。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://monotouch.2284126.n4.nabble.com/Failed-to-load-AOT-module-in-aot-only-mode-td4602614.html\">MonoTouch - Failed to load AOT module ... in aot-only mode</a></li>\n</ul>\n",
      "date_published": "2014-01-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/07/touble-by-lock-orientation-of-specific-viewcontroller/",
      "url": "https://blog.amay077.net/blog/2014/01/07/touble-by-lock-orientation-of-specific-viewcontroller/",
      "title": "Xamarin.iOS で特定の画面だけ向きを固定する時ハマったこと",
      "content_html": "<p>画面A,B があって B だけ横向き固定にしたい。</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/a/12588038\">uiviewcontroller - iOS 6 ViewController is rotating but shouldn't - Stack Overflow</a></li>\n<li><a href=\"http://qiita.com/yusuga_/items/8cc82376edb40e09f0e7\">iPhone - UIViewController iOS6での画面回転への対応 - Qiita [キータ]</a></li>\n</ul>\n<p>これを Xamarin.iOS でやりたい。</p>\n<!--more-->\n<p>Storyboard を Interface Builder で開いて、NavigationController のカスタムクラスを <code>MyNavigationController</code> とした。</p>\n<p><img src=\"/img/posts/viewcontroller_orientaion_lock_in_xamarin_ios_01.png\" alt=\"\"></p>\n<p>すると、Xamarin Studio 側にも <code>MyNavigationController.cs</code> ができるので、Stackoverflow の通り、以下のように実装した。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// This file has been autogenerated from a class added in the UI designer.</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>Foundation</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>UIKit</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MyApp</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyNavigationController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UINavigationController</span></span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">public</span> MyNavigationController <span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span> <span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">UIInterfaceOrientation</span> <span class=\"token function\">PreferredInterfaceOrientationForPresentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ViewControllers<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">PreferredInterfaceOrientationForPresentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">UIInterfaceOrientationMask</span> <span class=\"token function\">GetSupportedInterfaceOrientations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ViewControllers<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">GetSupportedInterfaceOrientations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ShouldAutorotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>ViewControllers<span class=\"token punctuation\">.</span><span class=\"token function\">Last</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ShouldAutorotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に、横固定にしたい画面Bを以下のように実装。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// This file has been autogenerated from a class added in the UI designer.</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>Foundation</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>UIKit</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">MyApp</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UIViewController</span></span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">public</span> PhotoPreviewViewController <span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span> <span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">UIInterfaceOrientation</span> <span class=\"token function\">PreferredInterfaceOrientationForPresentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> UIInterfaceOrientation<span class=\"token punctuation\">.</span>LandscapeLeft<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">UIInterfaceOrientationMask</span> <span class=\"token function\">GetSupportedInterfaceOrientations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> UIInterfaceOrientationMask<span class=\"token punctuation\">.</span>LandscapeLeft<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ShouldAutorotate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これで動かしてみたものの、一向に画面が固定されない。<br>\nしばらく悩んだ後、<code>MyNavigationController</code> のコンストラクタにブレークポイントを仕掛けてデバッグしてみたとても止まらない。<br>\nよくよくアプリケーション出力のコンソールを見てみると、</p>\n<blockquote>\n<p>Unknown class MyNavigationController in InterfaceBuilder file.&quot;</p>\n</blockquote>\n<p>と出力されていることに気づいた。<br>\nなんか、.storyboard と C# クラスの関連付けがうまくいってないらしい。</p>\n<p>ソリューションをクリアして、再ビルドしたらこのエラーは消え、画面Bの向きが固定されるようになった！</p>\n<p>(ただ、縦画面のまま画面Bに遷移すると縦画面で固定されてしまう。これは実装が何か足りない気がする。)</p>\n",
      "date_published": "2014-01-07T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2014/01/02/nhk-kouhaku-utagassen-apps-made-by-xamarin/",
      "url": "https://blog.amay077.net/blog/2014/01/02/nhk-kouhaku-utagassen-apps-made-by-xamarin/",
      "title": "NHK紅白の Android/iPhone アプリが .NET/Xamarin 製だったということ",
      "content_html": "<p>新年あけましておめでとうございます。<br>\n今年も Xamarin 推しで参ります、よろしくお願いします。</p>\n<!--more-->\n<p>2013年大晦日の紅白歌合戦、NHK が iPhone/Android 用のアプリを配信していました。</p>\n<ul>\n<li><a href=\"http://www1.nhk.or.jp/kouhaku/app/\">紅白アプリ｜第64回NHK紅白歌合戦</a></li>\n<li><a href=\"http://weekly.ascii.jp/elem/000/000/192/192769/\">紅白で「イェーガー！」と叫ぶために曲を見逃さないiPhoneアプリ、NHK紅白</a></li>\n</ul>\n<p>なんとこのアプリ、Xamarin 製だったとのこと。<br>\n紅白あんまり興味なかったのでノーチェックでしたわー。</p>\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p>紅白アプリXamarinなんか</p>&mdash; ゆたか (@tmyt) <a href=\"https://twitter.com/tmyt/statuses/413092620567470080\">2013, 12月 17</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p>iPhoneの紅白アプリ、MvvmCross使ってるってことは、Xamarinで作ってるってこと？！ <a href=\"http://t.co/cTWPz2cp9E\">pic.twitter.com/cTWPz2cp9E</a></p>&mdash; 菊池紘 (@kikuchy) <a href=\"https://twitter.com/kikuchy/statuses/417977438597959680\">2013, 12月 31</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>このツイートを RT した後、ソッコーで Android 版を入れてみましたら、確かにクレジットに MvvmCross やら ActionBarSherlock for Xamarin やらならんでいました。</p>\n<h2 id=\"%E9%96%8B%E7%99%BA%E3%81%97%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%AF%E2%80%A6\">開発してるのは… <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E3%81%97%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%AF%E2%80%A6\">#</a></h2>\n<p>開発は、<a href=\"http://www.fenrir-inc.com/\">スレイプニル</a> で有名なフェンリルさんのようですね。</p>\n<ul>\n<li><a href=\"http://biz.fenrir-inc.com/application_development/casestudy_app/nhk_kouhaku.html\">フェンリル株式会社 ｜ スマートフォンアプリ開発 実績 NHK 紅白</a></li>\n</ul>\n<p>2年連続で作っておられるようですが、おととしから Mono(MonoTouch/Mono for Android) 製だったのかな？いやスゴいです！</p>\n<h2 id=\"%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">使われているライブラリ <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%82%8F%E3%82%8C%E3%81%A6%E3%81%84%E3%82%8B%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA\">#</a></h2>\n<p>せっかくなので、Android/iOSアプリ両方の著作権表示から、使われている OSS ライブラリを列挙してみます。(<a href=\"http://nkzn.hatenablog.jp/entry/2013/12/30/010956\">こちらのエントリ</a>にインスパイアされました)<br>\n当然ですが、すべて .NET/Mono で動作するライブラリばかりです。(ActionBar と Nimbus を除く)</p>\n<h3 id=\"mvvmcross\">MvvmCross <a class=\"direct-link\" href=\"#mvvmcross\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/MvvmCross/MvvmCross\">https://github.com/MvvmCross/MvvmCross</a></li>\n<li>クロスプラットフォームMVVMフレームワーク。<a href=\"http://qiita.com/amay077/items/c4227663b5a5e540dc13\">こちらでも</a> 紹介しました</li>\n</ul>\n<h3 id=\"json.net\"><a href=\"http://Json.NET\">Json.NET</a> <a class=\"direct-link\" href=\"#json.net\">#</a></h3>\n<ul>\n<li><a href=\"http://james.newtonking.com/json\">http://james.newtonking.com/json</a></li>\n<li>.NET/Mono で JSON を扱うための事実上標準ライブラリ</li>\n</ul>\n<h3 id=\"socketio4net.client\">SocketIO4Net.Client <a class=\"direct-link\" href=\"#socketio4net.client\">#</a></h3>\n<ul>\n<li><a href=\"http://socketio4net.codeplex.com/\">http://socketio4net.codeplex.com/</a></li>\n<li>WebSocket4Net と組み合わせて使うっぽい？ライブラリ</li>\n</ul>\n<h3 id=\"websocket4net\">WebSocket4Net <a class=\"direct-link\" href=\"#websocket4net\">#</a></h3>\n<ul>\n<li><a href=\"http://websocket4net.codeplex.com/\">http://websocket4net.codeplex.com/</a></li>\n<li>.NET で WebSocket 使うためのライブラリ。</li>\n</ul>\n<h3 id=\"supersocket.clientengine\">SuperSocket.ClientEngine <a class=\"direct-link\" href=\"#supersocket.clientengine\">#</a></h3>\n<ul>\n<li><a href=\"http://clientengine.codeplex.com/\">http://clientengine.codeplex.com/</a></li>\n<li>ソケット通信用ライブラリっぽい。</li>\n</ul>\n<h3 id=\"mvxsettings\">MvxSettings <a class=\"direct-link\" href=\"#mvxsettings\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/jamesmontemagno/Mvx.Plugins.Settings\">https://github.com/jamesmontemagno/Mvx.Plugins.Settings</a> かな？</li>\n<li>設定情報をストアするための、MvvmCross のプラグイン</li>\n</ul>\n<h3 id=\"actionbarsherlock-for-xamarin\">ActionBarSherlock for Xamarin <a class=\"direct-link\" href=\"#actionbarsherlock-for-xamarin\">#</a></h3>\n<ul>\n<li><a href=\"http://components.xamarin.com/view/XamarinActionBarSherlock\">http://components.xamarin.com/view/XamarinActionBarSherlock</a></li>\n<li>スライドメニュー(NavigationDrawer) を実現するライブラリ。そういえばちょっと変わったスライドメニューでしたね。</li>\n</ul>\n<h3 id=\"asyncoauth\">AsyncOAuth <a class=\"direct-link\" href=\"#asyncoauth\">#</a></h3>\n<ul>\n<li><a href=\"http://neue.cc/2013/02/27_398.html\">http://neue.cc/2013/02/27_398.html</a></li>\n<li>C#/LINQ の神であらせられる <a href=\"http://neue.cc/2013/02/27_398.html\">@neuecc</a> さん作の 非同期OAuthライブラリ</li>\n</ul>\n<h3 id=\"nimbus\">Nimbus <a class=\"direct-link\" href=\"#nimbus\">#</a></h3>\n<ul>\n<li><a href=\"http://nimbuskit.info/\">http://nimbuskit.info/</a></li>\n<li>iOS の UIパーツがいろいろ拡張されてる的なライブラリ？Xamarin.iOS で Binding して使ってるのかなあ？</li>\n</ul>\n<h3 id=\"html-agility-pack\">Html Agility Pack <a class=\"direct-link\" href=\"#html-agility-pack\">#</a></h3>\n<ul>\n<li><a href=\"http://htmlagilitypack.codeplex.com/\">http://htmlagilitypack.codeplex.com/</a></li>\n<li>HTMLパーサライブラリ</li>\n</ul>\n<p>生放送のテレビ番組向けアプリということで、リアルタイム通信に注力された様子が、使用されたと思われるライブラリからも伺えます。</p>\n<h2 id=\"%E3%81%93%E3%82%8C%E3%81%AF%E5%BC%B7%E5%8A%9B%E3%81%99%E3%81%8E%E3%82%8B-xamarin-%E5%B0%8E%E5%85%A5%E4%BA%8B%E4%BE%8B%E3%81%A7%E3%81%99%E3%81%AD\">これは強力すぎる Xamarin 導入事例ですね <a class=\"direct-link\" href=\"#%E3%81%93%E3%82%8C%E3%81%AF%E5%BC%B7%E5%8A%9B%E3%81%99%E3%81%8E%E3%82%8B-xamarin-%E5%B0%8E%E5%85%A5%E4%BA%8B%E4%BE%8B%E3%81%A7%E3%81%99%E3%81%AD\">#</a></h2>\n<p>日本の最も有名なテレビ番組のスマホアプリに Xamarin が使われていたというのは大きな導入事例になること必至です。<br>\nアプリの性質上、期間限定となる可能性もあります。できればこのまま公開しつづけて欲しいですが、Xamarin を上司や提案先に紹介されたい場合は、お早めに、またキャプチャを多く撮っておかれる事をおすすめします。</p>\n<p>最後に、今年が Xamarin 普及元年とならん事を近くの神社にお祈りして、新年最初のエントリの締めとします。</p>\n",
      "date_published": "2014-01-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/25/using-mvvmcross-the-x-platform-mvvm-framework/",
      "url": "https://blog.amay077.net/blog/2013/12/25/using-mvvmcross-the-x-platform-mvvm-framework/",
      "title": "マルチプラットフォーム MVVMフレームワーク「MvvmCross」を使う",
      "content_html": "<p><a href=\"http://qiita.com/advent-calendar/2013/xamarin\">Xamarin Advent Calendar 2013</a> も最終日となりました。<br>\n最後は、「実用的な」マルチプラットフォーム開発のツールを紹介します。</p>\n<!--more-->\n<p>MvvmCross ってやつを紹介したいのですが、まずは事前知識からさらりと。</p>\n<h2 id=\"mvvm-%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">MVVM パターンについて <a class=\"direct-link\" href=\"#mvvm-%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>MVVM は、 Model-View-ViewModel の頭文字を取ったものです。<br>\nMVC パターンの派生で、Microsoft が WPF/Silverlight のために作ったそうですが、今では JavaScript の <a href=\"http://knockoutjs.com/\">Knockout.js</a> などでも利用されています。</p>\n<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/8/87/MVVMPattern.png\" alt=\"\"><br>\n(via <a href=\"http://ja.wikipedia.org/wiki/Model_View_ViewModel\">Model View ViewModel - WikiPedia</a> CC-BY 3.0)</p>\n<ul>\n<li>Model - MVC の Model と一緒。ビジネスロジックはここに。</li>\n<li>View - WPF なら .xaml、iOS なら .storyboard、Android なら .xml それだけ。1行もコードを書かないのが理想。\n<ul>\n<li>DataBinding - ViewModel を監視して、ViewModel の情報を View に表示する。View でのユーザーからの入力を受け付けて ViewModel を変更したり、コマンドを実行する。</li>\n</ul>\n</li>\n<li>ViewModel - View の為の Model。状態管理と View の為の情報＆機能公開、およびその為の Model の利用。”ロジック” はここにも書いちゃダメ。</li>\n</ul>\n<p>いやもう絶対他のリソース読んだ方が分かりやすいですから(逃げ)。</p>\n<ul>\n<li><a href=\"http://www.atmarkit.co.jp/fdotnet/chushin/greatblogentry_02/greatblogentry_02_01.html\">MVVMパターンの常識 ― 「M」「V」「VM」の役割とは？ － ＠IT</a></li>\n</ul>\n<h2 id=\"pcl(portable-class-library)-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">PCL(Portable Class Library) について <a class=\"direct-link\" href=\"#pcl(portable-class-library)-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>WPF, Silverlight, Windows Store App など、異なるプラットフォームでバイナリを共有できる “ポータブルな” クラスライブラリ。</p>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/ja-jp/library/windowsphone/develop/jj714086(v=vs.105).aspx\">ポータブル クラス ライブラリを使用して機能を共有する</a></li>\n</ul>\n<p>そして、先日、Xamarin.Android と iOS でもポータルクラスライブラリが使える/作れるようになりました。</p>\n<ul>\n<li><a href=\"http://blog.xamarin.com/pcl-projects-and-vs2013/\">PCL Projects and Visual Studio 2013 Support ｜ Xamarin Blog</a></li>\n</ul>\n<p>ポータブルクラスライブラリとして作られた DLL は、WPF でも Store App でも Android でも iOS でも使いまわせる、という事です。</p>\n<h2 id=\"mvvmcross-%E3%81%A8%E3%81%AF\">MvvmCross とは <a class=\"direct-link\" href=\"#mvvmcross-%E3%81%A8%E3%81%AF\">#</a></h2>\n<p>さて本題。</p>\n<p>MvvmCross は、様々なプラットフォームに対応した MVVMフレームワークです。対応プラットフォームをざっと挙げると、</p>\n<ul>\n<li>Xamarin.iOS</li>\n<li>Xamarin.Android</li>\n<li>Windows Phone</li>\n<li>Windows Store App</li>\n<li>WPF</li>\n<li>Mac</li>\n</ul>\n<p>です。</p>\n<p>MvvmCross を使うと、MVVM パターンでいうところの Model, ViewModel を複数のプラットフォームで共通にできます。</p>\n<p>図にすると下のような感じです。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_01.png\" alt=\"\"></p>\n<p>「Model でプラットフォーム固有の機能使いたい場合もあるじゃん？」とかにも対応しているので、これが全てでは無いですが、最初の説明としてはこんなもんです。</p>\n<p>ホームページなどはこちら。<br>\nEvolve セッションの Slides の 1〜10ページ が分かりやすいですかね。</p>\n<ul>\n<li><a href=\"https://github.com/MvvmCross/MvvmCross\">MvvmCross/MvvmCross - github</a></li>\n<li><a href=\"http://xamarin.com/evolve/2013#session-dnoeeoarfj\">Architecting Cross-Platform Apps with MvvmCross - Evolve 2013 Conference – Xamarin</a></li>\n</ul>\n<h2 id=\"xamarin.android-xamarin.ios-%E3%81%A7%E3%80%81mvvmcross-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">Xamarin.Android Xamarin.iOS で、MvvmCross を使ったアプリを作ってみる <a class=\"direct-link\" href=\"#xamarin.android-xamarin.ios-%E3%81%A7%E3%80%81mvvmcross-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>MvvmCross の現在 Stable なのは「v3」で、その Tutorials が</p>\n<ul>\n<li><a href=\"https://github.com/MvvmCross/MvvmCross/wiki/N-plus-1-Videos-Of-MvvmCross\">N plus 1 Videos Of MvvmCross · MvvmCross/MvvmCross Wiki</a></li>\n</ul>\n<p>にあります。これがまたドットインストールも真っ青の充実ぶり。<br>\nこの動画を順番に見ながら写経すれば使えるようになっちゃいます。</p>\n<p>という訳で、最初の１つ「N=0」をトレースしてみましょう。</p>\n<h3 id=\"%E5%8B%95%E7%94%BB%E3%81%A8%E9%81%95%E3%81%86%E3%81%A8%E3%81%93%E3%82%8D\">動画と違うところ <a class=\"direct-link\" href=\"#%E5%8B%95%E7%94%BB%E3%81%A8%E9%81%95%E3%81%86%E3%81%A8%E3%81%93%E3%82%8D\">#</a></h3>\n<ul>\n<li>Win でなく Mac、Visual Studio でなく Xamarin Studio を使います。Win+VS な人は動画をそのままトレースした方がよいでしょう。</li>\n<li>Nuget 使いません。Nuget から取得したらエラーになったので、マニュアルでアセンブリ追加します。Nuget で配信されるプロジェクトのスケルトンも使わずスクラッチで実装します。</li>\n<li>Windows Store App、Windows Phone は飛ばします。Mac なので。</li>\n<li>iOS での UI 作成について。動画ではコードでUI構築してますが、Storyboard を使いました。その影響で、少しコードが動画と変わっています。</li>\n</ul>\n<p>では、開始〜。</p>\n<h3 id=\"1.-pcl-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">1. PCL プロジェクトを作る <a class=\"direct-link\" href=\"#1.-pcl-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>Xamarin Studio にて、新しいソリューションと「Portable Library」プロジェクトを作ります。プロジェクト名は “FirstDemo.Core”、ソリューション名は “FirstDemo” とします。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_02.png\" alt=\"\"></p>\n<h3 id=\"2.-mvvmcross-%E3%81%AE%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">2. MvvmCross のバイナリをダウンロードする <a class=\"direct-link\" href=\"#2.-mvvmcross-%E3%81%AE%E3%83%90%E3%82%A4%E3%83%8A%E3%83%AA%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">#</a></h3>\n<p><a href=\"https://github.com/mvvmcross/MvvmCross-Binaries/tree/v3.1\">MvvmCross/MvvmCross-Binaries の v3.1 branch</a> をダウンロードなり Clone なりします。</p>\n<h3 id=\"3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">3. プロジェクトにアセンブリ参照を追加する <a class=\"direct-link\" href=\"#3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h3>\n<p>FirstDemo.Core プロジェクトに、先ほどダウンロードした <code>MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Portable</code> の中の以下のファイルを参照追加します。</p>\n<ul>\n<li>Cirrious.CrossCore.dll</li>\n<li>Cirrious.MvvmCross.dll</li>\n<li>Cirrious.MvvmCross.Localization.dll</li>\n</ul>\n<p><img src=\"/img/posts/using_mvvmcross_2_03.png\" alt=\"\"></p>\n<h3 id=\"4.-firstviewmodel-%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81app-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85\">4. FirstViewModel クラス、App クラスの実装 <a class=\"direct-link\" href=\"#4.-firstviewmodel-%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81app-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85\">#</a></h3>\n<p>Nuget でインストールされるはずのクラスを実装します。</p>\n<p>まず、ViewModels というフォルダを作ってその中に <code>FirstViewModel</code> クラスを作ります。</p>\n<p><strong>ViewModels/FirstViewModel.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>ViewModels</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FirstDemo<span class=\"token punctuation\">.</span>Core<span class=\"token punctuation\">.</span>ViewModels</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstViewModel</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MvxViewModel</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _firstName<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> FirstName<br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _firstName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> _firstName <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token function\">RaisePropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> FullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> _lastName<span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> LastName<br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> _lastName<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> _lastName <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token function\">RaisePropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> FullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> FullName<br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} {1}\"</span><span class=\"token punctuation\">,</span> _firstName<span class=\"token punctuation\">,</span> _lastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に <code>App</code> クラスはルートに。</p>\n<p><strong>App.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Cirrious<span class=\"token punctuation\">.</span>CrossCore<span class=\"token punctuation\">.</span>IoC</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">FirstDemo<span class=\"token punctuation\">.</span>Core<span class=\"token punctuation\">.</span>ViewModels</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FirstDemo<span class=\"token punctuation\">.</span>Core</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>ViewModels<span class=\"token punctuation\">.</span>MvxApplication</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token function\">CreatableTypes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">EndingWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Service\"</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">AsInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">RegisterAsLazySingleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token generic-method\"><span class=\"token function\">RegisterAppStart</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>FirstViewModel<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>MyClass.cs</code> は使わないので削除します。</p>\n<p>ここまでが<a href=\"http://www.youtube.com/watch?v=_DHDMNB_IeY#t=281\">動画の 4:40</a> くらいです。</p>\n<h3 id=\"5.-android-%E3%81%AE-ui-%E3%82%92%E4%BD%9C%E3%82%8B\">5. Android の UI を作る <a class=\"direct-link\" href=\"#5.-android-%E3%81%AE-ui-%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>動画では <a href=\"http://www.youtube.com/watch?v=_DHDMNB_IeY#t=671\">11:11</a> から。</p>\n<p>ソリューションに Android Application プロジェクトを追加します。名前は “FirstDemo.Droid” とします。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_04.png\" alt=\"\"></p>\n<h3 id=\"6.-firstdemo.droid-%E3%81%AB%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">6. FirstDemo.Droid にアセンブリ参照を追加する <a class=\"direct-link\" href=\"#6.-firstdemo.droid-%E3%81%AB%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h3>\n<p>まず、FirstDemo.Core をプロジェクト参照で追加します。<br>\n次に、MvvmCross 関連のアセンブリ群、以下を追加します。動画では Nuget でやってるところです。</p>\n<ul>\n<li>Cirrious.CrossCore.dll</li>\n<li>Cirrious.CrossCore.Droid.dll *</li>\n<li>Cirrious.MvvmCross.dll</li>\n<li>Cirrious.MvvmCross.Droid.dll *</li>\n<li>Cirrious.MvvmCross.Binding.dll</li>\n<li>Cirrious.MvvmCross.Binding.Droid.dll *</li>\n<li>Cirrious.MvvmCross.Localization.dll</li>\n</ul>\n<p>「*」付きのアセンブリは <code>MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Droid/</code> から、付いてないアセンブリは Core と同じく <code>MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Portable/</code> から追加します。後ろに “Droid” と付いているものは、プラットフォーム用のフォルダから持ってきましょうという事ですね。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_05.png\" alt=\"\"></p>\n<h3 id=\"7.-firstview-%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81setup-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85\">7. FirstView クラス、Setup クラスの実装 <a class=\"direct-link\" href=\"#7.-firstview-%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81setup-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85\">#</a></h3>\n<p>こちらも Nuget が使えれば〜 のところ。</p>\n<p><code>FirstView</code> は、MainView.cs をリファクタでリネーム＆ Views フォルダ移動して内容を下のように書き換えます。</p>\n<p><strong>Views/FirstView.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Runtime</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Views</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Widget</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>OS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Droid<span class=\"token punctuation\">.</span>Views</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FirstDemo<span class=\"token punctuation\">.</span>Droid<span class=\"token punctuation\">.</span>Views</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"FirstDemo.Droid\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> Icon <span class=\"token operator\">=</span> <span class=\"token string\">\"@drawable/icon\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FirstView</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MvxActivity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Setup.cs はルートに作ります。</p>\n<p><strong>Setup.cs</strong></p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Droid<span class=\"token punctuation\">.</span>Platform</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>ViewModels</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">FirstDemo<span class=\"token punctuation\">.</span>Droid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Setup</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MvxAndroidSetup</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> appContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>appContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">IMvxApplication</span> <span class=\"token function\">CreateApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Core<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>あ、 <code>SplashScreen</code> は省略します。説明が面倒なので。</p>\n<h3 id=\"8.-databinding-%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B\">8.  DataBinding の定義ファイルを作る <a class=\"direct-link\" href=\"#8.-databinding-%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>これも Nuget の代わりにやるところ。<br>\nデータバインディングを行うために必要なファイルです。この手順を忘れて、ビルドエラーでしばらくハマってました。</p>\n<p><code>Resource/values</code> フォルダ内に以下の xml ファイルを作成します。</p>\n<p><strong>Resources/values/MvxBindingAttributes.xml</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>declare-styleable</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxBinding<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxBind<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxLang<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>declare-styleable</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>declare-styleable</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxControl<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>declare-styleable</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>declare-styleable</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxListView<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxItemTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxDropDownItemTemplate<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>declare-styleable</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxBindingTagUnique<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>declare-styleable</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxImageView<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MvxSource<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>string<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>declare-styleable</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"9.-%E7%94%BB%E9%9D%A2%E3%82%92%E4%BD%9C%E3%82%8B\">9. 画面を作る <a class=\"direct-link\" href=\"#9.-%E7%94%BB%E9%9D%A2%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>画面のレイアウトを作ります。<br>\nXamarin Studio の Android用 UI デザイナは強力なので、ここだけは Visual Studio に勝っていると言えます。</p>\n<p><code>Main.axml</code> を開いて、レイアウトされているボタンを削除し、「Plain Text」を2つと、Text(Mid) を1つ、縦に並べて配置します。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_06.png\" alt=\"\"></p>\n<h3 id=\"10.-%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E8%A8%98%E8%BF%B0%E3%81%99%E3%82%8B\">10. データバインディングを記述する <a class=\"direct-link\" href=\"#10.-%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E8%A8%98%E8%BF%B0%E3%81%99%E3%82%8B\">#</a></h3>\n<p><code>Main.axml</code> の「ソース」を開いて、データバインディングについての記述をします。完成形は下のようになります。</p>\n<p><strong>Resources/layout/Main.xml</strong></p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>LinearLayout</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>local</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res-auto<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>orientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>vertical<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill_parent<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill_parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EditText</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">local:</span>MvxBind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Text FirstName<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>EditText</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">local:</span>MvxBind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Text LastName<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TextView</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Medium Text<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>textAppearance</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>?android:attr/textAppearanceMedium<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">local:</span>MvxBind</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Text FullName<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>LinearLayout</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>これで Android UI の実装は終わり。動画では <a href=\"http://www.youtube.com/watch?v=_DHDMNB_IeY#t=980\">16:20</a> あたり。<br>\nAndroid 側では、初期化を除けば <strong>何も実装してない</strong> のがミソ。</p>\n<h3 id=\"11.-android-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">11. Android アプリを動かしてみる <a class=\"direct-link\" href=\"#11.-android-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h3>\n<p>エミュレータで実行してみると、こんな感じです。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_07.gif\" alt=\"\"></p>\n<p>Steve を痛恨のスペルミスしたけど、まあいいや。</p>\n<p>では続いて、iOS アプリの実装です。</p>\n<h3 id=\"12.-ios-%E3%81%AE-ui-%E3%82%92%E4%BD%9C%E3%82%8B\">12. iOS の UI を作る <a class=\"direct-link\" href=\"#12.-ios-%E3%81%AE-ui-%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>動画では <a href=\"http://www.youtube.com/watch?v=_DHDMNB_IeY#t=1558\">25:58</a> から。</p>\n<p>ソリューションに iPhone Application プロジェクトを追加します。Storyboard を使ってみましょう。名前は “FirstDemo.Touch” とします。(iOS 版の接尾辞に ”Touch” を使うのは、Xamarin.iOS の以前の名称である ”MonoTouch” からだと思いますが、大文字で始まる .NET 文化の中では “iOS” はとかく都合が悪いので、Touch という接尾辞は私も気に入っています。)</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_08.png\" alt=\"\"></p>\n<h3 id=\"13.-firstdemo.touch-%E3%81%AB%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">13. FirstDemo.Touch にアセンブリ参照を追加する <a class=\"direct-link\" href=\"#13.-firstdemo.touch-%E3%81%AB%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h3>\n<p>Android の場合と同様、FirstDemo.Core をプロジェクト参照で追加します。<br>\n次に、MvvmCross 関連のアセンブリ群、以下を追加します。</p>\n<ul>\n<li>Cirrious.CrossCore.dll</li>\n<li>Cirrious.CrossCore.Touch.dll *</li>\n<li>Cirrious.MvvmCross.dll</li>\n<li>Cirrious.MvvmCross.Touch.dll *</li>\n<li>Cirrious.MvvmCross.Binding.dll</li>\n<li>Cirrious.MvvmCross.Binding.Touch.dll *</li>\n<li>Cirrious.MvvmCross.Localization.dll</li>\n</ul>\n<p>「*」付きのアセンブリは MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Touch/ から、付いてないアセンブリは Core と同じく MvvmCross-Binaries-3.1/VS2012/bin/Release/Mvx/Portable/ から追加します。後ろに “Touch” と付いているものは、プラットフォーム用のフォルダから持ってきましょうという事ですね。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_09.png\" alt=\"\"></p>\n<h3 id=\"14.-setup-%E3%82%AF%E3%83%A9%E3%82%B9%2C-appdelegate-%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81firstview-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85\">14. Setup クラス, AppDelegate クラス、FirstView クラスの実装 <a class=\"direct-link\" href=\"#14.-setup-%E3%82%AF%E3%83%A9%E3%82%B9%2C-appdelegate-%E3%82%AF%E3%83%A9%E3%82%B9%E3%80%81firstview-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85\">#</a></h3>\n<p>とここまで書いておいて、MvvmCross は実は Storyboard で使う時は少し細工が必要な事に気づいた。。。</p>\n<p>MvvmCross の作者である slodge さんが下で回答されています。</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/a/16323115\">monotouch - MvvmCross and Xcode Storyboard - Stack Overflow</a></li>\n</ul>\n<p>という訳でここからのコードは、上記で示されている ‘eh’ もミックスしたもので、動画とは少し異なります。動作は同じです。</p>\n<p>まず、Setup.cs をルートに作成して以下のように実装します。</p>\n<p><strong>Setup.cs</strong></p>\n<pre class=\"language-objc\"><code class=\"language-objc\">using System<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Touch<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Touch<span class=\"token punctuation\">.</span>Views<span class=\"token punctuation\">.</span>Presenters<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>ViewModels<span class=\"token punctuation\">;</span><br><br>namespace FirstDemo<span class=\"token punctuation\">.</span>Touch<br><span class=\"token punctuation\">{</span><br>    public class Setup <span class=\"token punctuation\">:</span> MvxTouchSetup<br>    <span class=\"token punctuation\">{</span><br>        public <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>MvxApplicationDelegate appDelegate<span class=\"token punctuation\">,</span> IMvxTouchViewPresenter presenter<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">:</span> <span class=\"token function\">base</span><span class=\"token punctuation\">(</span>appDelegate<span class=\"token punctuation\">,</span> presenter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br><br>        protected override IMvxApplication <span class=\"token function\">CreateApp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> new Core<span class=\"token punctuation\">.</span><span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>既存の AppDelegate.cs を以下のように書き換えます。</p>\n<p><strong>AppDelegate.cs</strong></p>\n<pre class=\"language-objc\"><code class=\"language-objc\">using MonoTouch<span class=\"token punctuation\">.</span>Foundation<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Touch<span class=\"token punctuation\">.</span>Platform<span class=\"token punctuation\">;</span><br>using MonoTouch<span class=\"token punctuation\">.</span>UIKit<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Touch<span class=\"token punctuation\">.</span>Views<span class=\"token punctuation\">.</span>Presenters<span class=\"token punctuation\">;</span><br><br>namespace FirstDemo<span class=\"token punctuation\">.</span>Touch<br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"AppDelegate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br>    public partial class AppDelegate <span class=\"token punctuation\">:</span> MvxApplicationDelegate<br>    <span class=\"token punctuation\">{</span><br>        public override UIWindow Window <span class=\"token punctuation\">{</span> get<span class=\"token punctuation\">;</span> set<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><br>        public override <span class=\"token keyword\">void</span> <span class=\"token function\">FinishedLaunching</span><span class=\"token punctuation\">(</span>UIApplication application<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            var setup <span class=\"token operator\">=</span> new <span class=\"token function\">Setup</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> new <span class=\"token function\">MvxTouchViewPresenter</span><span class=\"token punctuation\">(</span>this<span class=\"token punctuation\">,</span> Window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            setup<span class=\"token punctuation\">.</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>FirstView.cs は、FirstDemo.FirstDemoViewController.cs をリネームして作成します。Views フォルダを作って移動もしましょう。<br>\nまた、<code>MvxViewConroller</code> から派生させるように変更します。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_10.png\" alt=\"\"></p>\n<h3 id=\"15.-ios-%E3%81%AE-ui-%E3%82%92%E4%BD%9C%E3%82%8B\">15. iOS の UI を作る <a class=\"direct-link\" href=\"#15.-ios-%E3%81%AE-ui-%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>iOS 版の画面をレイアウトします。<br>\n動画ではコードで <code>UITextField</code> などを配置していますが、 <strong>UI をコードで記述する事は万死に値する</strong> ので、Xamarin Studio の iOS デザイナもしくは Xcode の Interface Builder を使います。</p>\n<p>下の図は、Xamarin Studio α版の iOS デザイナ を使った例です。<a href=\"http://qiita.com/amay077/items/716742474bce343c5729\">以前に紹介した</a>ものです。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_11.png\" alt=\"\"></p>\n<p>TextField 2つと、Label を、<code>textEditFirst</code>, <code>textEditLast</code>, <code>labelFull</code> という変数にしておきます。</p>\n<h3 id=\"16.-%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E8%A8%98%E8%BF%B0%E3%81%99%E3%82%8B\">16. データバインディングを記述する <a class=\"direct-link\" href=\"#16.-%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E8%A8%98%E8%BF%B0%E3%81%99%E3%82%8B\">#</a></h3>\n<p>MvvmCross を iOS で使う場合、残念ながら storyboard 側にバインディングを記述する事はできないので、<code>FirstView.cs</code>  にコードで記述します。</p>\n<p><code>ViewDidLoad</code> に以下のように追記します。</p>\n<p><strong>Views/FirstView.cs</strong></p>\n<pre class=\"language-objc\"><code class=\"language-objc\">using System<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Binding<span class=\"token punctuation\">.</span>BindingContext<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>Touch<span class=\"token punctuation\">.</span>Views<span class=\"token punctuation\">;</span><br>using Cirrious<span class=\"token punctuation\">.</span>MvvmCross<span class=\"token punctuation\">.</span>ViewModels<span class=\"token punctuation\">;</span><br>using FirstDemo<span class=\"token punctuation\">.</span>Core<span class=\"token punctuation\">.</span>ViewModels<span class=\"token punctuation\">;</span><br><br>namespace FirstDemo<span class=\"token punctuation\">.</span>Touch<br><span class=\"token punctuation\">{</span><br>    public partial class FirstView <span class=\"token punctuation\">:</span> MvxViewController<br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">/* 省略 */</span><br><br>        public override <span class=\"token keyword\">void</span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            this<span class=\"token punctuation\">.</span>Request <span class=\"token operator\">=</span> new MvxViewModelRequest<span class=\"token operator\">&lt;</span>FirstViewModel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><br>                null<span class=\"token punctuation\">,</span> null<span class=\"token punctuation\">,</span> new <span class=\"token function\">MvxRequestedBy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <br>            base<span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            var set <span class=\"token operator\">=</span> this<span class=\"token punctuation\">.</span>CreateBindingSet<span class=\"token operator\">&lt;</span>FirstView<span class=\"token punctuation\">,</span> FirstViewModel<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            set<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>textEditFirst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span>vm <span class=\"token operator\">=</span><span class=\"token operator\">></span> vm<span class=\"token punctuation\">.</span>FirstName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            set<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>textEditLast<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span>vm <span class=\"token operator\">=</span><span class=\"token operator\">></span> vm<span class=\"token punctuation\">.</span>LastName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            set<span class=\"token punctuation\">.</span><span class=\"token function\">Bind</span><span class=\"token punctuation\">(</span>labelFull<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">To</span><span class=\"token punctuation\">(</span>vm <span class=\"token operator\">=</span><span class=\"token operator\">></span> vm<span class=\"token punctuation\">.</span>FullName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            set<span class=\"token punctuation\">.</span><span class=\"token function\">Apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">/* 省略 */</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これで iOS 側も実装終了、動画では <a href=\"http://www.youtube.com/watch?v=_DHDMNB_IeY#t=2020\">33:40</a> まで来ました。</p>\n<h3 id=\"17.-ios-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">17. iOS アプリを動かしてみる <a class=\"direct-link\" href=\"#17.-ios-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h3>\n<p>動画では、Windows であるため Mac にリモート接続して実行していますが、Mac+Xamarin Studio なら即実行できます。</p>\n<p><img src=\"/img/posts/using_mvvmcross_2_12.gif\" alt=\"\"></p>\n<h2 id=\"mvvmcross-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">MvvmCross についてのまとめ <a class=\"direct-link\" href=\"#mvvmcross-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>今日の完成版のコードは</p>\n<ul>\n<li><a href=\"https://github.com/amay077/NPlus1DaysOfMvvmCrossWithXamarinStudio/tree/master/N-00-FirstDemo\">NPlus1DaysOfMvvmCrossWithXamarinStudio / N-00-FirstDemo - github</a></li>\n</ul>\n<p>に置いておきました。</p>\n<p>ちょっと STEP が多くなっちゃいましたが、MvvmCross を使うと、複数のプラットフォームで ViewModel-Model を共通化できることが分かったと思います。</p>\n<p><a href=\"https://github.com/MvvmCross/MvvmCross/wiki/N-plus-1-Videos-Of-MvvmCross\">N+1 Days-</a> は、現在 39(!!) まであります。動画観てるだけでもわかった感じになります。（私は N=8 まで観た気がします。）</p>\n<p>また、 @MvvmCross にツイートすると、気さくに（英語ですが）回答してくれます。</p>\n<p>使いこなせば強力な武器になる MvvmCross 、今後も要チェックです。</p>\n<h2 id=\"xamarin-advent-calendar-2013-%E3%81%BE%E3%81%A8%E3%82%81\">Xamarin Advent Calendar 2013 まとめ <a class=\"direct-link\" href=\"#xamarin-advent-calendar-2013-%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>勢いに任せて作った XAC2013、なんとか完走できました。<br>\n「全部俺」でもいいやと思っていましたが、私含め5名の方に参加して頂けました、ありがとうございました。</p>\n<p><a href=\"http://www.amazon.co.jp/gp/product/B00H2SBO4E?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=B00H2SBO4E&amp;linkCode=shr&amp;tag=oku2008-22&amp;=books&amp;qid=1387973043&amp;sr=1-1&amp;keywords=%E6%97%A5%E7%B5%8C%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A8%E3%82%A2+2014%E5%B9%B42%E6%9C%88%E5%8F%B7\">日経ソフトウェア</a> によると、「2014年にブレークする技術」に Xamarin はありませんでしたが、MS と提携以後のプッシュぶりを見ていると、今後、来年のブレークに期待できそうです。</p>\n<p>昨日の @atsushieno さんの <a href=\"http://atsushieno.hatenablog.com/entry/2013/12/24/213950\">Xamarin 創立からの苦労話</a> を知ると、安易に「ライセンス高ぇ！値下げPlz！」などとは言えませんが、ユーザ(デベロッパ)を増やしたいのもまた事実。α/β版だけでも 30days のトライアル期限なくしてもらえたいら嬉しいですね。</p>\n<p>Xamarin Advent Calendar 2013 はこれで終わりですが、今後もちまちまと Tips みたいなものを書いてくつもりですので、 <a href=\"http://qiita.com/tags/xamarin\">Qiita のタグ</a> をチェックしてもらえると嬉しいです。</p>\n<p>そして Xamarin Advent Calendar 2014 でまたお会いしましょう。</p>\n",
      "date_published": "2013-12-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/23/using-yahoo-maps-sdk-for-ios-in-xamarin-ios/",
      "url": "https://blog.amay077.net/blog/2013/12/23/using-yahoo-maps-sdk-for-ios-in-xamarin-ios/",
      "title": "Xamarin.iOS で Yahoo! iOSマップSDK を使ってみる",
      "content_html": "<p>Xamarin.iOS では、既存の iOS用ライブラリが利用できます。<br>\n今日は例として Yahoo Maps SDK for iOS を Xamarin.iOS から使ってみます。</p>\n<!--more-->\n<h2 id=\"yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%81%A8%E3%81%AF\">Yahoo! iOSマップSDK とは <a class=\"direct-link\" href=\"#yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%81%A8%E3%81%AF\">#</a></h2>\n<ul>\n<li><a href=\"http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/\">YOLP(地図):Yahoo! iOSマップSDK - Yahoo!デベロッパーネットワーク</a></li>\n</ul>\n<p>Yahoo! Japan が提供する地図SDKです。Google Maps にはない魅力として、「雨雲レーダー」「経路探索/案内」「AR機能」が挙げられます。<br>\n利用するには上記サイトから APIキー の発行が必要です。</p>\n<h2 id=\"xamarin.ios-%E3%81%A7-objective-c-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95\">Xamarin.iOS で Objective-C ライブラリを使う方法 <a class=\"direct-link\" href=\"#xamarin.ios-%E3%81%A7-objective-c-%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95\">#</a></h2>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/\">Binding Objective-C ｜ Xamarin</a></li>\n</ul>\n<p>「Binding」と呼ばれます。<br>\nObj-Cライブラリを呼び出すラッパーのようなものを C# で記述し、それを Xamarin.iOS アプリケーションから使用することが出来ます。</p>\n<h2 id=\"xamarin.ios-%E3%81%A7-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%82%92%E4%BD%BF%E3%81%86%E6%89%8B%E9%A0%86\">Xamarin.iOS で Yahoo! iOSマップSDK を使う手順 <a class=\"direct-link\" href=\"#xamarin.ios-%E3%81%A7-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%82%92%E4%BD%BF%E3%81%86%E6%89%8B%E9%A0%86\">#</a></h2>\n<h3 id=\"1.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%80%81api%E3%82%AD%E3%83%BC-%E3%82%92%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B\">1. Yahoo! iOSマップSDK をダウンロードし、APIキー を発行する <a class=\"direct-link\" href=\"#1.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%80%81api%E3%82%AD%E3%83%BC-%E3%82%92%E7%99%BA%E8%A1%8C%E3%81%99%E3%82%8B\">#</a></h3>\n<p>SDK のダウンロードは、</p>\n<ul>\n<li><a href=\"http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/\">YOLP(地図):Yahoo! iOSマップSDK - Yahoo!デベロッパーネットワーク</a></li>\n</ul>\n<p>です。APIキー の発行は、</p>\n<ul>\n<li><a href=\"https://e.developer.yahoo.co.jp/dashboard/\">アプリケーションの管理：Yahoo!デベロッパーネットワーク</a></li>\n</ul>\n<p>です。手順は、</p>\n<ul>\n<li><a href=\"http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/tutorial1.html\">YOLP(地図):利用準備 - Yahoo!デベロッパーネットワーク</a></li>\n</ul>\n<p>が分かりやすいです。</p>\n<h3 id=\"2.-xamarin.ios-%E3%81%A7-binding-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">2. Xamarin.iOS で Binding プロジェクトを作る <a class=\"direct-link\" href=\"#2.-xamarin.ios-%E3%81%A7-binding-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>Xamarin Studio で新しいソリューションを作ります。<br>\niOS → iOS Binding Project で、名前は 「YMapBinding」、ソリューション名は「YMapSample」とします。</p>\n<p><img src=\"/img/posts/using_ymapsdk_on_xamarin_ios_01.png\" alt=\"\"></p>\n<h3 id=\"3.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-binding-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%8B\">3. Yahoo! iOSマップSDK のライブラリファイルを Binding プロジェクトに入れる <a class=\"direct-link\" href=\"#3.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%81%AE%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-binding-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E5%85%A5%E3%82%8C%E3%82%8B\">#</a></h3>\n<p>ダウンロードした Yahoo! iOSマップSDK を解凍して、中に含まれる <code>YMapKit</code> ファイルを <code>libYMapKit.a</code> にリネームします。</p>\n<p><img src=\"/img/posts/using_ymapsdk_on_xamarin_ios_02.png\" alt=\"\"></p>\n<p>Xamarin Studio で、YMapBinding プロジェクトに <code>libYMapKit.a</code> を追加します。</p>\n<p><img src=\"/img/posts/using_ymapsdk_on_xamarin_ios_03.png\" alt=\"\"></p>\n<h3 id=\"4.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%81%AE-api%E5%AE%9A%E7%BE%A9%E3%82%92-c%23-%E3%81%A7%E6%9B%B8%E3%81%8F\">4. Yahoo! iOSマップSDK の API定義を C# で書く <a class=\"direct-link\" href=\"#4.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%81%AE-api%E5%AE%9A%E7%BE%A9%E3%82%92-c%23-%E3%81%A7%E6%9B%B8%E3%81%8F\">#</a></h3>\n<p>Binding プロジェクトにある <code>ApiDefinition.cs</code> を以下のように書き換えます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Drawing</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>ObjCRuntime</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>Foundation</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>UIKit</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">YMapBinding</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">BaseType</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">UIView</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">YMKMapView</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Export</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"initWithFrame:appid:\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>        <span class=\"token return-type class-name\">IntPtr</span> Constructor <span class=\"token punctuation\">(</span><span class=\"token class-name\">RectangleF</span> frame<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> appid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>よく目を凝らすと分かるんですが、これは iOS版ライブラリの <code>initWithFrame:appId:</code> というコンストラクタを C# で定義しています。<br>\n他のメソッドやプロパティ、イベント(delegate)も同じように定義するのですが、ここでは省略します。</p>\n<p>次に <code>libYMapKit.linkwith.cs</code> を開いて、以下のように書き換えます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>ObjCRuntime</span><span class=\"token punctuation\">;</span><br><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token target keyword\">assembly</span><span class=\"token punctuation\">:</span> <span class=\"token class-name\">LinkWith</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"libYMapKit.a\"</span><span class=\"token punctuation\">,</span> LinkTarget<span class=\"token punctuation\">.</span>ArmV7 <span class=\"token operator\">|</span> LinkTarget<span class=\"token punctuation\">.</span>ArmV7s <span class=\"token operator\">|</span> LinkTarget<span class=\"token punctuation\">.</span>Simulator <span class=\"token punctuation\">,</span>ForceLoad <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <br>    Frameworks<span class=\"token operator\">=</span><span class=\"token string\">\"UIKit SystemConfiguration CoreGraphics CoreLocation Foundation OpenGLES QuartzCore\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span></code></pre>\n<p>Yahoo! iOSマップSDK が依存するライブラリを Frameworks に列挙しています。</p>\n<p>これでひとまず Binding プロジェクト 側は終わりです。</p>\n<h4 id=\"5.-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">5. サンプルアプリケーションプロジェクトを作る <a class=\"direct-link\" href=\"#5.-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h4>\n<p>YMapSample ソリューションに 新しいプロジェクト を追加、iPhone の Single view Application 、名称は「YMapApp」とします。</p>\n<p><img src=\"/img/posts/using_ymapsdk_on_xamarin_ios_04.png\" alt=\"\"></p>\n<p>YMapApp プロジェクトを右クリックして、スタートアッププロジェクトをこちらに変更しておきます。</p>\n<p>次に、参照設定で YMapBinding を追加します。</p>\n<p><img src=\"/img/posts/using_ymapsdk_on_xamarin_ios_05.png\" alt=\"\"></p>\n<h4 id=\"6.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\">6. Yahoo! iOSマップSDK を表示するコードを書く <a class=\"direct-link\" href=\"#6.-yahoo!-ios%E3%83%9E%E3%83%83%E3%83%97sdk-%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\">#</a></h4>\n<p>YMapApp のビューコントローラ(たぶん YMapAppViewController)の<code>ViewDidLoad</code> に、以下のように追記します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">YMKMapView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RectangleF</span><span class=\"token punctuation\">(</span><span class=\"token number\">0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">320f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>        “<span class=\"token operator\">&lt;</span>your app key<span class=\"token operator\">></span>”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// あなたが取得した APIキー</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">AddSubview</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ああ、 <code>using YMapBinding;</code> も必要ですね。</p>\n<p>アプリの方もとりあえずこれで OK。</p>\n<h4 id=\"7.-%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">7. 動かしてみる <a class=\"direct-link\" href=\"#7.-%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h4>\n<p>YMapApp を iOSシミュレータで実行してみます。</p>\n<p><img src=\"/img/posts/using_ymapsdk_on_xamarin_ios_06.gif\" alt=\"\"></p>\n<p>はい、このように「とりあえず」Yahoo! iOSマップSDK を Xamarin.iOS で動かすことができました。</p>\n<h2 id=\"%E3%81%93%E3%81%AE%E5%BE%8C%EF%BC%88%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8%E5%A4%9A%E3%81%84%E3%82%88%EF%BC%89\">この後（やること多いよ） <a class=\"direct-link\" href=\"#%E3%81%93%E3%81%AE%E5%BE%8C%EF%BC%88%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8%E5%A4%9A%E3%81%84%E3%82%88%EF%BC%89\">#</a></h2>\n<h3 id=\"api%E5%AE%9A%E7%BE%A9%E3%82%92%E3%81%A1%E3%81%BE%E3%81%A1%E3%81%BE%E3%81%A8%E7%A7%BB%E6%A4%8D\">API定義をちまちまと移植 <a class=\"direct-link\" href=\"#api%E5%AE%9A%E7%BE%A9%E3%82%92%E3%81%A1%E3%81%BE%E3%81%A1%E3%81%BE%E3%81%A8%E7%A7%BB%E6%A4%8D\">#</a></h3>\n<p>この例ではコンストラクタ1つしか定義しませんでしたが、これを他のコンストラクタ、メソッド、プロパティ、イベントについて行う必要があります。これを助けるツールとして <a href=\"http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/objective_sharpie/\">Objective Sharpie</a> が公開されていますが、あまり期待しない方が良さそうです。Yahoo! iOSマップSDK をこのツールにかけてみましたが、出来上がった定義ファイルはエラーがたくさん出ました。</p>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/ios/advanced_topics/binding_objective-c/\">Binding Objective-C ｜ Xamarin</a></li>\n</ul>\n<p>を理解した上で、Objective Sharpie の結果を参考にして、作っていく必要がありそうです。</p>\n<h3 id=\"apidefinition.cs-%E3%81%B8%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%81%AF%E6%AD%A3%E3%81%97%E3%81%84%E3%81%AE%E3%81%8B%EF%BC%9F\">ApiDefinition.cs への定義は正しいのか？ <a class=\"direct-link\" href=\"#apidefinition.cs-%E3%81%B8%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%81%AF%E6%AD%A3%E3%81%97%E3%81%84%E3%81%AE%E3%81%8B%EF%BC%9F\">#</a></h3>\n<p>「Frameworks に、Yahoo! iOSマップSDK が依存しているライブラリを列挙」してみましたが、<a href=\"http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/iphonesdk/tutorial1.html\">チュートリアル</a> には <code>libxml2.2.dylib</code> も含まれています。が、 <code>ApiDefinition.cs</code> にはこれは記述していません。けど動いています。何かの機能を使った時に問題になるかもしれません。そしてこの .dylib という拡張子の場合にどう定義すれば良いのか不明です。</p>\n<h3 id=\"%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%8C%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%EF%BC%9F\">ライブラリが使用するリソースはどこに？ <a class=\"direct-link\" href=\"#%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%8C%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%83%AA%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AF%E3%81%A9%E3%81%93%E3%81%AB%EF%BC%9F\">#</a></h3>\n<p>ダウンロードした Yahoo! iOSマップSDK には <code>image</code> ディレクトリがあり、これをアプリケーションプロジェクトに配置することで、ライブラリがリソースを使うことになっています。Xamarin.iOS Binding プロジェクトではこれはどこに配置すればよいか、未調査です。</p>\n<p>ということで Xamarin.iOS の Binding について紹介しました。<br>\n.Android の Binding は jar を放り込めばある程度自動で定義を生成してくれていたのに対し、かなり面倒な感じです。アプリケーションに必要な機能だけを定義して使っていく感じかなあと感じました。</p>\n",
      "date_published": "2013-12-23T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/22/about-githubs-xamarin-starter-apps/",
      "url": "https://blog.amay077.net/blog/2013/12/22/about-githubs-xamarin-starter-apps/",
      "title": "GitHub&#39;s Xamarin starter apps  について",
      "content_html": "<p>Github社は、割と Xamarin に熱心で、<a href=\"http://xamarin.com/evolve/2013#session-zm59b5yptf\">Xamarin Evolve というイベントでセッション</a>を行ったり、その時の資料が日本の速報系サイトで 「<a href=\"http://blog.livedoor.jp/itsoku/archives/33671593.html\">Ruby を捨てて C# と MVVM に完全移行</a>」なんてヒドい扱い受けちゃったりしてます。</p>\n<!--more-->\n<p>でその Github 社が Xamarin でアプリ開発するならこれ使うといいよ、的なアプリケーションのひな形？を公開しています。</p>\n<ul>\n<li><a href=\"http://log.paulbetts.org/open-source-githubs-xamarin-starter-apps/\">GitHub's Xamarin starter apps</a></li>\n</ul>\n<p>Github社は、自前の MVVM フレームワーク「ReactiveUI」、非同期KVS の 「Akavache」を作ってますので、それを利用したものになっています。</p>\n<ul>\n<li><a href=\"http://www.reactiveui.net/\">ReactiveUI</a></li>\n<li><a href=\"https://github.com/akavache/Akavache\">Akavache</a></li>\n</ul>\n<p>Starter Apps を Xamarin Studio で開くとこんな感じです。</p>\n<p><img src=\"/img/posts/xamarin_startup_apps_by_github_01.png\" alt=\"\"></p>\n<p>アプリケーション自体は MVVM で作られていて、前述の RectiveUI によって、View 以外は極力プラットフォームに依存しないように作ることができます。</p>\n<p>Starter-Core-Android と Starter-Core-iOS が、「View以外」の部分に相当します。(ここ PCL化 できれば１プロジェクトで済みそうですが)</p>\n<p>Starter-Android と Starter-iOS は、各プラットフォームの View に相当します。</p>\n<p>かくいう私もまだソースをじっくり読んでないのですが、クロスプラットフォームで開発する時の教材になるかなーと思います。</p>\n",
      "date_published": "2013-12-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/20/calling-cs-code-from-uiwebview/",
      "url": "https://blog.amay077.net/blog/2013/12/20/calling-cs-code-from-uiwebview/",
      "title": "Xamarin.iOS で UIWebView から C# のコードを呼び出す方法",
      "content_html": "<p>まあ、</p>\n<ul>\n<li><a href=\"http://i26.jp/html5dev/webview-%e3%81%a7-javascript-%e3%81%a8-objective-c-%e3%81%ae%e3%82%b3%e3%83%bc%e3%83%89%e3%82%92%e7%9b%b8%e4%ba%92%e3%81%ab%e5%91%bc%e3%81%b3%e5%87%ba%e3%81%99%e6%96%b9%e6%b3%95/\">WebView で Javascript と Objective-C のコードを相互に呼び出す方法 ｜ 【スマホ×HTML5】Web&amp;ハイブリッドアプリ開発者ブログ</a></li>\n</ul>\n<p>を Xamarin.iOS でやってみたという話なだけです。</p>\n<!--more-->\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">サンプル <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><br><span class=\"token comment\">/* in MainViewController.designer.cs<br>[Outlet]<br>[GeneratedCodeAttribute (\"iOS Designer\", \"1.0\")]<br>MonoTouch.UIKit.UIWebView MyWebView { get; set; }<br>*/</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    MyWebView<span class=\"token punctuation\">.</span><span class=\"token function\">LoadRequest</span><span class=\"token punctuation\">(</span>NSUrlRequest<span class=\"token punctuation\">.</span><span class=\"token function\">FromUrl</span><span class=\"token punctuation\">(</span>NSUrl<span class=\"token punctuation\">.</span><span class=\"token function\">FromString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://www.hatena.ne.jp/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// LoadFinished はイベント</span><br>    MyWebView<span class=\"token punctuation\">.</span>LoadFinished <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>MyWebView<span class=\"token punctuation\">.</span>Request<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">,</span> <span class=\"token string\">\"b.hatena.ne.jp\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIAlertView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Load Finished\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ページが表示されました\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Close\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// ShouldStartLoad は Delegate</span><br>    MyWebView<span class=\"token punctuation\">.</span>ShouldStartLoad <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>webView<span class=\"token punctuation\">,</span> req<span class=\"token punctuation\">,</span> navType<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> permited <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>Url<span class=\"token punctuation\">.</span>Host<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hatenablog.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>permited<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIAlertView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ShouldStartLoad\"</span><span class=\"token punctuation\">,</span> “はてなブログは見ちゃダメ！<span class=\"token string\">\", null, \"</span>Close\"<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span> <br><br>        <span class=\"token keyword\">return</span> permited<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>画面に UIWebView を一つ貼り付けて、 <a href=\"http://www.hatena.ne.jp\">www.hatena.ne.jp</a> を表示してます。</p>\n<p>はてなブックマーク(<a href=\"http://b.hatena.ne.jp\">b.hatena.ne.jp</a>) へ移動すると、ページ読み込み後に「ページが表示されました」とポップアップします。<br>\nはてなブログ(<a href=\"http://hatenablog.com\">hatenablog.com</a>) へ移動しようとすると、「はてなブログは見ちゃダメ！」とポップアップし、移動はキャンセルされます。</p>\n<p>Objective-C の、<code>webViewDidFinishLoad</code> , <code>shouldStartLoadWithRequest</code> デリゲートが、Xamarin.iOS では、 <code>LoadFinished</code> , <code>ShouldStartLoad</code> に対応します。</p>\n<p>注意点は、<code>LoadFinished</code> はイベントであるのに、 <code>ShouldStartLoad</code> は delegate であるという事です。</p>\n<p>Obj-C のデリゲートは、Xamarin.iOS では全てイベントになっているのかなーと思っていましたが、 <code>ShouldStartLoad</code> のように「値を返す」必要があるものについては delegate になっているようです。</p>\n<p>Xamarin.iOS の APIデザインについては、公式サイトに説明があります。</p>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/ios/advanced_topics/api_design/\">API Design ｜ Xamarin</a></li>\n</ul>\n<p>ガッツリ熟読した方がよさそうですねえ。</p>\n<p>最後に、作ったサンプルを動かしてみます。</p>\n<p><img src=\"/img/posts/calling_csharp_from_webview_01.gif\" alt=\"\"></p>\n<p>なんか <code>LoadFinished</code> が２回呼ばれてる。重複チェックしなきゃダメですね</p>\n",
      "date_published": "2013-12-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/19/using-azure-mobile-services-in-xamarin-3/",
      "url": "https://blog.amay077.net/blog/2013/12/19/using-azure-mobile-services-in-xamarin-3/",
      "title": "Xamarin で Windows Azure モバイルサービスを使う(その3:プッシュ通知編)",
      "content_html": "<p>たぶん最終回です。<a href=\"http://qiita.com/amay077/items/ea510071bee85569dc18\">前回</a> は、OAuth認証を実装しました。<br>\n今回は、前回のサンプルの続きとして、Xamarin.iOS + Azure Mobile Service によるプッシュ通知を実装してみます。</p>\n<!--more-->\n<p>プッシュ通知を組み込むためのチュートリアルはこちら</p>\n<ul>\n<li><a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp\">Get started with push notifications (Xamarin iOS) ｜ Mobile Dev Center</a></li>\n</ul>\n<p>では、早速いってみましょう。</p>\n<h2 id=\"%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E7%94%A8%E3%81%AE%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">プッシュ通知用の証明書ファイルを作成する <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E7%94%A8%E3%81%AE%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">#</a></h2>\n<blockquote>\n<ol>\n<li>Generate the Certificate Signing Request file</li>\n<li>Register your app and enable push notifications</li>\n<li>Create a provisioning profile for the app</li>\n</ol>\n</blockquote>\n<p>についてです。</p>\n<p>iOS でプッシュ通知を行うには Apple Push Notification Service(APNS) を使用しますので、その準備から始まります。<br>\n「もう知ってるよ」という人は 「4. Configure Mobile Services」から読んでも良いかと思います。</p>\n<p>初めて行う人は、こちら↓の説明の方が日本語で分かりやすいかと思います。</p>\n<ul>\n<li><a href=\"http://blog.katty.in/4040\">iPhoneのプッシュ通知(APNS)の証明書の作り方 ｜ 三度の飯とエレクトロン</a></li>\n</ul>\n<p>この手順で最後に必要なのは「p12ファイル」です。パスワードはかかっていても問題ありません。</p>\n<h2 id=\"azure-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E3%81%99%E3%82%8B\">Azure モバイルサービスにプッシュの設定をする <a class=\"direct-link\" href=\"#azure-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E3%81%99%E3%82%8B\">#</a></h2>\n<blockquote>\n<p>4 Configure Mobile Services</p>\n</blockquote>\n<p>についてです。</p>\n<p>まず、Azure マネージメントポータル (<a href=\"https://manage.windowsazure.com/\">https://manage.windowsazure.com/</a>) から、モバイルサービス → 項目 → を選んで、上部にある「プッシュ」を選択します。<br>\n次に「apple プッシュ通知の設定」の証明書に、先に手順で入手した 「.p12ファイル」をアップロードします。パスワードはその時決めたものを入力します。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_02.png\" alt=\"\"></p>\n<h2 id=\"%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">アプリケーションにプッシュ通知を実装する <a class=\"direct-link\" href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">#</a></h2>\n<blockquote>\n<p>5 Add push notifications to your app</p>\n</blockquote>\n<p>について。ここ、ハマりどころ多いです。</p>\n<p>Xamarin Studio で、前回のサンプルを開いてコードを追加していきます。</p>\n<p><code>AppDelegate.cs</code> に、端末を識別するためのIDを保持するプロパティを作ります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DeviceToken <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<p><code>ToDoItem.cs</code> にも同じく DeviceToken を追加します。<br>\nが、説明にある <code>[DataMember…</code> は間違いです。正しくは <code>[JsonProperty…</code> です。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">×<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataMember</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"deviceToken\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">JsonProperty</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>PropertyName <span class=\"token operator\">=</span> <span class=\"token string\">\"deviceToken\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DeviceToken <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>再び <code>AppDelegate.cs</code> に戻って、アプリが起動完了した時に、APNS サーバにアプリを登録するコードを追加します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">FinishedLaunching</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSDictionary</span> launchOptions<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\">UIRemoteNotificationType</span> notificationTypes <span class=\"token operator\">=</span> UIRemoteNotificationType<span class=\"token punctuation\">.</span>Alert <span class=\"token operator\">|</span> <br>        UIRemoteNotificationType<span class=\"token punctuation\">.</span>Badge <span class=\"token operator\">|</span> UIRemoteNotificationType<span class=\"token punctuation\">.</span>Sound<span class=\"token punctuation\">;</span><br>    UIApplication<span class=\"token punctuation\">.</span>SharedApplication<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterForRemoteNotificationTypes</span><span class=\"token punctuation\">(</span>notificationTypes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br><br>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>次に同じく  <code>AppDelegate.cs</code> に、アプリ登録完了時にデバイストークンを受け取るコールバックを実装します。</p>\n<p><strong>ここが2つ目のハマりポイントです。</strong><br>\n<code>deviceToken.Description</code> を使用していますが、これは iOSネイティブと異なり <strong>空白入りの文字列を返す</strong> ようです。そのためそのまま DeviceToken として利用すると、通知が来ません。エラーにもならないので原因究明に数時間要しました…。<code>Replace</code> で空白も取り除きます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisteredForRemoteNotifications</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSData</span> deviceToken<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> trimmedDeviceToken <span class=\"token operator\">=</span> deviceToken<span class=\"token punctuation\">.</span>Description<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrWhiteSpace</span><span class=\"token punctuation\">(</span>trimmedDeviceToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Replcae</span><span class=\"token punctuation\">(</span>“ “<span class=\"token punctuation\">,</span> “”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ←追加</span><br>    <span class=\"token punctuation\">}</span><br>    DeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>そして、<code>AppDelegate.cs</code> に、プッシュ通知受信時のコードを書きます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ReceivedRemoteNotification</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSDictionary</span> userInfo<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>userInfo<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">NSObject</span> inAppMessage<span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> success <span class=\"token operator\">=</span> userInfo<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NSString</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"inAppMessage\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> inAppMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> alert <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIAlertView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got push notification\"</span><span class=\"token punctuation\">,</span> inAppMessage<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        alert<span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>最後に <code>QSTodoListViewController.cs</code> の <code>OnAdd</code> を次のように変更して、追加するデータに DeviceToken を含めるようにします。この値を使って、Azure 側でプッシュ通知を送ります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> deviceToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>AppDelegate<span class=\"token punctuation\">)</span>UIApplication<span class=\"token punctuation\">.</span>SharedApplication<span class=\"token punctuation\">.</span>Delegate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>DeviceToken<span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> newItem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ToDoItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <br><span class=\"token punctuation\">{</span><br>    Text <span class=\"token operator\">=</span> itemText<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">,</span> <br>    Complete <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><br>    DeviceToken <span class=\"token operator\">=</span> deviceToken<br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>コードの記述はこれで終わりですが、Xamarin Studio から、iOS アプリを実機で動かしたことがない人は、iOS Developer Account の設定をしておきましょう。</p>\n<p>システムメニュー → Preferences、Environment → Developer Accounts から追加しておきます。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_03.png\" alt=\"\"></p>\n<h2 id=\"%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%AB%E3%81%A7%E3%80%81%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%BF%BD%E5%8A%A0%E6%99%82%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">マネージメントポータルで、データの追加時のスクリプトを登録する <a class=\"direct-link\" href=\"#%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%AB%E3%81%A7%E3%80%81%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E8%BF%BD%E5%8A%A0%E6%99%82%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">#</a></h2>\n<blockquote>\n<p>6 Update the registered insert script in the Management Portal</p>\n</blockquote>\n<p>についてです。</p>\n<p>まず、マネージメントポータル <a href=\"https://manage.windowsazure.com/\">https://manage.windowsazure.com/</a> を開き、モバイルサービス → サービス名 → データ → テーブル名 と選択します。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_04.png\" alt=\"\"></p>\n<p>次に、スクリプト を選択し、ドロップダウンから「挿入」を選択します。テーブルにデータが追加された時に実行するスクリプトが表示されます。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_05.png\" alt=\"\"></p>\n<p>スクリプトを以下に置き換えます。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">,</span> request</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    request<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// Set timeout to delay the notification, to provide time for the </span><br>    <span class=\"token comment\">// app to be closed on the device to demonstrate toast notifications</span><br>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        push<span class=\"token punctuation\">.</span>apns<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>deviceToken<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>            alert<span class=\"token operator\">:</span> <span class=\"token string\">\"Toast: \"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">,</span><br>            payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>                inAppMessage<span class=\"token operator\">:</span> <span class=\"token string\">\"Hey, a new item arrived: '\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span>text <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これにより、データの追加から 2.5秒後に、APNS にプッシュ通知のリクエストを投げます。</p>\n<h2 id=\"%E5%8B%95%E3%81%8B%E3%81%99\">動かす <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h2>\n<blockquote>\n<p>7 Test push notifications in your app</p>\n</blockquote>\n<p>やっと試せます。</p>\n<p>Xamarin Studio から、実機で実行します。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_06.png\" alt=\"\"></p>\n<p>アプリ起動直後、通知の受信を許可するかどうかを尋ねられますので「Yes」で。</p>\n<p>Twitter 認証後、適当に項目を追加します。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_07.png\" alt=\"\"></p>\n<p>しばらく待っていると…</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_08.png\" alt=\"\"></p>\n<p>無事、プッシュ通知を受信できましたー。<br>\n(実はここに辿り着くまで数十回試しているので最初に通知を受け取った時の感激と言ったら…)</p>\n<p>まあ、たぶんどっかでハマるだろうなーと思いながら、やっぱりハマった！という感じでしたので、皆さんも最初はどこかでハマるんじゃないかと。</p>\n<p>ハマりどころは文中にも書きましたが、下にもトラブルシューティングとして書きました。何かのお役に立てば。</p>\n<h2 id=\"%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\">トラブルシューティング <a class=\"direct-link\" href=\"#%E3%83%88%E3%83%A9%E3%83%96%E3%83%AB%E3%82%B7%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\">#</a></h2>\n<h3 id=\"ios-dev-center-%E3%81%A7-bundle-id-%E5%85%A5%E5%8A%9B%E3%81%97%E3%81%9F%E3%82%89%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\">iOS Dev Center で Bundle ID 入力したらエラーになった <a class=\"direct-link\" href=\"#ios-dev-center-%E3%81%A7-bundle-id-%E5%85%A5%E5%8A%9B%E3%81%97%E3%81%9F%E3%82%89%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\">#</a></h3>\n<p>プロジェクト名に アンダースコア が含まれてるとダメです。<br>\nXamarin Studio のプロジェクト プロパティ → iOS Application で直しましょう。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_09.png\" alt=\"\"></p>\n<h3 id=\"%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8C%E8%B5%B7%E5%8B%95%E7%9B%B4%E5%BE%8C(%E8%AA%8D%E8%A8%BC%E3%82%92%E9%80%9A%E9%81%8E%E3%81%97%E3%81%9F%E5%BE%8C)%E3%81%AB%E8%90%BD%E3%81%A1%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\">アプリが起動直後(認証を通過した後)に落ちるようになった <a class=\"direct-link\" href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%81%8C%E8%B5%B7%E5%8B%95%E7%9B%B4%E5%BE%8C(%E8%AA%8D%E8%A8%BC%E3%82%92%E9%80%9A%E9%81%8E%E3%81%97%E3%81%9F%E5%BE%8C)%E3%81%AB%E8%90%BD%E3%81%A1%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\">#</a></h3>\n<p><a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp\">チュートリアル</a>にある、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">DataMember</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Name <span class=\"token operator\">=</span> <span class=\"token string\">\"deviceToken\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DeviceToken <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<p>は間違いです。下記が正しいです。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">JsonProperty</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>PropertyName <span class=\"token operator\">=</span> <span class=\"token string\">\"deviceToken\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> DeviceToken <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%A7%E3%80%8C%E8%BF%BD%E5%8A%A0%E3%80%8D%E3%81%97%E3%81%A6%E3%82%82%E3%80%81%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%81%8C%E6%9D%A5%E3%81%BE%E3%81%9B%E3%82%93\">クライアントで「追加」しても、プッシュ通知が来ません <a class=\"direct-link\" href=\"#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%A7%E3%80%8C%E8%BF%BD%E5%8A%A0%E3%80%8D%E3%81%97%E3%81%A6%E3%82%82%E3%80%81%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%81%8C%E6%9D%A5%E3%81%BE%E3%81%9B%E3%82%93\">#</a></h3>\n<p>まずは、Azure マネージメントポータルで「ログ」を見てみましょう。<br>\n下記からアクセスできます。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_3_01.png\" alt=\"\"></p>\n<p>データ挿入時のスクリプトでエラーが出ていれば、ここに出力されるはずです。スクリプト内で <code>console.log</code> した内容もここに出力されます。</p>\n<h3 id=\"%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%82%E3%81%BE%E3%81%A0%E3%80%81%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%81%8C%E6%9D%A5%E3%81%BE%E3%81%9B%E3%82%93\">それでもまだ、プッシュ通知が来ません <a class=\"direct-link\" href=\"#%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%82%E3%81%BE%E3%81%A0%E3%80%81%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%81%8C%E6%9D%A5%E3%81%BE%E3%81%9B%E3%82%93\">#</a></h3>\n<p>チュートリアル(リンクが死んだ…)にある、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisteredForRemoteNotifications</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSData</span> deviceToken<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> trimmedDeviceToken <span class=\"token operator\">=</span> deviceToken<span class=\"token punctuation\">.</span>Description<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrWhiteSpace</span><span class=\"token punctuation\">(</span>trimmedDeviceToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    DeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>は、コードが足りません。これでは <code>trimmedDeviceToken</code> の文字列内に空白が含まれてしまい、正しい DeviceToken にならないようです。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisteredForRemoteNotifications</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIApplication</span> application<span class=\"token punctuation\">,</span> <span class=\"token class-name\">NSData</span> deviceToken<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> trimmedDeviceToken <span class=\"token operator\">=</span> deviceToken<span class=\"token punctuation\">.</span>Description<span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrWhiteSpace</span><span class=\"token punctuation\">(</span>trimmedDeviceToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'&lt;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Trim</span><span class=\"token punctuation\">(</span><span class=\"token string character\">'>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        trimmedDeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">.</span><span class=\"token function\">Replcae</span><span class=\"token punctuation\">(</span>“ “<span class=\"token punctuation\">,</span> “”<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ←追加</span><br>    <span class=\"token punctuation\">}</span><br>    DeviceToken <span class=\"token operator\">=</span> trimmedDeviceToken<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>と、空白を除去する必要があります。</p>\n<h3 id=\"%E3%81%97%E3%81%8B%E3%81%97%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%82%E3%81%BE%E3%81%A0%E3%80%81%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%81%8C%E6%9D%A5%E3%81%BE%E3%81%9B%E3%82%93\">しかしそれでもまだ、プッシュ通知が来ません <a class=\"direct-link\" href=\"#%E3%81%97%E3%81%8B%E3%81%97%E3%81%9D%E3%82%8C%E3%81%A7%E3%82%82%E3%81%BE%E3%81%A0%E3%80%81%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5%E9%80%9A%E7%9F%A5%E3%81%8C%E6%9D%A5%E3%81%BE%E3%81%9B%E3%82%93\">#</a></h3>\n<p>最初の手順、キーチェーンアクセスで CSR を作る時、「ユーザーのメールアドレス」「通称」を iOS Developer Center に登録しているものと同じにする必要があるみたいです。これが間違っていると、.p12 ファイルを書き出す時に選択すべき「Apple Development IOS Push Services: net.azure-mobile.amay077-baas-test」という鍵が見つからない(文字化けしてる)はずです。</p>\n<p>また、iOS Developer Center に .p12 ファイルを再登録するとプロビジョニングファイルを再作成→端末に更新する必要があります。</p>\n<p>これらを忘れると通知が来ません。そしてエラーにもならないので厄介です。</p>\n<h2 id=\"%E9%9B%91%E6%84%9F\">雑感 <a class=\"direct-link\" href=\"#%E9%9B%91%E6%84%9F\">#</a></h2>\n<p>しかし <a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-push-xamarin-ios/?fb=ja-jp#add-push\">Azure のチュートリアル</a>、これ一度も試してないんじゃないの？</p>\n<p>クラス名の接頭辞や大文字小文字の間違いはまだかわいいものだけど、ここミスると致命的という点が２つも。一度辿れば気づくと思うんだけどなあ。<br>\n最後にある completed example project ではちゃっかり正しいコードだったりするので、コンテンツの修正漏れなんだろうか。。。</p>\n<p>それはともかく、何かトラブルがあると Xamarin のようなネイティブに皮を被せてるプラットフォームは途端に不安になります。どこに原因があるのか追求しづらいから。</p>\n<p>今回も、コードの修正後、いきなりアプリが落ちるようになって、まずα版を使っていたのでそれを疑って stable に戻して、次に実機が悪いのかとシミュレータで動かしてみたり、いろいろ試行錯誤してやっとチュートリアルの誤記だと分かったり。まだノウハウが無いといえばそれまで、α版が自己責任なのはその通りですが、イレギュラー時のリスクはあるなあと思いました。</p>\n",
      "date_published": "2013-12-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/18/using-azure-mobile-services-in-xamarin-2/",
      "url": "https://blog.amay077.net/blog/2013/12/18/using-azure-mobile-services-in-xamarin-2/",
      "title": "Xamarin で Windows Azure モバイルサービスを使う(その2:認証編)",
      "content_html": "<p><a href=\"http://qiita.com/amay077/items/40bd5918284fd40d0edc\">前回</a> は、Microsoft の BaaS である Azureモバイルサービスをとりあえず使ってみる所まで紹介しました。</p>\n<p>今回は、OAuth による認証、Twitter や Facebook でログインする機能について触れてみます。</p>\n<!--more-->\n<p>前回用意したサンプルの続きとして進めます。</p>\n<p>認証を組み込むためのチュートリアルはこちら</p>\n<ul>\n<li><a href=\"http://www.windowsazure.com/en-us/develop/mobile/tutorials/get-started-with-users-xamarin-ios/\">Get started with authentication (Xamarin iOS) ｜ Mobile Dev Center</a></li>\n</ul>\n<p>英語版だからと謝罪してくれるのは Microsoft だけですね。</p>\n<h2 id=\"1.-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E8%AA%8D%E8%A8%BC%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">1. モバイルサービスに認証を設定する <a class=\"direct-link\" href=\"#1.-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%AB%E8%AA%8D%E8%A8%BC%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">#</a></h2>\n<blockquote>\n<p>Register your app for authentication and configure Mobile Services</p>\n</blockquote>\n<p>のところです。</p>\n<p>まずは <a href=\"https://manage.windowsazure.com\">https://manage.windowsazure.com</a> にアクセスし、モバイル サービス から、前回作った名前をクリックします。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_2_01.png\" alt=\"\"></p>\n<p>次に上部メニューからダッシュボードを選択します。表示されるページの左下の方にある「モバイルサービスURL」の値をコピーしておきます。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_2_02.png\" alt=\"\"></p>\n<p>次に、どのサービスの認証を利用するかを決めます（Microsoft, Facebook, Twitter, Google）。この説明では Twitter を使うことにします。</p>\n<p>Twitter での操作方法は下を開きます。</p>\n<ul>\n<li><a href=\"http://www.windowsazure.com/ja-jp/develop/mobile/how-to-guides/register-for-twitter-authentication/\">モバイル サービスでの Twitter ログイン用のアプリケーションの登録</a></li>\n</ul>\n<p>説明が充実してるので上記に従ってください。要は「コンシューマ キー」と「コンシューマー シークレット」が得られれば OK です。</p>\n<p>ではマネージメントポータルの説明に戻ります。</p>\n<blockquote>\n<ol start=\"4\">\n<li>Back in the Management Portal</li>\n</ol>\n</blockquote>\n<p>です。</p>\n<p>上部メニューの ID をクリック、その後、「twitter 設定」に先ほど取得した コンシューマ キー とコンシューマ シークレット を貼り付けて、一番下にある「保存」をクリックします。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_2_03.png\" alt=\"\"></p>\n<p>続いて、テーブルに権限を与えます</p>\n<blockquote>\n<p>Restrict permissions to authenticated users</p>\n</blockquote>\n<p>のところ。</p>\n<p>まず上部メニューの データ → TodoItem をクリックします。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_2_04.png\" alt=\"\"></p>\n<p>次に、アクセス許可 をクリックし、全ての項目で「認証されたユーザーのみ」を選択します。その後「保存」します。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_2_05.png\" alt=\"\"></p>\n<p>マネージメントポータル側の設定は以上です。<br>\nTwitter での認証設定を追加し、またテーブルには、認証されたユーザーでしかアクセスできない権限を設定しました。</p>\n<p>結果、前回動かしたサンプルプログラムはこの設定を行う事で動作しなくなります。(401エラー)</p>\n<p>次に Xamarin Studio でコードを変更していきます。</p>\n<h2 id=\"2.-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E8%AA%8D%E8%A8%BC%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">2. アプリケーションに認証を追加する <a class=\"direct-link\" href=\"#2.-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E8%AA%8D%E8%A8%BC%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<blockquote>\n<p>Add authentication to the app</p>\n</blockquote>\n<p>のところです。</p>\n<ol>\n<li>〜 7. まであります。流れは説明通りですが、クラス名や大文字小文字が微妙に違うので注意が必要です。(<code>TodoService</code> は <code>QSTodoService</code> と読み替える必要があるなど)</li>\n</ol>\n<p>これらを修正したソース２つ <code>QSTodoService.cs</code> と <code>QSTodoListViewController.cs</code> を gist に貼り付けました。</p>\n<ul>\n<li><a href=\"https://gist.github.com/amay077/7960424\">gist - QSTodoListViewController.cs and QSTodoService.cs</a></li>\n</ul>\n<p>修正前との差分が見たい方は <a href=\"https://gist.github.com/amay077/7960424/revisions\">Revisions</a> で見られます。</p>\n<p>あ、今回は Twitter なので、<br>\n<code>MobileServiceAuthenticationProvider.MicrosoftAccount</code> を忘れずに<br>\n<code>MobileServiceAuthenticationProvider.Twitter</code> に置き換えてくださいね。</p>\n<p>これでコードの修正は終わりです。</p>\n<ol start=\"3\">\n<li>動かしてみる</li>\n</ol>\n<p>さて、iOS シミュレータ で動かしてみましょう。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_2_06.gif\" alt=\"\"></p>\n<p>こんな感じで、Twitter による認証機能をアプリに組み込むことができました。</p>\n<p>今日は以上です。次回は Push 通知を行ってみます。</p>\n",
      "date_published": "2013-12-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/18/report-of-oyako-robot-kyoshitsu/",
      "url": "https://blog.amay077.net/blog/2013/12/18/report-of-oyako-robot-kyoshitsu/",
      "title": "家族ロボット教室に参加してきました",
      "content_html": "<p><a href=\"http://jp.fujitsu.com/group/fct/contribution/familyrobot-1/2013/1214.html\">第一回 家族ロボット教室 in ここにこ</a> に参加してきました。</p>\n<!--more-->\n<p>少し前に ここにこ へ行ったときに掲示してあったのを見かけて、小３の子供に「これ、行きたい？」と聞いたら「行く行く！」と乗り気だったので、その熱が冷めない内に申し込みました。</p>\n<h2 id=\"%E3%81%A9%E3%82%93%E3%81%AA%E3%81%93%E3%81%A8%E3%82%92%E3%81%99%E3%82%8B%E3%81%AE%EF%BC%9F\">どんなことをするの？ <a class=\"direct-link\" href=\"#%E3%81%A9%E3%82%93%E3%81%AA%E3%81%93%E3%81%A8%E3%82%92%E3%81%99%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h2>\n<p><a href=\"http://education.lego.com/ja-jp/preschool-and-school/secondary/mindstorms-education-ev3/\">レゴ マインドストーム EV3</a> という教材を使います。</p>\n<p>ググると２足歩行ロボットみたいなのが出てきますが、使ったのはもう少し簡素なロボットというよりは車のようなタイプのものでした。</p>\n<p>前半はロボットの組み立て、後半はパソコンでプログラミングをします。</p>\n<h3 id=\"%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E7%B5%84%E3%81%BF%E7%AB%8B%E3%81%A6%E3%82%8B\">ロボットを組み立てる <a class=\"direct-link\" href=\"#%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E7%B5%84%E3%81%BF%E7%AB%8B%E3%81%A6%E3%82%8B\">#</a></h3>\n<p>ロボットの組み立ては、設計図通りにパーツを組み立てていくものです。パーツは大きめなので小３の子でも問題なく組み立てられました。一部難しいところは事前にスタッフの方が組み立ててくれていました。</p>\n<p>こちらは組立中の様子、さっそく熱中しています。</p>\n<p>そしてロボット完成。</p>\n<p>ロボットには、タイヤと、左右独立したモーター、フロント上部にタッチセンサー、フロント下部に光センサーが付いています。中央にあるのが心臓部です。</p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99\">プログラミングしてロボットを動かす <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%81%97%E3%81%A6%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h3>\n<p>さて次にいよいよプログラミングです。<br>\nノートパソコンは１人１台用意してあり、プログラミングに使うソフトウェアも起動済みです。</p>\n<p>富士通主催ですから当然PCも富士通の、OS は XP ですね。。。</p>\n<p>プログラミングと言っても Java とか C とか「記述する」ものではなく、命令がブロックになっていて、それを繋いでいきます。</p>\n<p>ブロックには、</p>\n<ul>\n<li>モーターを動かす</li>\n<li>ステアリング</li>\n<li>タッチセンサーを使う</li>\n<li>光センサーを使う</li>\n<li>ループ（繰り返す）</li>\n</ul>\n<p>などがあり、「モーターを動かす」には、左右どちらか・回転数・速さ、ステアリングには回転角度などのパラメータがあります。</p>\n<p>USBケーブルでパソコンとロボットを接続し、プログラムを転送して、ロボットの方で「スタート」するとプログラムが実行される仕組みです。</p>\n<p>プログラミングのパートでは、講師のスタッフの方から度々「お題」が出され、受講生が自分で考えてプログラミングをしていきます。</p>\n<p>お題は、「まっすぐ走って少し曲がる」という簡単なものから、「ジグザグ走行する」「黒い線まで進んでバックする」など難易度が上がっていきます。</p>\n<p>ウチの子も自分で組み立てた命令通りにロボットが動くのが楽しかったらしく、とても熱中していました。たまに躓いたりしましたが、サポートしてくれるスタッフの方や私のヒントを得て、自分で考えてプログラミングしていました。</p>\n<p>最終課題は、「カベにぶつかったら反転して黒い線に沿ってゴールまで走る」というお題でタイムレースです。</p>\n<p>プログラムを作って転送して走らせ、うまく行かなかったらプログラムを見なおして修正、また転送して走らせる。何度も繰り返してやっと期待した動きをするようになりました。</p>\n<p>そしてタイムトライアルの結果は、２位！<br>\n本人も大変満足気でした。</p>\n<p>最後は全員で記念撮影して終わり。<br>\nすこし予定時間をオーバーしていましたが、誰も帰りたそうなそぶりを見せない程、みんな熱中していました。</p>\n<h2 id=\"%E8%A6%AA%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\">親としての感想 <a class=\"direct-link\" href=\"#%E8%A6%AA%E3%81%A8%E3%81%97%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\">#</a></h2>\n<p>私もプログラムが大好きで、仕事でも趣味でもしているくらいなので、子供に何とかこの楽しさを伝えたい、と常々思っていた所に、このような機会があって参加してみてとても良かったです。</p>\n<p>途中で飽きたりしないか心配でしたが、始まってみるとそんな心配は杞憂で、最後まで熱中して参加していました。<br>\nこれで子供が「ものづくりの楽しさ」を少しでも感じてもらえたらいいなあ、と思います。</p>\n<p>このブログのタイトル「Experiments Never Fail」は、「試すということに失敗などない（＝失敗を恐れるな）」という意味ですが、これは自分の座右の銘であり子供に伝えたいことでもあります。<br>\n今回の教室を通じて、それを感じてもらえたかなあ、と思います。</p>\n<h2 id=\"%E3%83%AC%E3%82%B4-%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A0-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\">レゴ マインドストーム についての感想 <a class=\"direct-link\" href=\"#%E3%83%AC%E3%82%B4-%E3%83%9E%E3%82%A4%E3%83%B3%E3%83%89%E3%82%B9%E3%83%88%E3%83%BC%E3%83%A0-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%AE%E6%84%9F%E6%83%B3\">#</a></h2>\n<p>教育用とうたっている通り、大変良いプロダクトだと思いました。</p>\n<p>パーツを組み立ててモノを作るハードウェアの側面と、プログラミングをして動かすというソフトウェアの側面が両立しています。</p>\n<p>特にプログラミングの方。</p>\n<p>応用的な動きをさせるにはまず「ループ」を配置するんですね。次にそのループの離脱条件を組み込みます（例：タッチセンサーにモノが触れたら）。<br>\nこれってまさに一般的なプログラミングでいう「メインループ」だよなあ、と。<br>\nそのループの中で、ロボットに命令を実行させたり、逆にロボットからの通知で条件分岐したり。</p>\n<p>プログラミングの基本は十分にまなべる教材だと思いました。</p>\n<p>自宅に帰ってからさっそく「今日使ったロボット欲しい」と言われ、値段を調べたらギョッ！としましたが（^_^;）<br>\nもうちょっと手頃な価格帯で、代替品を探したいと思います。</p>\n<h2 id=\"%E5%AE%B6%E6%97%8F%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E6%95%99%E5%AE%A4-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">家族ロボット教室 について <a class=\"direct-link\" href=\"#%E5%AE%B6%E6%97%8F%E3%83%AD%E3%83%9C%E3%83%83%E3%83%88%E6%95%99%E5%AE%A4-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>家族ロボット教室は、富士通コンピュータテクノロジーが震災復興事業として、これまでは当方地方で20回程も開催されて来たものだそうです。</p>\n<ul>\n<li><a href=\"http://jp.fujitsu.com/group/fct/contribution/familyrobot/\">震災復興支援 家族ロボット教室 : 富士通コンピュータテクノロジーズ</a></li>\n</ul>\n<p>今回、たまたま支店が豊橋にあったとの事で東北以外で初開催だったそうです。偶然とはいえありがたいことです。</p>\n<p>スタッフの方も地元社員の方が中心だったようですが、特に不慣れな様子もなく、子供を常にサポートしてくれました。どうもありがとうございました。</p>\n<p>全国に広げられるのかは分かりませんが、小学生(３年以上)のお子さんがおられる方にはおすすめです。近くで開催されたら参加されると良いと思います。</p>\n",
      "date_published": "2013-12-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev/",
      "url": "https://blog.amay077.net/blog/2013/12/16/guide-of-geomety-libraries-for-foss4g-dev/",
      "title": "FOSS4G 開発者の為の、図形演算ライブラリガイド",
      "content_html": "<p>これは <a href=\"http://atnd.org/events/45511\">FOSS4G Advent Calendar 2013</a> と、<a href=\"http://qiita.com/advent-calendar/2013/xamarin\">Xamarin Advent Calendar 2013</a>  のクロスポストになります。</p>\n<p>地図に関するシステムを作っていますと、必ず必要になるのが図形と図形の演算です。(結合 とか、分割とか、そういうの）</p>\n<!--more-->\n<p>私にとっては自分で実装するのは、とても大変な部類なのですが、今日では、いろいろなオープンソースライブラリが存在していて、それを使わせて頂いています。</p>\n<p>今日は、それらの紹介をします。</p>\n<h2 id=\"%E5%9B%B3%E5%BD%A2%E6%BC%94%E7%AE%97%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E9%81%94\">図形演算ライブラリ達 <a class=\"direct-link\" href=\"#%E5%9B%B3%E5%BD%A2%E6%BC%94%E7%AE%97%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E9%81%94\">#</a></h2>\n<h3 id=\"jts-topology-suite-(jts)\">JTS Topology Suite (JTS) <a class=\"direct-link\" href=\"#jts-topology-suite-(jts)\">#</a></h3>\n<ul>\n<li><a href=\"http://sourceforge.net/projects/jts-topo-suite/\">http://sourceforge.net/projects/jts-topo-suite/</a></li>\n<li>言語：Java</li>\n<li>ライセンス：LGPL</li>\n</ul>\n<p>これがなければ死んでいた案件多し。いろいろな言語に移植され、事実上標準のライブラリ。LGPL ということだけが要注意であり少し残念。</p>\n<h3 id=\"geos\">GEOS <a class=\"direct-link\" href=\"#geos\">#</a></h3>\n<ul>\n<li><a href=\"http://trac.osgeo.org/geos/\">http://trac.osgeo.org/geos/</a></li>\n<li>言語：C++</li>\n<li>ライセンス：LGPL</li>\n</ul>\n<p>JTS を C++ に移植したライブラリ。なので機能、ライセンスともに JTS とほとんど一緒。osgeo のツールをビルドする時に出てくること多い。</p>\n<h3 id=\"net-topology-suite-(nts)\">Net Topology Suite (NTS) <a class=\"direct-link\" href=\"#net-topology-suite-(nts)\">#</a></h3>\n<ul>\n<li><a href=\"https://code.google.com/p/nettopologysuite/\">https://code.google.com/p/nettopologysuite/</a></li>\n<li>言語：C#</li>\n<li>ライセンス：LGPL</li>\n</ul>\n<p>JTS を .NET に移植したライブラリ。最初見た頃は、Not Implemented  な機能が多かったけど、だいぶ揃ってきたのかな。</p>\n<h3 id=\"esri-geometry-api-for-java\">Esri Geometry API for Java <a class=\"direct-link\" href=\"#esri-geometry-api-for-java\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/Esri/geometry-api-java\">https://github.com/Esri/geometry-api-java</a></li>\n<li>言語：Java</li>\n<li>ライセンス：Apache 2.0</li>\n</ul>\n<p>この間の FOSS4GJ 2013 Tokyo で教えてもらった、Yet Another 図形演算ライブラリ。GIS の世界シェアトップである ESRI社がオープンソースで公開しています。だから品質は折り紙つき（のハズだ）。Apache ライセンスなのも嬉しい。</p>\n<h3 id=\"clipper\">Clipper <a class=\"direct-link\" href=\"#clipper\">#</a></h3>\n<ul>\n<li><a href=\"http://www.angusj.com/delphi/clipper.php\">http://www.angusj.com/delphi/clipper.php</a></li>\n<li>言語：Delphi、C++、C#、Python、Perl、Ruby、Haskell</li>\n<li>ライセンス：Boost Software License</li>\n</ul>\n<p>名前の通り Clip(つまり AND(Intersection)演算)と Offset(Buffer の片側だけ)に特化したライブラリ。</p>\n<h3 id=\"boost%3Ageometry\">Boost:Geometry <a class=\"direct-link\" href=\"#boost%3Ageometry\">#</a></h3>\n<ul>\n<li><a href=\"http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/index.html\">http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/index.html</a></li>\n<li>言語：C++</li>\n<li>ライセンス：Boost Software License</li>\n</ul>\n<p>そういえば、C++ の拡張ライブラリである Boost にも Geometry が入ったのでしたね。Screenshot がなかなか圧巻です。</p>\n<h3 id=\"dotspatial\">DotSpatial <a class=\"direct-link\" href=\"#dotspatial\">#</a></h3>\n<ul>\n<li><a href=\"http://dotspatial.codeplex.com/\">http://dotspatial.codeplex.com/</a></li>\n<li>言語：C#</li>\n<li>ライセンス：LGPL</li>\n</ul>\n<p>ライブラリというよりはアプリケーションなのかな？ソースコードの中に <code>DotSpatial.Topology</code> などが見えます。</p>\n<h3 id=\"jsts-topology-suite\">JSTS Topology Suite <a class=\"direct-link\" href=\"#jsts-topology-suite\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/bjornharrtell/jsts\">https://github.com/bjornharrtell/jsts</a></li>\n<li>言語：JavaScript</li>\n<li>ライセンス：LGPL</li>\n</ul>\n<p>探してみたらやっぱりあった JTS の JavaScript への移植版。ライセンスは(ry</p>\n<h3 id=\"geoscript\">GeoScript <a class=\"direct-link\" href=\"#geoscript\">#</a></h3>\n<ul>\n<li><a href=\"http://geoscript.org/\">http://geoscript.org/</a></li>\n<li>言語：JavaScript</li>\n<li>ライセンス：MIT</li>\n</ul>\n<p>JavaScript製のライブラリ。最近は D3.js による視覚表現が流行ってきたので、内部ではこのようなライブラリが使われているのでしょうか。</p>\n<h2 id=\"%E8%A9%A6%E3%81%97%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">試しに使ってみよう <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%88%E3%81%86\">#</a></h2>\n<p>Xamarin Advent Calendar と絡めるために無理やり Xamarin Studio で、という事は必然的に Net Topology Suite を使ってみます。</p>\n<p>Xamarin Studio は、Android/iOS アプリを作るためだけじゃなくて、コンソールアプリとかも作ることができますよ、と言いたいだけです。</p>\n<h3 id=\"%E6%BA%96%E5%82%99\">準備 <a class=\"direct-link\" href=\"#%E6%BA%96%E5%82%99\">#</a></h3>\n<p>まず Xamarin Studio で C# → コンソールアプリのプロジェクトを作ります。</p>\n<p>次に、まず NTS を参照に追加しますが、Nuget という仕組みを使います。<br>\nXamarin Studio に Nuget を導入する手順は、</p>\n<ul>\n<li><a href=\"https://github.com/mrward/monodevelop-nuget-addin\">mrward / monodevelop-nuget-addin</a></li>\n</ul>\n<p>を参考にしてください。</p>\n<h3 id=\"%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\">コードを書く <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F\">#</a></h3>\n<p>こんな感じです。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">GeoAPI<span class=\"token punctuation\">.</span>Geometries</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">NetTopologySuite</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">TopologyTest</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainClass</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> service <span class=\"token operator\">=</span> NtsGeometryServices<span class=\"token punctuation\">.</span>Instance<span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> gf <span class=\"token operator\">=</span> service<span class=\"token punctuation\">.</span><span class=\"token function\">CreateGeometryFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> polygonA <span class=\"token operator\">=</span> gf<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePolygon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><br>                <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">34.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">136.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">34.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">37.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">37.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">136.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">34.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">136.0</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> polygonB <span class=\"token operator\">=</span> gf<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePolygon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><br>                <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">36.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">137.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">137.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">140.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                    <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Coordinate</span><span class=\"token punctuation\">(</span><span class=\"token number\">36.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">137.0</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            polygonA<span class=\"token punctuation\">.</span><span class=\"token function\">Intersection</span><span class=\"token punctuation\">(</span>polygonB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToConsole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Intersection\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            polygonA<span class=\"token punctuation\">.</span><span class=\"token function\">Union</span><span class=\"token punctuation\">(</span>polygonB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToConsole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Union\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            polygonA<span class=\"token punctuation\">.</span><span class=\"token function\">SymmetricDifference</span><span class=\"token punctuation\">(</span>polygonB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToConsole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SymmetricDifference\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            polygonA<span class=\"token punctuation\">.</span><span class=\"token function\">Difference</span><span class=\"token punctuation\">(</span>polygonB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToConsole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Difference\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            polygonB<span class=\"token punctuation\">.</span><span class=\"token function\">Buffer</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToConsole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Buffer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GeomExtensions</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ToConsole</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">IGeometry</span> geom<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> tag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>tag <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> geom<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Intersection(AND)、Union(OR)、SymmeticDifference(XOR)、Difference(A - B)、Buffer(ふくらます)について試しています。</p>\n<p>実行すると、コンソールに結果の座標群がずらーと出力されます。</p>\n<h2 id=\"%E8%A6%8B%E3%81%88%E3%82%8B%E5%8C%96%E3%81%97%E3%81%A6%E3%82%88\">見える化してよ <a class=\"direct-link\" href=\"#%E8%A6%8B%E3%81%88%E3%82%8B%E5%8C%96%E3%81%97%E3%81%A6%E3%82%88\">#</a></h2>\n<p>プログラムによる視覚化は、、、ごめんなさい面倒だったので作りませんでした。</p>\n<p>その代わり、GeoJSON 化して GitHub にアップして視覚化しました。</p>\n<p>まず演算対象の <code>geometryA</code> と <code>geometryB</code> です。(外側の枠は気にしないでください)</p>\n<ul>\n<li><a href=\"https://github.com/amay077/geojsontest/blob/master/01_polygonA.geojson\">https://github.com/amay077/geojsontest/blob/master/01_polygonA.geojson</a></li>\n</ul>\n<script src=\"https://embed.github.com/view/geojson/amay077/geojsontest/master/01_polygonA.geojson\"></script>\n<ul>\n<li><a href=\"https://github.com/amay077/geojsontest/blob/master/02_polygonB.geojson\">https://github.com/amay077/geojsontest/blob/master/02_polygonB.geojson</a></li>\n</ul>\n<script src=\"https://embed.github.com/view/geojson/amay077/geojsontest/master/02_polygonB.geojson\"></script>\n<h3 id=\"intersection(and)\">Intersection(AND) <a class=\"direct-link\" href=\"#intersection(and)\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/amay077/geojsontest/blob/master/03_polygonA_intersection_B.geojson\">https://github.com/amay077/geojsontest/blob/master/03_polygonA_intersection_B.geojson</a></li>\n</ul>\n<script src=\"https://embed.github.com/view/geojson/amay077/geojsontest/master/03_polygonA_intersection_B.geojson\"></script>\n<h3 id=\"union(or)\">Union(OR) <a class=\"direct-link\" href=\"#union(or)\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/amay077/geojsontest/blob/master/04_polygonA_union_B.geojson\">https://github.com/amay077/geojsontest/blob/master/04_polygonA_union_B.geojson</a></li>\n</ul>\n<script src=\"https://embed.github.com/view/geojson/amay077/geojsontest/master/04_polygonA_union_B.geojson\"></script>\n<h3 id=\"symmetricdifference(xor)\">SymmetricDifference(XOR) <a class=\"direct-link\" href=\"#symmetricdifference(xor)\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/amay077/geojsontest/blob/master/05_polygonA_symmetricdifference_B.geojson\">https://github.com/amay077/geojsontest/blob/master/05_polygonA_symmetricdifference_B.geojson</a></li>\n</ul>\n<script src=\"https://embed.github.com/view/geojson/amay077/geojsontest/master/05_polygonA_symmetricdifference_B.geojson\"></script>\n<h3 id=\"difference(a---b)\">Difference(A - B) <a class=\"direct-link\" href=\"#difference(a---b)\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/amay077/geojsontest/blob/master/06_polygonA_difference_B.geojson\">https://github.com/amay077/geojsontest/blob/master/06_polygonA_difference_B.geojson</a></li>\n</ul>\n<script src=\"https://embed.github.com/view/geojson/amay077/geojsontest/master/06_polygonA_difference_B.geojson\"></script>\n<h3 id=\"buffer(b%E3%82%92%E8%86%A8%E3%82%89%E3%81%BE%E3%81%99)\">Buffer(Bを膨らます) <a class=\"direct-link\" href=\"#buffer(b%E3%82%92%E8%86%A8%E3%82%89%E3%81%BE%E3%81%99)\">#</a></h3>\n<ul>\n<li><a href=\"https://github.com/amay077/geojsontest/blob/master/07_geometryB_buffer.geojson\">https://github.com/amay077/geojsontest/blob/master/07_geometryB_buffer.geojson</a></li>\n</ul>\n<script src=\"https://embed.github.com/view/geojson/amay077/geojsontest/master/07_geometryB_buffer.geojson\"></script>\n<p>いやー 便利ですね GitHub 。大量のマーカーは自動的にクラスター化までしてくれるそうですよ。</p>\n<ul>\n<li><a href=\"https://github.com/blog/1541-geojson-rendering-improvements\">GeoJSON rendering improvements</a>。</li>\n</ul>\n<p>こちらは、 Leaflet.js、OpenStreetMap、<a href=\"https://www.mapbox.com/maki/\">Maki Project</a> などの FOSS4G が使われています。いいですね。</p>\n<p>さて、なんの話か分からなくなってきたので、こちらからは以上です。</p>\n",
      "date_published": "2013-12-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/14/using-azure-mobile-services-in-xamarin-1/",
      "url": "https://blog.amay077.net/blog/2013/12/14/using-azure-mobile-services-in-xamarin-1/",
      "title": "Xamarin で Windows Azure モバイルサービスを使う(その１)",
      "content_html": "<p>Xamarin で BaaS を使うことについて、 <a href=\"http://qiita.com/koji_yusa/items/a6878bef10577ee744b5\">koji_yusa さん</a>や <a href=\"http://qiita.com/kochizufan/items/c91b3a59a56d8fc54bb7\">kochizufan さん</a> が、Parse の使用方法について書いてくれました。</p>\n<!--more-->\n<p>BaaS の中では Parse が一番知名度が高いでしょう。しかし！Microsoft も BaaS を提供しています。</p>\n<p>Azure の名を冠しているため、「どうせ IaaS でしょ」とスルーする人が多いんじゃないかと思うので、今回は Microsoft の BaaS である「Azure モバイルサービス」について書きます。</p>\n<h2 id=\"azure%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-vs-parse\">Azureモバイルサービス vs Parse <a class=\"direct-link\" href=\"#azure%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9-vs-parse\">#</a></h2>\n<ul>\n<li><a href=\"http://www.windowsazure.com/ja-jp/pricing/details/mobile-services/\">Windows Azure モバイルサービス - 料金詳細</a></li>\n<li><a href=\"https://parse.com/plans\">Parse - Pricing</a></li>\n</ul>\n<p>実際のところは、Parse に比べて Azure の方がスペックは低いです。無料版では、API呼び出し回数は、Azure が50万回に対して、Parse は100万回、ストレージは、Azyreが20MB(!)に対して Parse が1GB などです。</p>\n<p>唯一、Azure にのみある機能は「スケジュールされたジョブ」、いわゆる cron みたいなジョブの定期呼び出し機能です。無料版では1時間に1回の利用に限定されるようですが、日時処理には十分使えるでしょう。</p>\n<p><a href=\"http://mb.cloud.nifty.com/price.htm\">Nifty の BaaS</a> と比べても劣勢ですね、あれれ？</p>\n<h2 id=\"azure-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92-xamarin-%E3%81%8B%E3%82%89%E4%BD%BF%E3%81%86\">Azure モバイルサービスを Xamarin から使う <a class=\"direct-link\" href=\"#azure-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92-xamarin-%E3%81%8B%E3%82%89%E4%BD%BF%E3%81%86\">#</a></h2>\n<p>Microsoft と Xamarin との提携により、Xamarin から Azure モバイルサービスは、簡単に利用することができます。提携前からライブラリの提供など対応は充実していましたが、提携により Microsoft のサイトでチュートリアルが公開されるなど、より充実しました。</p>\n<p>そのチュートリアルを辿ってみます。</p>\n<p>ちなみに環境は Mac + Xamarin Studio です。Win + Visual Studio でも同じ手順ですが、iOS 用のサンプルなので、iOS ならビルドと実行の為に Mac が必要です。Win しかないなら Android 用に置き換えて試せます。</p>\n<h3 id=\"1.-windows-azure-%E3%81%AB%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B\">1. Windows Azure にサインアップする <a class=\"direct-link\" href=\"#1.-windows-azure-%E3%81%AB%E3%82%B5%E3%82%A4%E3%83%B3%E3%82%A2%E3%83%83%E3%83%97%E3%81%99%E3%82%8B\">#</a></h3>\n<p>モバイルサービスを利用するには、まず Windows Azure に登録しなければなりません。本人確認のために、クレジットカードや携帯電話番号が必要になるのが煩わしいかもですが、勝手に請求されたりはしませんのでご安心を。</p>\n<p>手順は↓が詳しいので割愛します。</p>\n<ul>\n<li><a href=\"http://wordpress-web.azurewebsites.net/guide\">Windows Azureに登録する ｜ 初心者でも30分でできる　ビジネスで使える！WordPressでWebサイト</a></li>\n</ul>\n<h3 id=\"2.-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">2. モバイルサービスを作成する <a class=\"direct-link\" href=\"#2.-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">#</a></h3>\n<p>サインアップできたら Windows Azure マネージメントポータルを開きます。迷ったらここ。アドレスは、</p>\n<ul>\n<li><a href=\"https://manage.windowsazure.com/\">https://manage.windowsazure.com/</a></li>\n</ul>\n<p>です。</p>\n<p>下のような画面になるので、左メニューから モバイルサービス → 新しいモバイル サービスを作成する と進みます。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_01.png\" alt=\"\"></p>\n<p>URL に任意のIDを入力します(世界で一意になる必要があります)。また、地域を「東アジア」にします。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_02.png\" alt=\"\"></p>\n<p>続いて SQL Server の設定をします。ログイン名に任意のユーザー名、パスワードに任意のパスワードを設定します。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_03.png\" alt=\"\"></p>\n<p>ウィザードを終わると、マネージメントポータルに戻ります。しばらくの「作製中…」の後、状態が「準備完了」となり、これでモバイルサービスは作成完了です。</p>\n<h3 id=\"3.-xamarin.ios-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8B%E3%82%89%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">3. Xamarin.iOS アプリケーションからモバイルサービスを使ってみる <a class=\"direct-link\" href=\"#3.-xamarin.ios-%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8B%E3%82%89%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h3>\n<p>作成したモバイルサービスをクリックします。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_04.png\" alt=\"\"></p>\n<p>ここから、一気です。</p>\n<ol>\n<li>まずプラットフォームで「Xamarin」を選択し、</li>\n<li>「新しい XAMARIN アプリケーションを作成する」を展開、</li>\n<li>「TodoItem テーブルを作成する」をクリックして「作成されました」となるまで待ち、</li>\n<li>Xamarin.iOS 用のサンプルアプリケーションをダウンロードします。</li>\n</ol>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_05.png\" alt=\"\"></p>\n<p>ダウンロードした zip ファイルを解答し、Xamarin Studio で開きます。<br>\n参照 や Components を見ると、Azure Mobile Service 用のライブラリが組み込まれている事が分かります。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_06.png\" alt=\"\"></p>\n<p>Debug で iPhone シミュレータで動かしてみます。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_07.gif\" alt=\"\"></p>\n<p>上の動画のように適当なアイテムを追加した後、ブラウザのマネージメントポータルで追加したデータを確認してみます。</p>\n<p>上部のメニュー から データ → TodoItem と進むと、追加されたデータが確認できます。</p>\n<p><img src=\"/img/posts/using_azure_mobile_service_by_xamarin_1_08.gif\" alt=\"\"></p>\n<p>以上です。Xamarin.iOS で Azure モバイルサービスにデータを登録するサンプルが手に入りました。</p>\n<h3 id=\"4.-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E7%9C%BA%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B\">4. サンプルのコードを眺めてみる <a class=\"direct-link\" href=\"#4.-%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E7%9C%BA%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h3>\n<p>これで終わってもアレなので、コードを見てみます。<br>\nまず前述した Azure Mobile Service 用のライブラリが組みこまれていますが、これは、 Xamarin の Components ストアで提供されている、</p>\n<ul>\n<li><a href=\"http://components.xamarin.com/view/azure-mobile-services\">Azure Mobile Services / Components / Xamarin</a></li>\n</ul>\n<p>です。これを主に使っているのは <code>QSTodoService.cs</code> です。</p>\n<p><code>QSTodoService.cs</code> を見てみると、まず NameSpace から。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>WindowsAzure<span class=\"token punctuation\">.</span>MobileServices</span><span class=\"token punctuation\">;</span></code></pre>\n<p>次にコンストラクタなど。</p>\n<p><code>MobileServiceClient</code> がメインクラスですが、これを使う前に <code>CurrentPlatform.Init()</code> が必要です(DI だか IoC だかですかね)。</p>\n<p>そして <code>MobileServiceClient.GetTable&lt;ToDoItem&gt;()</code> をすることで Azure 上のテーブルを取得しています。まだデータは読み込みません。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">MobileServiceClient</span> client<span class=\"token punctuation\">;</span><br><span class=\"token class-name\">IMobileServiceTable<span class=\"token punctuation\">&lt;</span>ToDoItem<span class=\"token punctuation\">></span></span> todoTable<span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">/**省略*/</span><br><br>QSTodoService <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tCurrentPlatform<span class=\"token punctuation\">.</span>Init <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// Initialize the Mobile Service client with your URL and key</span><br>\tclient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MobileServiceClient</span> <span class=\"token punctuation\">(</span>applicationURL<span class=\"token punctuation\">,</span> applicationKey<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// Create an MSTable instance to allow us to work with the TodoItem table</span><br>\ttodoTable <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetTable</span> <span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>ToDoItem<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>データの読み込みは、<code>RefreshDataAsync</code> にて。さりげなく async で。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">List<span class=\"token punctuation\">&lt;</span>ToDoItem<span class=\"token punctuation\">></span></span> Items <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">async</span> <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span>List<span class=\"token punctuation\">&lt;</span>ToDoItem<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> <span class=\"token function\">RefreshDataAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// This code refreshes the entries in the list view by querying the TodoItems table.</span><br>\t\t<span class=\"token comment\">// The query excludes completed TodoItems</span><br>\t\tItems <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> todoTable<br>\t\t\t<span class=\"token punctuation\">.</span>Where <span class=\"token punctuation\">(</span>todoItem <span class=\"token operator\">=></span> todoItem<span class=\"token punctuation\">.</span>Complete <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ToListAsync <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MobileServiceInvalidOperationException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tConsole<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">@\"ERROR {0}\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">return</span> Items<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>今回はこんなところで。</p>\n<p>次回は、 Azure モバイルサービスの続きで、このサンプルに認証周りの機能を実装してみます。</p>\n",
      "date_published": "2013-12-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/13/rename-viewcontroller-with-xamarin-ios/",
      "url": "https://blog.amay077.net/blog/2013/12/13/rename-viewcontroller-with-xamarin-ios/",
      "title": "Xamarin.iOS で ViewController の名称を変える",
      "content_html": "<p>今日も小ネタです。</p>\n<p>Xamarin.iOS の SingleView Application とか(storyboard じゃないやつ)でプロジェクトを作ると、唯一の ViewController の名称が 「プロジェクト名ViewController.cs(.xib)」ってなるんですけど、なんかカッコ悪い。</p>\n<!--more-->\n<p>MainViewController とか、StartupViewController にしたいですね。その方法です。</p>\n<h2 id=\"1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">1. プロジェクトを作る <a class=\"direct-link\" href=\"#1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p><img src=\"/img/posts/xamarin_ios_rename_viewcontoller_01.png\" alt=\"\"></p>\n<p>「RenameTest」という名称でプロジェクトを作ると、ViewController は <code>RenameTestViewController.cs</code> になります。</p>\n<h2 id=\"2.-%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%E3%82%92%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E6%A9%9F%E8%83%BD%E3%81%A7%E5%A4%89%E6%9B%B4\">2. クラス名をリファクタ機能で変更 <a class=\"direct-link\" href=\"#2.-%E3%82%AF%E3%83%A9%E3%82%B9%E5%90%8D%E3%82%92%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E6%A9%9F%E8%83%BD%E3%81%A7%E5%A4%89%E6%9B%B4\">#</a></h2>\n<p><code>RenameTestViewController.cs</code> を開いてクラス名のところで右クリック→リファクタ。</p>\n<p><img src=\"/img/posts/xamarin_ios_rename_viewcontoller_02.png\" alt=\"\"></p>\n<p><code>MainViewController</code> に変更します。</p>\n<p>これにより以下のようにファイルが変更されます。(git status を晒すことでスペースを稼ごう…)</p>\n<pre><code>$ git status\n On branch master\n Changes to be committed:\n\tmodified:   AppDelegate.cs\n\trenamed:    RenameTestViewController.cs -&gt; MainViewController.cs\n\trenamed:    RenameTestViewController.designer.cs -&gt; MainViewController.designer.cs\n\tmodified:   RenameTest.csproj\n</code></pre>\n<h2 id=\"3.-xib-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">3. xib ファイル名を変更する <a class=\"direct-link\" href=\"#3.-xib-%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%90%8D%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\">#</a></h2>\n<p><code>RenameTestViewController.xib</code> はリファクタに追従しないので、手動でファイル名を変更します。</p>\n<p>それから、<code>MainViewController</code> のコンストラクタで、リテラルに xib の名称を指定しているのでそこも修正します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">RenameTest</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UIViewController</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">MainViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>“MainViewController\"<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ← ココ！</span><br>        <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"4.-xcode-%E3%81%A8%E3%81%AE%E9%80%A3%E6%90%BA%E7%A2%BA%E8%AA%8D\">4. Xcode との連携確認 <a class=\"direct-link\" href=\"#4.-xcode-%E3%81%A8%E3%81%AE%E9%80%A3%E6%90%BA%E7%A2%BA%E8%AA%8D\">#</a></h2>\n<p>.xib ファイルをダブルクリックすると Xcode が起動します。これは OK。けどファイル一覧を見てみると…</p>\n<p><img src=\"/img/posts/xamarin_ios_rename_viewcontoller_03.png\" alt=\"\"></p>\n<p><code>RenameTestViewController.h</code> ってファイルができてる！<br>\n<code>MainViewController.h</code> になってほしいのですが。。。</p>\n<p>Xamarin Studio にもどって、「RenameTestViewController」 が残っているところを探します。</p>\n<p><img src=\"/img/posts/xamarin_ios_rename_viewcontoller_04.png\" alt=\"\"></p>\n<p>お前らか！</p>\n<p><code>MainViewController.designer.cs</code> は、マニュアルで修正してはいけないのですが、試しに直してみます。</p>\n<p><code>MainViewController.xib</code> 内の方も古い名前は抹殺しておきます。<br>\nこれは Xamarin Studio ではソースコードエディタで開くか、別なテキストエディタで編集します。(これも推奨されない)</p>\n<p><img src=\"/img/posts/xamarin_ios_rename_viewcontoller_05.png\" alt=\"\"></p>\n<p>どちらも直したら、再度 <code>MainViewController.xib</code> を実行して Xcode を起動。</p>\n<p><img src=\"/img/posts/xamarin_ios_rename_viewcontoller_06.png\" alt=\"\"></p>\n<p>やったー、ようやく <code>RenameTestViewController</code> を抹殺できました。この状態で Xamarin 側との outlet の連携など、問題ないようです。</p>\n<p>まあ、Xcode 用のプロジェクトファイルは Xamarin Studio が自動生成するもの(obj ディレクトリに作成される)で、名前が元のままでも問題はないです。</p>\n<p>以上、手順をまとめてみましたが、経験的に、些細な変更でアプリが起動できなくなったりするので、こまめにコミットしておく事をおすすめします。</p>\n<p>Storyboard のプロジェクトだったら、<a href=\"http://qiita.com/amay077/items/716742474bce343c5729\">以前書いた</a>ように Xamarin Studio だけで完結できるので簡単ですが、まだα版です。はやくリリースされるといいですね。</p>\n",
      "date_published": "2013-12-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/12/installing-rx-in-xamarin/",
      "url": "https://blog.amay077.net/blog/2013/12/12/installing-rx-in-xamarin/",
      "title": "Xamarin に Reactive Extensions を導入する",
      "content_html": "<p>昨日の <a href=\"http://qiita.com/amay077/items/49681b2de5d8cf208112\">ポスト</a> を使ったのに、肝心の導入部分を説明するのを忘れていました。まあ Components から追加するだけなのですが。他のアドベントカレンダーとの掛け持ちで疲れたので、今日は軽く書いて済ませます。</p>\n<!--more-->\n<h2 id=\"reactive-extensions-%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B\">Reactive Extensions を導入する <a class=\"direct-link\" href=\"#reactive-extensions-%E3%82%92%E5%B0%8E%E5%85%A5%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Components で右クリック → Get more components → Reactive とかで検索 → 見つけたら Add to App で OK です。あ、この手順は .iOS でも .Android でも同じです。</p>\n<p><img src=\"/img/posts/install_rx_to_xamarin_ios_01.gif\" alt=\"\"></p>\n<h2 id=\"%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%82%87%E3%81%86%E3%81%8B\">使ってみましょうか <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%82%87%E3%81%86%E3%81%8B\">#</a></h2>\n<p>イベントを Stream に変換する例を示してお茶を濁します。</p>\n<p>まずこんな感じのどうでもいい画面を用意しまして、</p>\n<p><img src=\"/img/posts/install_rx_to_xamarin_ios_02.png\" alt=\"\"></p>\n<p><code>UIButton.TouchUpInside</code> を <code>IObservable</code> に変換する拡張メソッドを用意します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UIButtonExtensions</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">ClickAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span> <span class=\"token class-name\">UIButton</span> button<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>EventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">,</span> <span class=\"token string\">\"TouchUpInside\"</span><span class=\"token punctuation\">)</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UIButton<span class=\"token punctuation\">)</span>e<span class=\"token punctuation\">.</span>Sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>TitleLabel<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>で、こんなコードを書きます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    Button1<span class=\"token punctuation\">.</span><span class=\"token function\">ClickAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <br>            Button2<span class=\"token punctuation\">.</span><span class=\"token function\">ClickAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">Amb</span><span class=\"token punctuation\">(</span><br>                Button3<span class=\"token punctuation\">.</span><span class=\"token function\">ClickAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>btnName <span class=\"token operator\">=></span> <span class=\"token function\">InvokeOnMainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>            Label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> btnName <span class=\"token operator\">+</span> <span class=\"token string\">\" Clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"observable.amb-(%E5%85%88%E3%81%AB%E3%81%8D%E3%81%9F%E5%80%A4%E3%82%92%E6%B5%81%E3%81%99)\">Observable.Amb (先にきた値を流す) <a class=\"direct-link\" href=\"#observable.amb-(%E5%85%88%E3%81%AB%E3%81%8D%E3%81%9F%E5%80%A4%E3%82%92%E6%B5%81%E3%81%99)\">#</a></h3>\n<p>Button1 を押すと処理の開始です。<br>\nPublish で分配して <strong>Amb</strong> は Button2 のクリックと Button3 のクリックで先に行われた方を Label1 に表示します。</p>\n<h3 id=\"observable.zip-(%E3%81%A9%E3%81%A1%E3%82%89%E3%81%AE%E5%80%A4%E3%82%82%E5%BE%85%E3%81%A4)\">Observable.Zip (どちらの値も待つ) <a class=\"direct-link\" href=\"#observable.zip-(%E3%81%A9%E3%81%A1%E3%82%89%E3%81%AE%E5%80%A4%E3%82%82%E5%BE%85%E3%81%A4)\">#</a></h3>\n<p>Amb を Zip に変えてみます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">    Button1<span class=\"token punctuation\">.</span><span class=\"token function\">ClickAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">=></span> <br>            Button2<span class=\"token punctuation\">.</span><span class=\"token function\">ClickAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">Zip</span><span class=\"token punctuation\">(</span><br>                Button3<span class=\"token punctuation\">.</span><span class=\"token function\">ClickAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token punctuation\">{</span>l<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=></span> <span class=\"token function\">InvokeOnMainThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>            Label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>l <span class=\"token operator\">+</span> <span class=\"token string\">\" and \"</span> <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>r <span class=\"token operator\">+</span> <span class=\"token string\">\"Clicked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Zip は2つのシーケンスの結果を待ってから後続へ流します。<br>\nなので、Button2 と Button3 の両方が押されると、Label1 に表示されます。</p>\n<p>どちらもフツーに書くとフラグ変数なんか使って実現すると思うんですけど、Rx を使うと読みやすいコードになると思います。</p>\n<p>あと、私は Android-Java の開発では <a href=\"https://code.google.com/p/reactive4java/\">reactive4Java</a> を使ってるんですが、あれには <code>Observable.FromEventPattern</code> が無い(Java のイベントの Listener はイベントのマルチキャストに対応してないから仕方ない)ので、Xamarin にすることで「完全な」Rx を使うことができて、こりゃ勉強のしがいがあるなあと思ったのでした。</p>\n<p>何の記事でしたっけ？という感じですけど Xamarin なら Linq も Rx も使えてハッピーという事で、今日は以上です。</p>\n",
      "date_published": "2013-12-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/11/using-ibeacon-with-xamarin/",
      "url": "https://blog.amay077.net/blog/2013/12/11/using-ibeacon-with-xamarin/",
      "title": "Xamarin.iOS と Rx で iBeacon を使ってみた",
      "content_html": "<p>こちらは、<a href=\"http://qiita.com/advent-calendar/2013/ibeacon\">iBeacon Advent Calendar 2013</a> と <a href=\"http://qiita.com/advent-calendar/2013/xamarin\">Xamarin Advent Calendar 2013</a> とのクロスポストになります。</p>\n<p>Xamarin とは、.NET で iOS/Android アプリを開発できるプラットフォームです。詳しくは <a href=\"http://qiita.com/amay077/items/38ee79b3e3e88cf751b9\">こちら</a> をどうぞ。</p>\n<p>Xamarin.iOS は、 iOS の APIセットが全て C# で使えますので、 iBeacon 関連の API もそのまま使えます。さらに C# や .NET の強力な言語仕様により、より簡潔に、美しく書くことができます。</p>\n<h2 id=\"xamarin.ios-%E3%81%A7-ibeacon-%E3%82%92%E4%BD%BF%E3%81%86%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">Xamarin.iOS で iBeacon を使うサンプル <a class=\"direct-link\" href=\"#xamarin.ios-%E3%81%A7-ibeacon-%E3%82%92%E4%BD%BF%E3%81%86%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">#</a></h2>\n<p>Xamarin で iBeacons を使うサンプルは、Xamarin 自体が既に公開しています。</p>\n<ul>\n<li><a href=\"http://blog.xamarin.com/play-find-the-monkey-with-ios-7-ibeacons/\">Play ‘Find The Monkey’ with iOS 7 iBeacons ｜ Xamarin Blog</a></li>\n<li><a href=\"https://github.com/mikebluestein/FindTheMonkey\">mikebluestein/FindTheMonkey</a></li>\n</ul>\n<p>これらは iOS7 のリリースから僅か7日後のできごとであり、Xamarin の新OSへの対応力に驚いたものでした。</p>\n<p>この紹介だけで終わってもアレなので、このサンプルをより「C# っぽく」修正してみたいと思います。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E3%82%88%E3%82%8A%E3%80%8Cc%23-%E3%81%A3%E3%81%BD%E3%81%8F%E3%80%8D%E3%81%99%E3%82%8B\">サンプルをより「C# っぽく」する <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92%E3%82%88%E3%82%8A%E3%80%8Cc%23-%E3%81%A3%E3%81%BD%E3%81%8F%E3%80%8D%E3%81%99%E3%82%8B\">#</a></h2>\n<p>対象にするのは iBeacon の受信の方です。</p>\n<ul>\n<li><a href=\"http://reinforce-lab.github.com/blog/2013/10/21/ibeacon/\">iBeaconの解説 - Reinforce-Lab.'s Blog</a></li>\n<li><a href=\"http://brightechno.com/blog/archives/220\">iBeacon Tips: 正しいビーコン監視方法 ｜ ブライテクノBlog</a></li>\n</ul>\n<p>などで勉強したところ、受信の流れは下図のようになるかと思います。</p>\n<p><img src=\"/img/posts/using_ibeacon_with_xamarin_01.png\" alt=\"img\"></p>\n<p>全てのメソッドが非同期でコールバックを受け取るタイプ、また並行処理＆同期とか、なんだか見やすいコードになる気がしません。</p>\n<p>C# といえば LINQ、そして LINQ を更に拡張する Rx(Reactive Extensions) を使って、この流れをもう少しスッキリと書いてみます。<br>\nRx は、非同期処理やイベントコールバックを一直線なストリームに変換します。また、ストリームの分配や結合の機能を提供します。最初は JavaScript の <a href=\"http://techblog.yahoo.co.jp/programming/jquery-deferred/\">Deferred</a> みたいなもんだと思ってました。が、使ってく内にとんでもなく高機能なものだと分かり(はじめ)ました。</p>\n<p>これを使うと、上の図をそのままコードに落としたような、上から下へ辿れる感じで書くことができます。</p>\n<p>まず、修正前のサンプルコードはこちら</p>\n<ul>\n<li><a href=\"https://github.com/mikebluestein/FindTheMonkey/blob/master/FindTheMonkey/FindTheMonkeyViewController.cs\">FindTheMonkey / FindTheMonkeyViewController.cs</a></li>\n</ul>\n<p>このコード自体、上の流れに沿ってない気もしますが、まあいいや。</p>\n<p>これを Rx で書きなおすと、こうなります。</p>\n<h3 id=\"2014.4.2-%E8%BF%BD%E8%A8%98\">2014.4.2 追記 <a class=\"direct-link\" href=\"#2014.4.2-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>実際には動かない空想のコードを掲載していたので、実機で動作したコードに書き換えました。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>UserInterfaceIdiomIsPhone<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">/* 省略 */</span><br><span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span><br><span class=\"token punctuation\">{</span><br>  <span class=\"token function\">InitPitchAndVolume</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> man <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>  man<span class=\"token punctuation\">.</span><span class=\"token function\">StartMonitoringAsObservable</span><span class=\"token punctuation\">(</span>beaconRegion<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 監視開始</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=></span><br>    man<span class=\"token punctuation\">.</span><span class=\"token function\">RegionEnteredAsObservable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// A:進入の受信</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">Amb</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span><span class=\"token function\">RequestStateAsObservable</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// B:リージョン状態要求</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>State <span class=\"token operator\">==</span> CLRegionState<span class=\"token punctuation\">.</span>Inside<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 範囲内のみ</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Region <span class=\"token keyword\">as</span> <span class=\"token class-name\">CLBeaconRegion</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// CLRegion からcast</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">SelectMany</span><span class=\"token punctuation\">(</span>man<span class=\"token punctuation\">.</span>StartRangingBeaconsAsObservable<span class=\"token punctuation\">)</span> <span class=\"token comment\">// A/B どちらかを受信したらレンジング開始</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Beacons<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// ビーコンが1個以上みつかった場合のみ</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Beacons <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// LINQ の Fisrt() でもOk</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">DistinctUntilChanged</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>Proximity<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Proximity が変わった時のみ流す</span><br>  <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CLBeacon</span> beacon<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>  <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// Beacon が見つかった時に行う処理を書く</span><br>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CLLocationManagerExtensions</span><br><span class=\"token punctuation\">{</span><br>  <span class=\"token comment\">// リージョン監視を開始して、開始通知を IObservable で得る拡張メソッド</span><br>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>CLBeaconRegion<span class=\"token punctuation\">></span></span> <span class=\"token function\">StartMonitoringAsObservable</span><span class=\"token punctuation\">(</span><br>    <span class=\"token keyword\">this</span> <span class=\"token class-name\">CLLocationManager</span> man<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CLBeaconRegion</span> beaconRegion<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>    <span class=\"token punctuation\">{</span><br>      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> o <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CLRegionEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><br>            h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>DidStartMonitoringForRegion <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span> <br>            h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>DidStartMonitoringForRegion <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">=></span> x<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>Region <span class=\"token keyword\">as</span> <span class=\"token class-name\">CLBeaconRegion</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <br>      man<span class=\"token punctuation\">.</span><span class=\"token function\">StartMonitoring</span><span class=\"token punctuation\">(</span>beaconRegion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <br>      <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <br>  <span class=\"token comment\">// リージョンへの進入を IObservable で得る拡張メソッド</span><br>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>CLBeaconRegion<span class=\"token punctuation\">></span></span> <span class=\"token function\">RegionEnteredAsObservable</span><span class=\"token punctuation\">(</span><br>    <span class=\"token keyword\">this</span> <span class=\"token class-name\">CLLocationManager</span> man<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CLRegionEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><br>      h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>RegionEntered <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>RegionEntered <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">.</span>Region <span class=\"token keyword\">as</span> <span class=\"token class-name\">CLBeaconRegion</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <br>  <span class=\"token comment\">// リージョンの状態を要求して、結果を IObservable で得る拡張メソッド</span><br>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>CLRegionStateDeterminedEventArgs<span class=\"token punctuation\">></span></span> <span class=\"token function\">RequestStateAsObservable</span><span class=\"token punctuation\">(</span><br>    <span class=\"token keyword\">this</span> <span class=\"token class-name\">CLLocationManager</span> man<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CLBeaconRegion</span> beaconRegion<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Defer</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CLRegionStateDeterminedEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>    <span class=\"token punctuation\">{</span><br>      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> o <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CLRegionStateDeterminedEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><br>      h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>DidDetermineState <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>DidDetermineState <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <br>      man<span class=\"token punctuation\">.</span><span class=\"token function\">RequestState</span><span class=\"token punctuation\">(</span>beaconRegion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br>  <br>  <span class=\"token comment\">// レンジングを開始してビーコン信号を IObservable で得る拡張メソッド</span><br>  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IObservable<span class=\"token punctuation\">&lt;</span>CLRegionBeaconsRangedEventArgs<span class=\"token punctuation\">></span></span> <span class=\"token function\">StartRangingBeaconsAsObservable</span><span class=\"token punctuation\">(</span><br>    <span class=\"token keyword\">this</span> <span class=\"token class-name\">CLLocationManager</span> man<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CLBeaconRegion</span> beaconRegion<span class=\"token punctuation\">)</span><br>  <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Defer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>    <span class=\"token punctuation\">{</span><br>      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> o <span class=\"token operator\">=</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">FromEventPattern</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>CLRegionBeaconsRangedEventArgs<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><br>      h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>DidRangeBeacons <span class=\"token operator\">+=</span> h<span class=\"token punctuation\">,</span> h <span class=\"token operator\">=></span> man<span class=\"token punctuation\">.</span>DidRangeBeacons <span class=\"token operator\">-=</span> h<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">=></span> e<span class=\"token punctuation\">.</span>EventArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <br>      man<span class=\"token punctuation\">.</span><span class=\"token function\">StartRangingBeacons</span><span class=\"token punctuation\">(</span>beaconRegion<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>  <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>実機で動作するサンプルを</p>\n<ul>\n<li><a href=\"https://github.com/amay077/FindTheMonkey\">amay077/FindTheMonkey</a></li>\n</ul>\n<p>に置きました。</p>\n<p><code>locationMgr.StartMonitoringAsObservable</code> で始まるところがキモですね。各々の機能は <code>CLLocationManagerExtensions.cs</code> の拡張メソッドで逃してます。これも C# の利点(たしか Objective-C にもあったっけ)。</p>\n<p>リージョン監視の開始通知を受け取ったら進入の検知(A)をしつつ、もうひとつの処理で開始位置のリージョン状態を得て、それがリージョン内だったら値を流す(B)。これらは <code>.Amb</code> で合流。 <code>.Amb</code> は右辺と左辺のどちらか先に返された最初の結果を後続に流すというものです。つまり、B がリージョン外だったら自動的に A の <code>didEnterRegion</code> を待つことになります。</p>\n<p>最後に、レンジングを開始して受信する度に結果(ビーコン信号)を流します。</p>\n<p>んで、これを購読(<code>.Subscribe</code>)することで処理を開始して、結果を <code>// Beacon が見つかった時に行う処理を書く</code> のところで受け取る仕組みです。</p>\n<p>このように Rx を使うことで、非同期のコールバックを含む処理を直列に書け、処理の並列化や合成も簡単に行えます。</p>\n<p>Objective-C でも <a href=\"http://qiita.com/somtd@github/items/8409ddd6d0927c04c1dd\">ReactiveCocoa</a> とか使うとできるのかな？(でもやっぱり構文が…)</p>\n<p>そんなわけで、少しでも Xamarin に興味持っていただけたら幸いです。(これが言いたかった)</p>\n",
      "date_published": "2013-12-11T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/10/about-xamarin-components/",
      "url": "https://blog.amay077.net/blog/2013/12/10/about-xamarin-components/",
      "title": "Xamarin Component Store の紹介]",
      "content_html": "<p>Titanium に <a href=\"https://marketplace.appcelerator.com/home\">MarketPlace</a> があるように、Xamarin のマーケットプレイスとして Xamarin Components があります。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://components.xamarin.com/\">Xamarin Components</a></li>\n</ul>\n<p>これは、Xamarin Studio とも連携していて、開発中にIDEから、コンポーネントを探す→ダウンロード＆組み込み、が速やかに行えるようになっています。</p>\n<p>今日は、Components の中から主なもの、私が使ったことがあるものを少し紹介します。</p>\n<h3 id=\"json.net\"><a href=\"http://components.xamarin.com/view/json.net\">Json.NET</a> <a class=\"direct-link\" href=\"#json.net\">#</a></h3>\n<p>.NET で Json を扱うのに必須のライブラリ。Nuget にもあるし、こっちにもあります。</p>\n<h3 id=\"zxing.net.mobile\"><a href=\"http://components.xamarin.com/view/zxing.net.mobile\">ZXing.Net.Mobile</a> <a class=\"direct-link\" href=\"#zxing.net.mobile\">#</a></h3>\n<p>定番の1次元/2次元バーコードリーダーライブラリ。</p>\n<h3 id=\"sqlite.net\"><a href=\"http://components.xamarin.com/view/sqlite-net\">SQLite.NET</a> <a class=\"direct-link\" href=\"#sqlite.net\">#</a></h3>\n<p>こちらも定番の SQLite 用ライブラリ。.NET ですからデータ・プロバイダ準拠の API です。</p>\n<h3 id=\"google-maps\">Google Maps <a class=\"direct-link\" href=\"#google-maps\">#</a></h3>\n<p>Google Map を使うためのライブラリ。決して Google Maps JavaScript API のラッパじゃないですよ。</p>\n<ul>\n<li>iOS版 - <a href=\"http://components.xamarin.com/view/googlemapsios\">Google Maps</a></li>\n<li>Android版 - <a href=\"http://components.xamarin.com/view/googleplayservices\">Google Play Services</a></li>\n</ul>\n<p>これらは過去に使い方の記事を書きました。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/14191c808e9cac4eae2c\">Xamarin.Android での Google Map(というか Play Service) 利用が、本家より簡単になった件</a></li>\n<li><a href=\"http://qiita.com/amay077/items/db2c2d5d0060ba65a0e8\">Google Maps SDK for iOS を Xamarin.iOS で使う</a></li>\n</ul>\n<h3 id=\"xamarin.mobile\"><a href=\"http://components.xamarin.com/view/xamarin.mobile\">Xamarin.Mobile</a> <a class=\"direct-link\" href=\"#xamarin.mobile\">#</a></h3>\n<p>アドレス帳、位置情報、カメラへの、プラットフォームに依存しない API を提供します。</p>\n<h3 id=\"azure-mobile-service\"><a href=\"http://components.xamarin.com/view/azure-mobile-services\">Azure Mobile Service</a> <a class=\"direct-link\" href=\"#azure-mobile-service\">#</a></h3>\n<p>Azure を冠しているせいで Parse などに比べてイマイチ知名度がない(と勝手に思っている) Microsoft の BaaS を使うためのライブラリ。</p>\n<h3 id=\"reactive-extensions-(rx)-for-xamarin\"><a href=\"http://components.xamarin.com/view/rxforxamarin\">Reactive Extensions (Rx) for Xamarin</a> <a class=\"direct-link\" href=\"#reactive-extensions-(rx)-for-xamarin\">#</a></h3>\n<p>LINQ を更に使い倒したいなら必須ですね。</p>\n<h3 id=\"android-ibeacon-service\"><a href=\"http://components.xamarin.com/view/xamarin-android-ibeacon-service\">Android iBeacon Service</a> <a class=\"direct-link\" href=\"#android-ibeacon-service\">#</a></h3>\n<p>IBeacon を Xamarin.Android で使えるようにするライブラリ。<a href=\"https://github.com/RadiusNetworks/android-ibeacon-service\">android-ibeacon-service</a> の Javaバインディング。</p>\n<h2 id=\"components-%E3%81%A8-pcl\">Components と PCL <a class=\"direct-link\" href=\"#components-%E3%81%A8-pcl\">#</a></h2>\n<p>Components を使う上での注意点です。</p>\n<p>最近、PCL が Xamarin.iOS と Android に対応しましたが、この Components で配布されているライブラリは、PCL とは限りません。</p>\n<p><a href=\"http://Json.NET\">Json.NET</a>, ZXing, SQLite とか、PF固有ロジックを含まないので同一バイナリでいけそうなものですが、実際にそうなっているかは分かりません（たぶん参照してるアセンブリをアセンブリブラウザで確認すればわかると思うけど）。ので、自分のアプリでPF依存を減らしたいならば、Nuget から PCL版を持ってくるか、ソースを入手して自分でビルドする必要があります。</p>\n<p>Xamarin.Mobile も、各PFで使い方は全く同じながら、共通なデータクラスが各PF毎のDLLにパッケージされてしまっているので、同じバイナリでは使えません。これの分離については後日書きます。</p>\n<p>Rx は…自前でビルドしようと挑戦しましたが、<code>IObservable</code> は誰のもの？で躓いて早々に諦めました（^_^;</p>\n<h2 id=\"more%E2%80%A6\">More… <a class=\"direct-link\" href=\"#more%E2%80%A6\">#</a></h2>\n<p>企業やコミュニティが公開している .NET のライブラリも Xamarin で使えるかも知れません。画面が絡むものは確実にムリですが、通信や計算に特化したものはそのまま、あるいは軽微な修正のみで使える可能性があります。</p>\n<p>Xamarin では、既存の DLL や exe がどのくらい再利用できるかを計測する “Mobility Scanner” を公開しています。</p>\n<ul>\n<li>[How mobile is your .NET?] (<a href=\"http://scan.xamarin.com/\">http://scan.xamarin.com/</a>)</li>\n<li><a href=\"http://blog.xamarin.com/how-mobile-is-your-.net-code/\">Blog post</a></li>\n</ul>\n<p>高得点が出るライブラリなら、そのまま使えるんじゃないでしょうか。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>とここまで書いて、過去にこんな</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/811cdd8ab3d1243045b6\">Xamarin Component Store を眺めてみる</a></li>\n</ul>\n<p>記事を書いたのを思い出しました。内容ダブってますがまあいいや、リファインってことで。</p>\n",
      "date_published": "2013-12-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/09/using-xamarin-ios-designer/",
      "url": "https://blog.amay077.net/blog/2013/12/09/using-xamarin-ios-designer/",
      "title": "Visual Studio なんて不要？Xamarin Studio の iOS用UIデザイナを試す！",
      "content_html": "<p>Build Insider さんでも Xamarin の記事が公開され、影響力では完全に喰われてしまっている <a href=\"http://qiita.com/advent-calendar/2013/xamarin\">Xamarin Advent Calendar 2013</a> です。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://www.buildinsider.net/mobile/xamarinvisualstudio/01\">Visual StudioでiOS／Androidアプリが書けるXamarinを試してみた（iOS編） - Build Insider</a></li>\n</ul>\n<blockquote>\n<p>通常、Mac上のXcodeでiOSアプリのUIを作成する場合には、</p>\n<p>1.「Interface Builder」というGUIデザイナーを使う<br>\n　2. コードでUIを記述する</p>\n<p>という2種類の手段がある。</p>\n<p>細かく表示位置などを制御したい場合などでは2.の方が好まれる傾向にある。</p>\n</blockquote>\n<blockquote>\n<p>Xamarin for Visual Studioでも、この2.の方法で作成することになる（逆にいうと、Interface Builderはサポートされていないので、コードでしか作成できない）</p>\n</blockquote>\n<p>え、そうなんですか。個人的にはコードでUIを記述するのは破滅への入り口って思ってるんですが…。</p>\n<p>Mac で動かす Xamarin Studio では、</p>\n<p>1.「Interface Builder」というGUIデザイナーを使う<br>\n2. コードでUIを記述する</p>\n<p>どちらも使うことができます。以下参照で。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/bac6621007ecfe7dddb9\">Xamarin.iOS の Tutorial をなんとなくトレースしてみる - Qiita [キータ]</a></li>\n</ul>\n<p>さらに、目下開発中の Xamarin Studio では、iOS デザイナを搭載しており InterfaceBuilder すら必要無くなります。</p>\n<p>今回は、 Xamarin Studio の α版 を使って、iOS用デザイナを使ってみます。</p>\n<p>(Visual Studio で開発しても、iOSアプリのデバッグやビルドには Mac が要るのだから、初めから Mac の Xamarin Studio で開発しようぜ、という狙いです。)</p>\n<h2 id=\"1.-xamarin-studio-%E3%82%92-%CE%B1%E7%89%88-%E3%81%AB%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B\">1. Xamarin Studio を α版 に切り替える <a class=\"direct-link\" href=\"#1.-xamarin-studio-%E3%82%92-%CE%B1%E7%89%88-%E3%81%AB%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B\">#</a></h2>\n<p>Xamarin Studio を起動したら、システムメニューの 「Check for Updates...」で channel を 「Alpha」 に switch 、インストール後 Restart します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_01.png\" alt=\"img\"><br>\n<img src=\"/img/posts/using_xamarin_ios_builtin_designer_02.png\" alt=\"img\"></p>\n<h2 id=\"2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">2. プロジェクトを作成する <a class=\"direct-link\" href=\"#2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">#</a></h2>\n<p>新しいプロジェクト → iOS → iPhone Storyboard → Single View Application で名前は「UIDesignerTest」として OK します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_04.png\" alt=\"img\"></p>\n<h2 id=\"3.-ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%82%92%E9%96%8B%E3%81%8F\">3. UIデザイナを開く <a class=\"direct-link\" href=\"#3.-ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%82%92%E9%96%8B%E3%81%8F\">#</a></h2>\n<p>左側のビューにある <code>MainStoryboard.storyboard</code> をダブルクリックすると、中央にUIデザイナが開かれます。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_05.png\" alt=\"img\"></p>\n<p>Interface Builder とそっくりでしょう？</p>\n<h2 id=\"4.-ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%81%A0%E3%81%91%E3%81%A7%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">4. UIデザイナだけで画面遷移を実装してみる <a class=\"direct-link\" href=\"#4.-ui%E3%83%87%E3%82%B6%E3%82%A4%E3%83%8A%E3%81%A0%E3%81%91%E3%81%A7%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>まったくコーディングせずに、画面遷移してみます。</p>\n<p>右側ビューにある 「Toolbox」から「Navigation Controller」をデザイナにドラッグ＆ドロップします。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_06.png\" alt=\"img\"></p>\n<p>ちょっと見やすいようにレイアウトを整えてみます。(中央右上の +/- ボタンで拡大/縮小ができます)</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_07.png\" alt=\"img\"></p>\n<p>画面遷移の線を Navigation Controller → ViewController(元々あったやつ)  につなぎ直します。Action を尋ねられるたら「Push」を選択します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_08.png\" alt=\"img\"></p>\n<p>Toolbox から Button をドラッグ＆ドロップで配置します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_09.png\" alt=\"img\"></p>\n<p>Button を Ctrl キーを押しながらドラッグして、もう一つの ViewController でドロップします。Action を尋ねられるので「Push」を選択します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_10.png\" alt=\"img\"></p>\n<p>はい、できあがりです。実行してみます。<br>\niOS Simulator から任意のデバイスを選んで「実行」します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_12.png\" alt=\"img\"></p>\n<p>こんな感じです。Storyboard ライクに画面遷移が実装できました。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_13.gif\" alt=\"img\"></p>\n<h2 id=\"5.-%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E5%87%A6%E7%90%86%E3%81%AA%E3%81%A9%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">5. ボタンの処理などを実装してみる <a class=\"direct-link\" href=\"#5.-%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E5%87%A6%E7%90%86%E3%81%AA%E3%81%A9%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>今度はボタンの処理などを実装してみます。</p>\n<p>右端の ViewController に、TextField, Button, Label をそれぞれドラッグ＆ドロップして配置します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_14.png\" alt=\"img\"></p>\n<p>ViewContorller のコードビハインド(っていうのか？)を作成します。<br>\nViewController の下の黒いところを選択して、プロパティビュー(表示されてない場合は、メニュー→ビュー→パッド→プロパティ)の Class に <code>DetailViewController</code> と入力して Enter します。すると DetailViewController.cs などが作成されます。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_15.png\" alt=\"img\"></p>\n<p>次に、Label や Button などをコード上の変数にします。(iOS の世界では Outlet って言います)<br>\nTextField を選択して、プロパティビューの Name に <code>text1</code> と入力して Enter します。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_16.png\" alt=\"img\"></p>\n<p>すると、<code>DetailViewController.designer.cs</code> にプロパティ <code>text1</code> が作成されています。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>Foundation</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>CodeDom<span class=\"token punctuation\">.</span>Compiler</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">UIDesignerTest</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Register</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"DetailViewController\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>\t<span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DetailViewController</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Outlet</span></span><span class=\"token punctuation\">]</span><br>\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">GeneratedCodeAttribute</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"iOS Designer\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>\t\t<span class=\"token return-type class-name\">MonoTouch<span class=\"token punctuation\">.</span>UIKit<span class=\"token punctuation\">.</span>UITextField</span> text1 <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> ReleaseDesignerOutlets <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>text1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\ttext1<span class=\"token punctuation\">.</span>Dispose <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\ttext1 <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>同じ手順で Label からプロパティ <code>label1</code> を作成します。</p>\n<p>次に、ボタンが押された時に、text1 の内容を label1 に表示するようにします。</p>\n<p>Button の TouchUpInside イベントにハンドラを作ります。(iOS的には Action といいます。)</p>\n<p>Button を選択して、プロパティビューを表示し、上部にある「Event」を選択します。しばらく待つと Control Events が表示されるので、Touch → Up Inside の項目に <code>button1_TouchUpInside</code> と入力して Enter します。(メソッド名は Visual Studio の慣例？に従ってますが、任意の名称で OK です。)</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_17.png\" alt=\"img\"></p>\n<p>すると、コードエディタが開かれてどこに Add Event Handler するか聞かれるので、適当な位置で Enter すると、 <code>button1_TouchUpInside</code> のコードが生成されます。</p>\n<p>そこに、TextField の内容を Label に表示するコードを書きましょう。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">UIDesignerTest</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DetailViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UIViewController</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> DetailViewController <span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> handle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span> <span class=\"token punctuation\">(</span>handle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">partial</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_TouchUpInside</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIButton</span> sender<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            label1<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> text1<span class=\"token punctuation\">.</span>Text<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 記述したコード</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これで完成。動かしてみます。</p>\n<p><img src=\"/img/posts/using_xamarin_ios_builtin_designer_18.gif\" alt=\"img\"></p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Xamarin Studio の強力な iOS UIデザイナを紹介しました。<br>\n現在 Stable な Xamarin Studio にはこれは搭載されていませんが、α版に切り替えることで今すぐ試すことができます。</p>\n<p>Visual Studio の Addin にも搭載されるようですが、今それが使えるかは分かりません。</p>\n<p>冒頭で述べた通り、Visual Studio 使わずに Xamarin Studio だけでも十分実用レベルなので、最初は Xamarin Studio で試してみてもよいと思います。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://xamarin.com/evolve/2013\">Evolve 2013 Conference – Xamarin</a> の 「iOS Designer」のチャプターから。歓声がすごいｗ</li>\n<li><a href=\"http://docs.xamarin.com/guides/ios/user_interface/designer/\">Designer ｜ Xamarin</a></li>\n<li><a href=\"http://blog.xamarin.com/hands-on-xamarin-studio%e2%80%99s-powerful-new-ios-designer/\">Hands-on: Xamarin Studio’s powerful new iOS designer ｜ Xamarin Blog</a></li>\n</ul>\n",
      "date_published": "2013-12-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/06/advantage-of-xamarin-1/",
      "url": "https://blog.amay077.net/blog/2013/12/06/advantage-of-xamarin-1/",
      "title": "細かすぎて伝わらない Xamarin にして良かった事(その1)",
      "content_html": "<p>それ Xamarin じゃなくて C# じゃん！とかのツッコミはナシでｗ<br>\nまあ Java よりも Objective-C よりも C# がイイから選んでいるわけで。<br>\nサンプルコードは Xamarin.Android ですが iOS でも同じです。</p>\n<!--more-->\n<h2 id=\"1.-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E3%83%9E%E3%83%AB%E3%83%81%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%81\">1. イベントのマルチキャストができる！ <a class=\"direct-link\" href=\"#1.-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%AE%E3%83%9E%E3%83%AB%E3%83%81%E3%82%AD%E3%83%A3%E3%82%B9%E3%83%88%E3%81%8C%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%81\">#</a></h2>\n<p><code>setOnClickListener</code> とかリスナー系が全部 <code>Event</code> になっているので、複数のリスナを登録可能、削除もできます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">/** 省略 **/</span><br><br>    <span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// Label 変えます</span><br>    button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">delegate</span><br>    <span class=\"token punctuation\">{</span><br>\t\tbutton<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} clicks!\"</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// Logcat にも出しちゃう</span><br>\tbutton<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Android<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Main\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Clicked!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// .NET2.0 な方の書き方</span><br>\tbutton<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> button_Click<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// Toast にも出そ</span><br><span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\tToast<span class=\"token punctuation\">.</span><span class=\"token function\">MakeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Clicked!\"</span><span class=\"token punctuation\">,</span> ToastLength<span class=\"token punctuation\">.</span>Short<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"2.-var-%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%EF%BC%81\">2. <code>var</code> が使える！ <a class=\"direct-link\" href=\"#2.-var-%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%EF%BC%81\">#</a></h2>\n<p>C# なら <code>var</code> 使わなきゃ。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>Piyo<span class=\"token punctuation\">,</span> Hoge<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 長いよ…</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Dictionary<span class=\"token punctuation\">&lt;</span>Piyo<span class=\"token punctuation\">,</span> Hoge<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">//Button button = FindViewById&lt;Button>(Resource.Id.myButton);</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Variant じゃないですから、念の為。</p>\n<h2 id=\"3.-runnable-%E3%81%8C%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F%E3%81%A7%E6%9B%B8%E3%81%91%E3%82%8B%EF%BC%81\">3. Runnable がラムダ式で書ける！ <a class=\"direct-link\" href=\"#3.-runnable-%E3%81%8C%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F%E3%81%A7%E6%9B%B8%E3%81%91%E3%82%8B%EF%BC%81\">#</a></h2>\n<p>Android-Java では <code>Activity.runOnUiThread</code> や <code>Handler.post</code> って Runnable を受け取るようになっていて、大抵無名クラスにするので、長ったらしい記述になってしまいますが、Xamarin.Android では、Runnable に加えて <code>Action</code> も受け取ってくれ、これはラムダ式で書けるので非常にスッキリ書けます。<br>\nRunnable にかぎらずラムダ式の恩恵は大きいのですが(イベントハンドラとか)。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br><span class=\"token punctuation\">{</span><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Progress...\"</span><span class=\"token punctuation\">;</span><br><br>    Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Fat な処理</span><br>        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// UIスレッドで実行</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">RunOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Finished.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">/*// Java だとこんな長ったらしいコードが書かないといけない<br>        MainActivity.this.runOnUiThread(new Runnable() {<br>            @Override<br>            public void run() {<br>                // hogehoge<br>            }<br>        }); */</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>ちょっと話がそれますが、<code>Activity.runOnUiThread</code> 自体、Android 固有の API なので、プラットフォーム依存を減らそうと思ったら <code>SynchronizationContext</code> を使います。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> syncContext <span class=\"token operator\">=</span> SynchronizationContext<span class=\"token punctuation\">.</span>Current<span class=\"token punctuation\">;</span><br>button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br><span class=\"token punctuation\">{</span><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Progress...\"</span><span class=\"token punctuation\">;</span><br><br>    Task<span class=\"token punctuation\">.</span>Factory<span class=\"token punctuation\">.</span><span class=\"token function\">StartNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// Fat な処理を別スレッドで</span><br>        Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ContinueWith</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> syncContext<span class=\"token punctuation\">.</span><span class=\"token function\">Post</span><span class=\"token punctuation\">(</span>state <span class=\"token operator\">=></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// UIスレッドでの処理</span><br>        button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Finished.\"</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<h2 id=\"4.-async%2Fawait-%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%EF%BC%81\">4. async/await が使える！ <a class=\"direct-link\" href=\"#4.-async%2Fawait-%E3%81%8C%E4%BD%BF%E3%81%88%E3%82%8B%EF%BC%81\">#</a></h2>\n<p>それはそうと上のコード、async/await を使ったらたったの3行ですよ！<br>\nAndroid の <code>AsyncTask</code> とか、iOS の GCD とか、ほぼ捨てられますよ。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Progress...\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// UIスレッド</span><br>    <span class=\"token keyword\">await</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ワーカースレッド</span><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Finished.\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// UIスレッド</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>とりあえずこんなところで。<br>\n他にも、気づいたら書きます。</p>\n",
      "date_published": "2013-12-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/05/xamarin-vs-some-x-platform-framework/",
      "url": "https://blog.amay077.net/blog/2013/12/05/xamarin-vs-some-x-platform-framework/",
      "title": "Xamarin vs 他のクロスプラットフォーム開発ツール",
      "content_html": "<p>Xamarin は、クロスプラットフォーム開発ツールとして紹介されることが多いので、他の同類のツールと比較してみたいと思います。</p>\n<p>対象は Android と iOS に絞ります。<br>\n速度がーとか、メモリ使用量がー、とか言った話はナシで、仕組みとかを淡々と述べます。</p>\n<!--more-->\n<p>ゲーム系は分からないのでナシで。業務アプリつくるレベルだと思ってください。</p>\n<p>あ、いずれもガッツリ使ったことはないので、間違ってたらツッコミお願いします。</p>\n<h2 id=\"1.-%E3%81%BE%E3%81%9A-xamarin-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%8A%E3%81%95%E3%82%89%E3%81%84\">1. まず <a href=\"http://xamarin.com/\">Xamarin</a> についておさらい <a class=\"direct-link\" href=\"#1.-%E3%81%BE%E3%81%9A-xamarin-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6%E3%81%8A%E3%81%95%E3%82%89%E3%81%84\">#</a></h2>\n<h3 id=\"%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E\">開発言語 <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E\">#</a></h3>\n<p>C#、F# などの .NET 言語を使います。<a href=\"http://VB.NET\">VB.NET</a> は…プロジェクトテンプレートが無いだけですかね？</p>\n<h3 id=\"%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB\">実行モデル <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB\">#</a></h3>\n<p>Android では、パッケージ(apk) として Monoランタイムと.NET中間言語がパッケージングされ、アプリ実行時にネイティブコードにコンパイルされて実行されます、いわゆる JIT。</p>\n<p>iOS では、 .NET言語は パッケージ(ipa) 作成時にネイティブコードにコンパイルされ、アプリ実行時にはネイティブコードが実行されます。事前コンパイル AOT(Ahead-Of-Time)コンパイルと呼ばれます。</p>\n<p>UIパーツについては Android も iOS もネイティブのものが使われます。</p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%81%A8%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80\">共通にできる所とできない所 <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%81%A8%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80\">#</a></h3>\n<p>コアロジックは共通化できます。</p>\n<p>画面、GPSやカメラなどプラットフォーム毎にAPIが異なる箇所は共通化できません。</p>\n<h3 id=\"%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">ネイティブ機能の呼び出し <a class=\"direct-link\" href=\"#%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97\">#</a></h3>\n<p>※ここでいう「ネイティブ」とは、iOS なら Objective-C、Android なら Java で開発された部品、の意です。C言語のガチなやつじゃないです。</p>\n<p>各PF製の外部ライブラリは Binding という仕組みで呼び出すことができます。</p>\n<h2 id=\"2.-titanium-mobile\">2. <a href=\"http://www.appcelerator.com/titanium/\">Titanium Mobile</a> <a class=\"direct-link\" href=\"#2.-titanium-mobile\">#</a></h2>\n<p>思えばクロスプラットフォーム開発ツールでもっとも先に普及しましたね。</p>\n<h3 id=\"%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E-2\">開発言語 <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E-2\">#</a></h3>\n<p>JavaScript を使います。</p>\n<h3 id=\"%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-2\">実行モデル <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-2\">#</a></h3>\n<p>Android, iOS ともにパッケージには、Javascriptコードが含まれます。実行時にそれは、Javascriptエンジン(V8など)で解釈され、ネイティブAPIにブリッジされて実行されます。(あってる？</p>\n<p>UIパーツについては Android も iOS もネイティブのものが使われます。</p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80\">共通にできる所、できない所 <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80\">#</a></h3>\n<p>コアロジック、および GPS やセンサーなど、Titanium によって共通APIが用意されている機能は共通化ができます。UI も Label や EditBox など、簡素なものは共通になります。</p>\n<p>PF固有の UIパーツ は共通化できません。CoverFlowView は iOS でしか使えません。</p>\n<h3 id=\"%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-2\">ネイティブ機能の呼び出し <a class=\"direct-link\" href=\"#%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-2\">#</a></h3>\n<p>各PF製の外部ライブラリは Module という仕組みで呼び出すことができます。</p>\n<h2 id=\"3.-adobe-air-for-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB\">3. <a href=\"http://help.adobe.com/ja_JP/air/build/WSfffb011ac560372f-5d0f4f25128cc9cd0cb-8000.html\">Adobe AIR for モバイル</a> <a class=\"direct-link\" href=\"#3.-adobe-air-for-%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB\">#</a></h2>\n<p>正式名称なんですか？いわゆる Flash の AIR のモバイル版です。</p>\n<h3 id=\"%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E-3\">開発言語 <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E-3\">#</a></h3>\n<p>ActionScript を使います。</p>\n<h3 id=\"%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-3\">実行モデル <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-3\">#</a></h3>\n<p>Android では、パッケージ(apk) として AIRランタイムとActionScript言語がパッケージングされ、アプリ実行時にネイティブコードにコンパイルされて実行されます。(AIRランタイムは別アプリとして切り離すこともできます)</p>\n<p>iOS では、 ActionScript言語は パッケージ(ipa) 作成時にネイティブコードにコンパイルされ、アプリ実行時にはネイティブコードが実行されます。</p>\n<p>UIパーツについては、Android/iOS のネイティブUIは使わず、AIR で用意されたパーツを使います。</p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80-2\">共通にできる所、できない所 <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80-2\">#</a></h3>\n<p>基本的に全てのロジック、UI が共通化できます。(機種依存や特定端末への最適化を除けば)</p>\n<p>その替り AIR に用意されていない機能（例えば Android の Toast など）を使いたい場合、ネイティブ機能の呼び出しに頼ることになります。</p>\n<h3 id=\"%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-3\">ネイティブ機能の呼び出し <a class=\"direct-link\" href=\"#%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-3\">#</a></h3>\n<p>各PF製の外部ライブラリは Native Extensions という仕組みで呼び出すことができます。</p>\n<h2 id=\"4.-delphi-xe\">4. <a href=\"http://www.embarcadero.com/jp/products/delphi\">Delphi XE</a> <a class=\"direct-link\" href=\"#4.-delphi-xe\">#</a></h2>\n<p>2010年あたりから Delphi &quot;XE(X-platform Edition)&quot; として、クロスプラットフォーム対応が可能になっています。(Android は最近対応しました)</p>\n<h3 id=\"%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E-4\">開発言語 <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E8%A8%80%E8%AA%9E-4\">#</a></h3>\n<p>Delphi を使います。</p>\n<h3 id=\"%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-4\">実行モデル <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-4\">#</a></h3>\n<p>Android/iOS ともにパッケージングの際にネイティブコードにコンパイルされます。</p>\n<p>UIパーツについては、Android/iOS のネイティブUIは使わず、Delphi(というか FireMonkey）で用意されたパーツを使います。</p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80-3\">共通にできる所、できない所 <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80-3\">#</a></h3>\n<p>基本的に全てのロジック、UI が共通化できます。(機種依存や特定端末への最適化を除けば)</p>\n<p>その替り Delphi(FireMonkey) に用意されていない機能（何があるのだろう？）を使いたい場合、ネイティブ機能の呼び出しに頼ることになります。</p>\n<h3 id=\"%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-4\">ネイティブ機能の呼び出し <a class=\"direct-link\" href=\"#%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-4\">#</a></h3>\n<p>iOSapi.Foundation や、Androidapi.Log, Macapi.AppKit などの「Unit」を ``uses  して使うことができます。<br>\n(<a href=\"http://qiita.com/amay077/items/01917ef1be3da9259348#comment-eeefbb22b5318dede221\">コメント</a>にて教えて頂きました)</p>\n<h2 id=\"5.-phonegap\">5. <a href=\"http://phonegap.com/\">PhoneGap</a> <a class=\"direct-link\" href=\"#5.-phonegap\">#</a></h2>\n<p>認知度高いので、一応。</p>\n<h3 id=\"%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\">開発環境 <a class=\"direct-link\" href=\"#%E9%96%8B%E7%99%BA%E7%92%B0%E5%A2%83\">#</a></h3>\n<p>JavaScript を使います。</p>\n<h3 id=\"%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-5\">実行モデル <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A1%8C%E3%83%A2%E3%83%87%E3%83%AB-5\">#</a></h3>\n<p>Android/iOS とも、アプリに見えて実際は WebView の上で JavaScript コードが動いてます。</p>\n<h3 id=\"%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80-4\">共通にできる所、できない所 <a class=\"direct-link\" href=\"#%E5%85%B1%E9%80%9A%E3%81%AB%E3%81%A7%E3%81%8D%E3%82%8B%E6%89%80%E3%80%81%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84%E6%89%80-4\">#</a></h3>\n<p>WebView 上で動くので基本共通なはずです。細かい所はよく分かってません。</p>\n<h3 id=\"%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-5\">ネイティブ機能の呼び出し <a class=\"direct-link\" href=\"#%E3%83%8D%E3%82%A4%E3%83%86%E3%82%A3%E3%83%96%E6%A9%9F%E8%83%BD%E3%81%AE%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97-5\">#</a></h3>\n<p>Plugin というのを自作することで実現可能なようです。</p>\n<h2 id=\"6.-qt(%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%88)-mobile\">6. <a href=\"http://qt.digia.com/Qtmobileedition\">Qt(キュート) Mobile</a> <a class=\"direct-link\" href=\"#6.-qt(%E3%82%AD%E3%83%A5%E3%83%BC%E3%83%88)-mobile\">#</a></h2>\n<p>C++ で書くんですよね？ってくらいしか分かりませんすいません。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<h3 id=\"xamarin\">Xamarin <a class=\"direct-link\" href=\"#xamarin\">#</a></h3>\n<ul>\n<li><a href=\"http://xamarin.com/how-it-works\">How it Works - Xamarin</a></li>\n<li><a href=\"http://ufcpp.wordpress.com/2013/02/24/xamarin-2-0/\">Xamarin 2.0 ｜ ++C++; // 未確認飛行 C ブログ</a></li>\n<li><a href=\"https://docs.google.com/presentation/d/1QS9gWRGIzTiXqD9GK3X4JsskskHp2NcNBQJBly96Eis\">How Xamarin.Android works [ja]</a></li>\n</ul>\n<h3 id=\"titanium-mobile\">Titanium Mobile <a class=\"direct-link\" href=\"#titanium-mobile\">#</a></h3>\n<ul>\n<li><a href=\"http://www.slideshare.net/MoriShingo/titanium-mobile-13081280\">福井スマートフォンハッカソン Titanium Mobileの紹介</a></li>\n<li><a href=\"http://titanium_seminar.soracid.com/219\">Titanium Seminar » 種々のアプリ開発手法とTitaniumの優位性</a></li>\n</ul>\n<h3 id=\"adobe-air-for-mobile\">Adobe AIR for Mobile <a class=\"direct-link\" href=\"#adobe-air-for-mobile\">#</a></h3>\n<ul>\n<li><a href=\"http://help.adobe.com/ja_JP/flex/mobileapps/WS4bebcd66a74275c3-416562ab12ee52291fa-8000.html\">Adobe Flex 4.6 * モバイルアプリケーションのパッケージ化とオンラインストアへの書き出し</a></li>\n<li><a href=\"http://www.atmarkit.co.jp/fsmart/articles/air_int/01.html\">ネイティブへ拡張し続けるAIRは“3”でどうなるのか - ＠IT</a></li>\n</ul>\n<h3 id=\"delphi-xe\">Delphi XE <a class=\"direct-link\" href=\"#delphi-xe\">#</a></h3>\n<ul>\n<li><a href=\"http://togetter.com/li/598248\">Delphi XE と FireMonkey について教えてもらった - Togetter</a></li>\n<li><a href=\"http://www.embarcadero.com/jp/technical-papers-japanese\">エンバカデロ技術文書ライブラリ</a> の 「ホワイトペーパー: モバイル開発のためのDelphi言語」</li>\n</ul>\n<h3 id=\"phonegap\">PhoneGap <a class=\"direct-link\" href=\"#phonegap\">#</a></h3>\n<ul>\n<li><a href=\"http://docs.phonegap.com/en/3.2.0/index.html\">PhoneGap API Documentation</a></li>\n</ul>\n<h3 id=\"qt-mobile\">Qt Mobile <a class=\"direct-link\" href=\"#qt-mobile\">#</a></h3>\n<ul>\n<li><a href=\"http://qt.digia.com/Qtmobileedition\">Qt Mobile Edition</a></li>\n</ul>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>言語はまあそれぞれ違いますよね当然。</p>\n<p>実行モデルは、iOS はその規約上全て AOT(Titanium を除く)、事前コンパイル方式です。<br>\nAndroid の方は、JIT型が Xamarin と AIR、AOT型が DelphiXE 、Titanium は何ていうの、iOS でも Androide でもインタプリタ？</p>\n<p>画面を構成するパーツについては、各PFのネイティブUIを使うのが Xamarin、Titanium で、開発ツール側で頑張って全部レンダリングするのが AIR と DelphiXE 。DelphiXE は &quot;Pixel Perfect&quot; という技術でネイティブと寸分たがわない見た目を実現してるそうです。</p>\n<p>ネイティブ機能の呼び出しは各社、なんらかの手段を用意してます（そりゃそうだ</p>\n<p>これらの仕組みの違いが、それぞれメリット・デメリットを生み出します。<br>\n「使用上の注意をよく読み用法、用量を守り正しくお使いください」と言いたいところですが「それならはじめからネイティブでやるよ！」と突っ込まれそうですね。</p>\n<p><a href=\"http://qiita.com/advent-calendar/2013/xamarin\">Xamarin Advent Calendar</a> で、Xamarin の特徴を一つでも伝えられたら、と思います。</p>\n<p>以上、文字だらけの記事にお付き合い頂きありがとうございました。</p>\n",
      "date_published": "2013-12-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/12/01/what-is-xamarin/",
      "url": "https://blog.amay077.net/blog/2013/12/01/what-is-xamarin/",
      "title": "Xamarin(ザマリン) とはなんぞや",
      "content_html": "<p>【2017年5月時点の情報で更新しました。】</p>\n<p>Xamarin(ザマリンと読みます) とはなんぞや、個人開発者として使う時にどうなるの、的な事をさらっと書いてみようと思います。</p>\n<!--more-->\n<p>Xamarin は 2016年2月、Microsoft に買収され、 Visual Studio に無償で同梱されることになりました。</p>\n<ul>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/ms-xamarin\">【速報】Xamarin のこれからについて！ - Xamarin 日本語情報</a></li>\n<li><a href=\"http://qiita.com/amay077/items/6e5c40abe0c21fc79e6a\">Xamarin が Microsoft に買収された結果 - Qiita</a></li>\n</ul>\n<p>Xamarin 自体は元企業名であり、その歴史は .NET の Linux 版を開発していた Ximian という企業が Novell に買収されて、その後レイオフされて作った企業で・・・した。<br>\nこのあたりの歴史については <a href=\"http://atsushieno.hatenablog.com/entry/2013/12/24/213950\">@atsushieno さん</a> や <a href=\"https://blogs.msdn.microsoft.com/chomado/xamarin/xamarin-history-as-a-company/\">ちょまどさん</a> のブログが（読み物としても）おもしろいです。<br>\nMicrosoftに買収されたことにより企業としての Xamarin はなくなりますが、現在のところ Xamarin という開発ツールの名称は、Visual Studio や、Xamarin Studio の中に見ることができます。</p>\n<ul>\n<li><a href=\"http://xamarin.com/\">Xamarin - Official site</a></li>\n<li><a href=\"http://ja.wikipedia.org/wiki/Xamarin\">Xamarin - Wikipedia</a></li>\n</ul>\n<p>で、同社が開発した、 .NET技術で iOS や Android アプリが作成できる SDK が、Xamarin.iOS だったり、Xamarin.Android だったりするわけですが、それらに Mac アプリを開発できる Xamarin.Mac や、Xamarin Studio という統合開発環境を加えたツール群をまるごとひっくるめて Xamarin と呼んでいます。<br>\n（Xamarin社は他にも、クラウド上で実機テストができる <a href=\"https://www.xamarin.com/test-cloud\">Xamarin Test Cloud</a>, C#のPlaygroundツール<a href=\"https://developer.xamarin.com/guides/cross-platform/workbooks/\">Xamarin Workbooks</a> などのプロダクトがあります）</p>\n<h2 id=\"%E4%BD%9C%E6%88%90%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">作成できるアプリケーション <a class=\"direct-link\" href=\"#%E4%BD%9C%E6%88%90%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">#</a></h2>\n<p>開発ツールの Xamarin を利用して作成できるアプリは、まず以下のものがあります。</p>\n<ul>\n<li>Mono を利用したアプリケーション、クラスライブラリ</li>\n<li>iOSアプリ(Xamarin.iOS)</li>\n<li>Androidアプリ(Xamarin.Android)</li>\n<li>macOSアプリ(Xamarin.Mac)</li>\n<li>複数のプラットフォームで再利用可能なクラスライブラリ(PCL)</li>\n</ul>\n<p>さらに、 Xamarin.Forms というフレームワークによって、以下のアプリも作成可能です。</p>\n<ul>\n<li>Windowsアプリ（UWPのみ）</li>\n<li>Tizenアプリ（※開発中）</li>\n</ul>\n<p>Windows 用の .NETアプリ(Windows.Forms や WPF)は、Xamarin 自体では作成できません。それは Visual Studio の役割です。ただ、PCL(Portable Class Library)と呼ばれる、プラットフォームを問わず動作するアセンブリ(DLL) を作成できますし、そもそも Mono と .NET の API はほとんど同じなので、書いたコードは Windows でも流用できます。</p>\n<h2 id=\"%E3%81%A9%E3%81%93%E3%81%8C%E5%85%B1%E9%80%9A%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F\">どこが共通化できる？ <a class=\"direct-link\" href=\"#%E3%81%A9%E3%81%93%E3%81%8C%E5%85%B1%E9%80%9A%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B%EF%BC%9F\">#</a></h2>\n<p>まず、Xamarin.Android, Xamarin.iOS, Xamarin.Mac が提供するのは、</p>\n<p><strong>各プラットフォーム(PF)<a href=\"http://xn--u9jv69q.NET\">版の.NET</a> API ＋ 各PFのAPIの.NETラッパクラス</strong></p>\n<p>です。</p>\n<p>「<a href=\"http://xn--PF-1b4a279m6v5a.NET\">各PF版の.NET</a> API」とは、いわゆる基本クラスで、基本的な型だったり、文字列処理だったり LINQ だったりその他もろもろです。</p>\n<p>一方、「各PFのAPIの.NETラッパクラス」とは、Android なら Android SDK、iOS なら CocoaTouch の API を .NET で記述できるラッパーです。ここにプラットフォーム間の互換性はありません。</p>\n<p>なので、画面を作るのに Xamarin.Android なら <code>Activity</code> クラスを使いますし、Xamarin.iOS なら <code>ViewController</code> クラスを使います。<br>\nGPS を使うのに、.Android なら <code>LocationManager</code> を使いますし、.iOS なら <code>CLLocationManager</code> を使います。</p>\n<p>つまり、共通にできるのは「コア」な部分だけで、「画面」と「各PF固有の機能」は共通化することができません。従って、各プラットフォーム の API は理解しておく必要があります。それから .NET Framework の基本クラスライブラリも。</p>\n<p>上司に言うと「なんだその程度か」と返されると思いますが、コア部分だけでも、 <strong>Javaと Swift でそれぞれ実装しなくて良い</strong> というのは十分に価値があると思うんですよね僕は。</p>\n<ul>\n<li><a href=\"http://qiita.com/okajima/items/8ca53ff00a825f28dbc6\">XamarinでWindows / Mac OSX 両対応のデスクトップアプリを作る</a></li>\n</ul>\n<p>は、異なるプラットフォームで共通化できる箇所が具体的に示された有益な情報です。</p>\n<p>ほかのクロスプラットフォーム開発可能な SDK（Titanium とか Abobe AIR とか）との比較はこちら → かきました : <a href=\"http://qiita.com/amay077/items/01917ef1be3da9259348\">Xamarin vs 他のクロスプラットフォーム開発ツール</a></p>\n<h2 id=\"%E7%94%BB%E9%9D%A2%E3%81%BE%E3%81%A7%E5%85%B1%E9%80%9A%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B-xamarin.forms\">画面まで共通化できる <a href=\"https://www.xamarin.com/forms\">Xamarin.Forms</a> <a class=\"direct-link\" href=\"#%E7%94%BB%E9%9D%A2%E3%81%BE%E3%81%A7%E5%85%B1%E9%80%9A%E5%8C%96%E3%81%A7%E3%81%8D%E3%82%8B-xamarin.forms\">#</a></h2>\n<p>これはいわゆる Titanium Mobile や Adobe Air, Delphi XE, 最近では React Native と同じアプローチで、共通の画面定義体から、各種プラットフォーム（Android, iOS, Windows Phone, UWP<Universal Windows Platform >）向けの画面を生成します。Adobe Air, Delphi XE と異なるのは、それぞれのプラットフォームが提供するUIパーツが使用されるという点です。<br>\n画面定義体は XAML（ザムル, WPF のそれとは違います）か C＃ のコードで記述します。他にも ValueConverter, バインディング可能なプロパティなど .NET アプリ開発者に馴染みのある要素を使って開発できます。<br>\nXAML のグラフィカルなエディタはないので手書きするしかありませんが、<a href=\"https://developer.xamarin.com/guides/xamarin-forms/xaml/xaml-previewer/\">XAML Previewer for Xamarin.Forms</a>や、<a href=\"http://gorillaplayer.com/\">Gorilla Player</a>を使って、リアルタイムにプレビューさせることができます。</p>\n<p>このXamarin.Formsフレームワークの活用は広がりを見せていて、以下のものに対応（または目下対応中）します。</p>\n<ul>\n<li>Android</li>\n<li>iOS</li>\n<li>UWP</li>\n<li>macOS</li>\n<li>Tizen</li>\n</ul>\n<p>2016年11月に、<a href=\"http://nakasho-dev.hatenablog.jp/entry/2016/11/18/030310\">TizenがXamarin.Forms対応プラットフォームに加わった事</a>は、ちょっとした驚きとともに迎え入れられました。今後は <a href=\"https://twitter.com/migueldeicaza/status/827220707465654272\">WPF への対応もあるかも</a> しれません。</p>\n<p>Xamarin.Formsは発展途上でも何でもありません。<strong>実戦投入できるフレームワーク</strong> です。<br>\n複数プラットフォームで辻褄を合わせて共通なインターフェースとして公開しなければならないので、提供されるUIコントロールは少ないですが、Xamarin.Android, Xamarin.iOS の上に成り立っているので、 <strong>ネイティブの部品をXamarin.Forms化することは容易</strong> です。なぜならネイティブのAPIも同じ言語で同じIDEを使って開発・デバッグできるからです(例えば React Native では、AndroidネイティブのAPIをJavaScript側にブリッジする箇所は Java で<strong>書か</strong>なければなりません)。</p>\n<h2 id=\"mac%E3%81%AE%E4%BA%BA%E3%81%AF-visual-studio-for-mac%E3%80%81win-%E3%81%AE%E4%BA%BA%E3%81%AF-visual-studio-%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%99%E3%82%88\">Macの人は Visual Studio for Mac、Win の人は Visual Studio で開発しますよ <a class=\"direct-link\" href=\"#mac%E3%81%AE%E4%BA%BA%E3%81%AF-visual-studio-for-mac%E3%80%81win-%E3%81%AE%E4%BA%BA%E3%81%AF-visual-studio-%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%97%E3%81%BE%E3%81%99%E3%82%88\">#</a></h2>\n<p>Mac 向けの Visual Studio、<a href=\"https://www.visualstudio.com/ja/vs/visual-studio-mac/\">Visual Studio for Mac</a> がされました。<br>\n中身は実質 Xamarin Studio で、 Windows版の Visual Studio の機能がすべて搭載されているわけではありません。<br>\nXamarin Studio もしばらくは Visual Studio for Mac と同じ機能を搭載していくようなので、どちらを使ってもよいと思います。</p>\n<p>Windows の場合、Visual Studio 2017 に同梱されるようになり、また無料化されたため、 Visual Studio Community でも利用できるようになりました。<br>\n(これまで提供されてきた Windows版の Xamarin Studio は、提供終了となりました。)<br>\nVisual Studio 2015 でも使用可能ですが、環境構築でハマることが多いので Visual Studio 2017 を推奨します。Visual Studio 2017 では、Xamarin のインストールが簡単になっています。それでも既定の選択だとかなりの容量が必要なので、次のリンクを参考に、定義オプションを外すとよいでしょう。</p>\n<ul>\n<li><a href=\"http://ytabuchi.hatenablog.com/entry/visualstudio2017\">Xamarin やりたい人向け Visual Studio 2017 インストール手引書 - Xamarin 日本語情報</a></li>\n<li><a href=\"http://qiita.com/amay077/items/43cd700e4d125a6517b7\">Xamarin の為だけに Visual Studio 2017 をミニマムインストールする - Qiita</a></li>\n</ul>\n<p>Visual Studio 2015 と Visual Studio 2017 は共存が可能です。</p>\n<p>その他の開発ツールには <a href=\"https://www.jetbrains.com/rider/\">JetBrains Rider</a> があります。また開発中の製品ですが、現時点でも開発に使用することができます。</p>\n<ul>\n<li><a href=\"http://qiita.com/amay077/items/c22f608c5ec4c2e39d88\">JetBrains Rider で Xamarin.Android プロジェクトのデバッグが行えるようになりました - Qiita</a></li>\n</ul>\n<p>また iOS アプリを開発する場合は、ビルドや実行・デバッグのために Mac が必要なので、現実的には Mac 必須です。これは買収された後も変わっていません。<br>\nRemoted iOS Simulator (for Windows) が搭載され、Windows の画面でアプリを実行することができるようになりましたが、iOS アプリのビルドには Mac がどうしても必要になります。</p>\n<h2 id=\"%E3%81%A0%E3%81%8B%E3%82%89ios%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AA%E3%82%89mac%E3%81%AF%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%93%E3%81%A0%E3%81%A3%E3%81%A6%E3%81%B0%EF%BC%81\">だからiOSアプリを作るならMacは必要なんだってば！ <a class=\"direct-link\" href=\"#%E3%81%A0%E3%81%8B%E3%82%89ios%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B%E3%81%AA%E3%82%89mac%E3%81%AF%E5%BF%85%E8%A6%81%E3%81%AA%E3%82%93%E3%81%A0%E3%81%A3%E3%81%A6%E3%81%B0%EF%BC%81\">#</a></h2>\n<p><a href=\"https://www.xamarin.com/live\">Xamarin Live Player</a> が発表されて、次のような日本語記事が公開されています。</p>\n<ul>\n<li><a href=\"http://jp.techcrunch.com/2017/05/12/20170511microsoft-now-lets-ios-developers-deploy-run-and-test-their-apps-directly-from-windows/\">WindowsでiOSアプリを開発、テスト、公開できる――MicrosoftがXamarin Live Playerを発表 | TechCrunch Japan</a></li>\n<li><a href=\"http://internet.watch.impress.co.jp/docs/news/1059302.html\">iOSアプリ開発でMac OSが不要に、Windowsで開発・テスト・公開可能な「Xamarin Live Player」 -INTERNET Watch</a></li>\n</ul>\n<p>が、 「macOS不要でiOSアプリが <strong>公開</strong> できる」というのは間違い（誤訳）です。<br>\nXamarin Live Player(XLP)の実行形式は、</p>\n<ul>\n<li><a href=\"http://ticktack.hatenablog.jp/entry/2017/05/13/022611\">Xamarin Live Playerの仕組みを想像してた - ぴーさんログ</a></li>\n</ul>\n<p>で解説されているとおり、XLP用のiOSアプリがソースコードをインタープリタ形式で実行しているに過ぎません。つまり、実際のアプリが動作しているわけではなく、アプリを配布・公開するには、これまで通りmacOSでビルドする必要があります。あと <a href=\"https://twitter.com/amay077/status/862838700568334336\">これ</a>。</p>\n<h2 id=\"xamarin-%E3%81%AE%E3%82%B3%E3%82%A2%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AF%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F\">Xamarin のコアライブラリはオープンソースになりました <a class=\"direct-link\" href=\"#xamarin-%E3%81%AE%E3%82%B3%E3%82%A2%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%81%AF%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AB%E3%81%AA%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F\">#</a></h2>\n<p>Xamarin の基盤となっている <a href=\"http://www.mono-project.com/\">Mono</a> は元々オープンソースです。</p>\n<p>Xamarin.Android, Xamarin.iOS, Xamarin.Mac, Xamarin.Forms のこれまでプロプライエタリだったライブラリ群は、いずれもMITライセンスによるオープンソースになりました → <a href=\"http://open.xamarin.com/\">Xamarin Open Source SDK</a></p>\n<p>Xamarin Studio の IDE としての機能は元々オープンソースである MonoDevelop なので、純粋な Mono アプリケーションを作成するのにも使用されます。Xamarin Studio の Xamarin固有のプラグイン部は、オープンソース化されないとのことです。つまり、Microsoftとしては「開発ツールが収益源」ということになります。</p>\n<h2 id=\"%E4%BE%A1%E6%A0%BC\">価格 <a class=\"direct-link\" href=\"#%E4%BE%A1%E6%A0%BC\">#</a></h2>\n<p>Xamarin自体は無償になりましたが、企業利用の場合、大抵は Visual Studio の購入が必要になります。</p>\n<h3 id=\"%E5%80%8B%E4%BA%BA%E3%81%AE%E5%A0%B4%E5%90%88\">個人の場合 <a class=\"direct-link\" href=\"#%E5%80%8B%E4%BA%BA%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>Windowsの人は、<a href=\"https://www.visualstudio.com/ja-jp/products/visual-studio-community-vs.aspx\">Visual Studio Community</a> で開発・配布ができるようになりました。<br>\nMacの人は、Visual Studio for Mac で（もちろん <a href=\"https://www.xamarin.com/studio\">Xamarin Studio</a> でも） 開発・配布ができるようになりました。</p>\n<h3 id=\"%E4%BC%81%E6%A5%AD%E3%81%AE%E5%A0%B4%E5%90%88\">企業の場合 <a class=\"direct-link\" href=\"#%E4%BC%81%E6%A5%AD%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h3>\n<p>Windowsの人は、Visual Studio のサブスクリプションの購入が必要です。<br>\nMacの人は、Visual Studio for Mac で開発を行いますが、Windowsと同様、Visual Studio サブスクリプションの購入が必要です。</p>\n<p>詳しくは、 <a href=\"http://ytabuchi.hatenablog.com/entry/2016/04/02/163106\">Xamarin の開発環境を整理しよう - Xamarin 日本語情報</a> を参考に、あるいは Microsoft へ問い合わせてください。</p>\n<p><a href=\"https://twitter.com/nuits_jp\">@nuits_jp</a> さんが「絶対わかるXamarinライセンスの判断方法」を書いてくれました！</p>\n<ul>\n<li><a href=\"http://nuits.hatenadiary.jp/entry/2016/07/11/231323\">絶対わかるXamarinライセンスの判断方法 - nuits.jp blog</a></li>\n</ul>\n<h2 id=\"%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%83%85%E5%A0%B1%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">日本語情報について <a class=\"direct-link\" href=\"#%E6%97%A5%E6%9C%AC%E8%AA%9E%E6%83%85%E5%A0%B1%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>2017年5月現在、Xamarin の日本語情報もだいぶ増えてきました。</p>\n<h3 id=\"%E6%9B%B8%E7%B1%8D\">書籍 <a class=\"direct-link\" href=\"#%E6%9B%B8%E7%B1%8D\">#</a></h3>\n<p>2017年6月、ついに Xamarin.Formsバイブルの日本語書籍が発売されます。</p>\n<h4 id=\"%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0xamarin-%E4%B8%8A-xamarin.forms%E3%81%A8c%23%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA\"><a href=\"http://amzn.to/2pEHd38\">プログラミングXamarin 上 Xamarin.FormsとC#によるクロスプラットフォームモバイルアプリ開発</a> <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0xamarin-%E4%B8%8A-xamarin.forms%E3%81%A8c%23%E3%81%AB%E3%82%88%E3%82%8B%E3%82%AF%E3%83%AD%E3%82%B9%E3%83%97%E3%83%A9%E3%83%83%E3%83%88%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%83%A2%E3%83%90%E3%82%A4%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA\">#</a></h4>\n<p>ついに登場、Xamarin.Formsのバイブル「<a href=\"https://developer.xamarin.com/guides/xamarin-forms/creating-mobile-apps-xamarin-forms/\">ペゾルド本</a>」の日本語訳書籍、@atsushieno さんが <a href=\"https://xamarinformsbookreading.connpass.com/\">XamarinFormsBookReading</a> で巡回されてるやつですね。</p>\n<h4 id=\"xamarin%E3%82%A8%E3%82%AD%E3%82%B9%E3%83%91%E3%83%BC%E3%83%88%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC-(software-design-plus)\"><a href=\"http://amzn.to/2nExEQ0\">Xamarinエキスパート養成読本 (Software Design plus)</a> <a class=\"direct-link\" href=\"#xamarin%E3%82%A8%E3%82%AD%E3%82%B9%E3%83%91%E3%83%BC%E3%83%88%E9%A4%8A%E6%88%90%E8%AA%AD%E6%9C%AC-(software-design-plus)\">#</a></h4>\n<p>「エキスパートになる」というよりは、「初心者の人がとりあえずXamarin.Formsでアプリを作れるようになる」ところまでが書かれています。</p>\n<h4 id=\"xamarin%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E3%82%B9%E3%83%9E%E3%83%9B%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA\"><a href=\"http://amzn.to/2nEBKrD\">Xamarinではじめるスマホアプリ開発</a> <a class=\"direct-link\" href=\"#xamarin%E3%81%A7%E3%81%AF%E3%81%98%E3%82%81%E3%82%8B%E3%82%B9%E3%83%9E%E3%83%9B%E3%82%A2%E3%83%97%E3%83%AA%E9%96%8B%E7%99%BA\">#</a></h4>\n<p>こちらも初心者向け。Visual Studio for Mac が使われていてどちらかというとiOSアプリ寄りの解説がされています。</p>\n<h4 id=\"c%23%E3%81%AB%E3%82%88%E3%82%8Bios%E3%80%81android%E3%80%81windows%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80\"><a href=\"http://www.amazon.co.jp/dp/B00MN5P6PY/?tag=oku2008-22\">C#によるiOS、Android、Windowsアプリケーション開発入門</a> <a class=\"direct-link\" href=\"#c%23%E3%81%AB%E3%82%88%E3%82%8Bios%E3%80%81android%E3%80%81windows%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E9%96%8B%E7%99%BA%E5%85%A5%E9%96%80\">#</a></h4>\n<p>内容は少し古いですが、基礎の理解には問題ありません。</p>\n<h4 id=\".net%E9%96%8B%E7%99%BA%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E5%85%A5%E9%96%802016%E5%B9%B4%E7%89%88-visual-studio-2015%E5%AF%BE%E5%BF%9C%E7%89%88\"><a href=\"http://www.amazon.co.jp/dp/4822298612/?tag=oku2008-22\">.NET開発テクノロジ入門2016年版 Visual Studio 2015対応版</a> <a class=\"direct-link\" href=\"#.net%E9%96%8B%E7%99%BA%E3%83%86%E3%82%AF%E3%83%8E%E3%83%AD%E3%82%B8%E5%85%A5%E9%96%802016%E5%B9%B4%E7%89%88-visual-studio-2015%E5%AF%BE%E5%BF%9C%E7%89%88\">#</a></h4>\n<p>.NET開発全般についての書籍ですが、Xamarinについての章があります。C＃/.NET自体もこれから勉強するという方にはふさわしいでしょう。</p>\n<h4 id=\"%E3%81%8B%E3%81%9A%E3%81%8D%E3%81%AExamarin.forms%E5%85%A5%E9%96%80%EF%BC%88kindle%E7%89%88)\"><a href=\"http://amzn.to/2l7oQNK\">かずきのXamarin.Forms入門（Kindle版)</a> <a class=\"direct-link\" href=\"#%E3%81%8B%E3%81%9A%E3%81%8D%E3%81%AExamarin.forms%E5%85%A5%E9%96%80%EF%BC%88kindle%E7%89%88)\">#</a></h4>\n<p>元MVPで現Microsoftの中の人 @okazuki さんによる自費出版本です。Xamarin.Formsの日本語での入門にはピッタリです。</p>\n<h3 id=\"web%E3%82%B5%E3%82%A4%E3%83%88%E3%80%81%E3%83%96%E3%83%AD%E3%82%B0\">Webサイト、ブログ <a class=\"direct-link\" href=\"#web%E3%82%B5%E3%82%A4%E3%83%88%E3%80%81%E3%83%96%E3%83%AD%E3%82%B0\">#</a></h3>\n<ul>\n<li><a href=\"http://atsushieno.hatenablog.com/\">ものがたり</a> - Xamarin の中の人である <a href=\"https://twitter.com/atsushieno\">@atsushieno</a> 氏のブログ</li>\n<li><a href=\"https://blogs.msdn.microsoft.com/chomado/\">ちょ窓帳 – 千代田まどか(ちょまど)のブログ</a> - Microsoftエバンジェリストのちょまどさんのブログ</li>\n<li><a href=\"http://ytabuchi.hatenablog.com/\">Xamarin 日本語情報</a> - Xamarinコミュニティ(JXUG)主宰の @ytabuchi さんのブログです。</li>\n<li><a href=\"http://www.buildinsider.net/mobile/xamarintips\">Xamarin逆引きTips - Build Insider</a> - Xamarinに関するTipsが集まっています</li>\n<li><a href=\"http://qiita.com/tags/xamarin/items\">Qiita の &quot;Xamarin&quot; タグ</a></li>\n<li><a href=\"/\">Experiments Never Fail</a> - ワタシのブログです😅</li>\n<li><a href=\"https://teratail.com/questions/search?q=Xamarin\">teratail の &quot;Xamarin&quot; タグ</a> - 分からない事はここで聞いてみると大抵回答があります</li>\n</ul>\n<h3 id=\"%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3\">コミュニティ <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%9F%E3%83%A5%E3%83%8B%E3%83%86%E3%82%A3\">#</a></h3>\n<ul>\n<li><a href=\"http://jxug.org/\">Japan Xamarin User Group (JXUG)</a> - @ytabuchi さんが代表と務められているコミュニティ。定期的に勉強会、ハンズオンなどを開いています。</li>\n<li><a href=\"https://jxug.connpass.com/\">JXUG - connpass</a> - 登録しておくとXamarinのハンズオンや勉強会の通知を受け取れます</li>\n</ul>\n<p>Microsoft に買収され、より多くの人に知ってもらえ、使ってもらえるようになった Xamarin、事実上クロスプラットフォーム開発の最良の選択肢になったと言えますね。</p>\n<h2 id=\"%E6%9C%80%E5%BE%8C%E3%81%AB%E6%B3%A8%E6%84%8F%E7%82%B9\">最後に注意点 <a class=\"direct-link\" href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB%E6%B3%A8%E6%84%8F%E7%82%B9\">#</a></h2>\n<p>Visual Studio ＋ Xamarin はクロスプラットフォームアプリ開発が行える非常に強力な開発ツールですが、Android や iOS のアプリ開発の知識は <strong>必須</strong> です。</p>\n<p>また、Visual Studio は最強のIDEであるのはその通りですが、Androidアプリ開発には Android Studio、iOSアプリ開発にはXcodeという公式な開発ツールがあり、それらの方が便利な機能もあります。</p>\n<p>そのため、Android Studio や Xcode で Android、iOSアプリを開発できるようになった上で、Visual Studio+Xamarin でクロスプラットフォーム開発をするのが、最大の効果を得られる方法です。</p>\n<p><strong>Java も Swift も学んで C# で D.R.Y(Don't Repeat Yourself) するのが Xamarin です</strong></p>\n<h2 id=\"%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%2F%E8%B6%85%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E5%87%BA%E5%B1%95%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81\">技術書典2/超技術書典に出展しました！ <a class=\"direct-link\" href=\"#%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B82%2F%E8%B6%85%E6%8A%80%E8%A1%93%E6%9B%B8%E5%85%B8%E3%81%AB%E5%87%BA%E5%B1%95%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81\">#</a></h2>\n<p><strong>Essential Xamarin Yin/Yang (陰/陽)</strong> という Xamarin の技術同人誌を数名で書きました。<br>\n2017年にXamarinアプリケーション開発技術の入り口から最先端の世界までを日本語で読める、希少な書籍です。是非ごらんください。</p>\n<p><a href=\"https://techbookfest.org/event/tbf02/circle/5699714196439040\">技術書典2</a> に出展・販売しました。2時間ほどで完売となりありがとうございました。<br>\n続いて<a href=\"https://techbookfest.org/event/cho01\">超技術書典</a>にも出展しました。たくさんのご来場ありがとうございました。</p>\n<ul>\n<li><a href=\"https://atsushieno.github.io/xamaritans/tbf2.html\">技術書典2/超技術書典 出展情報 - Xamaritans</a></li>\n</ul>\n<p>また、通販や商業本化も進んでいきますので、ご期待下さい！</p>\n<blockquote class=\"twitter-tweet\" data-cards=\"hidden\" data-lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://t.co/kubQuMJvYM\">https://t.co/kubQuMJvYM</a><br>というわけで Essential Xamarin は商業出版計画が進行中🎉ですのでお楽しみに！<br>通信販売も予定してます。直近は超技術書典よろしくです！ <a href=\"https://t.co/tT3ktAOJrs\">pic.twitter.com/tT3ktAOJrs</a></p>&mdash; あめい@超技術書典4/30 あ-12 (@amay077) <a href=\"https://twitter.com/amay077/status/854348960864944128\">2017年4月18日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n",
      "date_published": "2013-12-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api/",
      "url": "https://blog.amay077.net/blog/2013/11/05/using-gsimap-dem-csv-api/",
      "title": "地理院地図の標高タイル(CSV)を描画してみた",
      "content_html": "<p>国土地理院が提供している API の一つに「標高タイル」というものがあります。</p>\n<!--more-->\n<p>タイルというと、Googleマップや OpenStreetMap などの Web地図では通常、画像を指しますが、標高タイルAPIでは <strong>「画素毎の高度(ｍ)」</strong> が取得できます。</p>\n<ul>\n<li><a href=\"http://portal.cyberjapan.jp/help/development/demtile.html\">標高タイル仕様 - 地理院地図</a></li>\n<li><a href=\"http://cyberjapandata.gsi.go.jp/xyz/dem/14/14547/6463.txt\">サンプルURL</a></li>\n</ul>\n<p>これは面白い、ということで使ってみました。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">サンプル <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">#</a></h2>\n<ul>\n<li><a href=\"http://jsdo.it/amay077/jjod\">地理院地図の標高タイル(CSV)を描画してみた - jsdo.it</a></li>\n</ul>\n<h3 id=\"google-map\">Google Map <a class=\"direct-link\" href=\"#google-map\">#</a></h3>\n<p><img src=\"/img/posts/using_gsimap_dem_csv_api_01.png\" alt=\"img1\"></p>\n<h3 id=\"%E6%A8%99%E9%AB%98%E3%82%BF%E3%82%A4%E3%83%ABapi-%E3%81%A7%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E6%A8%99%E9%AB%98%E5%80%A4%E3%82%92%E6%8F%8F%E7%94%BB\">標高タイルAPI で取得した標高値を描画 <a class=\"direct-link\" href=\"#%E6%A8%99%E9%AB%98%E3%82%BF%E3%82%A4%E3%83%ABapi-%E3%81%A7%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E6%A8%99%E9%AB%98%E5%80%A4%E3%82%92%E6%8F%8F%E7%94%BB\">#</a></h3>\n<p><img src=\"/img/posts/using_gsimap_dem_csv_api_02.png\" alt=\"img1\"></p>\n<h2 id=\"%E4%BD%95%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%EF%BC%9F\">何をしているか？ <a class=\"direct-link\" href=\"#%E4%BD%95%E3%82%92%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>下は、このサンプルのコードの抜粋ですが、ポイントは２つ</p>\n<ul>\n<li>getTile で通常 img 要素を生成して返すが、代わりに canvas 要素に返す</li>\n<li>標高API をコールして得られた CSV をパースし、 高さに応じた色を計算して、canvas に矩形を描画する</li>\n</ul>\n<p>さすがに1ピクセル毎に描画すると重すぎるので、初期値では 16ピクセルずつに間引きしています(画面の DotSize で変更できます)。</p>\n<p>クライアント側でレンダリングしているので、色などが動的に変更できます。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">    map<span class=\"token punctuation\">.</span>mapTypes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GsiMaps\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>      name<span class=\"token operator\">:</span><span class=\"token string\">\"標高タイル\"</span><span class=\"token punctuation\">,</span><br>      tileSize<span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>      minZoom<span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 標高タイルは Lv:14 しか用意されてないので</span><br>      maxZoom<span class=\"token operator\">:</span><span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <br>      <span class=\"token function-variable function\">getTile</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tileCoord<span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">,</span> ownerDocument</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>          <br>        <span class=\"token comment\">// 普通は img だけど、標高タイルは CSV で画素毎の標高値が取得できるので、</span><br>        <span class=\"token comment\">// クライアント側で描画するために Canvas を使う</span><br>        <span class=\"token keyword\">var</span> canvas <span class=\"token operator\">=</span> ownerDocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"canvas\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        canvas<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span><br>        canvas<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tileCoord<span class=\"token punctuation\">.</span>x <span class=\"token operator\">%</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> tileCoord<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// 各画素の標高値を取得する</span><br>        canvas<span class=\"token punctuation\">.</span>tileUrl <span class=\"token operator\">=</span> <span class=\"token string\">\"http://cyberjapandata.gsi.go.jp/xyz/dem/\"</span> <span class=\"token operator\">+</span> zoom <span class=\"token operator\">+</span>  <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> <span class=\"token string\">\".txt\"</span><span class=\"token punctuation\">;</span><br>        <span class=\"token comment\">// 標高を描画する</span><br>        <span class=\"token function\">renderDem</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        renderedTiles<span class=\"token punctuation\">[</span>canvas<span class=\"token punctuation\">.</span>tileUrl<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">;</span> <span class=\"token comment\">// タイル再描画の為にとっておく</span><br>        <span class=\"token keyword\">return</span> canvas<span class=\"token punctuation\">;</span><br>      <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token comment\">// 標高タイルを描画する</span><br>    <span class=\"token keyword\">function</span> <span class=\"token function\">renderDem</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">canvas</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">var</span> ctx <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2d'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      ctx<span class=\"token punctuation\">.</span><span class=\"token function\">clearRect</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      <br>      $<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>canvas<span class=\"token punctuation\">.</span>tileUrl<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// CSV が得られるのでパース</span><br>        <span class=\"token keyword\">var</span> lines <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\r\\n|\\r|\\n</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lines<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span>dotSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>          <span class=\"token keyword\">var</span> cols <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> cols<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">+=</span>dotSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cols<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'e'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// エラーの画素には 'e' が入ってる</span><br>              <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>              <br>            <span class=\"token comment\">// 標高0ｍ を startColor、標高1000ｍを endColor としたグラデーション色を設定する。</span><br>            ctx<span class=\"token punctuation\">.</span>fillStyle <span class=\"token operator\">=</span> $<span class=\"token punctuation\">.</span>xcolor<br>            <span class=\"token punctuation\">.</span><span class=\"token function\">gradientlevel</span><span class=\"token punctuation\">(</span>startColor<span class=\"token punctuation\">,</span> endColor<span class=\"token punctuation\">,</span> cols<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span> <span class=\"token operator\">*</span> <span class=\"token number\">100.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">getCSS</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            ctx<span class=\"token punctuation\">.</span><span class=\"token function\">fillRect</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> dotSize<span class=\"token punctuation\">,</span> dotSize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>          <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>ただの標高値を地図に表すなら画像でいいじゃん！とか言われそうですが、よいアイデアが浮かばなかったのでまずは素直に使ってみました。</p>\n<p>たとえば、移動手段による移動コストの違い(車だと坂道余裕だけど自転車だとキツい)みたいなのを視覚化するのに使えるような気がします。</p>\n<p>今回は、Canvas を使ったのでこの程度ですが、WebGL とかを使えば、Google Map の地形図に負けない、美しい3D地図が描画できるはずです。</p>\n<p>他に例を見ない、野心的な試みだと思うので、何か面白い使い方ができるといいなと思います。</p>\n",
      "date_published": "2013-11-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/30/multi-apps-in-google-api-console/",
      "url": "https://blog.amay077.net/blog/2013/10/30/multi-apps-in-google-api-console/",
      "title": "Google API Console の API Access って…",
      "content_html": "<p><a href=\"https://code.google.com/apis/console/\">Google API Console</a> の API Access って、複数のアプリを登録できたんですね。気づかなかった。。。</p>\n<!--more-->\n<p><img src=\"/img/posts/multi_apps_in_google_api_console_01.png\" alt=\"img1\"></p>\n<blockquote>\n<p>&lt;SHA1フィンガープリント&gt;;&lt;アプリのパッケージ名&gt;&lt;改行&gt;<br/><br>\n&lt;SHA1フィンガープリント&gt;;&lt;アプリのパッケージ名&gt;</p>\n</blockquote>\n<p>って書けばよかったんだ。</p>\n<p>新しくなった <a href=\"https://cloud.google.com/console\">Cloud Console</a> では、 +/- ボタンが付いて分かりやすい。</p>\n<p><img src=\"/img/posts/multi_apps_in_google_api_console_02.png\" alt=\"img1\"></p>\n",
      "date_published": "2013-10-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/28/fujiphoto-index/",
      "url": "https://blog.amay077.net/blog/2013/10/28/fujiphoto-index/",
      "title": "富士フォトというアプリをリリースしました",
      "content_html": "<p>富士山の撮影スポットを探して、そこへ案内するアプリです。</p>\n<!--more-->\n<h3 id=\"android-%E7%89%88%E3%81%AF%E3%81%93%E3%81%A1%E3%82%89\">Android 版はこちら <a class=\"direct-link\" href=\"#android-%E7%89%88%E3%81%AF%E3%81%93%E3%81%A1%E3%82%89\">#</a></h3>\n<p><a href=\"https://play.google.com/store/apps/details?id=com.amay077.android.fujiphoto\"><img src=\"/img/posts/fujiphoto_00.png\" alt=\"img1\"></a></p>\n<h3 id=\"iphone%E7%89%88%E3%81%AF%E3%81%93%E3%81%A1%E3%82%89\">iPhone版はこちら <a class=\"direct-link\" href=\"#iphone%E7%89%88%E3%81%AF%E3%81%93%E3%81%A1%E3%82%89\">#</a></h3>\n<ul>\n<li><a href=\"https://itunes.apple.com/jp/app/fu-shifoto/id806913229\">富士フォトを App Store で</a></li>\n</ul>\n<h2 id=\"%E5%8F%97%E8%B3%9E%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81\">受賞しました！ <a class=\"direct-link\" href=\"#%E5%8F%97%E8%B3%9E%E3%81%97%E3%81%BE%E3%81%97%E3%81%9F%EF%BC%81\">#</a></h2>\n<p><a href=\"http://ma9.mashupaward.jp/\">マッシュアップアワード9(MA9)</a> にて</p>\n<ul>\n<li><a href=\"http://mashupawards.tumblr.com/post/67725217749/3-ma9\">ピーシーフェーズ株式会社賞</a></li>\n<li><a href=\"http://fin.der.jp/2013/11/ma9/\">いのしし一頭（finder）賞</a></li>\n</ul>\n<p>を受賞しました。</p>\n<p><a href=\"http://aigid.jp/GIS/udct/2013/\">アーバンデータチャレンジ東京2013</a> にて、</p>\n<ul>\n<li><a href=\"http://internet.watch.impress.co.jp/docs/column/chizu/20140306_638357.html\">自治体特別賞</a></li>\n</ul>\n<p>を受賞しました。</p>\n<h2 id=\"%E6%A6%82%E8%A6%81\">概要 <a class=\"direct-link\" href=\"#%E6%A6%82%E8%A6%81\">#</a></h2>\n<p>撮影スポットは、静岡県が提供している「ふじのくにオープンデータ」の「<a href=\"http://open-data.pref.shizuoka.jp/htdocs/index.php?action=pages_view_main&amp;active_action=multidatabase_view_main_detail&amp;content_id=33&amp;multidatabase_id=2&amp;block_id=15#_15\">富士山ビューポイント</a>」を使用しています。</p>\n<p>以下のことができます。</p>\n<ul>\n<li>GPS を使って、現在地付近にある撮影スポットを検索</li>\n<li>スポットで撮影された富士山の写真を表示</li>\n<li>現在地と撮影スポット、富士山の位置関係を地図で確認</li>\n<li>撮影スポットと富士山付近の(雨)雲の状況を地図に表示</li>\n<li>現在地から撮影スポットへ行くまでを AR で案内(Googleマップナビも使用できます)\n<ul>\n<li>AR は単純に富士山の方向を確認するのにも使えます。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h2>\n<h3 id=\"%E8%BF%91%E3%81%8F%E3%81%AE%E6%92%AE%E5%BD%B1%E3%82%B9%E3%83%9D%E3%83%83%E3%83%88\">近くの撮影スポット <a class=\"direct-link\" href=\"#%E8%BF%91%E3%81%8F%E3%81%AE%E6%92%AE%E5%BD%B1%E3%82%B9%E3%83%9D%E3%83%83%E3%83%88\">#</a></h3>\n<p><img src=\"/img/posts/fujiphoto_01.png\" alt=\"img1\"></p>\n<h3 id=\"%E6%92%AE%E5%BD%B1%E3%82%B9%E3%83%9D%E3%83%83%E3%83%88%E3%81%AE%E8%A9%B3%E7%B4%B0\">撮影スポットの詳細 <a class=\"direct-link\" href=\"#%E6%92%AE%E5%BD%B1%E3%82%B9%E3%83%9D%E3%83%83%E3%83%88%E3%81%AE%E8%A9%B3%E7%B4%B0\">#</a></h3>\n<p><img src=\"/img/posts/fujiphoto_02.png\" alt=\"img1\"></p>\n<h3 id=\"ar%E3%83%8A%E3%83%93\">ARナビ <a class=\"direct-link\" href=\"#ar%E3%83%8A%E3%83%93\">#</a></h3>\n<p>田舎すぎるだろ…</p>\n<p><img src=\"/img/posts/fujiphoto_03.png\" alt=\"img1\"></p>\n<h2 id=\"%E6%8A%80%E8%A1%93%E7%9A%84%E3%81%AA%E3%82%A2%E3%83%AC\">技術的なアレ <a class=\"direct-link\" href=\"#%E6%8A%80%E8%A1%93%E7%9A%84%E3%81%AA%E3%82%A2%E3%83%AC\">#</a></h2>\n<p>このアプリで <a href=\"http://ma9.mashupaward.jp/works/348\">MashUpAward9</a> に応募してます。<br>\n使用した API は、</p>\n<ul>\n<li><a href=\"http://ma9.mashupaward.jp/apis/216\">Yahoo! Android マップ SDK</a> の MapView と雨雲タイルと ARナビ</li>\n<li><a href=\"http://ma9.mashupaward.jp/apis/218\">Yahoo! Open Local Platform</a> のリバースジオコーダ</li>\n<li><a href=\"http://ma9.mashupaward.jp/apis/145\">datastore API</a></li>\n</ul>\n<p>です。本当は Googleマップの代わりに <a href=\"http://ma9.mashupaward.jp/apis/36\">Mapion</a> の「3D風地図」を使いたかったのですが、時間がなくてあきらめました。(ピンチズームとかを自前実装しなければならなさそうだったので)</p>\n<p>「datastore API」 は <a href=\"http://www.appiaries.com/jp/\">appiaries さんの BaaS</a> のひとつの機能です。この BaaS は位置情報にも対応していて、範囲検索なども行ってくれるのですが、こちらも今回時間がなくて、他のコードを使いまわして自力実装しました。</p>\n<p>データは、冒頭で紹介した、</p>\n<ul>\n<li><a href=\"http://open-data.pref.shizuoka.jp/htdocs/index.php?action=pages_view_main&amp;active_action=multidatabase_view_main_detail&amp;content_id=33&amp;multidatabase_id=2&amp;block_id=15#_15\">富士山ビューポイント - ふじのくにオープンデータ</a></li>\n</ul>\n<p>を使っています。<br>\n日頃アプリを開発したり、アイデアを練ったりしていて、どうしても行き詰まるのがコンテンツです。隣県でこのようなコンテンツを公開してくれる事はとてもありがたく、ぜひ活用してみたいと思って作りました。</p>\n<p>まだまだ不安定な感じ（メモリ不足でたびたび落ちる(汗)）ですが、ちまちまブラッシュアップしていきたいと思います。</p>\n",
      "date_published": "2013-10-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/23/android-flat-button-sample/",
      "url": "https://blog.amay077.net/blog/2013/10/23/android-flat-button-sample/",
      "title": "フラットな感じのボタンを作ってみた",
      "content_html": "<p>Foursquare の Android 版をマネて、XML だけで作ってみた。<br>\n仕組みをすぐ忘れるので、ここにメモしておく。</p>\n<!--more-->\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>layer-list</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/padding<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>shape</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>solid</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#00FFFFFF<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>padding</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>bottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>left</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>right</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>top</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>shape</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/shadow<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>shape</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>solid</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#D3CEC7<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>padding</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>bottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2px<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>shape</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/face<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>shape</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>stroke</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1px<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#AEA8A3<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>solid</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FFFFFF<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>shape</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/state<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>selector</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>state_pressed</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>shape</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>shape</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rectangle<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>solid</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#FF82DEFF<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>shape</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>state_focused</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>shape</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>shape</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>rectangle<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>solid</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#4082DEFF<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>shape</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span><br>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>selector</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>item</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>shape</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>solid</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#00FFFFFF<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>padding</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>bottom</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>left</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span><br>                <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>right</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>top</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8dp<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>shape</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>item</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>layer-list</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h2>\n<p>上のファイル <code>flat_panel.xml</code> を、<code>res/drawable</code> ディレクトリに入れて、適用したい Button などに↓のように設定。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Button</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>background</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@drawable/flat_panel<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>text</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>フラットなボタン<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<p>Theme とかにまとめたいけど、今日は割愛。</p>\n<h2 id=\"%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%97%E3%81%9F%E7%B5%90%E6%9E%9C\">ボタンに適用した結果 <a class=\"direct-link\" href=\"#%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AB%E9%81%A9%E7%94%A8%E3%81%97%E3%81%9F%E7%B5%90%E6%9E%9C\">#</a></h2>\n<h3 id=\"%E9%80%9A%E5%B8%B8\">通常 <a class=\"direct-link\" href=\"#%E9%80%9A%E5%B8%B8\">#</a></h3>\n<p><img src=\"/img/posts/android_flat_button_sample_01.png\" alt=\"img1\"></p>\n<h3 id=\"%E6%8A%BC%E3%81%97%E3%81%9F%E6%99%82\">押した時 <a class=\"direct-link\" href=\"#%E6%8A%BC%E3%81%97%E3%81%9F%E6%99%82\">#</a></h3>\n<p><img src=\"/img/posts/android_flat_button_sample_02.png\" alt=\"img1\"></p>\n<h2 id=\"%E4%BB%95%E7%B5%84%E3%81%BF\">仕組み <a class=\"direct-link\" href=\"#%E4%BB%95%E7%B5%84%E3%81%BF\">#</a></h2>\n<p><code>&lt;layer-list&gt;</code> タグの中の要素は、上から順に描画される。また、下位(手前)の要素は、上位(奥)の要素の入れ子になるみたい。</p>\n<p><img src=\"/img/posts/android_flat_button_sample_03.png\" alt=\"img1\"></p>\n<p>（図の id は flat_panel.xml と対応してます。）</p>\n<ol>\n<li>padding - ボタンの周りに少し余白を付ける役割（要らないなら消してもOK）</li>\n<li>shadow - ボタンの下部にちょっとだけ見えてる影の部分。大部分が face によって隠れてるけど、実際はほとんど同じ領域を持つ。ここで padding bottom を 2px としているので、face の高さが 2px 縮んで、影っぽく見える仕組み。つまり影の強さはここで調整。</li>\n<li>face - ボタンの「面」に該当。stroke でフチを、solid で面を塗りつぶしている。</li>\n<li>state - ボタンの状態によって色などを変える役割。ここでは state_pressed=true（押された状態）と、state_focused=true（フォーカスを持ってる状態）だけ対応してる。face を描画した「後」で評価されるので、face の色を置き換えるものではない事に注意（透過時）。あと、状態は上から評価される。</li>\n<li>child - LinearLayout など Group な View にこのスタイルを適用した時、子View への余白となる。</li>\n</ol>\n<p>みんなの大好きな方眼紙EXCEL とオートシェイプで再現してみた → <a href=\"/img/posts/flat_panel.xlsx\">DL</a></p>\n<p>Activity の背景が白だと、あんまり映えない。。。</p>\n<p>色の定義を、別の xml に分けて、アプリ毎に変えれば、それっぽくなるのかなーと。</p>\n",
      "date_published": "2013-10-23T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/20/using-gmapv2-on-intel-emulator/",
      "url": "https://blog.amay077.net/blog/2013/10/20/using-gmapv2-on-intel-emulator/",
      "title": "爆速エミュレータで Google Maps Android API v2 を動かす",
      "content_html": "<p>Google APIs のエミュレータで Google Map Android API v2 が動くようになったのですが、やっぱり遅い、使えん。<br>\nという訳で、Intel の爆速エミュレータで GMapV2 を使う手順の備忘録です。(ご利用は自己責任で)</p>\n<!--more-->\n<h2 id=\"%E7%88%86%E9%80%9F%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%AE%E5%B0%8E%E5%85%A5\">爆速エミュレータの導入 <a class=\"direct-link\" href=\"#%E7%88%86%E9%80%9F%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%AE%E5%B0%8E%E5%85%A5\">#</a></h2>\n<p>こちら等を参考にセットアップします。</p>\n<ul>\n<li><a href=\"http://qiita.com/gabu/items/8bc1a11f1382409f1d2a\">Android再入門 - エミュレータの作成</a></li>\n</ul>\n<h2 id=\"%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A7-google-maps-android-api-v2-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99\">エミュレータで Google Maps Android API v2 を動かす <a class=\"direct-link\" href=\"#%E3%82%A8%E3%83%9F%E3%83%A5%E3%83%AC%E3%83%BC%E3%82%BF%E3%81%A7-google-maps-android-api-v2-%E3%82%92%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h2>\n<p><code>com.google.android.gms.apk</code> と <code>com.android.vending.apk</code> が必要なのでどうにかして入手しインストールします。(ほとんど答えだけど下記参照)</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator\">Running Google Maps v2 on Android Emulator - Stack Overflow</a></li>\n</ul>\n<p>apk が古いとうまく動作しません。なるべく新しいものを探しましょう。(ﾎﾞｿ</p>\n<h2 id=\"androidmanifest.xml-%E3%81%8B%E3%82%89-com.google.android.maps-%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%82%92%E6%B6%88%E3%81%99\">AndroidManifest.xml から com.google.android.maps の定義を消す <a class=\"direct-link\" href=\"#androidmanifest.xml-%E3%81%8B%E3%82%89-com.google.android.maps-%E3%81%AE%E5%AE%9A%E7%BE%A9%E3%82%92%E6%B6%88%E3%81%99\">#</a></h2>\n<p>意外とハマったのがコレ。</p>\n<p><code>AndroidManifest.xml</code> で</p>\n<pre><code>&lt;uses-library android:name=&quot;com.google.android.maps&quot; /&gt;\n</code></pre>\n<p>が定義してあると、</p>\n<pre><code>10-20 11:35:52.977: E/PackageManager(1178): Package xxxx requires unavailable shared library com.google.android.maps; failing!\n</code></pre>\n<p>というエラーになります。</p>\n<p>この <code>com.google.android.maps</code> は Google Maps API v1 で必要だったもので、v2 では必要ありません。削除しましょう。</p>\n<p>v2 の使い方を説明するブログやサイトで、これが含まれてしまってるものがあるようです。(かくいう自分もそんなサイトからコピペしてきたまま使ってたのでエラーになりました（汗）</p>\n<h2 id=\"%E5%8B%95%E3%81%8B%E3%81%99\">動かす <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h2>\n<p>あとは、実機と変わりません。</p>\n<p><img src=\"/img/posts/using_gmapv2_on_intel_emulator_01.png\" alt=\"img\"></p>\n<p>やばい、PC性能とネットワーク環境のおかげで実機より快適になったｗ</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/ria10/20121218/1355794748\">AndroidでGoogle Maps v2 をエミュレータで動かしてしかも爆速 - リア充爆発日記</a></li>\n<li><a href=\"http://denshikousaku.net/how-to-make-android-google-maps-v2-work-in-android-emulator\">エミュレータでGoogle Maps for Android V2を動かす方法｜ アプリ開発とRaspberry PIとArduino実験</a></li>\n<li><a href=\"http://stackoverflow.com/questions/14040185/running-google-maps-v2-on-android-emulator\">Running Google Maps v2 on Android Emulator - Stack Overflow</a></li>\n</ul>\n",
      "date_published": "2013-10-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/17/make-clickable-from-part-of-text/",
      "url": "https://blog.amay077.net/blog/2013/10/17/make-clickable-from-part-of-text/",
      "title": "TextView で、テキストの一部だけクリック可能にする",
      "content_html": "<p>Android の TextView で、「テキストの一部を押すとなんかのアクションが起こる」というのが <code>ClickableSpan</code> というのを使えばできそうだったので、やってみました。</p>\n<!--more-->\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ClikcableSpanTestActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Pair</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"りんご\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"隠し味としてカレーに入れます\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"みかん\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"あぶりだしに使います\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        data<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"すいか\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"種を食べると盲腸になります（嘘）\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">SpannableStringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SpannableStringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> SEP <span class=\"token operator\">=</span> <span class=\"token string\">\", \"</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">int</span> spanStart <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Pair</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> p <span class=\"token operator\">:</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>SEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// 追加した文字列を Span にする</span><br>            sb<span class=\"token punctuation\">.</span><span class=\"token function\">setSpan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ClickableSpan</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> widget<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <br>\t\t\t\t\t\tp<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> spanStart<span class=\"token punctuation\">,</span> spanStart <span class=\"token operator\">+</span> p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Spannable</span><span class=\"token punctuation\">.</span>SPAN_EXCLUSIVE_EXCLUSIVE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <br>            spanStart <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> SEP<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>        <br>        <span class=\"token class-name\">TextView</span> tv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        tv<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        tv<span class=\"token punctuation\">.</span><span class=\"token function\">setMovementMethod</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LinkMovementMethod</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これ忘れるとクリックできなくて小一時間悩む</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>項目をカンマつなぎで表示して、項目のところだけリンクっぽくします。<br>\nリンクをクリックすると Toast を表示します。（下図のように）<br>\nまた <code>URLSpan</code> というクラスもあり、クリックすると指定したURLに移動（ブラウザアプリが起動）します。</p>\n<p><img src=\"/img/posts/using_clickablespan_01.png\" alt=\"\"></p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<p>装飾したり位置やサイズ変えたり、TextView でもいろいろできるんですねー。<br>\n(VB6の)Label とは違うのだよ、Label とは！</p>\n<ul>\n<li><a href=\"http://y-anz-m.blogspot.com/2011/08/androidspannable.html\">Y.A.M の 雑記帳: Android Spannable を使って文字列の一部を装飾する</a></li>\n<li><a href=\"http://d.hatena.ne.jp/androidprogram/20100529/1275086958\">Tips TextView を使いこなそう ～表示編～ その4 - - Google Android - 雑記帳</a></li>\n<li><a href=\"http://developer.android.com/reference/android/text/style/package-summary.html\">android.text.style ｜ Android Developers</a></li>\n</ul>\n",
      "date_published": "2013-10-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/16/intro-of-yaml-front-matter/",
      "url": "https://blog.amay077.net/blog/2013/10/16/intro-of-yaml-front-matter/",
      "title": "YAML Front-matter とかいうやつ",
      "content_html": "<p>Octopress でもブログ書いてるんだけど、markdown のヘッダに、</p>\n<!--more-->\n<pre><code>---\nlayout: post\ntitle: &quot;metersToEquatorPixels を Google Maps Android API v2 で&quot;\ndate: 2013-10-09 00:21\ncomments: true\ncategories: [Android, Java, Geo, GoogleMapsAPI]\n---\n</code></pre>\n<p>こんな風にメタ情報を書くルールになっている。</p>\n<p>この書き方、 Front-matter というそうで。</p>\n<ul>\n<li><a href=\"http://jekyllrb.com/docs/frontmatter/\">Front-matter - jekyllrb</a></li>\n</ul>\n<p>んで、github は、これをいい感じに整形して表示してくれる。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/amay077.github.com/blob/source/source/_posts/2013-10-09-meterstoequatorpixels-in-gmap-v2.markdown\">amay077.github.com/source/_posts/2013-10-09-meterstoequatorpixels-in-gmap-v2.markdown</a></li>\n</ul>\n<p>@Qiita とか ＠Kobito でもこれに対応してくれると、私が嬉しい。</p>\n<p>Kobito で「書き出し」た .md ファイルのヘッダが Front-matter になってたり、逆に Front-matter を読み込んでくれるといいな。</p>\n",
      "date_published": "2013-10-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/11/denshikokudo-on-googlemap/",
      "url": "https://blog.amay077.net/blog/2013/10/11/denshikokudo-on-googlemap/",
      "title": "Googleマップ禁止令が出たのなら、地理院地図をGoogleマップで使えばいいじゃない",
      "content_html": "<p>「領土等が正しく表示されていない」として、国や自治体、国公立の機関に、「Google マップ禁止令」が出ているそうです。</p>\n<!--more-->\n<h2 id=\"2013.11.03-%E8%BF%BD%E8%A8%98\">2013.11.03 追記 <a class=\"direct-link\" href=\"#2013.11.03-%E8%BF%BD%E8%A8%98\">#</a></h2>\n<p>電子国土Web.NEXT という名称で試験公開されていたものが、「地理院地図」「地理院タイル」として正式公開されました。</p>\n<ul>\n<li><a href=\"http://www.gsi.go.jp/johofukyu/johofukyu40032.html\">地理院地図の公開について ｜ 国土地理院</a></li>\n<li><a href=\"http://portal.cyberjapan.jp/help/development.html#siyou\">地理院タイルを用いた開発 ｜ 地理院地図</a></li>\n</ul>\n<p>地理院タイルは <a href=\"http://portal.cyberjapan.jp/help/development/oldScheme.html\">従来版タイル</a> と仕様が異なります。従来版タイルは <strong>2013年度中に提供終了予定</strong> との事ですし、新しい地理院タイルの方が大幅に仕様が簡略化されたので、こちらを使った方が良いです。</p>\n<p>このエントリも「電子国土」を「地理院地図（地理院タイル）」に修正しました。</p>\n<hr>\n<h2 id=\"2013.10.17-%E8%BF%BD%E8%A8%98\">2013.10.17 追記 <a class=\"direct-link\" href=\"#2013.10.17-%E8%BF%BD%E8%A8%98\">#</a></h2>\n<p><a href=\"http://qiita.com/amay077/items/979dfc858a21c8bbb7a9#comment-6d0be86c2ba90df50808\">コメント</a>で頂いていますが、現在は、 <strong>「日本向けにローカライズされた」</strong> Googleマップ側でも表記が修正されたようで、当初「問題がある」と言われていた地域は問題が解消されているように見えます。<br>\n<strong>ただし、下記のように Google Maps API で「region=JP」が指定されている場合に限ります。</strong></p>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/kitokitoki/20130415/p1\">Google Maps API v3 で 日本海（東海）と「東海」が併記されるのを避けるには - わからん</a></li>\n</ul>\n<p>これによって「Googleマップ禁止令はもはや無用である」と考えることもできますし、「依然として国の制御下には無い」と考えることもできます。</p>\n<p>以下の情報は必要なくなるかも知れませんが、今後「Googleマップ以外の選択肢」の一つとして参考になれば幸いです。</p>\n<p>-- 追記ここまで --</p>\n<hr>\n<ul>\n<li><a href=\"http://www.huffingtonpost.jp/2013/09/29/google-map-forbidden_n_4011180.html\">グーグルマップの「利用禁止令」 竹島や北方領土が「日本名でない表記」 政府が自治体などに要請</a></li>\n<li><a href=\"http://matome.naver.jp/odai/2138082171982287301\">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。 - NAVER まとめ</a></li>\n<li><a href=\"http://shinka3.exblog.jp/20690859/\">大学公式ページでのGoogleMap禁止令と彩雲 : ５号館のつぶやき</a></li>\n<li><a href=\"https://twitter.com/nissyyu/status/387870282570272768\">Twitter - うちの大学でも例の「グーグルマップ禁止令」によるサイトのチェックが始まった…</a></li>\n</ul>\n<p>これ自体の是非はいろいろあるようですが、公的機関の情報表示が、国によって「under control」じゃないのはイカン、というのはまあ分かりますよ。</p>\n<p>で、対策としてはいくつかあります。。。</p>\n<h4 id=\"%E7%94%BB%E5%83%8F%E3%81%AE%E5%9C%B0%E5%9B%B3%E3%82%84-pdf-%E3%81%AB%E5%A4%89%E3%81%88%E3%82%8B\">画像の地図や PDF に変える <a class=\"direct-link\" href=\"#%E7%94%BB%E5%83%8F%E3%81%AE%E5%9C%B0%E5%9B%B3%E3%82%84-pdf-%E3%81%AB%E5%A4%89%E3%81%88%E3%82%8B\">#</a></h4>\n<ul>\n<li>どんな時代錯誤ですか</li>\n</ul>\n<h4 id=\"%E4%BB%96%E3%81%AE%E5%9C%B0%E5%9B%B3api%E3%82%92%E4%BD%BF%E3%81%86\">他の地図APIを使う <a class=\"direct-link\" href=\"#%E4%BB%96%E3%81%AE%E5%9C%B0%E5%9B%B3api%E3%82%92%E4%BD%BF%E3%81%86\">#</a></h4>\n<ul>\n<li>Yahoo Japan、Mapion、Bing、OSM とか。</li>\n<li>Google Map API からこれらに変更する手間は結構かかるんではないかと。特に地図サイトを作りこんでいるならなおさら。</li>\n<li>Yahoo Japan、Mapion は、規約的に公的機関で無償で使用OK でしたっけ？</li>\n<li>Bing, OSM は「制御下には無い」でしょう。</li>\n</ul>\n<h4 id=\"googlemap%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%AE%E3%81%82%E3%82%8B%E8%A1%A8%E8%A8%98%E3%82%92%E3%80%8C%E6%AD%A3%E3%81%97%E3%81%84%E8%A1%A8%E8%A8%98%E3%80%8D%E3%81%AB%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%99%E3%82%8B\">GoogleMapの問題のある表記を「正しい表記」に上書きする <a class=\"direct-link\" href=\"#googlemap%E3%81%AE%E5%95%8F%E9%A1%8C%E3%81%AE%E3%81%82%E3%82%8B%E8%A1%A8%E8%A8%98%E3%82%92%E3%80%8C%E6%AD%A3%E3%81%97%E3%81%84%E8%A1%A8%E8%A8%98%E3%80%8D%E3%81%AB%E4%B8%8A%E6%9B%B8%E3%81%8D%E3%81%99%E3%82%8B\">#</a></h4>\n<ul>\n<li><a href=\"http://matome.naver.jp/odai/2138082171982287301\">Googleマップ禁止令?! 制作会社の苦悩と対応を考える。</a> で実践されていた手法、ある意味驚きました（^_^;）</li>\n<li>これ→<a href=\"http://jsdo.it/toaSoku/gmapforjapan\">日本政府に「禁止されない」 Google Maps - jsdo.it - Share JavaScript, HTML5 and CSS</a></li>\n<li>スクロール時にチラッと元表記が見えちゃうのと、元地図画像の変化に追従するのが難しいんですよね。</li>\n</ul>\n<p>いずれも対応コストや規約、ユーザビリティを考えると決め手に欠けます。</p>\n<h2 id=\"%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F\">ではどうするか？ <a class=\"direct-link\" href=\"#%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8B%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p><a href=\"http://portal.cyberjapan.jp/\">地理院地図</a>という、国土交通省国土地理院が作って提供している地図データ、および地図システムがあります。</p>\n<p>身内ならこれ使えよ、という話です。実際、大学などに送られた通知には、こちらを利用するための「相談窓口」が記載されているようです。</p>\n<p>ただし、Google Map API から地理院地図の地図APIに移行することは、前述の通り、それなりのコストが発生します。</p>\n<p>ので、 <strong>「Google Map API を使って地理院地図を利用する方法」</strong> を紹介します。</p>\n<p>Google Map API には他の地図データを Overlay（重ねあわせ）する機能が備わっており、これを利用します。</p>\n<p>既に実現されてる方々がいらっしゃいます。</p>\n<ul>\n<li><a href=\"http://user.numazu-ct.ac.jp/~tsato/webmap/map/gmap2.html?data=djws\">Googleマップを使って国土地理院の地図を見る</a></li>\n<li><a href=\"http://y2web.net/blog/computer/webmap/show_cj4_tiles_on_google_map_system-3355/\">y2blog » Google Maps APIを用いて電子国土V4背景地図を表示する</a></li>\n</ul>\n<p>これらのサイトを参考にしてもよいですが、ここでは、Googleマップで地理院地図(地理院タイル)を使う、 最もシンプルな実装例を紹介します。</p>\n<h3 id=\"1.-google%E3%83%9E%E3%83%83%E3%83%97%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\">1. Googleマップを表示するページを用意する <a class=\"direct-link\" href=\"#1.-google%E3%83%9E%E3%83%83%E3%83%97%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\">#</a></h3>\n<p>ここでは、仮の「運用中のサイト」として、Google マップを使うシンプルなページを用意しました。</p>\n<ul>\n<li><a href=\"http://jsdo.it/amay077/tM0q\">Google Maps Javascript API v3 の使用例</a></li>\n</ul>\n<p>HTML+Javascript のソースコードはこんな感じ(<a href=\"http://www.geekpage.jp/web/google-maps-api/v3/helloworld.php\">Geekなぺーじ:Google MAPS JavaScript APIの単純な例</a> を参考にさせて頂きました)</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><br>      <span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100% <span class=\"token punctuation\">}</span><br>      <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0px <span class=\"token punctuation\">}</span><br>      <span class=\"token selector\">#map</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100% <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br> <br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://maps.google.com/maps/api/js?v=3&amp;sensor=false<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br> <br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>        zoom<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><br>        mapTypeId<span class=\"token operator\">:</span> google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>MapTypeId<span class=\"token punctuation\">.</span><span class=\"token constant\">ROADMAP</span><span class=\"token punctuation\">,</span><br>        center<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">135</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br> <br>      <span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br> <br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>init()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br> <br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"2.-%E5%9C%B0%E7%90%86%E9%99%A2%E5%9C%B0%E5%9B%B3(%E5%9C%B0%E7%90%86%E9%99%A2%E3%82%BF%E3%82%A4%E3%83%AB)%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B\">2. 地理院地図(地理院タイル)を表示するように置き換える <a class=\"direct-link\" href=\"#2.-%E5%9C%B0%E7%90%86%E9%99%A2%E5%9C%B0%E5%9B%B3(%E5%9C%B0%E7%90%86%E9%99%A2%E3%82%BF%E3%82%A4%E3%83%AB)%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E7%BD%AE%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B\">#</a></h3>\n<ul>\n<li><a href=\"http://jsdo.it/amay077/wFtJ\">Google Maps Javascript API v3 での地理院地図の表示例</a></li>\n</ul>\n<p><img src=\"/img/posts/denshikokudo_on_googlemap_01.png\" alt=\"\"></p>\n<p>表示が地理院地図に置き換わっているのが確認できると思います。右上の地図タイプ切り替えは要らないので消してます。あと、ロゴの表示が必要なので、左下に置いています。(地理院地図の正式なロゴが公開されたら置き換えてください)</p>\n<p>という処理を追加したのが、下のコード。<br>\n変更が１行、追加行が30行くらいです。<br>\n変更箇所は「←」で、追加箇所は「↓↓」「↑↑」で示しています。<br>\n<a href=\"https://gist.github.com/amay077/6928205/revisions\">gist</a> でも diff を見られます。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><br>      <span class=\"token selector\">html</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100% <span class=\"token punctuation\">}</span><br>      <span class=\"token selector\">body</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100%<span class=\"token punctuation\">;</span> <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0px<span class=\"token punctuation\">;</span> <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 0px <span class=\"token punctuation\">}</span><br>      <span class=\"token selector\">#map</span> <span class=\"token punctuation\">{</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100% <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://maps.google.com/maps/api/js?v=3&amp;sensor=false<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>text/javascript<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"><br>    <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      <span class=\"token keyword\">var</span> opts <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><br>        zoom<span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span><br>        mapTypeId<span class=\"token operator\">:</span> <span class=\"token string\">\"GsiMaps\"</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 地理院地図の英語表記は「GIS Maps」</span><br>        center<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">39</span><span class=\"token punctuation\">,</span> <span class=\"token number\">135</span><span class=\"token punctuation\">)</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>      <span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Map</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"map\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> opts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>      map<span class=\"token punctuation\">.</span><span class=\"token function\">setOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><br>        mapTypeControl<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// 右上の地図タイプ選択を消す</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>      <span class=\"token comment\">// 地理院タイルを Overlay する</span><br>      <span class=\"token comment\">// via https://portal.cyberjapan.jp/help/development.html</span><br>      map<span class=\"token punctuation\">.</span>mapTypes<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GsiMaps\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span><br>        name<span class=\"token operator\">:</span><span class=\"token string\">\"地理院地図(GSI Maps)\"</span><span class=\"token punctuation\">,</span><br>        tileSize<span class=\"token operator\">:</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>Size</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span><span class=\"token number\">256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>        minZoom<span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><br>        maxZoom<span class=\"token operator\">:</span><span class=\"token number\">18</span><span class=\"token punctuation\">,</span> <br>        <span class=\"token function-variable function\">getTile</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">tileCoord<span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">,</span> ownerDocument</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>          <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> ownerDocument<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"img\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>          img<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> <span class=\"token string\">\"256px\"</span><span class=\"token punctuation\">;</span><br>          img<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height <span class=\"token operator\">=</span> <span class=\"token string\">\"256px\"</span><span class=\"token punctuation\">;</span><br>          <span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>tileCoord<span class=\"token punctuation\">.</span>x <span class=\"token operator\">%</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>          <span class=\"token keyword\">var</span> y <span class=\"token operator\">=</span> tileCoord<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>          img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://cyberjapandata.gsi.go.jp/xyz/std/\"</span> <span class=\"token operator\">+</span> zoom <span class=\"token operator\">+</span>  <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> x <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> <span class=\"token string\">\".png\"</span><span class=\"token punctuation\">;</span><br>          <span class=\"token keyword\">return</span> img<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>       <span class=\"token comment\">// 左下に電子国土ロゴを表示(TODO: 地理院地図の正式なロゴが公開されたら置き換える)</span><br>      <span class=\"token keyword\">var</span> logo <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DIV'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      logo<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>padding <span class=\"token operator\">=</span> <span class=\"token string\">'3px'</span><span class=\"token punctuation\">;</span><br>      map<span class=\"token punctuation\">.</span>controls<span class=\"token punctuation\">[</span>google<span class=\"token punctuation\">.</span>maps<span class=\"token punctuation\">.</span>ControlPosition<span class=\"token punctuation\">.</span><span class=\"token constant\">LEFT_BOTTOM</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>logo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>      logo<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;a href=\"https://portal.cyberjapan.jp/portalsite/kiyaku/index.html\" target=\"_blank\">&lt;img style=\"width:32px, height:32px\" src=\"https://cyberjapan.jp/images/icon01.gif\" alt=\"電子国土\" />&lt;/a>'</span><span class=\"token punctuation\">;</span>    <span class=\"token punctuation\">}</span><br>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span><br><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span> <span class=\"token attr-name\">onload</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>init()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>map<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"%E4%B8%8D%E5%AE%89%E3%81%A8%E3%81%8B%E6%87%B8%E5%BF%B5%E3%81%A8%E3%81%8B%E2%80%A6\">不安とか懸念とか… <a class=\"direct-link\" href=\"#%E4%B8%8D%E5%AE%89%E3%81%A8%E3%81%8B%E6%87%B8%E5%BF%B5%E3%81%A8%E3%81%8B%E2%80%A6\">#</a></h3>\n<h4 id=\"%E5%9C%B0%E5%9B%B3%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%8C-google-%E3%81%AB%E6%AF%94%E3%81%B9%E3%81%A6%E2%80%A6\">地図の表示が Google に比べて… <a class=\"direct-link\" href=\"#%E5%9C%B0%E5%9B%B3%E3%81%AE%E8%A1%A8%E7%A4%BA%E3%81%8C-google-%E3%81%AB%E6%AF%94%E3%81%B9%E3%81%A6%E2%80%A6\">#</a></h4>\n<p>まあ、そうですね。国土地理院にどんどんフィードバックしていきましょう。</p>\n<h4 id=\"%E3%80%8C%E8%A9%A6%E9%A8%93%E5%85%AC%E9%96%8B%E3%80%8D%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%A3%E3%81%A6%E3%82%8B%E3%82%93%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9%E2%80%A6\">「試験公開」ってなってるんですけど… <a class=\"direct-link\" href=\"#%E3%80%8C%E8%A9%A6%E9%A8%93%E5%85%AC%E9%96%8B%E3%80%8D%E3%81%A3%E3%81%A6%E3%81%AA%E3%81%A3%E3%81%A6%E3%82%8B%E3%82%93%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9%E2%80%A6\">#</a></h4>\n<p>地理院地図は「正式公開」になったので安心ですね。</p>\n<p>旧Verについては、2013年度中に運用停止とのことです。</p>\n<ul>\n<li><a href=\"http://portal.cyberjapan.jp/help/oldver.html\">地理院地図｜旧版情報</a></li>\n</ul>\n<h4 id=\"%E5%88%A9%E7%94%A8%E8%A6%8F%E7%B4%84%E3%81%A8%E3%81%8B%E3%81%A9%E3%81%86%E3%81%AA%E3%81%A3%E3%81%A6%E3%82%8B%E3%81%AE%EF%BC%9F\">利用規約とかどうなってるの？ <a class=\"direct-link\" href=\"#%E5%88%A9%E7%94%A8%E8%A6%8F%E7%B4%84%E3%81%A8%E3%81%8B%E3%81%A9%E3%81%86%E3%81%AA%E3%81%A3%E3%81%A6%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h4>\n<p><a href=\"http://portal.cyberjapan.jp/help/termsofuse.html\">地理院地図｜利用規約</a> を見てください。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>いかがでしょうか？</p>\n<p>現在の Google マップを使ったページに、２箇所の修正を加えるだけで、「問題のない」地理院地図に切り替える事ができます。これは今回の問題の一つの解決方法になるのではないでしょうか？</p>\n<p>個人的には、今回の「Googleマップ禁止令」は、国が所有する膨大な地図データを広く使ってもらえるチャンスだと思っています。</p>\n<p>地理院地図の表示例を見てもらえれば分かりますが、地図としての見た目はともかく、データの量・精度については、Googleマップ（というかゼンリン）と肩を並べる（あるいは上回るところもある）と思っています。</p>\n<p>せっかく税金で作られている地図なんですから、上手に活用していけば日本全体の利益になるんじゃないかと思います。</p>\n<p>最後にお約束で、本件のご利用は自己責任でお願いします。</p>\n",
      "date_published": "2013-10-11T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2/",
      "url": "https://blog.amay077.net/blog/2013/10/09/meterstoequatorpixels-in-gmap-v2/",
      "title": "metersToEquatorPixels を Google Maps Android API v2 で",
      "content_html": "<p>Google Map API v1 には、「地図上の距離(ｍ)を画面上の距離(ピクセル)に変換する」ためのメソッド <a href=\"https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float)\">Projection.metersToEquatorPixels</a> がありましたが、v2 ではなくなってしまいました。</p>\n<!--more-->\n<p>ので、以下のような代替関数を作ってみました。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">metersToEquatorPixels</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GoogleMap</span> map<span class=\"token punctuation\">,</span> <span class=\"token class-name\">LatLng</span> base<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> meters<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> OFFSET_LON <span class=\"token operator\">=</span> <span class=\"token number\">0.5d</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token class-name\">Location</span> baseLoc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Location</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tbaseLoc<span class=\"token punctuation\">.</span><span class=\"token function\">setLatitude</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tbaseLoc<span class=\"token punctuation\">.</span><span class=\"token function\">setLongitude</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>longitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token class-name\">Location</span> dest <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Location</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tdest<span class=\"token punctuation\">.</span><span class=\"token function\">setLatitude</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\tdest<span class=\"token punctuation\">.</span><span class=\"token function\">setLongitude</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>longitude <span class=\"token operator\">+</span> OFFSET_LON<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">double</span> degPerMeter <span class=\"token operator\">=</span> OFFSET_LON <span class=\"token operator\">/</span> baseLoc<span class=\"token punctuation\">.</span><span class=\"token function\">distanceTo</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1m は何度？</span><br>\t<span class=\"token keyword\">double</span> lonDistance <span class=\"token operator\">=</span> meters <span class=\"token operator\">*</span> degPerMeter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// m を度に変換</span><br><br>\t<span class=\"token class-name\">Projection</span> proj <span class=\"token operator\">=</span> map<span class=\"token punctuation\">.</span><span class=\"token function\">getProjection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token class-name\">Point</span> basePt <span class=\"token operator\">=</span> proj<span class=\"token punctuation\">.</span><span class=\"token function\">toScreenLocation</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token class-name\">Point</span> destPt <span class=\"token operator\">=</span> proj<span class=\"token punctuation\">.</span><span class=\"token function\">toScreenLocation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span>base<span class=\"token punctuation\">.</span>latitude<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">.</span>longitude <span class=\"token operator\">+</span> lonDistance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>destPt<span class=\"token punctuation\">.</span>x <span class=\"token operator\">-</span> basePt<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>行っていることは単純で、基準となる緯度経度:<code>base</code> から、適当に(ここでは 0.5度)東へ移動した緯度経度を <code>Location.distanceTo</code> で求め、その結果から、「1ｍは何度か？」を求めます。あとは、この係数を使って 地図上の距離:<code>meters</code> を度に変換し、最後に、<code>base</code> と移動後の緯度経度それぞれを画面座標に変換して、画面上の距離を返す、というものです。</p>\n<p>「1ｍは何度か？」は、赤道上の値を使っても良いのですが、緯度によって値が大きく変わるので、このような手法を取りました。</p>\n<p>ただこれでも、求める距離の精度によっては、<code>OFFSET_LON</code> の値の調整が必要な気がします。また、経度:0 をまたぐような地域では正しく動かない気がします。(いずれも未検証)</p>\n<p>また、緯度方向にもそれなりに正確な数値を出すには、上記と同じことを緯度に対しても行う必要があります。(これは v1 の API にもなかった)</p>\n<p>v2 になって、描画系でピクセル座標を意識することはなくなったんであまり使うことも無いと思いますが、なにかで必要になったら思い出す程度で。</p>\n<h3 id=\"%E8%BF%BD%E8%A8%98\">追記 <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>あとで気づいたんですが、 v1 の <a href=\"https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Projection#metersToEquatorPixels(float)\">Projection.metersToEquatorPixels</a> は、赤道上の距離で算出してたんですね。それと比べるとちょっとオーバースペックでした。</p>\n<p>それと、この記事を書く前に私のツイートを読まれた @honjo2 さんが、 v1 と同じ(赤道の距離を使う)仕様の関数を公開してくださいました。</p>\n<blockquote class=\"twitter-tweet\"><p>どうぞ <a href=\"https://t.co/quYnqvn1tw\">https://t.co/quYnqvn1tw</a> RT <a href=\"https://twitter.com/amay077\">@amay077</a>: Google Map Android v2 になって metersToEquatorPixels がなくなっちゃったのが地味に不便だ。</p>&mdash; 本城 博昭 (@honjo2) <a href=\"https://twitter.com/honjo2/statuses/387368608541589505\">October 8, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>",
      "date_published": "2013-10-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/09/isp-stopped-account-when-continuously-used-bitcasa/",
      "url": "https://blog.amay077.net/blog/2013/10/09/isp-stopped-account-when-continuously-used-bitcasa/",
      "title": "Bitcasa 使ってたらプロバイダから利用停止措置を受けた",
      "content_html": "<p>ある日の深夜０時過ぎ、突然自宅の PC からインターネットに接続できなくなりました。<br>\n調べてみるとフレッツ光への接続が「PPP認証エラー」になっていました。</p>\n<!--more-->\n<p><img src=\"/img/posts/isp_stopped_account_when_continuously_used_bitcasa_01.png\" alt=\"img\"></p>\n<p>ルータの再起動などしても改善せず。<br>\nこれは故障かな？と思いましたが、「フレッツスクウェア」には接続できてる(もうサービス終了してるけど)し、ルータの設定ページにはつながるのでその可能性は低いだろう、「フレッツか、プロバイダの障害かな？」と予想してその日は寝ました。</p>\n<p>翌朝、まだネットに繋がりません。<br>\nまた、スマホでテザリングして、プロバイダの会員ページにログインしようとした所、「サーバで問題が発生しています」と表示され、ログインできませんでした。<br>\nこれは障害で確定だなと思いながら、プロバイダ(ODN) のサポートセンターに電話しました。</p>\n<h2 id=\"%E9%9B%BB%E8%A9%B1%E3%81%AE%E3%82%84%E3%82%8A%E3%81%A8%E3%82%8A\">電話のやりとり <a class=\"direct-link\" href=\"#%E9%9B%BB%E8%A9%B1%E3%81%AE%E3%82%84%E3%82%8A%E3%81%A8%E3%82%8A\">#</a></h2>\n<p>私：サポセンに電話する</p>\n<p>自動応答：「ただいま電話が大変込み合っており…」</p>\n<p>私：（そうだろうそうだろう、プロバイダの障害なら電話殺到中だろう）</p>\n<p>─１０分経過─</p>\n<p>サポート担当：「大変お待たせしました。」</p>\n<p>私：「インターネットに突然接続できなくなったのですが。ID は○○です。」</p>\n<p>サ：「かしこまりました。お調べしますので少々お待ち下さい。」</p>\n<p>サ：「…お待たせいたしました。お調べ致しましたが…」</p>\n<p>私：「はいはい」（障害ですよね？）</p>\n<p>サ：「お客さまの ID から大量のデータがアップロードされている事が確認されましたので、こちらのご契約の <strong>利用を停止させて頂いております。</strong>」</p>\n<p>私：（えーっ！）と心の中で叫びながら、「は、はぁ？」</p>\n<p>サ：「何か大量のデータをアップロードされたご記憶などございますか？」</p>\n<p>私：「まあ、ありますね。」（ぜったい Bitcasa だ…）</p>\n<p>私：「データをインターネット上にバックアップするソフトウェアを使っていまして…それだと思います」</p>\n<p>サ：「そうですか。利用の再開を行うには、今後大量のデータをアップロードしないという、口頭でのお約束が必要になります。」</p>\n<p>私：「大量とは、どのくらいですか？」</p>\n<p>サ：「1日15GB となっております。」</p>\n<p>私：「なるほど、まあ…分かりました。」</p>\n<p>サ：「ありがとうございます。では利用再開は本日中に行いますので、翌日ご確認ください。」</p>\n<p>私：「はい、よろしくお願いします。」</p>\n<h2 id=\"%E7%B5%90%E8%AB%96\">結論 <a class=\"direct-link\" href=\"#%E7%B5%90%E8%AB%96\">#</a></h2>\n<p>という事で、ネット不通の原因は、</p>\n<p><strong>「1日に大量のデータをアップロードしたことによるプロバイダの規制」</strong></p>\n<p>でした。</p>\n<p>原因は Bitcasa で間違いないでしょう。容量無制限なのをいいことに VMware のイメージファイルなんかもバンバンアップロードして、余裕で「残り30GB」とか表示されてたので。</p>\n<p>プロバイダのアップロード規制は、ファイル交換ソフトへの対策として始まり、今ではほとんどのプロバイダで行われています。</p>\n<ul>\n<li><a href=\"http://isp.oshietekun.net/\">ISP規制情報Wiki</a></li>\n</ul>\n<p>ODN は、やや厳しめの制限なようです。</p>\n<p>しかし いきなり利用停止にしちゃうんですね、ODN さん。。。<br>\nと思い、 <a href=\"http://www.odn.ne.jp/odn_info/20081127.html\">ソース</a>を見ると、以下のように書いてありました。</p>\n<blockquote>\n<p>24時間に15GB（ギガバイト）以上の大容量データをインターネットに送信しているお客さまについては、利用制限の対象となります。制限の対象となったお客さまに対し、当社より事前にその旨をお知らせしますが、ご利用状態が改善されない場合は利用停止の後、契約解除をすることがあります。</p>\n</blockquote>\n<p>おいおい、「事前にその旨お知らせ」なんて来てないぞ？（実は来てるのか？と思って受信箱も迷惑メールフォルダも漁ったけどなかったし）。</p>\n<p>まあ、これは別の機会に確認するとして、「データをクラウドにバックアップするサービス」って Bitcasa を始め Pogoplug、BackBraze などたくさん出てきてるので、今回のような「プロバイダの規制」に引っかかる人が出てくるのではないかと思います。</p>\n<p>バックアップサービスに帯域制限機能があればそれが使えますが、Bitcasa には無いので、OS や別のソフトウェア、あるいはルータなどの機器で大量のデータをアップロードしないような仕組みが必要になります。我が家でも対策を検討中です。</p>\n<h2 id=\"%E3%81%9D%E3%81%AE%E5%BE%8C\">その後 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E5%BE%8C\">#</a></h2>\n<p>そんなこんなしてる間に、利用停止措置が解除されたようで、発覚から１２時間程度で対応していただけました（同時に会員ページにもログインできるようになりました）。ご丁寧に「口頭でのお約束」が文書化されてメールが来ましたよっと。</p>\n",
      "date_published": "2013-10-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/02/enum-files-recursive-on-nodejs/",
      "url": "https://blog.amay077.net/blog/2013/10/02/enum-files-recursive-on-nodejs/",
      "title": "ディレクトリを再帰的にたどってファイル一覧を出力する",
      "content_html": "<p><a href=\"https://twitter.com/_shimizu\">@_shimizu</a> さんの</p>\n<!--more-->\n<ul>\n<li><a href=\"http://shimz.me/blog/node-js/2944\">[node.js]ディレクトリを再帰的にたどってファイル一覧をJSONとして出力する ｜ GUNMA GIS GEEK</a></li>\n</ul>\n<p>の派生品です。ファイルパスを出力するだけにしました。</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> fs <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fs\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">,</span> path <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">,</span> dir <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//引数が無いときはカレントディレクトリを対象とする</span><br><br><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">walk</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p<span class=\"token punctuation\">,</span> fileCallback<span class=\"token punctuation\">,</span> errCallback</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>\tfs<span class=\"token punctuation\">.</span><span class=\"token function\">readdir</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span> files</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token function\">errCallback</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>\t\tfiles<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">var</span> fp <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// to full-path</span><br>\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">statSync</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isDirectory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">,</span> fileCallback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ディレクトリなら再帰</span><br>\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token function\">fileCallback</span><span class=\"token punctuation\">(</span>fp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ファイルならコールバックで通知</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><br><span class=\"token comment\">// 使う方</span><br><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">path</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ファイル１つ受信\t</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Receive err:\"</span> <span class=\"token operator\">+</span> err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// エラー受信</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n",
      "date_published": "2013-10-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/10/02/bitcasa-when-failed-to-upload/",
      "url": "https://blog.amay077.net/blog/2013/10/02/bitcasa-when-failed-to-upload/",
      "title": "Bitcasa でアップロードに失敗したファイルが見つかった時の対処方法",
      "content_html": "<p>相変わらず「安定している」とは言いがたい Bitcasa さん。CPU 喰いまくったり、アップロード残が一向に減らないまま１日経過とかザラで、そういう時はアプリを終了させたり、プロセスを殺したりする訳ですが、そうしますと「正常にアップロードできてないファイル」ができる事があります。</p>\n<!--more-->\n<p>このファイルは、Bitcasa の Web サイトで「灰色」で表示されます(下を参照)。このファイルは Web 上で再生も、ダウンロードもできません。一方、PC の Finder や Explorer 上の Infinite Drive では、特に問題ないように見えます。が、再生や実行などしようとするとエラーになります。(キャッシュに残っている内はうまくいくかも)</p>\n<p><img src=\"https://support.bitcasa.com/attachments/token/yw6awz1fvdktbuf/?name=noname.png\" alt=\"img\"></p>\n<p>この症状について、<a href=\"https://support.bitcasa.com/\">Bitcasa のサポートサイト</a> で、以下の情報が見つかります。</p>\n<ul>\n<li><a href=\"https://support.bitcasa.com/entries/23768267-some-pictures-can-not-be-opened-on-my-bitcasa-com\">some pictures can not be opened on my.bitcasa.com : Help Center</a></li>\n</ul>\n<p>これ、要約すると、</p>\n<p>「キャッシュを消してアップロードしなおしてください」</p>\n<p>と言ってるんですが、次の理由でやってられません。</p>\n<p><strong>「どんだけフォルダあると思っとんねん！」</strong></p>\n<p>そう、「アップロードに失敗したファイルを見つける方法」は、Web サイトで「灰色になっているのを目視する」しかないのです。</p>\n<p>他のユーザーもこれを問題視していて、<a href=\"http://feedback.bitcasa.com/forums/184524-bitcasa-feature-requests-suggestions\">Bitcasa の要望受付</a> には、次のような案が挙げられています。</p>\n<ol>\n<li><a href=\"http://feedback.bitcasa.com/forums/184524-bitcasa-feature-requests-suggestions/suggestions/3982870-a-incomplete-files-list-in-my-bitcasa-portal\">A incomplete files list in my bitcasa portal</a></li>\n<li><a href=\"http://feedback.bitcasa.com/forums/184524-bitcasa-feature-requests-suggestions/suggestions/4403970-mark-incomplete-corrupted-files-with-a-modified-da\">Mark incomplete/corrupted files with a modified date of 01-01-1970 so that file sync utilities will sync them again</a></li>\n<li><a href=\"http://feedback.bitcasa.com/forums/184524-bitcasa-feature-requests-suggestions/suggestions/4115823-a-option-to-delete-incomplete-files-from-my-bitcas\">A option to delete incomplete files from my Bitcasa Drive</a></li>\n</ol>\n<p>1 が一番投票数が多くて実現の検討に入ってる(IN REVIEW)ようです。</p>\n<p>で、タイトルにある「対処方法」としては、 <strong>「Vote してください」</strong> となります。なんじゃそら。</p>\n<p>しかし、クラウドストレージのキモって「確実に」「クラウド上に」「ファイルが保管されている」ことだと思うんですが、この辺が危ういのなんとかしてほしいですねえ。</p>\n",
      "date_published": "2013-10-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/29/movecamera-with-cameraupdatefactory-newlatlngbounds-crashes/",
      "url": "https://blog.amay077.net/blog/2013/09/29/movecamera-with-cameraupdatefactory-newlatlngbounds-crashes/",
      "title": "moveCamera(CameraUpdateFactory.newLatLngBounds で落ちる",
      "content_html": "<p>Google Map Android API v2 では、指定した範囲にいいかんじにズームしてくれるメソッドがあって（これを使うと下記事のようなことができる）、とても便利なのですが、普通に使ってたら落ちました（泣</p>\n<!--more-->\n<ul>\n<li><a href=\"http://tryworks-design.com/?p=1530\">Android GooglMapを使い、現在値と目的地を（２点間）を表示させる。 ｜ App Camp</a></li>\n</ul>\n<p>その理由と、対策を記録しておきます。</p>\n<h2 id=\"%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89\">エラーになるコード <a class=\"direct-link\" href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AB%E3%81%AA%E3%82%8B%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p>GoogleMap v2 を使ったよくあるコード。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span><br><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token class-name\">SupportMapFragment</span> fragment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SupportMapFragment</span><span class=\"token punctuation\">)</span><span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">findFragmentById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">GoogleMap</span> gmap <span class=\"token operator\">=</span> fragment<span class=\"token punctuation\">.</span><span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token class-name\">LatLngBounds</span> bounds <span class=\"token operator\">=</span> <span class=\"token class-name\">LatLngBounds</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.4433011</span><span class=\"token punctuation\">,</span><span class=\"token number\">139.646108</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 横浜</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.6846001</span><span class=\"token punctuation\">,</span><span class=\"token number\">139.696919</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 東京</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    gmap<span class=\"token punctuation\">.</span><span class=\"token function\">moveCamera</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CameraUpdateFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newLatLngBounds</span><span class=\"token punctuation\">(</span>bounds<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>起動時に、横浜-東京 が画面内に入るようにズームする、つもりのコード。</p>\n<p>これは以下のエラーになる。</p>\n<blockquote>\n<p>09-29 20:22:58.508: E/AndroidRuntime(18904): FATAL EXCEPTION: main<br/><br>\n09-29 20:22:58.508: E/AndroidRuntime(18904): java.lang.RuntimeException: Unable to start activity ComponentInfo{com.amay077.<br/>android/com.amay077.android.mapsample.view.MainActivity}: java.lang.IllegalStateException: Map size should not be 0. Most likely, layout has not yet occured for the map view.</p>\n</blockquote>\n<h2 id=\"%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AE%E5%8E%9F%E5%9B%A0\">エラーの原因 <a class=\"direct-link\" href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%AE%E5%8E%9F%E5%9B%A0\">#</a></h2>\n<p>StackOverflow さまに載ってた。</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/13692579/movecamera-with-cameraupdatefactory-newlatlngbounds-crashes\">android - moveCamera with CameraUpdateFactory.newLatLngBounds crashes - Stack Overflow</a></li>\n</ul>\n<p>また、<a href=\"https://developers.google.com/maps/documentation/android/views#changing_camera_position\">APIリファレンス</a> にも次のように記載がある。</p>\n<blockquote>\n<p>Note: Only use the simpler method newLatLngBounds(boundary, padding) to generate a CameraUpdate if it is going to be used to move the camera after the map has undergone layout. During layout, the API calculates the display boundaries of the map which are needed to correctly project the bounding box. In comparison, you can use the CameraUpdate returned by the more complex method newLatLngBounds(boundary, width, height, padding) at any time, even before the map has undergone layout, because the API calculates the display boundaries from the arguments that you pass.</p>\n</blockquote>\n<p>意訳すると <code>newLatLngBounds(boundary, padding)</code> は、レイアウトが完了した後で使ってね、そうでない場合は、<code>newLatLngBounds(boundary, width, height, padding)</code> を使ってね。ということらしい。</p>\n<p>確かに <code>onCreate</code> ではまだレイアウトされていないので納得。</p>\n<h2 id=\"%E5%AF%BE%E7%AD%96\">対策 <a class=\"direct-link\" href=\"#%E5%AF%BE%E7%AD%96\">#</a></h2>\n<p>上の StackOverflow でも解決策として、<code>ViewTreeObserver.addOnGlobalLayoutListener</code> を使って、レイアウトが完了したタイミングで moveCamera する方法が紹介されているが、もうちっとシンプルにできないかなと思っていたところ、ちょうど別件で「ビューのサイズが確定(して Width/Height が取得できる)タイミング」を調べていて、同じく StackOverflow で以下の情報を発見。</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/4393612/when-can-i-first-measure-a-view/15301092#15301092\">android - When Can I First Measure a View? - Stack Overflow</a></li>\n</ul>\n<p>これによると <code>view.post(new Runnable() { … })</code> のタイミングでも OK らしいので、今回はこれを使ってみる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span><br><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token class-name\">SupportMapFragment</span> fragment <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SupportMapFragment</span><span class=\"token punctuation\">)</span><span class=\"token function\">getSupportFragmentManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">findFragmentById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">GoogleMap</span> gmap <span class=\"token operator\">=</span> fragment<span class=\"token punctuation\">.</span><span class=\"token function\">getMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token comment\">// NOTE MainActivity.this.runOnUiThread(new Runnable() { ではダメだった</span><br>    fragment<span class=\"token punctuation\">.</span><span class=\"token function\">getView</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">LatLngBounds</span> bounds <span class=\"token operator\">=</span> <span class=\"token class-name\">LatLngBounds</span><span class=\"token punctuation\">.</span><span class=\"token function\">builder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>                    <span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.4433011</span><span class=\"token punctuation\">,</span><span class=\"token number\">139.646108</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 横浜</span><br>                    <span class=\"token punctuation\">.</span><span class=\"token function\">include</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.6846001</span><span class=\"token punctuation\">,</span><span class=\"token number\">139.696919</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 東京</span><br>                    <span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <br>            gmap<span class=\"token punctuation\">.</span><span class=\"token function\">moveCamera</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CameraUpdateFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">newLatLngBounds</span><span class=\"token punctuation\">(</span>bounds<span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>としたところ、正常に地図がズームされました。</p>\n<p><img src=\"/img/posts/movecamera_with_cameraupdatefactory_newlatlngbounds_crashes_01.png\" alt=\"img\"></p>\n<p>ちなみに、処理をメインスレッド上で行う <code>Activity.runOnUiThread</code> や <code>Handler.post</code> では NG、冒頭と同じエラーでした。処理は UIスレッド上で行われるけど、Map はまだレイアウト未完了、という事だと思います。</p>\n<p>起動時の処理は、全ての View で post 内に書いておいた方がいいのかも。</p>\n",
      "date_published": "2013-09-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/26/layout-widh-like-property-in-custom-view/",
      "url": "https://blog.amay077.net/blog/2013/09/26/layout-widh-like-property-in-custom-view/",
      "title": "自作ビューで layout_width のマネをしたい時",
      "content_html": "<p><code>android:layout_width</code> って、型は <code>dimension</code> であるのに、Layout XML には、 <code>&quot;match_parent&quot;</code> とか <code>&quot;wrap_content&quot;</code> とか指定できる。これと同じことを自作ビューの自作プロパティでやりたい。</p>\n<!--more-->\n<p>自作ビュー(カスタムビュー)の作りかたは下などを参照。</p>\n<ul>\n<li><a href=\"http://techbooster.org/android/application/7361/\">Androidでxmlファイルを用いてカスタムViewを作る方法 ｜ Tech Booster</a></li>\n</ul>\n<p>で、<code>android:layout_width</code> のマネをするには、 attrs.xml に以下のように書く。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>resources</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>declare-styleable</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>MyCustomView<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>my_width<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">format</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dimension<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enum</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>fill_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enum</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-1<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>enum</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>wrap_content<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>-2<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>declare-styleable</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>resources</span><span class=\"token punctuation\">></span></span></code></pre>\n<p>Android Framework のソースコードにこう書いてあったので、真似しただけ。</p>\n<ul>\n<li><a href=\"http://grepcode.com/file/repository.grepcode.com/java/ext/com.google.android/android/4.3_r2.1/frameworks/base/core/res/res/values/attrs.xml\">GrepCode: frameworks / base / core / res / res / values / attrs.xml - Source Code View</a></li>\n</ul>\n<p>自作ビューの実装クラスで、この値を読み込む時は、<code>TypedArray.getLayoutDimension</code> を使う。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">MyCustomView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">AttributeSet</span> attrs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> attrs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token class-name\">TypedArray</span> a <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">obtainStyledAttributes</span><span class=\"token punctuation\">(</span>attrs<span class=\"token punctuation\">,</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>styleable<span class=\"token punctuation\">.</span>MyCustomView<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    _myWidth <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">getLayoutDimension</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>styleable<span class=\"token punctuation\">.</span>MyCustomView_my_width<span class=\"token punctuation\">,</span> <br>            <span class=\"token class-name\">LayoutParams</span><span class=\"token punctuation\">.</span>WRAP_CONTENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    a<span class=\"token punctuation\">.</span><span class=\"token function\">recycle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Android Framework 側で仕様が増えた時は、追従しないといかんのかー。</p>\n",
      "date_published": "2013-09-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/25/the-battle-of-abbreviation-lat-vs-lng/",
      "url": "https://blog.amay077.net/blog/2013/09/25/the-battle-of-abbreviation-lat-vs-lng/",
      "title": "Longitude の略し方。lng 派と lon 派の終わらない争い",
      "content_html": "<p>地図上での位置は「緯度経度」で表します。英語だと「latitude, longitude」ですね。<br>\nこれらの単語、コーディングする際は短縮したいわけです。latitude は <code>lat</code> で全会一致です。問題は longitude 。</p>\n<!--more-->\n<p>業界？の中では、longitude の略し方についての議論が度々沸き起こります。</p>\n<p>例えば、、、</p>\n<p>初めは、タイトルの議論で推移していましたが、次第に略し方の議論に。。。</p>\n<ul>\n<li><a href=\"http://togetter.com/li/85864\">latitudeとlongitude，どっちが緯度でどっちが経度？ - Togetter</a></li>\n</ul>\n<p><code>lon</code> 派の方の意見。</p>\n<blockquote class=\"twitter-tweet\"><p>そういえば緯度経度のうち経度（longitude）をlong, lon, lngなどと書く場合があるんだけど、longは長整数型のために予約語になってる場合があるのと、lngだと「イング」と読めてしまうからという理由でlonにしてる。</p>&mdash; Masaki Ohashi (@ohashimasaki) <a href=\"https://twitter.com/ohashimasaki/statuses/308895891308294144\">March 5, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p><code>lng</code> 支持？な方々</p>\n<blockquote class=\"twitter-tweet\"><p>longitudeの省略形を何にするか迷ってる。lon or lng 今のところlngが優勢。</p>&mdash; 本城 博昭 (@honjo2) <a href=\"https://twitter.com/honjo2/statuses/28848028079\">October 27, 2010</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><p>最近Google Maps APIを触っていたので、CHINTAIの地図で経度(longitude)のパラメータがlngじゃなくてlonなのが新鮮に思えた</p>&mdash; Ryusuke SEKIYAMA (@rsky) <a href=\"https://twitter.com/rsky/statuses/25312333134\">September 23, 2010</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>振り回されてる方々</p>\n<blockquote class=\"twitter-tweet\"><p>lngとlonで５分ハマったー</p>&mdash; ばん↓どう↑さん↓ (@netartjp) <a href=\"https://twitter.com/netartjp/statuses/379923672632266752\">September 17, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><p>lonとlngのミスで1時間無駄にした</p>&mdash; カメキチ (@kamekiti) <a href=\"https://twitter.com/kamekiti/statuses/186149216492589056\">March 31, 2012</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<blockquote class=\"twitter-tweet\"><p>YahooのローカルサーチAPIのパラメーターの経度情報って、「lon」から始まる値なんですね。他の多くが「lng」な気がするので、始め何でエラーが出るのは分かりませんでした。ということで、ほぼ出来たピョン吉。</p>&mdash; 星野邦敏 (@khoshino) <a href=\"https://twitter.com/khoshino/statuses/149640555092131842\">December 22, 2011</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>おいマジか Yahoo!（笑</p>\n<blockquote class=\"twitter-tweet\"><p>「Y.LatLngオブジェクトのメソッドはlat、lngですが、ローカルサーチAPIのパラメータ名はlat、lonなので注意してください」YOLPで挑戦～「マクドナルドはどこだ」アプリをHTML5で作る！ <a href=\"http://t.co/QX8yiyvT\">http://t.co/QX8yiyvT</a></p>&mdash; NI-Lab. (@nilab) <a href=\"https://twitter.com/nilab/statuses/189537270347472896\">April 10, 2012</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>とこのように、一つの企業内でも「揺れ」が生じてしまう程度にはバラバラな感じです。</p>\n<h2 id=\"%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F\">調べてみた <a class=\"direct-link\" href=\"#%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<p>で、デファクトスタンダードはどれなのよ？をいろんな地図に関する Web API の仕様から一覧化してみました。</p>\n<h3 id=\"lng-%E6%B4%BE\">Lng 派 <a class=\"direct-link\" href=\"#lng-%E6%B4%BE\">#</a></h3>\n<p>Google は神！Google 先生について行きます！</p>\n<ul>\n<li>Google - <a href=\"https://developers.google.com/maps/documentation/javascript/reference?hl=ja#LatLng\">https://developers.google.com/maps/documentation/javascript/reference?hl=ja#LatLng</a></li>\n<li>Mapion - <a href=\"http://labs.mapion.co.jp/api/asdoc/index.html\">http://labs.mapion.co.jp/api/asdoc/index.html</a></li>\n<li>ロケタッチ - <a href=\"http://tou.ch/developer/api_all?uri=spots%2Fsearch\">http://tou.ch/developer/api_all?uri=spots%2Fsearch</a></li>\n<li>Leaflet - <a href=\"http://leafletjs.com/reference.html#latlng\">http://leafletjs.com/reference.html#latlng</a></li>\n<li>Yahoo(地図API) - <a href=\"http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/js/#index6-2\">http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/js/#index6-2</a></li>\n<li>mapquest - <a href=\"http://www.mapquestapi.com/staticmap/#getmap\">http://www.mapquestapi.com/staticmap/#getmap</a></li>\n</ul>\n<h3 id=\"lon-%E6%B4%BE\">Lon 派 <a class=\"direct-link\" href=\"#lon-%E6%B4%BE\">#</a></h3>\n<p>頭から３文字取ったら普通これだろjk</p>\n<ul>\n<li>Yahoo(ローカルサーチ) - <a href=\"http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/localsearch.html\">http://developer.yahoo.co.jp/webapi/map/openlocalplatform/v1/localsearch.html</a></li>\n<li>OpenStreetMap - <a href=\"http://wiki.openstreetmap.org/wiki/API_v0.6#Create_a_new_note:_Create:\">http://wiki.openstreetmap.org/wiki/API_v0.6#Create_a_new_note:_Create:</a><em>POST</em>.2Fapi.2F0.6.2Fnotes</li>\n<li>OpenLayers - <a href=\"http://dev.openlayers.org/docs/files/OpenLayers/BaseTypes/LonLat-js.html\">http://dev.openlayers.org/docs/files/OpenLayers/BaseTypes/LonLat-js.html</a> ※LonLat！</li>\n<li>電子国土Web - <a href=\"http://portal.cyberjapan.jp/site/mapuse4/#zoom=5&amp;lat=35.99989&amp;lon=138.75&amp;layers=BTTT\">http://portal.cyberjapan.jp/site/mapuse4/#zoom=5&amp;lat=35.99989&amp;lon=138.75&amp;layers=BTTT</a></li>\n<li>Elasticsearch - <a href=\"http://www.elasticsearch.org/guide/reference/mapping/geo-point-type/\">http://www.elasticsearch.org/guide/reference/mapping/geo-point-type/</a></li>\n<li>MongoDB - <a href=\"http://myadventuresincoding.wordpress.com/2011/10/02/mongodb-geospatial-queries/\">http://myadventuresincoding.wordpress.com/2011/10/02/mongodb-geospatial-queries/</a></li>\n<li>ゼンリンデータコム(いつもNavi) - <a href=\"http://support.e-map.ne.jp/manuals/V20/index.html?%A5%AF%A5%E9%A5%B9%A5%EA%A5%D5%A5%A1%A5%EC%A5%F3%A5%B9%2FZDC.LatLon\">http://support.e-map.ne.jp/manuals/V20/index.html?���饹���ե�������%2FZDC.LatLon</a></li>\n<li>簡易逆ジオコーディングサービス / <a href=\"http://Finds.jp\">Finds.jp</a> - <a href=\"http://www.finds.jp/wsdocs/rgeocode/index.html.ja#PARAMS\">http://www.finds.jp/wsdocs/rgeocode/index.html.ja#PARAMS</a></li>\n<li>ジオどす - <a href=\"http://geodosu.com/\">http://geodosu.com/</a></li>\n<li>モバイラーズオアシスAPI - <a href=\"http://oasis.mogya.com/blog/API\">http://oasis.mogya.com/blog/API</a></li>\n<li>GeOAP(東京ガス) - <a href=\"http://dev.geoap.jp/GeOAP_Course/GeOAP_Trial.asmx?op=CourseLineOfLLToLL\">http://dev.geoap.jp/GeOAP_Course/GeOAP_Trial.asmx?op=CourseLineOfLLToLL</a></li>\n<li>はてなココ - <a href=\"http://c.hatena.ne.jp/s/nearby?lat=36.2648177777778&amp;lon=137.910003611111\">http://c.hatena.ne.jp/s/nearby?lat=36.2648177777778&amp;lon=137.910003611111</a></li>\n<li>Nokia - <a href=\"http://developer.here.com/rest-apis/documentation/enterprise-map-image\">http://developer.here.com/rest-apis/documentation/enterprise-map-image</a></li>\n</ul>\n<h3 id=\"long-%E6%B4%BE\">Long 派 <a class=\"direct-link\" href=\"#long-%E6%B4%BE\">#</a></h3>\n<p>「〜itude」は同じなんだから、それより前の部分を省略形にすべきだろ（でっち上げの根拠ですｗ</p>\n<ul>\n<li>LatLongLab(Yahoo) - <a href=\"http://latlonglab.yahoo.co.jp/\">http://latlonglab.yahoo.co.jp/</a></li>\n<li>はてなココ - <a href=\"http://developer.hatena.ne.jp/ja/documents/coco/apis/v1/spots#spots\">http://developer.hatena.ne.jp/ja/documents/coco/apis/v1/spots#spots</a></li>\n</ul>\n<h3 id=\"longitude(%E7%95%A5%E3%81%95%E3%81%AA%E3%81%84)%E6%B4%BE\">Longitude(略さない)派 <a class=\"direct-link\" href=\"#longitude(%E7%95%A5%E3%81%95%E3%81%AA%E3%81%84)%E6%B4%BE\">#</a></h3>\n<p>こんなに迷うなら、いっそ省略形など要らぬ！</p>\n<ul>\n<li>Apple - <a href=\"https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocationDataTypesRef/Reference/reference.html\">https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CoreLocationDataTypesRef/Reference/reference.html</a></li>\n<li>Bing Maps - <a href=\"http://msdn.microsoft.com/en-us/library/gg427612.aspx\">http://msdn.microsoft.com/en-us/library/gg427612.aspx</a></li>\n<li>Facebook -  <a href=\"https://developers.facebook.com/docs/reference/fql/location_post\">https://developers.facebook.com/docs/reference/fql/location_post</a></li>\n<li>Amazon - <a href=\"https://developer.amazon.com/sdk/maps/api-reference.html\">https://developer.amazon.com/sdk/maps/api-reference.html</a></li>\n<li>Evernote - <a href=\"http://dev.evernote.com/doc/reference/Types.html#Struct_NoteAttributes\">http://dev.evernote.com/doc/reference/Types.html#Struct_NoteAttributes</a></li>\n<li>Path - <a href=\"https://path.com/developers#tags\">https://path.com/developers#tags</a></li>\n</ul>\n<h3 id=\"%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6%E3%83%9A%E3%82%A2%E3%81%AB%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%91%E3%81%A1%E3%82%83%E3%81%86%E6%B4%BE\">緯度経度ペアに名前付けちゃう派 <a class=\"direct-link\" href=\"#%E7%B7%AF%E5%BA%A6%E7%B5%8C%E5%BA%A6%E3%83%9A%E3%82%A2%E3%81%AB%E5%90%8D%E5%89%8D%E4%BB%98%E3%81%91%E3%81%A1%E3%82%83%E3%81%86%E6%B4%BE\">#</a></h3>\n<p>だってペアじゃないと意味ないじゃん？</p>\n<ul>\n<li>Twitter(geocode) - <a href=\"https://dev.twitter.com/docs/api/1/get/search\">https://dev.twitter.com/docs/api/1/get/search</a> (緯度、経度)</li>\n<li>Foursquare(ll) - <a href=\"https://developer.foursquare.com/docs/venues/search\">https://developer.foursquare.com/docs/venues/search</a> (緯度、経度)</li>\n<li>カーリル図書館情報取得API(geocode) - <a href=\"http://calil.jp/doc/api_ref.html\">http://calil.jp/doc/api_ref.html</a> (経度、緯度)</li>\n</ul>\n<h3 id=\"x%2Fy-%E3%81%A8%E5%90%8C%E3%81%98%E3%81%98%E3%82%83%E3%82%93%E6%B4%BE\">X/Y と同じじゃん派 <a class=\"direct-link\" href=\"#x%2Fy-%E3%81%A8%E5%90%8C%E3%81%98%E3%81%98%E3%82%83%E3%82%93%E6%B4%BE\">#</a></h3>\n<p>所詮座標でしょ？(ﾎｼﾞﾎｼﾞ</p>\n<ul>\n<li>Solr(pt) - <a href=\"http://docs.lucidworks.com/display/solr/Spatial+Search\">http://docs.lucidworks.com/display/solr/Spatial+Search</a></li>\n<li>Oracle Spatial - <a href=\"http://otndnld.oracle.co.jp/document/products/oracle10g/102/doc_cd/appdev.102/B19243-02/sdo_cs_concepts.htm\">http://otndnld.oracle.co.jp/document/products/oracle10g/102/doc_cd/appdev.102/B19243-02/sdo_cs_concepts.htm</a></li>\n<li>PostGIS - <a href=\"http://postgis.net/docs/manual-2.1/using_postgis_dbmanagement.html#RefObject\">http://postgis.net/docs/manual-2.1/using_postgis_dbmanagement.html#RefObject</a></li>\n<li>PlaceEngine - <a href=\"http://www.placeengine.com/doc/tut\">http://www.placeengine.com/doc/tut</a></li>\n</ul>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>数では <code>lon</code> 派が優勢。しかし開発者の目に触れる機会では Google が居る <code>lng</code> の方が多いのかも。<br>\nMS、Facebook など、割と巨大企業が 略さない を選択してるのも面白いですね。</p>\n<p>ペアに名前を付けるやり方は、座標の順番が 緯度→経度 なのか、経度→緯度 なのか揺れるのであまり好きじゃないですね。</p>\n<p>XY と同じ概念で扱うのは、そもそも地図以外での利用を想定していたり、地図でも投影されたXY座標を想定しているものが多いですが、XY と LatLon って、これまた混乱するんですよね。Lat って Y なの？順番逆なの？って。</p>\n<p>個人的には 略さない派 だったのですが、そうは言っても短く書きたいので、最近は <code>lon</code> 派です。理由は、</p>\n<p><strong>「オレオレ緯度経度クラスを使いたいが、Google に <code>LatLng</code> を取られちゃってるから」</strong></p>\n<p>クラス名が衝突すると、いろいろ面倒だし、クラス名に Prefix 付けるのもダサいし。。。</p>\n<p>というわけで、終わらない争いと知りつつまとめてみました。<br>\n上記に載っていない情報があったら教えてもらえると嬉しいです。</p>\n",
      "date_published": "2013-09-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/10/implementing-reverse-geocoding-using-elasticsearch/",
      "url": "https://blog.amay077.net/blog/2013/09/10/implementing-reverse-geocoding-using-elasticsearch/",
      "title": "総務省のデータを Elasticsearch にぶち込んで、緯度経度から市区町村の何丁目までを取り出す",
      "content_html": "<p>いわゆる「逆ジオコーディング」と呼ばれる機能ですが、きっかけはこれら２つの記事です。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9\">PHP - 総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></li>\n<li><a href=\"http://qiita.com/masuidrive/items/21a282c7bf54fd6a4985\">PostgreSQL - 国土交通省のデータを使って、緯度経度から市区町村までを取り出す</a></li>\n</ul>\n<p>Solr や Elasticsearch でも同じことができるのでは、という事で Elasticsearch でやってみました。</p>\n<h2 id=\"elasticsearch-%E3%81%AE%E5%B0%8E%E5%85%A5\">Elasticsearch の導入 <a class=\"direct-link\" href=\"#elasticsearch-%E3%81%AE%E5%B0%8E%E5%85%A5\">#</a></h2>\n<p>は、</p>\n<ul>\n<li><a href=\"http://amay077.github.io/blog/2013/09/09/using-spatialdata-with-elasticsearch/\">Elasticsearch で位置情報を検索する手順 - Experiments Never Fail</a></li>\n</ul>\n<p>をご覧ください。</p>\n<h2 id=\"1.-%E7%B7%8F%E5%8B%99%E7%9C%81%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">1. 総務省のデータをダウンロードする <a class=\"direct-link\" href=\"#1.-%E7%B7%8F%E5%8B%99%E7%9C%81%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">#</a></h2>\n<ul>\n<li><a href=\"http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9\">PHP - 総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></li>\n</ul>\n<p>とほぼ同じですが、「世界測地系緯度経度・G-XML形式」ではなく、 <strong>「世界測地系緯度経度・shape形式」</strong> を使います。</p>\n<p>一応再掲すると、</p>\n<ol>\n<li><a href=\"http://e-stat.go.jp/SG2/eStatGIS/page/download.html\">http://e-stat.go.jp/SG2/eStatGIS/page/download.html</a> へ行く。</li>\n<li>左から「平成22年度国勢調査（小地域）」を選ぶ。</li>\n<li>「男女別人口総数及び世帯総数」（←なんでもいい）を選択して、「統計表各種データダウンロードへ」を押す。</li>\n<li>「世界測地系緯度経度・Shape形式」のデータ（下図参照）をダウンロードする。ダウンロードしたら zip ファイルのまま置いといて。</li>\n</ol>\n<p><img src=\"/img/posts/implementing_reverse_geocoding_using_elasticsearch_01.png\" alt=\"img\"></p>\n<h2 id=\"2.-shapefile-%E3%82%92-geojson-%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B\">2. Shapefile を GeoJSON 形式に変換する <a class=\"direct-link\" href=\"#2.-shapefile-%E3%82%92-geojson-%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Elasticsearch へ投入できるデータ形式は JSON なので、ダウンロードした Shape形式のデータを JSON 形式の地理空間拡張である GeoJSON 形式に変換します。</p>\n<p>スクリプトを書いてもできますが面倒なので、便利なオンラインツールに頼ることにします。</p>\n<ul>\n<li><a href=\"http://converter.mygeodata.eu/#convertVector\">Free on-line GIS data format and coordinates converter</a></li>\n</ul>\n<p>手順は、</p>\n<ol>\n<li>上記サイトへ行き、「Run vector converter」を押す。</li>\n<li>「ファイルを選択」で、さっきダウンロードした ZIP ファイルを指定し、「Send ZIP File」を押す。</li>\n<li>&quot;Datasets description&quot; というページになったら、その最下部にある「Chack available operations」を押す。(ここでは、不要なデータ項目を除外できるのだけど、面倒なので割愛)</li>\n<li>”Export to format:” で &quot;GeoJSON&quot; を選択。それ以外はそのままで「Proceed selected operation」を押す。</li>\n<li>しばらく待つと、「Download the ZIP file」リンクが表れるので、押して変換結果をダウンロードする。</li>\n</ol>\n<p>ダウンロードした ZIP ファイルを解凍すると、「xxx.json」ファイルが見つかります。それをテキストエディタで開くと、<code>features</code> 以下に、住所エリアの情報が1行ずつ出力されています。</p>\n<p>試しに1行取り出して、JSON を整形（見やすいよう適宜省略）してみると次のようになります。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Feature\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"properties\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"KEN_NAME\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"愛知県\"</span><span class=\"token punctuation\">,</span> <br>        <span class=\"token string\">\"GST_NAME\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"名古屋市\"</span><span class=\"token punctuation\">,</span> <br>        <span class=\"token string\">\"CSS_NAME\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"中区\"</span><span class=\"token punctuation\">,</span> <br>        <span class=\"token string\">\"MOJI\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"本丸\"</span><span class=\"token punctuation\">,</span> <br>        …省略…<br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <br>    <span class=\"token string\">\"geometry\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Polygon\"</span><span class=\"token punctuation\">,</span><br>        <span class=\"token string\">\"coordinates\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><br>            <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">136.895888</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35.187236</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <br>             <span class=\"token punctuation\">[</span><span class=\"token number\">136.897375</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35.187357</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <br>              …中略… <br>             <span class=\"token punctuation\">[</span><span class=\"token number\">136.895888</span><span class=\"token punctuation\">,</span> <span class=\"token number\">35.187236</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><br>        <span class=\"token punctuation\">]</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これは「愛知県名古屋市中区本丸」のデータですね。<br>\n<code>properties</code> 以下は、この住所エリアの属性情報を示しています。<br>\n<code>geometry</code> 以下が、この住所エリアの位置情報（ポリゴン）を示しています。</p>\n<h2 id=\"3.-elasticsearch-%E3%81%AB%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B\">3. Elasticsearch にスキーマを定義する <a class=\"direct-link\" href=\"#3.-elasticsearch-%E3%81%AB%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E%E3%82%92%E5%AE%9A%E7%BE%A9%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Elasticseach はスキーマフリーですが、位置情報のところだけは明示的に宣言しないといけないらしいので、下のようなコマンドを実行して定義します。</p>\n<p>あ、ここでは、</p>\n<ul>\n<li>Index名 : towns</li>\n<li>Type名 : town</li>\n</ul>\n<p>としています。</p>\n<p>「Index や Type って何？」という方は</p>\n<ul>\n<li><a href=\"http://qiita.com/ise_daisuke/items/5e10e0b3ef9dffed08a9\">Elasticsearch用語の適当なまとめ</a></li>\n</ul>\n<p>をどうぞ。</p>\n<p>ではコマンドです。</p>\n<pre><code>curl -XPUT 'http://localhost:9200/towns/'\n\ncurl -XPUT 'http://localhost:9200/towns/town/_mapping' -d '\n{\n    &quot;town&quot; : {\n        &quot;properties&quot;: {\n            &quot;geometry&quot;: {\n                &quot;type&quot;: &quot;geo_shape&quot;, \n                &quot;tree&quot;: &quot;quadtree&quot;,\n                &quot;precision&quot;: &quot;1m&quot;\n            }\n        }\n    }\n}'\n</code></pre>\n<p><code>properties.geometry</code> は、「geo_shape」 として扱う事を宣言しています。他の２つの設定は、インデックスの種類と精度を意味しますが、よく分かってません。</p>\n<ul>\n<li><a href=\"http://www.elasticsearch.org/guide/reference/mapping/geo-shape-type/\">Geo Shape Type ｜ Reference Guide ｜ Elasticsearch</a></li>\n</ul>\n<p>で勉強しましょう。</p>\n<h2 id=\"4.-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92-elasticsearch-%E3%81%AB%E6%8A%95%E5%85%A5%E3%81%99%E3%82%8B\">4. データを Elasticsearch に投入する <a class=\"direct-link\" href=\"#4.-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92-elasticsearch-%E3%81%AB%E6%8A%95%E5%85%A5%E3%81%99%E3%82%8B\">#</a></h2>\n<p>さて、いよいよこの「1行1JSON」のデータを、1行ずつ、Elasticsearch に投入します。<br>\n先の xxxx.json を置換なり何なりを駆使して、スクリプトにしちゃうのがてっとり早いでしょう。(json ファイルは Shift-jis なので、UTF-8 に変換しておきましょう。）</p>\n<p>1行のデータを投入するコマンドは次のようになります。</p>\n<pre><code>curl -XPUT 'http://localhost:9200/towns/town/1' -d '{\n    &quot;type&quot;: &quot;Feature&quot;,\n    &quot;properties&quot;: {\n        &quot;KEN_NAME&quot;: &quot;愛知県&quot;, \n        &quot;GST_NAME&quot;: &quot;名古屋市&quot;, \n        &quot;CSS_NAME&quot;: &quot;中区&quot;, \n        &quot;MOJI&quot;: &quot;本丸&quot;, \n        …省略…\n    }, \n    &quot;geometry&quot;: {\n        &quot;type&quot;: &quot;Polygon&quot;,\n        &quot;coordinates&quot;: [\n            [[136.895888, 35.187236], \n             [136.897375, 35.187357], \n              …中略… \n             [136.895888, 35.187236]]\n        ]\n    }\n}'\n</code></pre>\n<p><code>towns/town/1</code> の最後の「1」のところは、連番にする必要があります。(オートインクリメントとかないのかな？)</p>\n<p>全件を PUT すつスクリプトファイルは、下の画像のような感じになると思います。(データのライセンスがどうか分からないのでスクリプトファイル自体を公開するのはやめておきます)</p>\n<p><img src=\"/img/posts/implementing_reverse_geocoding_using_elasticsearch_02.png\" alt=\"img\"></p>\n<p>これをTerminal で実行すると、数分かからずに Elasticsearch にデータが投入完了します。</p>\n<p><code>curl -XGET 'http://localhost:9200/towns/town/1'</code> などを実行すれば、正しくデータが登録できたか確認できます。</p>\n<h2 id=\"5.-%E6%A4%9C%E7%B4%A2%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">5. 検索してみる <a class=\"direct-link\" href=\"#5.-%E6%A4%9C%E7%B4%A2%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>ついに来ました。<br>\nでは、緯度経度を与えて住所が返ってくるところ、やってみましょう。</p>\n<p>Elasticsearch では検索クエリも JSON で書きます。</p>\n<p>例えば、<a href=\"http://yahoo.jp/zsXYL2\">大須観音駅</a> らへんの緯度経度(35.1613077,136.898282)の住所で検索する場合は、次のようにします。</p>\n<pre><code>curl -XPOST 'http://localhost:9200/towns/town/_search' -d '{\n    &quot;query&quot;: {\n        &quot;filtered&quot; : {\n            &quot;query&quot; : {\n                &quot;match_all&quot; : {}\n            },\n            &quot;filter&quot; : {\n                 &quot;geo_shape&quot;: {\n                    &quot;town.geometry&quot;: {\n                        &quot;shape&quot;: {\n                            &quot;type&quot; : &quot;envelope&quot;,\n                            &quot;coordinates&quot; : [[136.898282, 35.1613077], [136.898282, 35.1613077]]\n                        }\n                    }\n                }\n            }\n        }\n    }\n}'\n</code></pre>\n<p><code>geo_shape</code> フィルタを使い、条件に envelople(左上〜右下の領域) を指定します。今は「点」での検索をしたいので、左上、右下に同じ座標を指定します。<br>\n注意点は、 <strong>「経度, 緯度」</strong> の順であることです。</p>\n<p>※ <a href=\"http://www.elasticsearch.org/guide/reference/query-dsl/geo-distance-filter/\"><code>geo_distance</code></a> というフィルタもありますが、こちらはデータが「点」専用なようで、今回のような「ポリゴン」には使えませんでした。</p>\n<p>さて、上のコマンドを実行すると、下のような結果が得られます。(整形、省略済)</p>\n<pre><code>{\n  &quot;took&quot;:1,\n  &quot;timed_out&quot;:false,\n  &quot;_shards&quot;:{\n    &quot;total&quot;:5,\n    &quot;successful&quot;:5,\n    &quot;failed&quot;:0\n  },\n  &quot;hits&quot;:{\n    &quot;total&quot;:1,\n    &quot;max_score&quot;:1.0,\n    &quot;hits&quot;:[{\n      &quot;_index&quot;:&quot;towns&quot;,\n      &quot;_type&quot;:&quot;town&quot;,\n      &quot;_id&quot;:&quot;29&quot;,\n      &quot;_score&quot;:1.0, \n      &quot;_source&quot; : { \n        &quot;type&quot;: &quot;Feature&quot;, \n        &quot;properties&quot;: { \n          &quot;KEN_NAME&quot;: &quot;愛知県&quot;, \n          &quot;GST_NAME&quot;: &quot;名古屋市&quot;, \n          &quot;CSS_NAME&quot;: &quot;中区&quot;, \n          &quot;MOJI&quot;: &quot;大須２丁目&quot;, \n          …以下省略…\n</code></pre>\n<p>はい、「緯度経度(35.1613077,136.898282)」の住所は「愛知県名古屋市中区大須２丁目」であることが取得できました。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>いかがでしょうか、Elasticsearch でも逆ジオコーディングの実装が、簡単にできることが分かりました。</p>\n<p>PostGIS、MongoDB との対比では、</p>\n<ul>\n<li>セットアップが簡単</li>\n<li>REST API なので直接他のサービスとマッシュアップできる</li>\n</ul>\n<p>あたりがメリットでしょうか。</p>\n<p>逆にデータの取り込みはひと工夫必要で、PostGIS の方が簡単です。<br>\nこのデータ用の River plugin を作ればよいのでしょうが、方法がさっぱり…。</p>\n<p>最後に、</p>\n<p><a href=\"http://qiita.com/hamichamp/items/ac9e80f1078febb9f1b9\">総務省のデータを使って、緯度経度から市区町村の何丁目までを取り出す</a></p>\n<blockquote>\n<p>実は、データをダウンロードするのが、一番手間がかかります・・・。</p>\n</blockquote>\n<p>でも言われていますが、まったくその通りです。<br>\n１市区町村ずつダウンロードとか正直やってられません。</p>\n<p>総務省でも国土交通省でもどちらでも良いのですが、<br>\n<strong>「全国の大字境界＋属性データを一括入手する方法」</strong> を用意して欲しいものです。</p>\n",
      "date_published": "2013-09-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/09/using-spatialdata-with-elasticsearch/",
      "url": "https://blog.amay077.net/blog/2013/09/09/using-spatialdata-with-elasticsearch/",
      "title": "Elasticsearch で位置情報を検索する手順",
      "content_html": "<p>Elasticsearch は、オープンソースの全文検索エンジンです。Apache Solr と並んでよく取り上げられるようになってきました。</p>\n<p>位置情報の検索機能も標準搭載しているとのことで、試しに使ってみました。</p>\n<!--more-->\n<h2 id=\"elasticsearch-%E3%81%AE%E5%B0%8E%E5%85%A5\">Elasticsearch の導入 <a class=\"direct-link\" href=\"#elasticsearch-%E3%81%AE%E5%B0%8E%E5%85%A5\">#</a></h2>\n<p>下の情報が大変参考になりました。(環境は Mac。事前に Java と homebrew の導入が必要です）</p>\n<ul>\n<li><a href=\"http://qiita.com/Konboi@github/items/56f0aaca77db5df027af\">elasticsearch - ElasitcSearch ことはじめ - Qiita [キータ]</a></li>\n</ul>\n<h2 id=\"%E8%A9%A6%E3%81%97%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">試しに使ってみる <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>下のサイトが大変参考なりました。</p>\n<ul>\n<li><a href=\"http://inokara.hateblo.jp/entry/2013/09/07/153826\">Elasticsearch を試してみる - ようへいの日々精進</a></li>\n</ul>\n<h2 id=\"%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%82%92%E6%A4%9C%E7%B4%A2%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">位置情報を検索してみる <a class=\"direct-link\" href=\"#%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%82%92%E6%A4%9C%E7%B4%A2%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>下のようなスキーマのデータを登録して検索する想定です。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Tokyo St\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"pin\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"location\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"lat\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">35.68</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"lon\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">139.76</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"1.-%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">1. スキーマを登録する <a class=\"direct-link\" href=\"#1.-%E3%82%B9%E3%82%AD%E3%83%BC%E3%83%9E%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B\">#</a></h3>\n<p>Elasticsearch は基本的にはスキーマレスで動くのですが、位置情報を表す項目は、明確にスキーマを定義する必要があるようです。</p>\n<p>データ投入の前にそれを行います。</p>\n<pre><code>curl -XPUT 'http://localhost:9200/myvenues/'\n\ncurl -XPUT 'http://localhost:9200/myvenues/venue/_mapping' -d '\n{\n    &quot;venue&quot; : {\n        &quot;properties&quot; : {\n            &quot;pin&quot; : { &quot;type&quot; : &quot;geo_point&quot; }\n        }\n    }\n}'\n</code></pre>\n<p>ここでは、<code>venue</code> のプロパティ群の内の <code>pin</code> 項目は、位置情報(geo_point)だよ、と定義しています。</p>\n<h3 id=\"2.-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%8A%95%E5%85%A5%E3%81%99%E3%82%8B\">2. データを投入する <a class=\"direct-link\" href=\"#2.-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E6%8A%95%E5%85%A5%E3%81%99%E3%82%8B\">#</a></h3>\n<p>2件ほど、テストデータを投入します。</p>\n<pre><code>curl -XPUT 'http://localhost:9200/myvenues/venue/1' -d '{\n    &quot;name&quot; : &quot;Tokyo St&quot;,\n    &quot;tag&quot; : [&quot;station&quot;, &quot;train&quot;],\n    &quot;pin&quot; : {\n        &quot;location&quot; : {\n            &quot;lat&quot; : 35.68,\n            &quot;lon&quot; : 139.76\n        }\n    }\n}'\n\ncurl -XPUT 'http://localhost:9200/myvenues/venue/2' -d '{\n    &quot;name&quot; : &quot;Nagoya St&quot;,\n    &quot;tag&quot; : [&quot;station&quot;, &quot;train&quot;],\n    &quot;pin&quot; : {\n        &quot;location&quot; : {\n            &quot;lat&quot; : 35.17,\n            &quot;lon&quot; : 136.88\n        }\n    }\n}'\n</code></pre>\n<h3 id=\"3.-%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%81%A7%E6%A4%9C%E7%B4%A2%E3%81%99%E3%82%8B\">3. 位置情報で検索する <a class=\"direct-link\" href=\"#3.-%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%81%A7%E6%A4%9C%E7%B4%A2%E3%81%99%E3%82%8B\">#</a></h3>\n<h4 id=\"%E4%BD%8D%E7%BD%AE%EF%BC%8B%E8%B7%9D%E9%9B%A2\">位置＋距離 <a class=\"direct-link\" href=\"#%E4%BD%8D%E7%BD%AE%EF%BC%8B%E8%B7%9D%E9%9B%A2\">#</a></h4>\n<p>緯度/経度:35.6/139.8 から 20km 周囲にあるデータを検索します。</p>\n<pre><code>curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{\n    &quot;query&quot;: {\n        &quot;filtered&quot; : {\n            &quot;query&quot; : {\n                &quot;match_all&quot; : {}\n            },\n            &quot;filter&quot; : {\n                &quot;geo_distance&quot; : {\n                    &quot;distance&quot; : &quot;20km&quot;,\n                    &quot;venue.pin&quot; : {\n                        &quot;lat&quot; : 35.6,\n                        &quot;lon&quot; : 139.8\n                    }\n                }\n            }\n        }\n    }\n}'\n</code></pre>\n<h5 id=\"%E7%B5%90%E6%9E%9C\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C\">#</a></h5>\n<p>Tokyo St だけがヒットしました。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"took\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"timed_out\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_shards\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"total\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"successful\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"failed\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hits\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"total\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"max_score\"</span><span class=\"token operator\">:</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hits\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"_index\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"myvenues\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"venue\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_score\"</span><span class=\"token operator\">:</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_source\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Tokyo St\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"pin\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"location\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"lat\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">35.68</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"lon\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">139.76</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"%E7%AF%84%E5%9B%B2(%E7%9F%A9%E5%BD%A2)\">範囲(矩形) <a class=\"direct-link\" href=\"#%E7%AF%84%E5%9B%B2(%E7%9F%A9%E5%BD%A2)\">#</a></h4>\n<p>左上:35.2/136.8 〜 右下:35.1/136.9 にあるデータを検索します。緯度は上(北)の方が値が大きくなるので、上下関係に注意が必要です。</p>\n<pre><code>curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{\n    &quot;query&quot;: {\n        &quot;filtered&quot; : {\n            &quot;query&quot; : {\n                &quot;match_all&quot; : {}\n            },\n            &quot;filter&quot; : {\n                &quot;geo_bounding_box&quot; : {\n\t                &quot;venue.pin&quot; : {\n\t                    &quot;top_left&quot; : {\n\t                        &quot;lat&quot; : 35.2,\n\t                        &quot;lon&quot; : 136.8\n\t                    },\n\t                    &quot;bottom_right&quot; : {\n\t                        &quot;lat&quot; : 35.1,\n\t                        &quot;lon&quot; : 136.9\n\t                    }\n\t                }\n\t            }\n            }\n        }\n    }\n}'\n</code></pre>\n<h5 id=\"%E7%B5%90%E6%9E%9C-2\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C-2\">#</a></h5>\n<p>Nagoya St だけがヒットしました。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"took\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"timed_out\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_shards\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"total\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"successful\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"failed\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hits\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"total\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"max_score\"</span><span class=\"token operator\">:</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hits\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"_index\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"myvenues\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"venue\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_score\"</span><span class=\"token operator\">:</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_source\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Nagoya St\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"pin\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"location\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"lat\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">35.17</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"lon\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">136.88</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"%E7%AF%84%E5%9B%B2(%E5%A4%9A%E8%A7%92%E5%BD%A2)\">範囲(多角形) <a class=\"direct-link\" href=\"#%E7%AF%84%E5%9B%B2(%E5%A4%9A%E8%A7%92%E5%BD%A2)\">#</a></h4>\n<p>任意の多角形領域にあるデータを検索します。</p>\n<p>ここでは GeoJSON 互換の記述方式で書いてます。経度が先なので注意。<br>\n今までのような lat: lon: の配列でもかけますが、 GeoJSON 便利なので。</p>\n<pre><code>curl -XPOST 'http://localhost:9200/myvenues/venue/_search' -d '{\n    &quot;query&quot;: {\n        &quot;filtered&quot; : {\n            &quot;query&quot; : {\n                &quot;match_all&quot; : {}\n            },\n            &quot;filter&quot; : {\n                &quot;geo_polygon&quot; : {\n\t                &quot;venue.pin&quot; : {\n\t                \t&quot;points&quot; : [\n\t                \t\t[139.7, 35.7],  // 経度が先！\n\t                \t\t[139.8, 35.7],\n\t                \t\t[139.8, 35.6],\n\t                \t\t[139.7, 35.6],\n\t                \t\t[139.7, 35.7]\n\t                \t]\n\t                }\n\t            }\n            }\n        }\n    }\n}'\n</code></pre>\n<h5 id=\"%E7%B5%90%E6%9E%9C-3\">結果 <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C-3\">#</a></h5>\n<p>Tokyo St だけがヒットしました。</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span><span class=\"token string\">\"took\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"timed_out\"</span><span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_shards\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"total\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"successful\"</span><span class=\"token operator\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"failed\"</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hits\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"total\"</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"max_score\"</span><span class=\"token operator\">:</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"hits\"</span><span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"_index\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"myvenues\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_type\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"venue\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_id\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"_score\"</span><span class=\"token operator\">:</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"_source\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token string\">\"name\"</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"Tokyo St\"</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"pin\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token string\">\"location\"</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token string\">\"lat\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">35.68</span><span class=\"token punctuation\">,</span><br>            <span class=\"token string\">\"lon\"</span> <span class=\"token operator\">:</span> <span class=\"token number\">139.76</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></code></pre>\n<p>(ポリゴンの座標群が、右回りじゃないとダメかな？と思って恐る恐る左回りにしてみたら、問題なく検索できました！)</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>最初 <code>geo_point</code> を明示的に指定しないといけないのに気づかなくてしばらくハマりましたが、それ意外はすんなりと動きました。</p>\n<p>機能を試しただけでパフォーマンスなどは計測できていませんが、なんか使えそうな気はします。</p>\n<p>位置情報関係の情報を探したい時は、公式サイトの GUIDE</p>\n<ul>\n<li><a href=\"http://www.elasticsearch.org/guide/\">Reference Guide ｜ Elasticsearch</a></li>\n</ul>\n<p>の検索バーで 「geo」で検索すると、有用な情報が得られます。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://www.elasticsearch.org/\">Open Source Distributed Real Time Search &amp; Analytics ｜ Elasticsearch</a></li>\n<li><a href=\"http://www.elasticsearch.org/blog/geo-location-and-search/\">Geo Location And Search ｜ Blog ｜ Elasticsearch</a></li>\n<li><a href=\"http://www.elasticsearchtutorial.com/spatial-search-tutorial.html\">Spatial Search ElasticSearch tutorial - ElasticSearch Tutorial.com</a></li>\n<li><a href=\"http://stackoverflow.com/questions/16113439/elasticsearch-geo-distance-filter-with-multiple-locations-in-array-possible\">ElasticSearch geo distance filter with multiple locations in array - possible? - Stack Overflow</a></li>\n</ul>\n",
      "date_published": "2013-09-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/04/understanding-android-thread-priority/",
      "url": "https://blog.amay077.net/blog/2013/09/04/understanding-android-thread-priority/",
      "title": "スレッドの優先度について調べた",
      "content_html": "<p>Android にも(Java ですから)スレッドの優先度ってありますけど、それちゃんと動きますよね？というのを ExecurorService を使って調べた。</p>\n<!--more-->\n<h2 id=\"threadfactory-%E3%81%AE%E6%8B%A1%E5%BC%B5\">ThreadFactory の拡張 <a class=\"direct-link\" href=\"#threadfactory-%E3%81%AE%E6%8B%A1%E5%BC%B5\">#</a></h2>\n<p><code>ExecutorService</code> が作るスレッドは、何もしないと 優先度:中 になる模様。<br>\nこれを変更するには、生成時(<code>newSingleThreadExecutor</code>) に渡す <code>ThreadFactory</code> を自前で実装して、<code>Thread.setPriority</code> してやる。</p>\n<p><code>ThreadFactory</code> を Implements したクラス作ってもいいけど、そこまでやる必要も無いでしょ。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 指定した Priority の ThreadFactory を生成して返す</span><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadFactory</span> <span class=\"token function\">makeThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">Thread</span> <span class=\"token function\">newThread</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            thread<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span>priority<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">return</span> thread<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 使ってみる</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <br>        <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>MIN_PRIORITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    executor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// なにかの処理</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E5%84%AA%E5%85%88%E5%BA%A6%E3%81%8C%E8%80%83%E6%85%AE%E3%81%95%E3%82%8C%E3%82%8B%E3%81%8B%E3%81%AE%E6%A4%9C%E8%A8%BC\">優先度が考慮されるかの検証 <a class=\"direct-link\" href=\"#%E5%84%AA%E5%85%88%E5%BA%A6%E3%81%8C%E8%80%83%E6%85%AE%E3%81%95%E3%82%8C%E3%82%8B%E3%81%8B%E3%81%AE%E6%A4%9C%E8%A8%BC\">#</a></h2>\n<p>設定した Priority が正しく機能するのか試してみた。</p>\n<h3 id=\"%E6%A4%9C%E8%A8%BC%E6%96%B9%E6%B3%95\">検証方法 <a class=\"direct-link\" href=\"#%E6%A4%9C%E8%A8%BC%E6%96%B9%E6%B3%95\">#</a></h3>\n<ul>\n<li>MIN, NORMAL, MAX の優先度を設定をした、SingleThread な Executor を1つずつ、計３つ生成。</li>\n<li>３つの Executor に、タスクをじゃんじゃん投入(submit)する。</li>\n<li>タスクの処理が開始された所をログ出力して、その順番を調べる。</li>\n</ul>\n<h3 id=\"%E6%A4%9C%E8%A8%BC%E3%82%B3%E3%83%BC%E3%83%89\">検証コード <a class=\"direct-link\" href=\"#%E6%A4%9C%E8%A8%BC%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h3>\n<p>上を実装したのがこれ。<code>CountDownLatch</code> で待ち合わせするのがなんだかなぁって感じだがまあいいや。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">ThreadFactory</span> <span class=\"token function\">makeThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> priority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// 上と同じなので省略</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// タスクを生成する</span><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">Runnable</span> <span class=\"token function\">makeTask</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> tag<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuffer</span> buffer<span class=\"token punctuation\">,</span> <br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> latch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// タスクが開始された時に、A or B or C を追加してく</span><br>            buffer<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>tag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// StringBuffer は Thread-safe なハズだ</span><br><br>            <span class=\"token comment\">// Wait</span><br>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">1000000</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <br><br>            latch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 検証実行</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testThreadPriority</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// MIN, NORMAL, MAX な Priority の Executor を生成</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> minExecutor <span class=\"token operator\">=</span> <br>            <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>MIN_PRIORITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> norExecutor <span class=\"token operator\">=</span> <br>            <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>NORM_PRIORITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> maxExecutor <span class=\"token operator\">=</span> <br>            <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeThreadFactory</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span>MAX_PRIORITY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> latch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">StringBuffer</span> builder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuffer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <br>    <span class=\"token comment\">// それぞれの Executor にじゃんじゃんタスクを投入</span><br>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        minExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">,</span> latch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// MIN->\"C\"</span><br>        norExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">,</span> latch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NORMAL->\"B\"</span><br>        maxExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token function\">makeTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">,</span> latch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// MAX->\"A\"</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">// 全部のタスクが終わるのを待つ</span><br>    latch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> builder<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// タスクが処理された順番を出力</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E6%A4%9C%E8%A8%BC%E7%B5%90%E6%9E%9C(htc-j)\">検証結果(HTC J) <a class=\"direct-link\" href=\"#%E6%A4%9C%E8%A8%BC%E7%B5%90%E6%9E%9C(htc-j)\">#</a></h3>\n<h4 id=\"1%E5%9B%9E%E7%9B%AE\">1回目 <a class=\"direct-link\" href=\"#1%E5%9B%9E%E7%9B%AE\">#</a></h4>\n<blockquote>\n<p>BAACAAABABABABABABABABABABABABABABABABACACACACBAABABABABABAB<br>\nABABABABABABACBAABABABABABABABAABBABABABABABAABABABABABABABA<br>\nBABABABAABABABABABABABABABABABAABABABABABABABABABABABABABABA<br>\nBABABABABABABABCBBBBCBBCBCBBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCC<br>\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</p>\n</blockquote>\n<h4 id=\"2%E5%9B%9E%E7%9B%AE\">2回目 <a class=\"direct-link\" href=\"#2%E5%9B%9E%E7%9B%AE\">#</a></h4>\n<blockquote>\n<p>CBACABAABABABABABABAABABABABABABABABABACBABABABAABABBABABABA<br>\nABABABABABABABABABABABABABABABABABABABABABABABABABABAABABABA<br>\nBABABABABBABAABABABABABABABABABABABABABABABABABCABABABABABAB<br>\nABABABABABABAABABABBCBCBBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC<br>\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</p>\n</blockquote>\n<h4 id=\"3%E5%9B%9E%E7%9B%AE\">3回目 <a class=\"direct-link\" href=\"#3%E5%9B%9E%E7%9B%AE\">#</a></h4>\n<blockquote>\n<p>BAACAABABABAABABABABABABABABABABABABABABABABABABABABABABABAB<br>\nABABABABABABABABABABABABABABABABABABABABABABABABABABABABABAB<br>\nABABABABABABABABABABABABABACBABABABABABABABABABABABABABABABA<br>\nBABABABAABABABABABCBBCBCBCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC<br>\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</p>\n</blockquote>\n<p>&quot;C&quot;(優先度:MIN) のタスクが後ろの方に追いやられているのが分かる。<br>\n&quot;A&quot;(MAX) と &quot;B&quot;(NORMAL) の差ははっきりとはわからないが、それでも &quot;A&quot; の方が先に全部終わっているので優先されているのがなんとか分かる。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>優先度の変更、ちゃんと効果あるんですね。</p>\n<p>よく調べると Android には <code>android.os.Process.setThreadPriority()</code> というのもあるそうで。</p>\n<ul>\n<li><a href=\"http://mikanbako.blog.shinobi.jp/android/android.os.process.setthreadpriority--%E3%81%A8java.lang.thread.setpriority--%E3%81%AE%E5%8A%B9%E6%9E%9C%E3%81%AF%E5%90%8C%E3%81%98\">android.os.Process.setThreadPriority()とjava.lang.Thread.setPriority()の効果は同じ - みかん箱</a></li>\n</ul>\n<blockquote>\n<p>結果、両者の効果は同じです。ただし、android.os.Processではスレッドの優先度が用途ごとに定数として定義されているため、まずandroid.os.Process.setThreadPriority()の使用を検討すべきでしょう。</p>\n</blockquote>\n<p>とのこと。確かに <code>THREAD_PRIORITY_FOREGROUND</code>, <code>THREAD_PRIORITY_AUDIO</code>, <code>THREAD_PRIORITY_LOWEST</code> などが定義されているので、こちらを使った方が良さげですね。<br>\n個人的には、Java の API でできる事はその範囲で閉じてしまいたいのですがね。</p>\n",
      "date_published": "2013-09-04T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/03/using-instruments-with-xamarin-ios/",
      "url": "https://blog.amay077.net/blog/2013/09/03/using-instruments-with-xamarin-ios/",
      "title": "Xamarin.iOS + iOS Simulator で Instruments を使う",
      "content_html": "<p>Xamarin.iOS(旧MonoTouch)では、Xcode のプロファイラである Instruments がそのまま使えます。</p>\n<!--more-->\n<h2 id=\"%E3%83%87%E3%83%A2%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">デモプロジェクト <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%A2%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">#</a></h2>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/ios/deployment%2C_testing%2C_and_metrics/instruments_walkthrough\">Instruments Walkthrough ｜ xamarin</a></li>\n</ul>\n<p>にある <code>MemoryDemo.zip</code> をダウンロード、解凍します。2つプロジェクトが含まれていますが、 <code>before</code> を使います。</p>\n<h2 id=\"%E6%89%8B%E9%A0%86\">手順 <a class=\"direct-link\" href=\"#%E6%89%8B%E9%A0%86\">#</a></h2>\n<h3 id=\"1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E5%AE%9F%E8%A1%8C\">1. プロジェクトをとりあえず実行 <a class=\"direct-link\" href=\"#1.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E5%AE%9F%E8%A1%8C\">#</a></h3>\n<p>Xamarin Studio で <code>before/MemoryDemo.sln</code> を開いて、とりあえずビルド、Simulator で実行します。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_01.png\" alt=\"img\"></p>\n<p>上下にスクロールすると、次々と画像を読み込むので Allocate がハンパないよ、ってデモのようです。</p>\n<h3 id=\"2.-xamarin-studio-%E3%81%8B%E3%82%89-instruments-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B%E3%80%82\">2. Xamarin Studio から Instruments を起動する。 <a class=\"direct-link\" href=\"#2.-xamarin-studio-%E3%81%8B%E3%82%89-instruments-%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B%E3%80%82\">#</a></h3>\n<p>メニュー - ツール - Launch Instruments で起動します。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_02.png\" alt=\"img\"></p>\n<p>起動はしましたが、勝手にアプリが実行されるわけではありません。ここから少しだけ面倒な手続きが必要です。</p>\n<h3 id=\"3.-ios-simulator-%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6-instruments-%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\">3. iOS Simulator にインストールしたアプリを指定して Instruments を実行する <a class=\"direct-link\" href=\"#3.-ios-simulator-%E3%81%AB%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6-instruments-%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\">#</a></h3>\n<p>Instruments を起動すると、下のような画面になっています。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_03.png\" alt=\"img\"></p>\n<p>左メニューから [iOS Simulator] - [Memory]、右から [Allocations] を選び [Choose] ボタンを押します。</p>\n<p>次に、[Target] をクリックして、[Choose Target] - [Choose Target…] と進みます。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_04.png\" alt=\"img\"></p>\n<p>下のような画面になります。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_05.png\" alt=\"img\"></p>\n<p>次に Finder を起動して、iOS Simulator のディレクトリへ移動します。</p>\n<p>iOS Simulator のディレクトリは通常、<code>~/Library/Application Support/iPhone Simulator/</code> です。さらにアプリ毎に GUID で分けられているので目的のアプリを探してください。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_06.png\" alt=\"img\"></p>\n<p>アプリのディレクトリを開いたら、その中のアプリケーションファイル(ここでは <code>MemoryDemo</code>) を、先ほど開いておいた Instruments の中へドラッグ＆ドロップします。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_07.png\" alt=\"img\"></p>\n<p>そして [Choose] を押すと、Target が MemoryTest になっているのが分かります。</p>\n<p>これでようやく実行できます。赤い●を押します。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_08.png\" alt=\"img\"></p>\n<p>と、iOS Simulator で MemoryTest が実行され、Instruments でプロファイルしている事が確認できます。Simulator でグリグリスクロールすると、Allocations がガンガン増えてく様子が分かります。</p>\n<p><img src=\"/img/posts/using_instruments_with_xamarin_ios_09.png\" alt=\"img\"></p>\n<h3 id=\"3.-2%E5%BA%A6%E7%9B%AE%E4%BB%A5%E9%99%8D%E3%81%AF%EF%BC%9F\">3. 2度目以降は？ <a class=\"direct-link\" href=\"#3.-2%E5%BA%A6%E7%9B%AE%E4%BB%A5%E9%99%8D%E3%81%AF%EF%BC%9F\">#</a></h3>\n<p>Instruments でもう一度赤い●を押すと停止します。アプリを更新する時は、Xamarin Studio 側でビルド-実行して iOS Simulator のアプリファイルを更新してから、Instruments で再度、赤い●を押します。</p>\n<p>もし Instruments を終了してしまっても、最近使ったアプリは Choose Target に最近使ったアプリとして残るので、またドラッグ＆ドロップすることはありません。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A8%E5%8F%82%E8%80%83\">まとめと参考 <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81%E3%81%A8%E5%8F%82%E8%80%83\">#</a></h2>\n<p>Xamarin.iOS+iOS Simulator での Instruments の導入部分を説明しました。</p>\n<p>下に紹介するサイトが公式の情報です。<br>\nここには、実機にインストールしたアプリのプロファイル方法や、Instruments の使い方などが説明されているので合わせてどうぞ。</p>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/ios/deployment%2C_testing%2C_and_metrics/using_instruments_to_detect_native_leaks_using_markheap\">Profiling Xamarin.iOS Applications with Instruments ｜ xamarin</a></li>\n<li><a href=\"http://docs.xamarin.com/guides/ios/deployment%2C_testing%2C_and_metrics/instruments_walkthrough\">Instruments Walkthrough ｜ xamarin</a></li>\n<li><a href=\"https://developer.apple.com/library/ios/recipes/instruments_help-launch-into-simulator-help/LaunchIntoSimulator.html\">iOS Simulator Help: Setting Instruments to Launch an iOS App in Simulator</a></li>\n</ul>\n<p>※ <a href=\"https://docs.xamarin.com/guides/ios/deployment%2C_testing%2C_and_metrics/instruments_walkthrough\">Instruments Walkthrough</a> の No.14 の画像には、Instruments に Xamarin.iOS(C#) のソースコードが表示されているように見えるんだけど、これどうやるのかなあ。。手順通り動かしたつもりが出てこない。。。SourceMap の設定みたいなのが要るのかなあ。</p>\n",
      "date_published": "2013-09-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/02/when-release-memory-by-arc/",
      "url": "https://blog.amay077.net/blog/2013/09/02/when-release-memory-by-arc/",
      "title": "ARC のメモリ解放タイミングを調べた",
      "content_html": "<p>一つの関数内で容量の大きなファイルを読み込み加工する処理を連続して行っていたらメモリが足りなくなった。</p>\n<!--more-->\n<p>ARC ではスコープを外れ(て参照カウンタがゼロになっ)たオブジェクトは、すぐに破棄されると思っていたのでしばらくハマった。</p>\n<h2 id=\"%E5%95%8F%E9%A1%8C%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9(arc%E4%BD%BF%E7%94%A8)\">問題のソース(ARC使用) <a class=\"direct-link\" href=\"#%E5%95%8F%E9%A1%8C%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9(arc%E4%BD%BF%E7%94%A8)\">#</a></h2>\n<p>ローカルでもWebでも何でもいいけど、ファイルから無視できない程度の容量のデータの読み込みを繰り返す処理。</p>\n<pre><code>- (IBAction)buttonDownWithArc:(id)sender {\n    NSString* path = @&quot;.../bigdata.img&quot;;\n\n    for (int i = 0; i &lt; 10000; i++) {\n        NSData* data = [NSData dataWithContentsOfFile:path];\n        [NSThread sleepForTimeInterval:0.5];\n        data = nil;\n    }\n}\n</code></pre>\n<p>これを Instruments でプロファイルするとこうなる。</p>\n<p><img src=\"/img/posts/arc_memory_release_timing_01.png\" alt=\"img\"></p>\n<p>じゃんじゃんメモリ確保してしまう（汗<br>\nARC で <code>data</code> は <code>nil</code> にしてるからスコープ外れた時にメモリ解放されると思っていたのだが。</p>\n<p>ちなみにこの関数の処理が終了すると、メモリが解放される。</p>\n<h2 id=\"%E9%9D%9Earc-%E3%81%A7%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">非ARC でやってみた <a class=\"direct-link\" href=\"#%E9%9D%9Earc-%E3%81%A7%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<p>メモリ管理をマニュアルでやったらどうなるかを確認した。</p>\n<pre><code>- (IBAction)buttonDownNoArc:(id)sender {\n    NSString* path = @&quot;.../bigdata.img&quot;;\n\n    for (int i = 0; i &lt; 10000; i++) {\n        NSData* data = [NSData dataWithContentsOfFile:path];\n        [NSThread sleepForTimeInterval:0.5];\n        [data dealloc];\n        data = nil;\n    }\n}\n</code></pre>\n<p>この時のメモリ確保状況は、期待した通りになった。</p>\n<p><img src=\"/img/posts/arc_memory_release_timing_02.png\" alt=\"img\"></p>\n<p>メモリ使用量が線形に<strong>増えない</strong>ことが分かる。ARC 利用時にもこうなるようにしたい。</p>\n<p>状況は、スコープ内変数の破棄が、関数を抜ける時に遅延されている。<br>\nARC 周りの情報をいろいろ漁っていて、AutoReleasePool との関わりが怪しいと予想した。</p>\n<ul>\n<li><a href=\"http://blog.natsuapps.com/2011/11/ios5-arc-overview.html\">[iOS5] ARC (Automatic Reference Counting) : Overview - iOS 開発ブログ Natsu's note </a></li>\n</ul>\n<p>より引用：</p>\n<blockquote>\n<p>###retain, release, autorelease, deallocはコンパイラのお仕事</p>\n<p>ARCを利用する場合、コンパイラが</p>\n<ul>\n<li>retain, release, autoreleaseを挿入してくれる（自分で呼んではいけない。コンパイラエラーになる）。</li>\n<li>deallocを適切な位置に挿入してくれる（deallocのオーバーライドは可能。ただし[super dealloc]は不可能）。</li>\n</ul>\n<p>ことになります。</p>\n</blockquote>\n<p>コンパイラにより関数単位で <code>@autoreleasepool { }</code> が挿入されているとしたら、最初の図のような動きになるはず。ということは、for ループの中に @autorelease を持ってったらどうか？</p>\n<h2 id=\"arc-%2B-%40autoreleasepool-%E7%89%88\">ARC + @autoreleasepool 版 <a class=\"direct-link\" href=\"#arc-%2B-%40autoreleasepool-%E7%89%88\">#</a></h2>\n<p>for の中の処理を <code>@autoreleasepool { }</code> で括ってみた。</p>\n<pre><code>- (IBAction)buttonDownWithArcAndAutoRelease:(id)sender {\n    for (int i = 0; i &lt; 100; i++) {\n        @autoreleasepool {\n            NSData* data = [NSData dataWithContentsOfFile:_path];\n            [NSThread sleepForTimeInterval:0.5];\n        }\n    }\n}\n</code></pre>\n<p>すると、</p>\n<p><img src=\"/img/posts/arc_memory_release_timing_03.png\" alt=\"img\"></p>\n<p>やたー、期待する動きになったぞ。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>とここまで調べて、しばらく Obj-C さわってなかったので埃をかぶっていた</p>\n<ul>\n<li><a href=\"http://www.amazon.co.jp/gp/product/4844331094?ie=UTF8&amp;camp=1207&amp;creative=8411&amp;creativeASIN=4844331094&amp;linkCode=shr&amp;tag=oku2008-22\">エキスパートObjective-Cプログラミング -iOS/OS Xのメモリ管理とマルチスレッド-</a></li>\n</ul>\n<p>を引っ張り出してきて読んだら、P.25 にまさにその事が書かれていて泣いた。</p>\n<blockquote>\n<p>とはいえ、autorelease されたオブジェクトが大量に発生した場合、NSAutoReleasePool のオブジェクトが破棄されない限り、それらのオブジェクトは release されないので、メモリ不足に陥る場合があります。典型的な例は、大量の画像をリサイズしながら読み込む場合でしょう。…</p>\n<pre><code>   for (int i = 0; i &lt; 画像数; i++) {\n       /*\n        * 画像読み込み処理\n        * autoreleaseされたオブジェクトが大量発生。\n        * NSAutoReleasePoolのオブジェクトが破棄されないため\n        * いずれメモリ不足発生！\n        */\t       \n   }\n</code></pre>\n</blockquote>\n<p>勉強しなおします。。。</p>\n",
      "date_published": "2013-09-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/09/01/re-studying-executorservice/",
      "url": "https://blog.amay077.net/blog/2013/09/01/re-studying-executorservice/",
      "title": "ExecutorService の復習",
      "content_html": "<p>Android で非同期処理っていうと、真っ先に <code>AsyncTask</code> が出てくるんですが、なるべくなら Java 標準のマルチスレッドAPI である ExecutorService を使った方が良いと思ってます。</p>\n<!--more-->\n<ul>\n<li>(2007年の記事だけど) <a href=\"http://itpro.nikkeibp.co.jp/article/COLUMN/20071001/283395/\">Java技術最前線 - 「Java SE 6完全攻略」第49回 Concurrency Utilitiesの変更点 その1：ITpro</a></li>\n</ul>\n<p>Android で初めて Java を書いたので細かい仕様がよく分からず、勉強がてら動きを確認してみました。</p>\n<h2 id=\"1.-1%E3%81%A4%E3%81%AE%E3%83%AF%E3%83%BC%E3%82%AB%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%81%9B%E3%82%8B\">1. 1つのワーカスレッドに実行させる <a class=\"direct-link\" href=\"#1.-1%E3%81%A4%E3%81%AE%E3%83%AF%E3%83%BC%E3%82%AB%E3%82%B9%E3%83%AC%E3%83%83%E3%83%89%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%81%9B%E3%82%8B\">#</a></h2>\n<p><code>newSingleThreadExecutor</code> でワーカスレッドを一つ持つ Executor を生成して、2つのタスク(=非同期で実行させる処理)を順に実行。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadExecutorBasicTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B\">#</a></h3>\n<blockquote>\n<p>08-29 17:18:12.891: D/ExecutorTest(391): Primary ThreadID:4943<br/><br>\n08-29 17:18:12.891: D/ExecutorTest(391): Run task A. ThreadId:4944<br/><br>\n08-29 17:18:12.891: D/ExecutorTest(391): Run task B. ThreadId:4944<br/></p>\n</blockquote>\n<p>A→B の順で（=submit した順で）実行される。<br>\nPrimary と task で ThreadID が異なる、2つの task は同じ ThreadID であることに注目。</p>\n<h2 id=\"2.-%E6%9C%80%E5%88%9D%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AB%E6%99%82%E9%96%93%E3%81%8C%E3%81%8B%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">2. 最初のタスクに時間がかかったら？ <a class=\"direct-link\" href=\"#2.-%E6%9C%80%E5%88%9D%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%AB%E6%99%82%E9%96%93%E3%81%8C%E3%81%8B%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">#</a></h2>\n<p>タスクA の実行に時間がかかる場合、タスクB はどうなる？</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadExecutorHeavyWorkTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A start. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token comment\">// Wait</span><br>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <br>\t\t\t<br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A end.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-2\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-2\">#</a></h3>\n<blockquote>\n<p>08-29 17:22:04.288: D/ExecutorTest(1511): Primary ThreadID:5063<br/><br>\n08-29 17:22:04.288: D/ExecutorTest(1511): Run task A start. ThreadId:5064<br/><br>\n08-29 17:22:07.291: D/ExecutorTest(1511): Run task A end.<br/><br>\n08-29 17:22:07.291: D/ExecutorTest(1511): Run task B. ThreadId:5064<br/></p>\n</blockquote>\n<p>A→B の順で実行される。シングルスレッドなので、並列に処理されることはない。</p>\n<h2 id=\"3.-threadpoolexecutor-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">3. ThreadPoolExecutor を使ったら？ <a class=\"direct-link\" href=\"#3.-threadpoolexecutor-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">#</a></h2>\n<p><code>Executors.newSingleThreadExecutor()</code> の代わりに <code>Executors.newFixedThreadPool(2)</code> としてみる。これによりワーカスレッドを2つ使う Execurot が生成される。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadPoolExecutorHeavyWorkTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A start. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token comment\">// Wait</span><br>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <br>\t\t\t<br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A end.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">submit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-3\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-3\">#</a></h3>\n<blockquote>\n<p>08-29 17:29:01.731: D/ExecutorTest(3017): Primary ThreadID:5255<br/><br>\n08-29 17:29:01.731: D/ExecutorTest(3017): Run task A start. ThreadId:5256<br/><br>\n08-29 17:29:01.731: D/ExecutorTest(3017): Run task B. ThreadId:5257<br/><br>\n08-29 17:29:04.725: D/ExecutorTest(3017): Run task A end.<br/></p>\n</blockquote>\n<p>タスクA と タスクB で ThreadID が異なる事に注目。<br>\nスレッドが２つ使えるので、タスクA の終了を<strong>待たず</strong>にタスクB が実行される。というか、タスクA から始まる保証もない。</p>\n<h2 id=\"3.-singlethreadscheduledexecutor-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">3. SingleThreadScheduledExecutor を使ってみる <a class=\"direct-link\" href=\"#3.-singlethreadscheduledexecutor-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>話題を変えて、タスクの実行時間を制御できる Scheduled系 の Executor を使ってみる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadScheduledExecutorBasicTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-4\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-4\">#</a></h3>\n<blockquote>\n<p>08-29 17:36:16.125: D/ExecutorTest(3547): Primary ThreadID:5285<br/><br>\n08-29 17:36:19.128: D/ExecutorTest(3547): Run task B. ThreadId:5286<br/><br>\n08-29 17:36:21.130: D/ExecutorTest(3547): Run task A. ThreadId:5286<br/></p>\n</blockquote>\n<p>開始から3秒後にタスクBが、開始から5秒後にタスクAが実行される。<br>\nsubmit した順は関係ないことに注意。</p>\n<h2 id=\"4.-%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E9%96%93%E3%81%AB%E5%88%A5%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%8C%E5%AE%9F%E8%A1%8C%E4%B8%AD%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">4. スケジュールされた時間に別のタスクが実行中だったら？ <a class=\"direct-link\" href=\"#4.-%E3%82%B9%E3%82%B1%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%95%E3%82%8C%E3%81%9F%E6%99%82%E9%96%93%E3%81%AB%E5%88%A5%E3%81%AE%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%8C%E5%AE%9F%E8%A1%8C%E4%B8%AD%E3%81%A0%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">#</a></h2>\n<p>3秒後に実行されるタスクBの処理が終わらない時、5秒後に実行されるタスクAはどうなる？</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadScheduledExecutorHeavyWorkTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B start. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token comment\">// Wait</span><br>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <br>\t\t\t<br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B end.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-5\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-5\">#</a></h3>\n<blockquote>\n<p>08-29 17:44:18.139: D/ExecutorTest(4737): Primary ThreadID:5456<br/><br>\n08-29 17:44:21.142: D/ExecutorTest(4737): Run task B start. ThreadId:5457<br/><br>\n08-29 17:44:31.143: D/ExecutorTest(4737): Run task B end.<br/><br>\n08-29 17:44:31.143: D/ExecutorTest(4737): Run task A. ThreadId:5457<br/></p>\n</blockquote>\n<p>5秒後とスケジュールされたタスクAだが、タスクB が終わるまで待たされる。シングルスレッドなので。</p>\n<h2 id=\"5.-%E3%81%9D%E3%81%93%E3%81%A7-scheduledthreadpoolexecutor-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">5. そこで ScheduledThreadPoolExecutor を使ってみる <a class=\"direct-link\" href=\"#5.-%E3%81%9D%E3%81%93%E3%81%A7-scheduledthreadpoolexecutor-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p><code>Executors.newSingleThreadScheduledExecutor()</code> の代わりに <code>Executors.newScheduledThreadPool(2)</code> としてみる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">threadPoolScheduledExecutorHeavyWorkTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B start. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token comment\">// Wait</span><br>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span> <br>\t\t\t<br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task B end.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<blockquote>\n<p>08-29 17:48:28.536: D/ExecutorTest(5439): Primary ThreadID:5558<br/><br>\n08-29 17:48:31.550: D/ExecutorTest(5439): Run task B start. ThreadId:5559<br/><br>\n08-29 17:48:<strong>33</strong>.542: D/ExecutorTest(5439): Run task A. ThreadId:5560<br/><br>\n08-29 17:48:41.550: D/ExecutorTest(5439): Run task B end.<br/></p>\n</blockquote>\n<p>スレッドが２つ使えるので、タスクA は、スケジュール通り（タスクBの終了を待たずに submit してから5秒後に実行される。</p>\n<h2 id=\"6.-scheduled%E7%B3%BBexecutor-%E3%81%AE-timer-%E7%9A%84%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">6. Scheduled系Executor の Timer 的機能を使ってみる <a class=\"direct-link\" href=\"#6.-scheduled%E7%B3%BBexecutor-%E3%81%AE-timer-%E7%9A%84%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p><code>schedule()</code> は、一発だけ(Javascript の <code>setTimeout</code> みたいな)、繰り返し処理するには、<code>scheduleAtFixedRate</code> か <code>scheduleWithFixedDelay</code> を使う。<br>\nまずは <code>scheduleAtFixedRate</code> から。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadScheduledExecutorTimerBasicTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span> <span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-6\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-6\">#</a></h3>\n<blockquote>\n<p>08-29 17:59:33.556: D/ExecutorTest(7228): Primary ThreadID:5795<br/><br>\n08-29 17:59:38.561: D/ExecutorTest(7228): Run task A. ThreadId:5796<br/><br>\n08-29 17:59:41.565: D/ExecutorTest(7228): Run task A. ThreadId:5796<br/><br>\n08-29 17:59:44.568: D/ExecutorTest(7228): Run task A. ThreadId:5796<br/><br>\n…</p>\n</blockquote>\n<p>最初は５秒、その後は３秒毎にタスクAが実行される。</p>\n<h2 id=\"7.-%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%8C%E9%87%8D%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">7. 繰り返し実行されるタスクが重かったら？ <a class=\"direct-link\" href=\"#7.-%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%97%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B%E3%82%BF%E3%82%B9%E3%82%AF%E3%81%8C%E9%87%8D%E3%81%8B%E3%81%A3%E3%81%9F%E3%82%89%EF%BC%9F\">#</a></h2>\n<p>繰り返しは３秒だけど、タスクAの実行に１０秒かかったら、どうなる？</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadScheduledExecutorTimerHeavyTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-7\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-7\">#</a></h3>\n<blockquote>\n<p>08-29 18:15:49.397: D/ExecutorTest(10157): Primary ThreadID:6188<br/><br>\n08-29 18:15:54.413: D/ExecutorTest(10157): Run task A start. ThreadId:6189<br/><br>\n08-29 18:16:04.403: D/ExecutorTest(10157): Run task A end.<br/><br>\n08-29 18:16:04.403: D/ExecutorTest(10157): Run task A start. ThreadId:6189<br/><br>\n08-29 18:16:14.404: D/ExecutorTest(10157): Run task A end.<br/><br>\n08-29 18:16:14.404: D/ExecutorTest(10157): Run task A start. ThreadId:6189<br/><br>\n08-29 18:16:24.405: D/ExecutorTest(10157): Run task A end.<br/><br>\n…</p>\n</blockquote>\n<p>３秒置きに設定しているが、タスクAが終わらないので、終わったら<strong>すぐに</strong>、次のタスクを実行する。</p>\n<h2 id=\"8.-schedulewithfixeddelay-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%AA%E3%82%8B%EF%BC%9F\">8. scheduleWithFixedDelay ではどうなる？ <a class=\"direct-link\" href=\"#8.-schedulewithfixeddelay-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%AA%E3%82%8B%EF%BC%9F\">#</a></h2>\n<p><code>scheduleAtFixedRate</code> の代わりに <code>scheduleWithFixedDelay</code> にしてみた。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadScheduledExecutorFixedDelayHeavyTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newSingleThreadScheduledExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleWithFixedDelay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-8\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-8\">#</a></h3>\n<blockquote>\n<p>08-29 18:22:37.183: D/ExecutorTest(10663): Primary ThreadID:6245<br/><br>\n08-29 18:22:42.178: D/ExecutorTest(10663): Run task A start. ThreadId:6246<br/><br>\n08-29 18:22:52.179: D/ExecutorTest(10663): Run task A end.<br/><br>\n08-29 18:22:<strong>55</strong>.182: D/ExecutorTest(10663): Run task A start. ThreadId:6246<br/><br>\n08-29 18:23:05.182: D/ExecutorTest(10663): Run task A end.<br/><br>\n08-29 18:23:08.176: D/ExecutorTest(10663): Run task A start. ThreadId:6246<br/><br>\n…</p>\n</blockquote>\n<p>タスクAが終わって、<strong>さらに３秒待って</strong>、次のタスクを実行する。<br>\n<code>FixedDelay</code> は、前回のタスクが終わってからｎ秒待つ。<br>\n<code>FixedRate</code> は、の終了を待たずにｎ秒置きに実行するが、終わってない場合は仕方がないので終わるまで待つ、という感じらしい。</p>\n<h2 id=\"9.-scheduledthreadpoolexecutor-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%8B%EF%BC%9F\">9. ScheduledThreadPoolExecutor ではどうか？ <a class=\"direct-link\" href=\"#9.-scheduledthreadpoolexecutor-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>ScheduledThreadPoolExecutor  と <code>scheduleAtFixedRate</code> の組み合わせではどうか？</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">singleThreadScheduledExecutorFixedDelayHeavyTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> executor <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Primary ThreadID:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\texecutor<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A start. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token comment\">// Wait</span><br>\t\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <br>\t\t\t<span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">w</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Interrupted task A. ThreadId:\"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <br>\t\t\t<br>\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Run task A end.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"%E5%87%BA%E5%8A%9B-9\">出力 <a class=\"direct-link\" href=\"#%E5%87%BA%E5%8A%9B-9\">#</a></h3>\n<blockquote>\n<p>08-29 19:09:39.707: D/ExecutorTest(14173): Primary ThreadID:6605<br/><br>\n08-29 19:09:44.712: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/><br>\n08-29 19:09:54.713: D/ExecutorTest(14173): Run task A end.<br/><br>\n08-29 19:09:54.713: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/><br>\n08-29 19:10:04.713: D/ExecutorTest(14173): Run task A end.<br/><br>\n08-29 19:10:04.713: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/><br>\n08-29 19:10:14.714: D/ExecutorTest(14173): Run task A end.<br/><br>\n08-29 19:10:14.714: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/><br>\n08-29 19:10:24.705: D/ExecutorTest(14173): Run task A end.<br/><br>\n08-29 19:10:24.705: D/ExecutorTest(14173): Run task A start. ThreadId:6606<br/><br>\n08-29 19:10:34.705: D/ExecutorTest(14173): Run task A end.<br/><br>\n…</p>\n</blockquote>\n<p>あれ？２つのスレッドを使ってくれない。を登録した時点でスレッドは決まってるということかな。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>「タスクが実行されるスレッド」を意識すればハマることはなさそう。</p>\n<p>シングルスレッドの場合は、<code>submit</code> あるいは <code>schedule</code> されたタスクは、一つのスレッドで順次処理される。スレッドプールを使っている場合は、スレッドの数だけ並列処理される。<br>\nただし、<code>scheduleAtFixedRate</code> など繰り返し処理では、登録時にスレッドが決まるので、タスクの実行に時間がかかっても並列処理されない。</p>\n<p><code>scheduleAtFixedRate</code> や <code>scheduleWithFixedDelay</code> はタイマー的な動きをするが、タスクの処理に時間がかかる場合は、意図した時間間隔で実行されない。タイマーとして使いたければ、Executor を２つ用意し、一つはタイマー専用、もうひとつをタスク実行専用とした方が良さそう。</p>\n<p>長くなってしまったので、タスクのキャンセルとか、Terminate 系は別の機会に。</p>\n",
      "date_published": "2013-09-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/08/29/performance-of-sdcard-io/",
      "url": "https://blog.amay077.net/blog/2013/08/29/performance-of-sdcard-io/",
      "title": "SDカードのファイルI/Oパフォーマンス計測",
      "content_html": "<p>端末とか SDカード の種類とかで大きく違うんでしょうけど、自分の端末で調べたのでメモ。</p>\n<!--more-->\n<ul>\n<li>機種: au HTC J(ISW13HT)</li>\n<li>SDカード: 最初から付いてたやつ</li>\n</ul>\n<h2 id=\"%E8%A8%88%E6%B8%AC%E9%A0%85%E7%9B%AE\">計測項目 <a class=\"direct-link\" href=\"#%E8%A8%88%E6%B8%AC%E9%A0%85%E7%9B%AE\">#</a></h2>\n<ul>\n<li>Create - テキストファイルの生成</li>\n<li>List - ディレクトリ内の全ファイルの列挙</li>\n<li>Rename - ファイル名の変更</li>\n<li>Delete - ファイルを1つずつ削除</li>\n<li>DelDir - 親ディレクトリを削除</li>\n</ul>\n<h2 id=\"%E8%A8%88%E6%B8%AC%E6%96%B9%E6%B3%95\">計測方法 <a class=\"direct-link\" href=\"#%E8%A8%88%E6%B8%AC%E6%96%B9%E6%B3%95\">#</a></h2>\n<ul>\n<li>ディレクトリ内にファイルを 100個、1000個、10000個作成した時のそれぞれで計測。</li>\n<li>それぞれの計測は5回行った平均値。</li>\n<li>計測に使ったコードは<a href=\"https://gist.github.com/amay077/6374470\">こちら</a></li>\n</ul>\n<h2 id=\"%E8%A8%88%E6%B8%AC%E7%B5%90%E6%9E%9C\">計測結果 <a class=\"direct-link\" href=\"#%E8%A8%88%E6%B8%AC%E7%B5%90%E6%9E%9C\">#</a></h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:right\">ファイル数</th>\n<th style=\"text-align:right\">Create</th>\n<th style=\"text-align:right\">List</th>\n<th style=\"text-align:right\">Rename</th>\n<th style=\"text-align:right\">Delete</th>\n<th style=\"text-align:right\">DelDir</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:right\">100</td>\n<td style=\"text-align:right\">1,606ms</td>\n<td style=\"text-align:right\">939ms</td>\n<td style=\"text-align:right\">1,664ms</td>\n<td style=\"text-align:right\">2,792ms</td>\n<td style=\"text-align:right\">1ms未満</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">1,000</td>\n<td style=\"text-align:right\">15,527ms</td>\n<td style=\"text-align:right\">950ms</td>\n<td style=\"text-align:right\">17,359ms</td>\n<td style=\"text-align:right\">27,057ms</td>\n<td style=\"text-align:right\">6ms</td>\n</tr>\n<tr>\n<td style=\"text-align:right\">10,000</td>\n<td style=\"text-align:right\">227,236ms</td>\n<td style=\"text-align:right\">1,003ms</td>\n<td style=\"text-align:right\">254,338ms</td>\n<td style=\"text-align:right\">191,631ms</td>\n<td style=\"text-align:right\">69ms</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>Create と Rename はファイル100個で約1.5秒、Delete は約×2 の時間がかかる。</li>\n<li>List はファイル数にあまり影響されない。</li>\n<li>DelDir は超早い。</li>\n<li>CPU 使用率は 40〜60% だった。</li>\n</ul>\n",
      "date_published": "2013-08-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/08/28/au-vs-ipphone-with-mvno/",
      "url": "https://blog.amay077.net/blog/2013/08/28/au-vs-ipphone-with-mvno/",
      "title": "au を解約して全面的にIP電話＋MVNOに移行しようか検討しています",
      "content_html": "<p>au の解約を検討しています。きっかけはいくつかあります。</p>\n<!--more-->\n<ul>\n<li>料金明細を見なおしていて漠然と「高い！」と思ったこと</li>\n<li>IP電話の方が、基本料も通話料も安いじゃんと気づいたこと</li>\n<li>データ通信料も、MVNO の方が安いじゃんと気づいたこと</li>\n<li>奥さんと一緒なので「家族割」に加入しているが、そのメリットがあまりないこと</li>\n<li>1年使ってきた HTC J の電池がヘタってきたのに電池パックが在庫切れで入手できないこと</li>\n</ul>\n<p>そして最後に、au を使い始めてもうすぐ10年になりますが、今まで漠然と「ある」と思っていた「長期利用ユーザーへの特典」が皆無に等しかったこと、です。</p>\n<h2 id=\"%E6%9D%A1%E4%BB%B6\">条件 <a class=\"direct-link\" href=\"#%E6%9D%A1%E4%BB%B6\">#</a></h2>\n<ul>\n<li><a href=\"https://twitter.com/amay077/status/370452013093355520\">通話はほとんどしない</a></li>\n<li>データ通信はそこそこ使う。けど家に居る時は基本 WiFi</li>\n<li>外出時、なんだかんだで WiMAX つかっちゃう</li>\n<li>奥さんも au、家族割に加入してる</li>\n<li>家族間の通話、メッセージはほぼ LINE、それが通じない時のみ電話。</li>\n<li>友達とも、電話はほとんどしない。</li>\n<li>その他からの電話はそもそも出ない（ぉぃ</li>\n</ul>\n<h2 id=\"%E7%8F%BE%E5%9C%A8%E6%89%95%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E9%87%91%E9%A1%8D\">現在払っている金額 <a class=\"direct-link\" href=\"#%E7%8F%BE%E5%9C%A8%E6%89%95%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E9%87%91%E9%A1%8D\">#</a></h2>\n<p>現在支払っているのはこんな感じです。<br>\nほとんど通話をしませんが、まれに通話した月も微々たるものなので、ほぼこの金額を払い続けています。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目</th>\n<th style=\"text-align:right\">金額/月</th>\n<th style=\"text-align:right\">金額/2年総額</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">基本使用料(プランZ)</td>\n<td style=\"text-align:right\">914円</td>\n<td style=\"text-align:right\">21,934円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">データ通信量(IS.NET+ISフラット+WiMAX)</td>\n<td style=\"text-align:right\">6,000円</td>\n<td style=\"text-align:right\">144,000円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">端末ローン(HTC J/24ヶ月)</td>\n<td style=\"text-align:right\">1,767円</td>\n<td style=\"text-align:right\">42,408円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">端末保険(安心ケータイサポート＋)</td>\n<td style=\"text-align:right\">380円</td>\n<td style=\"text-align:right\">9,120円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">毎月割</td>\n<td style=\"text-align:right\">-1,200円</td>\n<td style=\"text-align:right\">-28,800円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消費税など</td>\n<td style=\"text-align:right\">307円</td>\n<td style=\"text-align:right\">7,368円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">合計</td>\n<td style=\"text-align:right\">8,168円</td>\n<td style=\"text-align:right\">196,032円</td>\n</tr>\n</tbody>\n</table>\n<p>2年で約20万円、が漠然と「高い」とおもったところです。</p>\n<h2 id=\"%E9%80%9A%E8%A9%B1%E3%81%AFip%E9%9B%BB%E8%A9%B1%E3%81%A7%E3%81%84%E3%81%84%E3%81%98%E3%82%83%E3%82%93%EF%BC%9F\">通話はIP電話でいいじゃん？ <a class=\"direct-link\" href=\"#%E9%80%9A%E8%A9%B1%E3%81%AFip%E9%9B%BB%E8%A9%B1%E3%81%A7%E3%81%84%E3%81%84%E3%81%98%E3%82%83%E3%82%93%EF%BC%9F\">#</a></h2>\n<ul>\n<li><a href=\"http://amay077.github.io/blog/2013/08/20/ip-phone-services-comparison/\">スマホ向けIP電話サービスを比較してみた</a></li>\n</ul>\n<p>で比較しましたが、最近は IP電話サービスが安い。<br>\n月々の基本料もそうですが、通話料も安い！</p>\n<p>IP電話の Fusion、050Plus と au を比較してみると、</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">通信会社</th>\n<th style=\"text-align:right\">基本使用料</th>\n<th style=\"text-align:right\">固定電話宛(円/分)</th>\n<th style=\"text-align:right\">携帯電話宛(円/分)</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Fusion IP-Phone SMART</td>\n<td style=\"text-align:right\">0円</td>\n<td style=\"text-align:right\">16.8円</td>\n<td style=\"text-align:right\">16.8円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">050Plus</td>\n<td style=\"text-align:right\">315円</td>\n<td style=\"text-align:right\">2.8円</td>\n<td style=\"text-align:right\">16.8円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">au プランZ</td>\n<td style=\"text-align:right\">980円</td>\n<td style=\"text-align:right\">42.0円</td>\n<td style=\"text-align:right\">42.0円</td>\n</tr>\n</tbody>\n</table>\n<p>au 惨敗。。。</p>\n<p>Docomo、Softbank も似たり寄ったりでしょうし、もう 090 の電話番号なんてイラネーと思ったのでした。<br>\nIP電話なら、ソフトウェアさえあれば機器を問わずポータブルに使用できます。(IP電話会社にロックインされちゃっていいのか？という考えはありますが)</p>\n<p>通話品質？LINE の無料通話で不自由してないなら問題なしです。</p>\n<h2 id=\"%E3%83%87%E3%83%BC%E3%82%BF%E9%80%9A%E4%BF%A1%E3%81%AF-mvno-%E3%81%A7%E3%81%84%E3%81%84%E3%81%98%E3%82%83%E3%82%93%EF%BC%9F\">データ通信は MVNO でいいじゃん？ <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E9%80%9A%E4%BF%A1%E3%81%AF-mvno-%E3%81%A7%E3%81%84%E3%81%84%E3%81%98%E3%82%83%E3%82%93%EF%BC%9F\">#</a></h2>\n<p>次、データ通信。</p>\n<p>こちらは Docomo 通信網を利用した MVNOサービスが多く登場していますが、月6000円も払えば相当ハイグレードなプランが選べます。<br>\n私の場合、au携帯電話の、直近1週間のデータ使用量が 120MB でした(自宅では WiFi使用、あまり外に出ない)、1ヶ月で1GBも使わない推測です。</p>\n<p>MVNO サービスには、月々の基本使用料に何GBかのLTE通信可能容量がバンドルされており、それを超えると低速(100〜200kbps)になる、というものがほとんどです。</p>\n<p>上記の私の利用実績だと、</p>\n<ul>\n<li><a href=\"https://www.iijmio.jp/guide/outline/hdd/spec.jsp\">IIJmio - ライトスタートプラン</a> : 1,980円/2GB/月</li>\n</ul>\n<p>が良さそうです。6000円が1960円になる…のか！？</p>\n<h3 id=\"%E8%BF%BD%E8%A8%98%3A2013%2F8%2F29\">追記:2013/8/29 <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98%3A2013%2F8%2F29\">#</a></h3>\n<p>OCN の MVNO プランが値下げされました！</p>\n<ul>\n<li><a href=\"http://ascii.jp/elem/000/000/820/820811/\">ASCII.jp：【格安データ通信SIM】OCNに1日60MBや500kbpsコースが追加！</a></li>\n</ul>\n<p>2GB/月プランが 1,780円になりました！さらに容量超過時のチャージも 525円/500MB と業界最安になりました(IIJ のチャージは 525円/100MB)。</p>\n<p>IIJ じゃなくてコレにします(^^)</p>\n<h2 id=\"%E7%AB%AF%E6%9C%AB%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8B%EF%BC%9F\">端末はどうする？ <a class=\"direct-link\" href=\"#%E7%AB%AF%E6%9C%AB%E3%81%AF%E3%81%A9%E3%81%86%E3%81%99%E3%82%8B%EF%BC%9F\">#</a></h2>\n<p>今は、au に毎月ローンを払っていて、総額で 42,408円 になります。</p>\n<p>さらに、<a href=\"http://www.au.kddi.com/mobile/service/after-service/support-plus/\">安心ケータイサポートプラス</a> (380円/月)という保険にも加入していて、これにより過失による端末故障でも、安価(5,250円)に端末を交換できます。一応ここには、長期利用者のメリットがあり、3年以上の利用者は 5,250円 が 3,150円 になります。</p>\n<p>キャリアに頼らない場合、端末はどうしましょ、となります。</p>\n<p>Docomo を使っていれば MVNO でも引き続き同じ端末が使用できますが、私は au のため、回線方式が異なり端末が使用できません。</p>\n<p>しかも、上記のような故障時のサービスもないので、代替機のことも考えなければなりません。つまり端末２台分の金額を見積もらなければなりません。</p>\n<p>SIMフリー端末であれば、海外端末でも使えますが、おサイフケータイは使いたいので無難に Docomo から選ぶことにします。</p>\n<p>新品へのこだわりもないので中古白ロムから買うこととします。<br>\n<a href=\"http://kakaku.com/used/keitai/smartphone/se_2/\">価格.com</a> によると、Xperia A でも 50,000円くらいで入手できるようです。</p>\n<p>壊れた時の代替機は、30,000円くらいとみておきます。<br>\n合計 80,000円を計上しておきます。ここはキャリアで買った方が(保険も含めると)お得です。</p>\n<h2 id=\"au-vs-ip%E9%9B%BB%E8%A9%B1%2Bmvno\">au VS IP電話+MVNO <a class=\"direct-link\" href=\"#au-vs-ip%E9%9B%BB%E8%A9%B1%2Bmvno\">#</a></h2>\n<p>2年総額で比較してみました。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">項目</th>\n<th style=\"text-align:right\">au/2年総額</th>\n<th style=\"text-align:right\">IP+MVNO/2年総額</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">通話基本使用料</td>\n<td style=\"text-align:right\">21,934円</td>\n<td style=\"text-align:right\">0円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">データ通信量</td>\n<td style=\"text-align:right\">144,000円</td>\n<td style=\"text-align:right\">42,720円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">端末代</td>\n<td style=\"text-align:right\">42,408円</td>\n<td style=\"text-align:right\">80,000円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">端末保険</td>\n<td style=\"text-align:right\">9,120円</td>\n<td style=\"text-align:right\">N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">毎月割？</td>\n<td style=\"text-align:right\">-28,800円</td>\n<td style=\"text-align:right\">N/A</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">消費税など</td>\n<td style=\"text-align:right\">7,368円</td>\n<td style=\"text-align:right\">6,376円</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">合計</td>\n<td style=\"text-align:right\">196,032円</td>\n<td style=\"text-align:right\">128,796円</td>\n</tr>\n</tbody>\n</table>\n<p>どうでしょう、脱au（というか脱キャリア）すると、2年総額で<strong>6万円以上も安く</strong>できます、目論見通り、なら。</p>\n<h2 id=\"frequently-asked-questions\">Frequently Asked Questions <a class=\"direct-link\" href=\"#frequently-asked-questions\">#</a></h2>\n<h3 id=\"q%3Aau-%E5%90%8C%E5%A3%AB%E3%81%AF-1%3A00%E3%80%9C21%3A00%E3%81%AE%E9%96%93%E3%80%81%E9%80%9A%E8%A9%B1%E7%84%A1%E6%96%99%E3%81%A8%E3%81%8B%E3%81%82%E3%82%8B%E3%81%91%E3%81%A9%EF%BC%9F\">Q:au 同士は 1:00〜21:00の間、通話無料とかあるけど？ <a class=\"direct-link\" href=\"#q%3Aau-%E5%90%8C%E5%A3%AB%E3%81%AF-1%3A00%E3%80%9C21%3A00%E3%81%AE%E9%96%93%E3%80%81%E9%80%9A%E8%A9%B1%E7%84%A1%E6%96%99%E3%81%A8%E3%81%8B%E3%81%82%E3%82%8B%E3%81%91%E3%81%A9%EF%BC%9F\">#</a></h3>\n<p>A:LINE で話すので関係ないです。</p>\n<h3 id=\"q%3Asms(c%E3%83%A1%E3%83%BC%E3%83%AB)%E3%81%AF%EF%BC%9F\">Q:SMS(Cメール)は？ <a class=\"direct-link\" href=\"#q%3Asms(c%E3%83%A1%E3%83%BC%E3%83%AB)%E3%81%AF%EF%BC%9F\">#</a></h3>\n<p>A:LINE か e-mail なので使わないです。今もCメールアプリ殺してるくらい。</p>\n<h3 id=\"q%3A%E4%BB%95%E4%BA%8B%E3%81%A7%E7%B5%90%E6%A7%8B%E9%9B%BB%E8%A9%B1%E3%81%8B%E3%81%91%E3%82%8B%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9%EF%BC%9F\">Q:仕事で結構電話かけるんだけど？ <a class=\"direct-link\" href=\"#q%3A%E4%BB%95%E4%BA%8B%E3%81%A7%E7%B5%90%E6%A7%8B%E9%9B%BB%E8%A9%B1%E3%81%8B%E3%81%91%E3%82%8B%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9%EF%BC%9F\">#</a></h3>\n<p>A:会社用には 050plus 使ってて、その利用料金は会社に請求するので問題ないです。</p>\n<h3 id=\"q%3A%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1%E3%81%8C%E9%B3%B4%E3%82%89%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%88%EF%BC%9F\">Q:緊急地震速報が鳴らなくなるよ？ <a class=\"direct-link\" href=\"#q%3A%E7%B7%8A%E6%80%A5%E5%9C%B0%E9%9C%87%E9%80%9F%E5%A0%B1%E3%81%8C%E9%B3%B4%E3%82%89%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%88%EF%BC%9F\">#</a></h3>\n<p>A:今までも鳴ったこと一度しかない(しかも誤報の時)し、出かけてる時は周りの誰かの端末が鳴るでしょ。</p>\n<h3 id=\"q%3A110%E7%95%AA%E3%81%A8%E3%81%8B%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%88%EF%BC%9F\">Q:110番とかできなくなるよ？ <a class=\"direct-link\" href=\"#q%3A110%E7%95%AA%E3%81%A8%E3%81%8B%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%82%88%EF%BC%9F\">#</a></h3>\n<p>A:はい、そのリスクはあります。住んでる地域なら直接警察署の電話番号へかけられるかも知れませんが、旅行先などでは困るかもしれません。</p>\n<h3 id=\"q%3Agps%E3%81%AE%E6%84%9F%E5%BA%A6%E3%81%8C%E6%82%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%AF%EF%BC%9F\">Q:GPSの感度が悪くなるのでは？ <a class=\"direct-link\" href=\"#q%3Agps%E3%81%AE%E6%84%9F%E5%BA%A6%E3%81%8C%E6%82%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%AF%EF%BC%9F\">#</a></h3>\n<p>A:はい、そのリスクはあります。キャリア配下では、A-GPS という GPS の感度を上げる仕組みが使えますが、キャリアに頼らない場合 A-GPS は機能しない気がします。</p>\n<h3 id=\"q%3A%E5%AE%B6%E6%97%8F%E5%89%B2%E3%81%98%E3%82%83%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%81%8B%E3%82%89%E5%A5%A5%E3%81%95%E3%82%93%E3%81%AE%E8%B2%A0%E6%8B%85%E3%81%8C%E5%A2%97%E3%81%88%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%AF%EF%BC%9F\">Q:家族割じゃなくなるから奥さんの負担が増えるのでは？ <a class=\"direct-link\" href=\"#q%3A%E5%AE%B6%E6%97%8F%E5%89%B2%E3%81%98%E3%82%83%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B%E3%81%8B%E3%82%89%E5%A5%A5%E3%81%95%E3%82%93%E3%81%AE%E8%B2%A0%E6%8B%85%E3%81%8C%E5%A2%97%E3%81%88%E3%82%8B%E3%81%AE%E3%81%A7%E3%81%AF%EF%BC%9F\">#</a></h3>\n<p>A:増えません。「家族割」で基本使用料が半額になっていますが、「<a href=\"http://www.au.kddi.com/mobile/charge/list/daredemo-wari/\">誰でも割</a>」で同じく基本使用料が半額になります。なんじゃそら、って感じです。家族間通話無料も LINE があるので無意味です。</p>\n<h3 id=\"q%3Aau-%E9%95%B7%E6%9C%9F%E5%88%A9%E7%94%A8%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%B8%E3%81%AE%E7%89%B9%E5%85%B8%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%AA%E3%81%AE%EF%BC%9F\">Q:au 長期利用ユーザーへの特典ってなんなの？ <a class=\"direct-link\" href=\"#q%3Aau-%E9%95%B7%E6%9C%9F%E5%88%A9%E7%94%A8%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%B8%E3%81%AE%E7%89%B9%E5%85%B8%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%AA%E3%81%AE%EF%BC%9F\">#</a></h3>\n<p>A: 以下のようなものがあるようです。</p>\n<ol>\n<li><a href=\"http://www.au.kddi.com/mobile/charge/list/chouki-wari/\">長期割引</a> 、5年目以降は基本使用料を15%OFF → 基本使用料からしか割引してくれないので効果激薄(明細みてもどこに適用されてるのかわからないんですけど？)。</li>\n<li>11年目以降のユーザーは、「家族割＋年割」で家族間通話が24時間無料 → ほとんどのケースでそれまでに同等サービスの「家族割＋誰でも割」に加入させられるので無意味。</li>\n<li><a href=\"http://www.au.kddi.com/information/notice_mobile/service/20130129-01/\">3年目以降のユーザーは、安心ケータイサポートプラスの交換用携帯電話お届けサービスを2100円割引</a> → これはありがたいですが、その為に「端末を1年利用したら電池パック無料提供」がなくなってしまいました、痛いです。</li>\n</ol>\n<p>ええ、これだけです。</p>\n<h3 id=\"q%3A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E8%B2%AF%E3%81%BE%E3%82%8B%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">Q:ポイント貯まるんでしょ？ <a class=\"direct-link\" href=\"#q%3A%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E8%B2%AF%E3%81%BE%E3%82%8B%E3%82%93%E3%81%A7%E3%81%97%E3%82%87%EF%BC%9F\">#</a></h3>\n<p>A:毎月80Pずつ貯まる程度です。2年で 1,980P(≒円) 程度。今、3000P くらい溜まってるので、ヘタって来たバッテリーと交換しようと思ったら、<a href=\"http://auonlineshop.kddi.com/disp/CSfLastGoodsPage_001.jsp?GOODS_NO=3087&amp;dispNo=001001001016\">それが在庫切れ</a>という嫌がらせを受けています。</p>\n<h3 id=\"q%3A%E6%B5%B7%E5%A4%96%E3%81%A7%E3%81%AF%E4%BD%BF%E3%81%88%E3%82%8B%E3%81%AE%EF%BC%9F\">Q:海外では使えるの？ <a class=\"direct-link\" href=\"#q%3A%E6%B5%B7%E5%A4%96%E3%81%A7%E3%81%AF%E4%BD%BF%E3%81%88%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h3>\n<p>A:au だと GLOBAL PASSPORT のおかげで手続きなしに海外でも端末を使えますが、MVNO サービスは海外では使えないので、別途海外で使える SIMカードを用意する必要があります。</p>\n<h3 id=\"q%3A-%E4%BB%96%E3%81%AE%E3%82%AD%E3%83%A3%E3%83%AA%E3%82%A2%E3%81%AB-mnp-%E3%81%97%E3%81%9F%E6%96%B9%E3%81%8C%E3%81%84%E3%81%84%E3%82%93%E3%81%98%E3%82%83%EF%BC%9F\">Q: 他のキャリアに MNP した方がいいんじゃ？ <a class=\"direct-link\" href=\"#q%3A-%E4%BB%96%E3%81%AE%E3%82%AD%E3%83%A3%E3%83%AA%E3%82%A2%E3%81%AB-mnp-%E3%81%97%E3%81%9F%E6%96%B9%E3%81%8C%E3%81%84%E3%81%84%E3%82%93%E3%81%98%E3%82%83%EF%BC%9F\">#</a></h3>\n<p>A:仮にソフトバンクの iPhone5 に乗り換えるとすると、</p>\n<ul>\n<li><a href=\"http://www.softbank.jp/mobile/iphone/price_plan/simulate/\">iPhone 料金シミュレーション ｜ iPhone ｜ ソフトバンクモバイル</a></li>\n</ul>\n<p>によれば、4,900円/月 + あんしん保証パック 498円/月 なので、2年総額に消費税も加えると <strong>136,029円</strong> となり、IP+MVNO とほぼ同等となります。けど、<strong>iPhone イヤなんですよ</strong>。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>よーし、金額的メリットも大きいし、懸案はほぼクリアできるし、キャリアの呪縛(2年縛り)から逃れられるし、これやるしかないじゃん！</p>\n<p>…あ、今の契約、まだ2年縛りの1年経ったばかりだった…orz</p>\n<p>というわけで一年後忘れないようにここに書き記しておきました！</p>\n<p>ん？違約金払ってでも脱auした方がお得なのか？試算しなきゃ！</p>\n",
      "date_published": "2013-08-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/08/20/ip-phone-services-comparison/",
      "url": "https://blog.amay077.net/blog/2013/08/20/ip-phone-services-comparison/",
      "title": "スマホ向けIP電話サービスを比較してみた",
      "content_html": "<ul>\n<li><a href=\"http://k-tai.impress.co.jp/docs/news/20130820_611766.html\">フュージョン、自社IP電話サービス用アプリのAndroid版 - ケータイ Watch</a></li>\n</ul>\n<p>とのことで、今仕事用に 050plus を使っているのですが乗り換えようかな―、と思い比較検討してみました。</p>\n<!--more-->\n<h2 id=\"%E3%82%B9%E3%83%9E%E3%83%9B%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8Bip%E9%9B%BB%E8%A9%B1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\">スマホで使えるIP電話サービス <a class=\"direct-link\" href=\"#%E3%82%B9%E3%83%9E%E3%83%9B%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8Bip%E9%9B%BB%E8%A9%B1%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9\">#</a></h2>\n<p>Fusion、050Plus に加えて Skype も入れて比較してみます。<br>\n料金の比較は下の方で。</p>\n<h3 id=\"050plus\">050plus <a class=\"direct-link\" href=\"#050plus\">#</a></h3>\n<ul>\n<li><a href=\"http://050plus.com/pc/index.html\">http://050plus.com/pc/index.html</a></li>\n<li>NTTコミュニケーションズ</li>\n<li>基本:315円/月、通話料(携帯):16.8円/分</li>\n</ul>\n<p>CM ばんばんやってるのでたぶん一番メジャーなんじゃないでしょうか。<br>\nNTTcom がやってるという事で音質に期待してましたが、今使ってる印象では特に良くもありません。会話してると15秒に1回のペースで「プチ切れ」するんですよ。その間の「一言」が聞こえなかったり伝わらなかったりで会話にコツが要ります（え<br>\n基本使用料 315円＋通話料で、最初の２ヶ月は基本使用料がタダです。</p>\n<h3 id=\"skype\">Skype <a class=\"direct-link\" href=\"#skype\">#</a></h3>\n<ul>\n<li><a href=\"http://www.skype.com/ja/\">http://www.skype.com/ja/</a></li>\n<li>Microsoft</li>\n<li>基本:0円/月、通話料(携帯):17.5円/分 ※無料通話付きの月額プランもあり</li>\n</ul>\n<p>今や Microsoft のサービスになった Skype さん。<br>\n有料プランで 050 の電話番号がもらえるので、スマホ版アプリと組み合わせて使えます。料金に VAT と呼ばれる１通話あたりにかかる手数料があるのが特徴で、サイトの構成と相まって非常に利用料金がわかりにくくなっています。Android 版アプリも最新版では「フラットUI」が採用され、わけがわからなくなりました(^_^;)<br>\n支払い方法が、「Skypeクレジット」を先に購入しておく「プリペイド方式」なので、キレイに使い切る事はできないでしょう。</p>\n<h3 id=\"fusion-ip-phone-smart\">FUSION IP-Phone SMART <a class=\"direct-link\" href=\"#fusion-ip-phone-smart\">#</a></h3>\n<ul>\n<li><a href=\"http://ip-phone-smart.jp/\">http://ip-phone-smart.jp/</a></li>\n<li>フュージョン・コミュニケーションズ</li>\n<li>基本:0円/月、通話料(携帯):16.8円/分</li>\n</ul>\n<p>iPhone 版は先行してたようですが、Android 版がリリースされて私も使えるようになりました。<br>\n基本利用料がかからないのが最大のメリットですかね。あと、「着信に Push通知を利用」は良さげですね。050plus では、いつの間にかアプリが落ちてて、着信に気づかないことがしばしばありましたので。<br>\n料金的には、050plus に比べて、固定電話への通話料がバカ高いです。</p>\n<h2 id=\"%E6%96%99%E9%87%91%E6%AF%94%E8%BC%83\">料金比較 <a class=\"direct-link\" href=\"#%E6%96%99%E9%87%91%E6%AF%94%E8%BC%83\">#</a></h2>\n<p>サービスによって月額利用料があったりなかったり、かける先で料金が違ったりするので、以下の条件で比較してみました。</p>\n<p>1ヶ月あたり、</p>\n<ul>\n<li>30回発信する</li>\n<li>固定電話と 15分 話す</li>\n<li>携帯電話と 15分 話す</li>\n</ul>\n<p>専ら待ち受けでしょうから、こんなもんでいいでしょう。</p>\n<p><img src=\"/img/posts/comparision_ip_phone_services_01.png\" alt=\"img\"></p>\n<p>通話時間が少ないと Fusion が有利です。050plus は、固定電話への通話が安いので、たくさんかける人には有利です。<br>\nSkype も意外と安いようですが、電話をかける度に「接続料」なる費用がかかるので、やはりたくさん使う人には不利です。</p>\n<p>条件を変えて試したい人は、こちら↓からどうぞ。水色のセルを変更すれば、赤色の表とグラフが更新されます。変更はどなたでも自由に行えますが、セル単位の保護はしてない(Google Docではできない)ので、水色セル以外は変更しないでくださいね。ちなみに、参考として au の一番基本料金が安い Z プランも載せてあります。</p>\n<ul>\n<li><a href=\"https://docs.google.com/spreadsheet/ccc?key=0AsXQVtRWN2mWdGFjS2s2d3ZKb1Jzbi16Z2hWVXduTVE#gid=0\">スマホIP電話 料金シミュレーション - Google ドキュメント</a></li>\n</ul>\n<p>今のところ 050plus で月に500円前後なので、Fusion に乗り換えた方がお得な感じがしてます。</p>\n<p>最後にお約束。<br>\n各サービスの料金は独自に調べたものであり正確性については保証しません。正確な料金はご自分で各サービスのホームページなどで調べてください。</p>\n",
      "date_published": "2013-08-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/08/06/parse-markdown-using-markedjs/",
      "url": "https://blog.amay077.net/blog/2013/08/06/parse-markdown-using-markedjs/",
      "title": "Marked.js で Markdown をクライアント側でパースして表示する",
      "content_html": "<p><a href=\"http://phyzkit.net/typescript/\">Typescript クイックガイド</a> で、ソースを見たら Markdown で書かれてたのをみて「カッケー」と思ったのと、<a href=\"http://www.atmarkit.co.jp/ait/articles/1302/05/news091.html\">利用規約やプライバシーポリシーは Github に置くといいよ</a> というのを見て、なら「github に .markdown ファイルを置いてクライアントサイドでスタイリングできたら嬉しいじゃん？」と思いやってみた。</p>\n<!--more-->\n<h2 id=\"javascript-%E3%81%AB%E3%82%88%E3%82%8B-markdown-%E3%83%91%E3%83%BC%E3%82%B5%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D\">Javascript による markdown パーサいろいろ <a class=\"direct-link\" href=\"#javascript-%E3%81%AB%E3%82%88%E3%82%8B-markdown-%E3%83%91%E3%83%BC%E3%82%B5%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D\">#</a></h2>\n<p>上記 Typescript クイックガイド では <a href=\"https://github.com/chjj/marked\">marked.js</a> が使われているようだが、他にもいろいろある模様。下記にて比較してくださっている。</p>\n<ul>\n<li><a href=\"http://kannokanno.hatenablog.com/entry/2013/06/19/132042\">JavaScript - Markdownパーサーのshowdown.js、markdown-js、markedを簡単比較 - ぼっち勉強会</a></li>\n</ul>\n<p>もともと marked.js を使おうと思ってたし、上記サイトでも問題無さそうだったので、そのままいく。</p>\n<h2 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h2>\n<p>marked.js を読み込んだ後、</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> formatted <span class=\"token operator\">=</span> <span class=\"token function\">marked</span><span class=\"token punctuation\">(</span>markdown_text<span class=\"token punctuation\">)</span></code></pre>\n<p>で、HTML に整形された文字列が返されるというシンプルなもの。(整形オプションがいろいろあるようだが割愛)</p>\n<p>Typescript クイックガイドでは、HTML 内に Markdown テキストがベタ書きされていたが、せっかくなので管理がしやすいように外部 Markdown ファイルを読みこむようにしてみた。</p>\n<p><strong>md_renderer.html</strong></p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>!DOCTYPE html><br><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>html lang=\"ja\"><br>    <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>head><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>meta charset=\"utf-8\"><br><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>title>Markdown renderer<span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/title><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>meta name=\"description\" content=\"Markdown renderer\"><br><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>!-- bootstrap --><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>link rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap.css\" rel=\"stylesheet\"><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>link rel=\"stylesheet\" type=\"text/css\" href=\"css/bootstrap-responsive.css\" rel=\"stylesheet\"><br><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>!-- js libraries --><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>script type=\"text/javascript\" src=\"js/jquery-2.0.3.js\"><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/script><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>script type=\"text/javascript\" src=\"js/marked.js\"><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/script><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>script><br>            $(document).ready(function(){<br>                var target = $(\"#markdown_content\");<br><br>                $.ajax({<br>                    url: target[0].attributes[\"src\"].value,<br>                }).success(function(data){<br>                    target.append(marked(data));<br>                }).error(function(data){<br>                    target.append(\"This content failed to load.\");<br>                });<br>            });<br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/script><br>    <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/head><br><br>    <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>body><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>!-- Content --><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>div class=\"container\"><br>            <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>div id=\"markdown_content\" src=\"./sample.markdown\"> <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/div><br>        <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/div><br>    <span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/body><br><span class=\"token entity named-entity\" title=\"&lt;\">&amp;lt;</span>/html></code></pre>\n<p>一番下の <code>&lt;div id=&quot;markdown_content&quot; src=&quot;./sample.markdown&quot;&gt;</code> の src に読み込む Markdown ファイルを指定するようにした。</p>\n<p>bootstrap で見栄えを良くしているが、必須ではない。</p>\n<p>こちらが <a href=\"/img/posts/md_renderer/md_renderer.html\">デモ</a> 。</p>\n<p>さすがに描画に少し時間がかかるみたいです。<br>\n<code>marked()</code> は非同期版もあるようなので、そちらを使うべきだったかな。</p>\n<p>これで、データ(Markdown)とプレゼンテーション部(HTML)を分離できて、なんか良さげな感じがする。</p>\n<p>Octopress とか、HTMLを生成しちゃうんじゃなくて、クライアントサイドで 「Markdown を描画する」できると、投稿の手間が減って良いかもですね。</p>\n",
      "date_published": "2013-08-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/08/03/gmapv2-from-xamarin-component/",
      "url": "https://blog.amay077.net/blog/2013/08/03/gmapv2-from-xamarin-component/",
      "title": "Xamarin.Android での Google Map(というか Play Service) 利用が、本家より簡単になった件",
      "content_html": "<p>Xamarin Components に「Google Play Services」が追加されまして。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://blog.xamarin.com/introducing-the-google-play-services-component-for-xamarin-android/\">Introducing the Google Play Services Component for Xamarin.Android ｜ Xamarin Blog</a></li>\n</ul>\n<p>これが何を意味するかと言うと、これまで Google Play Service を利用するには、ライブラリプロジェクトを作って、アプリから参照するという煩わしい手順が必要でした。</p>\n<p>で、これは Android-Eclipse でも同じく面倒だったわけですが、Xamarin.Android  に新しく提供されるこのコンポーネントを使えば、その手間を省くことができます。この点で Eclipse での開発より簡単になりました。</p>\n<p>実際に、Play Services の一つである Google Map Android API v2 を使うアプリを作る手順を書いてみます。</p>\n<h2 id=\"%E6%89%8B%E9%A0%86\">手順 <a class=\"direct-link\" href=\"#%E6%89%8B%E9%A0%86\">#</a></h2>\n<h3 id=\"1.-google-api-console-%E3%81%8B%E3%82%89-api-key-%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">1. Google API Console から API key を取得する <a class=\"direct-link\" href=\"#1.-google-api-console-%E3%81%8B%E3%82%89-api-key-%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">#</a></h3>\n<p>この手順は、これまでと変わらないので、以下のサイトなどを参考にしてください。<br>\npackage名が必要になるので、先に決めておきましょう。<br>\nここでは <code>com.amay077.sample.googlemapv2sample</code> とします。</p>\n<ul>\n<li><a href=\"http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html\">throw Life - Google Maps Android API v2を使ってみた</a></li>\n</ul>\n<p>取得して API key はメモっておきます。</p>\n<h3 id=\"2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%2F%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B\">2. プロジェクト/ソリューションを作る <a class=\"direct-link\" href=\"#2.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%2F%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h3>\n<p>Xamarin Studio を起動します。<br>\nここでは Ice Cream Sandwich 用に作ります。(Android Application の方だと Support Library が要るので少し手順が増えるはず)</p>\n<p><img src=\"/img/posts/gmapv2_from_xamarin_component_01.png\" alt=\"img\"></p>\n<h3 id=\"3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%80%8Cgoogle-play-service%E3%80%8D%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">3. プロジェクトに「Google Play Service」コンポーネントを追加する <a class=\"direct-link\" href=\"#3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB%E3%80%8Cgoogle-play-service%E3%80%8D%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h3>\n<p>メニュー → プロジェクト → Get More Components から、、、</p>\n<p><img src=\"/img/posts/gmapv2_from_xamarin_component_03.png\" alt=\"img\"></p>\n<p>Google Play Services を検索して Add to App します。</p>\n<p><img src=\"/img/posts/gmapv2_from_xamarin_component_04.png\" alt=\"img\"></p>\n<p>すると、プロジェクトに Google Play Services が追加されます。</p>\n<p><img src=\"/img/posts/gmapv2_from_xamarin_component_05.png\" alt=\"img\"></p>\n<p>ここで一度、Xamarin Studio を再起動しておいた方が無難です。<br>\nこのまま継続したら、追加されたアセンブリがうまく読み込まれてない場合がありました。</p>\n<h3 id=\"4.-%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">4. 実装する <a class=\"direct-link\" href=\"#4.-%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">#</a></h3>\n<p><code>MainActivity.cs</code> は、最初の内容をごっそり削除して以下のようにします。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>OS</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">GoogleMapV2Sample</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"GoogleMapV2Sample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>画面定義である <code>Main.axml</code> も以下のように置き換えます。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>fragment</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@+id/map<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_width</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>layout_height</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>match_parent<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.google.android.gms.maps.MapFragment<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></code></pre>\n<h3 id=\"5.-androidmanifest.xml-%E3%81%B8%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D\">5. AndroidManifest.xml への設定いろいろ <a class=\"direct-link\" href=\"#5.-androidmanifest.xml-%E3%81%B8%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D\">#</a></h3>\n<p>たぶん一番面倒なところです。</p>\n<p>まず Xamarin.Android では、最初は AndroidManifest.xml が生成されていないので、メニュー → プロジェクト → xxx のオプション から、下図のように [Add Android manifest] します。</p>\n<p><img src=\"/img/posts/gmapv2_from_xamarin_component_06.png\" alt=\"img\"></p>\n<p>次に作成された AndroidManifest.xml を開いて、以下のようにします。</p>\n<p>※1 のところは、最初に決めた Package名に、※2 の時は、先に取得しておいた API key に置き換えてください。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span> <br>\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionCode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <br>\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span> <br>\t<span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.amay077.sample.googlemapv2sample<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>--------※1</span><br><br><br>\t<span class=\"token attr-name\">&lt;uses-feature</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>glEsVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>0x00020000<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>required</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.INTERNET<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.google.android.providers.gsf.permission.READ_GSERVICES<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.WRITE_EXTERNAL_STORAGE<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.ACCESS_NETWORK_STATE<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.ACCESS_COARSE_LOCATION<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.ACCESS_FINE_LOCATION<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>   <br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <br>\t\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.amay077.sample.playservicesample.permission.MAPS_RECEIVE<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>   <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>--------※1</span><br>\t<span class=\"token attr-name\">&lt;permission</span> <br>\t\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.amay077.sample.playservicesample.permission.MAPS_RECEIVE<span class=\"token punctuation\">\"</span></span>   <span class=\"token attr-name\">&lt;--------※1</span><br>\t\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>protectionLevel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>signature<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>GoogleMapV2Sample<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta-data</span> <br>\t\t\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.google.android.maps.v2.API_KEY<span class=\"token punctuation\">\"</span></span> <br>\t\t\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>value</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>AIzaByD1jiFER3le_HFrkOrEhaNIsemoNoDesuU<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>  &lt;--------※2<br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<h3 id=\"6.-%E5%8B%95%E3%81%8B%E3%81%99\">6. 動かす <a class=\"direct-link\" href=\"#6.-%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h3>\n<p>設定が正しくできていれば、地図が表示されるはずです。<br>\nアプリが落ちるなら Main.cs や Main.axml が、地図が表示されないなら AndroidManifest.xml や Google API Console での設定が間違っていると思います。</p>\n<p><img src=\"/img/posts/gmapv2_from_xamarin_component_07.png\" alt=\"img\"></p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81%E3%81%AA%E3%81%A9\">まとめなど <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81%E3%81%AA%E3%81%A9\">#</a></h2>\n<p>Google Play Service コンポーネントを使うことでライブラリプロジェクトをなくす事ができました。慣れた人にはどうってこと無い話ですが、説明する人には面倒で、始めて行う人には混乱の元になってたと思います。</p>\n<p>もう一つ特筆すべきは、このコンポーネントを Google 自身が開発、提供していることです。</p>\n<p>これだけでなく、<a href=\"http://components.xamarin.com/view/googlemapsios/\">Google Map SDK for iOS</a> や <a href=\"http://components.xamarin.com/view/googleadmob/\">Admob 用のコンポーネント</a>も Google 自身が提供しています。</p>\n<p>また Microsoft も <a href=\"http://components.xamarin.com/view/azure-mobile-services/\">Azure Mobile Service</a> を自身が提供していますし、なんなんでしょうこのプラットフォーマーの Xamarin への参入ぶりは。</p>\n<p>このように本家が開発していることにより、信頼性、機能網羅性、新機能への追従などがとても充実しており、安心して使うことができます。</p>\n<p>最後に、</p>\n<blockquote class=\"twitter-tweet\"><p>おおおお、すげえ！これでめんどいビルド手順必要なくなった！Google++！でも、Gmaps iOSの1.4アップデートと、Retina対応のため128dpタイルへの対応もしてください…。 / “Google Play Servi…” <a href=\"http://t.co/mjnN7sE0t7\">http://t.co/mjnN7sE0t7</a></p>&mdash; Кочизуфан (@kochizufan) <a href=\"https://twitter.com/kochizufan/statuses/363116371351052290\">August 2, 2013</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>とのことなのでよろしくおねがいします。</p>\n",
      "date_published": "2013-08-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/30/online-site-builder-reviews/",
      "url": "https://blog.amay077.net/blog/2013/07/30/online-site-builder-reviews/",
      "title": "Web サイトがサクッと作れて公開できちゃう系サービスまとめ",
      "content_html": "<p>テンプレートからデザインを選んで、文章や画像を入れて、Publish するだけでサービスや製品の Web サイトを公開できちゃう系のサービス(Online Site builder というらしい)のまとめです。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://www.sitebuilderreport.com/\">Reviews of the Best Website Builders in 2013</a></li>\n</ul>\n<p>こちらのサイトをほぼパクってます。</p>\n<p>NAVER でやれ！とか言われそうですが、サービス自体のトップページを並べてみて、何か感じられないかなーと。(全然レビューしてないので、コメントは個人の主観です)</p>\n<h2 id=\"squarespace\">Squarespace <a class=\"direct-link\" href=\"#squarespace\">#</a></h2>\n<p><a href=\"http://www.squarespace.com/\">http://www.squarespace.com/</a></p>\n<p><img src=\"/img/posts/online_site_builder_reviews_01.png\" alt=\"img\"></p>\n<ul>\n<li>トップページがカッコいいです</li>\n<li>$8 / month〜</li>\n</ul>\n<h2 id=\"weebly\">Weebly <a class=\"direct-link\" href=\"#weebly\">#</a></h2>\n<p>(<a href=\"http://www.weebly.com/\">http://www.weebly.com/</a>)[<a href=\"http://www.weebly.com/\">http://www.weebly.com/</a>]</p>\n<p><img src=\"/img/posts/online_site_builder_reviews_02.png\" alt=\"img\"></p>\n<ul>\n<li>ドラッグ＆ドロップでデザインできちゃうみたいです</li>\n<li>FREE〜</li>\n</ul>\n<h2 id=\"webs\">Webs <a class=\"direct-link\" href=\"#webs\">#</a></h2>\n<p><a href=\"http://www.webs.com/\">http://www.webs.com/</a></p>\n<p><img src=\"/img/posts/online_site_builder_reviews_03.png\" alt=\"img\"></p>\n<ul>\n<li>トップページが某ざまりんにそっくりなのですが…</li>\n<li>まあスタンダードなWebサイトですね</li>\n<li>$0 / month〜（広告付きらしい）</li>\n</ul>\n<h2 id=\"virb\">Virb <a class=\"direct-link\" href=\"#virb\">#</a></h2>\n<p><a href=\"http://virb.com/\">http://virb.com/</a></p>\n<p><img src=\"/img/posts/online_site_builder_reviews_04.png\" alt=\"img\"></p>\n<ul>\n<li>トップページは適度に Flat なデザインで、このテンプレート欲しいです</li>\n<li>$10 / month</li>\n</ul>\n<h2 id=\"yola\">Yola <a class=\"direct-link\" href=\"#yola\">#</a></h2>\n<p><a href=\"https://www.yola.com/\">https://www.yola.com/</a></p>\n<ul>\n<li>ちょっとオーソドックスすぎる感じがします</li>\n<li>$4.95 / month〜</li>\n</ul>\n<p><img src=\"/img/posts/online_site_builder_reviews_05.png\" alt=\"img\"></p>\n<h2 id=\"edicy\">Edicy <a class=\"direct-link\" href=\"#edicy\">#</a></h2>\n<p><a href=\"http://www.edicy.com/\">http://www.edicy.com/</a></p>\n<ul>\n<li>地味かなー</li>\n<li>€6 / month〜</li>\n</ul>\n<p><img src=\"/img/posts/online_site_builder_reviews_06.png\" alt=\"img\"></p>\n<h2 id=\"wix\">Wix <a class=\"direct-link\" href=\"#wix\">#</a></h2>\n<p><a href=\"http://ja.wix.com/\">http://ja.wix.com/</a></p>\n<ul>\n<li>今回の中で唯一、日本でも展開しているサービス</li>\n<li>HTML5 の他に、Flash のテンプレート？もあるみたいです</li>\n<li>$4 / month〜</li>\n</ul>\n<p><img src=\"/img/posts/online_site_builder_reviews_07.png\" alt=\"img\"></p>\n<h2 id=\"onepager\">OnePager <a class=\"direct-link\" href=\"#onepager\">#</a></h2>\n<p><a href=\"http://onepagerapp.com/\">http://onepagerapp.com/</a></p>\n<p><img src=\"/img/posts/online_site_builder_reviews_08.png\" alt=\"img\"></p>\n<ul>\n<li>カッコ良さげです</li>\n<li>$8 / month〜</li>\n</ul>\n<h2 id=\"jimdo\">Jimdo <a class=\"direct-link\" href=\"#jimdo\">#</a></h2>\n<p><a href=\"http://www.jimdo.com/\">http://www.jimdo.com/</a></p>\n<p><img src=\"/img/posts/online_site_builder_reviews_09.png\" alt=\"img\"></p>\n<ul>\n<li>トップページはよくある感じです</li>\n<li>FREE〜</li>\n</ul>\n<h2 id=\"homestead\">Homestead <a class=\"direct-link\" href=\"#homestead\">#</a></h2>\n<p><a href=\"http://www.homestead.com/\">http://www.jimdo.com/</a></p>\n<p><img src=\"/img/posts/online_site_builder_reviews_10.png\" alt=\"img\"></p>\n<ul>\n<li>唯一、電話番号が載っています（どうでもいい）</li>\n<li>$4.99 / month</li>\n</ul>\n<h2 id=\"breezi\">breezi <a class=\"direct-link\" href=\"#breezi\">#</a></h2>\n<p><a href=\"http://breezi.com/\">http://www.jimdo.com/</a></p>\n<p><img src=\"/img/posts/online_site_builder_reviews_11.png\" alt=\"img\"></p>\n<ul>\n<li><a href=\"http://placeit.breezi.com/\">PlaceIt</a> 経由で発見したサービス</li>\n<li>色や配置からテンプレートを検索できます</li>\n<li>FREE?</li>\n</ul>\n<h1 id=\"%E3%81%BE%E3%81%A8%E3%82%81%E7%9A%84%E3%81%AA%E4%BD%95%E3%81%8B\">まとめ的な何か <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81%E7%9A%84%E3%81%AA%E4%BD%95%E3%81%8B\">#</a></h1>\n<p>こんなにたくさんあるとは知りませんでした。<br>\n日本だと「御社のサイト、スマホ用に変換します！」ってサービスがアホのようにありますが、そんなノリでしょうか？</p>\n<p>しかし僕は Web サイト制作の仕事について詳しくないのですが、こういう系のサービスが進出してくるとどうなっちゃんでしょうね。スクラッチで Web サイト作る案件って激減して、お客さんから「このデザインテンプレートに合う素材作って」みたいな仕事が増えるのでしょうか。あるいはデザインテンプレートを自体を作るお仕事とか。</p>\n<p>個人的な希望としては、ホスティングには興味がないので、</p>\n<ul>\n<li>作ったコンテンツをダウンロードできる（＆自分のサーバでホストできる）</li>\n<li>Twitter Bootstrap フレンドリである（個別 CSS 理解するの大変だし）</li>\n</ul>\n<p>なサービスがあったらいいなと思います。(あるのかな？)</p>\n<p>とりあえず「サービス Web サイトのプロトタイプ」を作って上司に見せる、くらいなら十分（Trial範囲内で）利用できそうです。</p>\n",
      "date_published": "2013-07-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/29/puyoquest-curry-event/",
      "url": "https://blog.amay077.net/blog/2013/07/29/puyoquest-curry-event/",
      "title": "Google Spreadsheet のトレンドグラフが超便利だった件",
      "content_html": "<p>突然ですが「<a href=\"http://puyopuyoquest.sega-net.com/\">ぷよクエ</a>」にハマっておりまして :)</p>\n<!--more-->\n<p>まあ、パズドラをパ(ryったようなゲームなんですが、そのぷよクエで先日まで、「カレー満腹祭り」というイベントが開催されておりました。<br>\n開催期間中に集めた「カレー」の数で競い、上位15000位までは限定アイテムがもらえるという多分よくあるやつです。<br>\n（とここまで Google Spreadsheet 関係なし）</p>\n<p>で僕は、無課金で頑張っているので、アイテムもらえる15000位ギリギリのところを狙うために、毎日15000位に必要なカレー枚数を記録していました。<br>\nその記録から推移をみて「最終順位15000位以内に必要なカレー枚数を予想しよう」としたわけですね。</p>\n<p>そこでお待たせしました Google Spreadsheet の登場です。<br>\n最初は EXCEL の「散布図」を使っていたのですが、別の PC でも、iPad からもデータ入力したいなあ、と思ったのが Google Spreadsheet に切り替えた理由だったのですが、グラフも出せないかなあ、なんかあるよね？と思ってみつけたのが「トレンドグラフ」の機能です。</p>\n<p>まあ、どんなグラフかを見てもらいましょうか。</p>\n<ul>\n<li><a href=\"https://docs.google.com/spreadsheet/ccc?key=0AsXQVtRWN2mWdDRfUkwzSlQxdlVWd2VHck9VMFNWU0E&amp;usp=sharing\">ぷよクエ カレーイベント枚数推移</a></li>\n</ul>\n<p>株価チャート(のローソクじゃないやつ)みたいですね。<br>\n時刻列＋複数の値列を選択するだけで、このような見た目にしてくれるので、とても分析しやすいです。<br>\n時刻を絞る機能もついてますし。</p>\n<p>このグラフで分かったぷよクエイベントの特性は、</p>\n<ul>\n<li>イベント最終日までは、初日のペースのまま線形推移する</li>\n<li>イベント最終日は、初日のペースの２倍増加する</li>\n<li>イベント締め切り３時間前からの伸びがハンパない</li>\n</ul>\n<p>という事です。<br>\nイベント締め切り間際の瞬間で見るとものすごい勢いなのですが、日単位で見るとたかだか通常の倍程度なのだという事が分かりました。</p>\n<p>次回のイベントの参考にしたいと思います。<br>\nぷよクエ の記事なのか、 Google Spreadsheet の記事なのかよく分からなくなりましたが、以上です。</p>\n",
      "date_published": "2013-07-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/28/recognition-gestures-using-xamarin-ios/",
      "url": "https://blog.amay077.net/blog/2013/07/28/recognition-gestures-using-xamarin-ios/",
      "title": "Xamarin.iOS でジェスチャを認識する",
      "content_html": "<p><a href=\"http://xamarin.com/\">Xamarin.iOS</a> でも <code>UIGestureRecognizer</code> が普通に使えるわけですが、Objective-C に比べてコードが短く書けて感動した話です。</p>\n<!--more-->\n<p>本日の Obj-C の先生はこちら。</p>\n<ul>\n<li><a href=\"http://labs.techfirm.co.jp/ipad/cho/466\">Gesture Recognizers 〜簡単にタッチ操作を検知 ｜ iPad Techfirm Lab </a></li>\n</ul>\n<p>このサンプルを Xamarin.iOS に移植してみます。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89\">サンプルコード <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Tap gesture</span><br><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">AddGestureRecognizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UITapGestureRecognizer</span><span class=\"token punctuation\">(</span>tap <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Double Tap.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <br><span class=\"token punctuation\">{</span> <br>    NumberOfTapsRequired <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token comment\">// Double tap </span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Drag(Pan) gesture</span><br><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">AddGestureRecognizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIPanGestureRecognizer</span><span class=\"token punctuation\">(</span>pan <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> p <span class=\"token operator\">=</span> pan<span class=\"token punctuation\">.</span><span class=\"token function\">TranslationInView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> pan<span class=\"token punctuation\">.</span><span class=\"token function\">VelocityInView</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pan. transration:{0}, velocity:{1}\"</span><span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Pinch gesture</span><br><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">AddGestureRecognizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIPinchGestureRecognizer</span><span class=\"token punctuation\">(</span>pin <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scale <span class=\"token operator\">=</span> pin<span class=\"token punctuation\">.</span>Scale<span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> pin<span class=\"token punctuation\">.</span>Velocity<span class=\"token punctuation\">;</span><br>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Pinch. scale:{0}, velocity:{1}\"</span><span class=\"token punctuation\">,</span> scale<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Swipe gesture</span><br><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">AddGestureRecognizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UISwipeGestureRecognizer</span><span class=\"token punctuation\">(</span>sw <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Swipe.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Rotate gesture</span><br><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">AddGestureRecognizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIRotationGestureRecognizer</span><span class=\"token punctuation\">(</span>ro <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rotation <span class=\"token operator\">=</span> ro<span class=\"token punctuation\">.</span>Rotation<span class=\"token punctuation\">;</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> ro<span class=\"token punctuation\">.</span>Velocity<span class=\"token punctuation\">;</span><br>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rotate. rotation:{0}, velocity:{1}\"</span><span class=\"token punctuation\">,</span> rotation<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Long press gesture</span><br><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>View<span class=\"token punctuation\">.</span><span class=\"token function\">AddGestureRecognizer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UILongPressGestureRecognizer</span><span class=\"token punctuation\">(</span>lp <span class=\"token operator\">=></span> <br><span class=\"token punctuation\">{</span><br>    Debug<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Long press.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>ViewController 全体のソースは <a href=\"https://gist.github.com/amay077/6094422\">コチラ</a></p>\n<p>元のサイトのサンプルコードは 70行弱ありますが、Xamarin.iOS では 45行くらいで書けました。しかも、GestureRecongnizer の登録とハンドラが同じ場所に書けるので見やすい。</p>\n<p>しかしこれ、ハンドラとか GesutureRecognizer、破棄しなくていいのかなあ。。。</p>\n",
      "date_published": "2013-07-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/28/open-multi-solution-in-xamarin-studio/",
      "url": "https://blog.amay077.net/blog/2013/07/28/open-multi-solution-in-xamarin-studio/",
      "title": "Xamarin Studio で複数のソリューションを開く方法",
      "content_html": "<p>わかりにくいのでメモっておく。</p>\n<!--more-->\n<h3 id=\"1.-%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%B2%E3%81%A8%E3%81%A4%E9%96%8B%E3%81%8F\">1. ソリューションをひとつ開く <a class=\"direct-link\" href=\"#1.-%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E3%81%B2%E3%81%A8%E3%81%A4%E9%96%8B%E3%81%8F\">#</a></h3>\n<h3 id=\"2.-%EF%BC%92%E3%81%A4%E7%9B%AE%E3%81%AE%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E9%96%8B%E3%81%8F\">2. ２つ目のソリューションを開く <a class=\"direct-link\" href=\"#2.-%EF%BC%92%E3%81%A4%E7%9B%AE%E3%81%AE%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E9%96%8B%E3%81%8F\">#</a></h3>\n<p><img src=\"/img/posts/open_multi_solution_in_xamarin_studio_01.png\" alt=\"img1\"> この時、「現在のワークスペースを閉じる」のチェックを <strong>外す</strong></p>\n<h3 id=\"3.-%E3%81%99%E3%82%8B%E3%81%A8%EF%BC%92%E3%81%A4%E7%9B%AE%E3%81%AE%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E8%BF%BD%E5%8A%A0%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%80%82\">3. すると２つ目のソリューションが追加されてます。 <a class=\"direct-link\" href=\"#3.-%E3%81%99%E3%82%8B%E3%81%A8%EF%BC%92%E3%81%A4%E7%9B%AE%E3%81%AE%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%8C%E8%BF%BD%E5%8A%A0%E3%81%95%E3%82%8C%E3%81%A6%E3%81%BE%E3%81%99%E3%80%82\">#</a></h3>\n<p><img src=\"/img/posts/open_multi_solution_in_xamarin_studio_02.png\" alt=\"img1\"></p>\n<p>ソリューションを新規作成する時には行えないようです。<br>\n分かりにくいよママン。</p>\n",
      "date_published": "2013-07-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios/",
      "url": "https://blog.amay077.net/blog/2013/07/28/implementing-pull-up-to-close-using-xamarin-ios/",
      "title": "Pull up to Close を実装してみる、Xamarin.iOS で",
      "content_html": "<p>イマドキのスマホアプリでは Pull to Refresh（引っ張って更新）を実装してるアプリをよく目にするのですが、RSS Reader の Feedly では Pull up to Close（上に引っぱって閉じる）も採用しています。</p>\n<p>この操作性がなかなか使いやすかったので、自分でも実装してみました。</p>\n<!--more-->\n<h2 id=\"%E3%83%87%E3%83%A2\">デモ <a class=\"direct-link\" href=\"#%E3%83%87%E3%83%A2\">#</a></h2>\n<p>こんな感じ。<br>\nWebView なんですが、一番下までスクロールして、さらに上に引っ張ると &quot;Pull up to Close&quot; → &quot;Release to Close&quot; とラベルが変わり、そこで離すとコールバックします。</p>\n<ul>\n<li><a href=\"https://www.youtube.com/embed/AP6xPqwwXMI?feature=player_detailpage\">Pull up to close - YouTube</a></li>\n</ul>\n<h2 id=\"%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89\">実装してみたコード <a class=\"direct-link\" href=\"#%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h2>\n<p><a href=\"http://xamarin.com/\">Xamarin.iOS</a> ですから、C# です。</p>\n<p>UIWebView でやってますが、ScrollView なコントロールならだいたい同じ感じでいけるんじゃないかと思います。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PullUpToCloseSampleViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UIViewController</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">PullUpToCloseSampleViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"PullUpToCloseSampleViewController\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// WebView が持ってる ScrollView、よく使うので変数化しておく</span><br>        <span class=\"token comment\">// webView は Interface Builder で UIWebView を Outlet にしたもの。</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> scrollView <span class=\"token operator\">=</span> webView<span class=\"token punctuation\">.</span>ScrollView<span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// Bounces の影を消す via http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview</span><br>        scrollView<span class=\"token punctuation\">.</span>Subviews<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> v <span class=\"token keyword\">is</span> <span class=\"token class-name\">UIImageView</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">.</span><span class=\"token function\">ToList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">=></span> v<span class=\"token punctuation\">.</span>Hidden <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 上に引っ張った時に見える背景とラベル</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bounceBackground <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIView</span><span class=\"token punctuation\">(</span><br>            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RectangleF</span><span class=\"token punctuation\">(</span><span class=\"token number\">0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">,</span> webView<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> webView<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        bounceBackground<span class=\"token punctuation\">.</span>BackgroundColor <span class=\"token operator\">=</span> UIColor<span class=\"token punctuation\">.</span>LightGray<span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> bounceLabel <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UILabel</span><span class=\"token punctuation\">(</span><br>            <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RectangleF</span><span class=\"token punctuation\">(</span><span class=\"token number\">0f</span><span class=\"token punctuation\">,</span> webView<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Height <span class=\"token operator\">-</span> <span class=\"token number\">30f</span><span class=\"token punctuation\">,</span> webView<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Width<span class=\"token punctuation\">,</span> <span class=\"token number\">30f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        bounceLabel<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Pull up to Close\"</span><span class=\"token punctuation\">;</span><br>        bounceLabel<span class=\"token punctuation\">.</span>TextAlignment <span class=\"token operator\">=</span> UITextAlignment<span class=\"token punctuation\">.</span>Center<span class=\"token punctuation\">;</span><br>        bounceLabel<span class=\"token punctuation\">.</span>BackgroundColor <span class=\"token operator\">=</span> UIColor<span class=\"token punctuation\">.</span>Clear<span class=\"token punctuation\">;</span><br>        bounceLabel<span class=\"token punctuation\">.</span>Opaque <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 背景とラベルを WebView の一番奥に追加する</span><br>        webView<span class=\"token punctuation\">.</span><span class=\"token function\">InsertSubview</span><span class=\"token punctuation\">(</span>bounceLabel<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        webView<span class=\"token punctuation\">.</span><span class=\"token function\">InsertSubview</span><span class=\"token punctuation\">(</span>bounceBackground<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// 適当な URL を読み込み</span><br>        webView<span class=\"token punctuation\">.</span><span class=\"token function\">LoadRequest</span><span class=\"token punctuation\">(</span>NSUrlRequest<span class=\"token punctuation\">.</span><span class=\"token function\">FromUrl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">NSUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://yahoo.co.jp/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>        <span class=\"token comment\">// 閉じるのに必要な分だけ上に引っ張ったら true になる</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> canClose <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// ドラッグ開始時にフラグOFF(一応)</span><br>        scrollView<span class=\"token punctuation\">.</span>DraggingStarted <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            canClose <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// ドラッグ終了時、必要量引っ張っていたら OnCloseByPullUp を呼ぶ</span><br>        scrollView<span class=\"token punctuation\">.</span>DraggingEnded <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>canClose<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token function\">OnCloseByPullUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token comment\">// スクロールした時にいろいろやる</span><br>        scrollView<span class=\"token punctuation\">.</span>Scrolled <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> labelFrame <span class=\"token operator\">=</span> bounceLabel<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// コンテンツの一番下まで表示してさらに引っ張ったサイズ</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> offsetY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>scrollView<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Height <span class=\"token operator\">+</span> scrollView<span class=\"token punctuation\">.</span>ContentOffset<span class=\"token punctuation\">.</span>Y<span class=\"token punctuation\">)</span> <br>                <span class=\"token operator\">-</span> scrollView<span class=\"token punctuation\">.</span>ContentSize<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// 50px 上に引っ張ったら閉じるものとする</span><br>            canClose <span class=\"token operator\">=</span> offsetY <span class=\"token operator\">></span> <span class=\"token number\">50f</span><span class=\"token punctuation\">;</span><br>            bounceLabel<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> canClose <span class=\"token punctuation\">?</span> <span class=\"token string\">\"Release to Close\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"Pull up to Close\"</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// ラベルがいつまでも移動しないように</span><br>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>offsetY <span class=\"token operator\">></span> labelFrame<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                offsetY <span class=\"token operator\">=</span> labelFrame<span class=\"token punctuation\">.</span>Height<span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token comment\">// ラベルがドラッグと共に下からせり出してくるように</span><br>            labelFrame<span class=\"token punctuation\">.</span>Y <span class=\"token operator\">=</span> scrollView<span class=\"token punctuation\">.</span>Frame<span class=\"token punctuation\">.</span>Height <span class=\"token operator\">-</span> offsetY<span class=\"token punctuation\">;</span><br>            bounceLabel<span class=\"token punctuation\">.</span>Frame <span class=\"token operator\">=</span> labelFrame<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token comment\">// \"Release to Close\" で離すと呼ばれる</span><br>    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCloseByPullUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> v <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UIAlertView</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Close this view\"</span><span class=\"token punctuation\">,</span>  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Close\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        v<span class=\"token punctuation\">.</span>Show <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E3%82%84%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%8B\">やってる事 <a class=\"direct-link\" href=\"#%E3%82%84%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%8B\">#</a></h2>\n<ol>\n<li>ScrollView の「引っ張った時に見える場所（= Bounce というらしい）」の影を消す。 via <a href=\"http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview\">http://stackoverflow.com/questions/8480571/removing-shadows-from-uiwebview</a></li>\n<li>背景と、ラベルを WebView 内の一番奥に挿入する（引っ張った時にのみ見えるように）</li>\n<li>あとはイベントハンドラでの処理。スクロール中に、「最下部で引っ張り中」だったら &quot;Pull up to Close&quot; ラベルをアニメーションさせながら表示する。50px 以上引っ張ってたら &quot;Release to Close&quot; にラベルを変える。「閉じられるよ」フラグも ON にしとく。</li>\n<li>ドラッグ終了イベントで、「閉じられるよ」フラグが立ってたら、コールバックする。</li>\n</ol>\n<h2 id=\"%E4%BB%8A%E5%BE%8C\">今後 <a class=\"direct-link\" href=\"#%E4%BB%8A%E5%BE%8C\">#</a></h2>\n<p>もうちょっとライブラリっぽくしたいですね。あと引っ張り中にアイコンとか表示させたい。</p>\n",
      "date_published": "2013-07-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/24/using-code-template-on-xamarin-studio/",
      "url": "https://blog.amay077.net/blog/2013/07/24/using-code-template-on-xamarin-studio/",
      "title": "Xamarin Studio でコードテンプレートを使う",
      "content_html": "<p>Visual Studio や Eclipse とか、IDE ならだいたい備えているコードテンプレート、呼び名はそれぞれ違いますが、<code>for</code> ってタイプすると <code>for (object o : items) { }</code> 的なコードのひな形を生成してくれる機能の事です。</p>\n<!--more-->\n<p>Xamarin Studio にも当然ありまして、その使い方を説明します。</p>\n<h2 id=\"%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\">きっかけ <a class=\"direct-link\" href=\"#%E3%81%8D%E3%81%A3%E3%81%8B%E3%81%91\">#</a></h2>\n<p>MvvmCross っていうフレームワークの Tutorial 動画で Visual Studio を使っているんですが、その中で多用されてるので、真似してみたくなりました。</p>\n<p>例えばこれ</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=_DHDMNB_IeY&amp;list=PLR6WI6W1JdeYSXLbm58jwAKYT7RQR31-W&amp;feature=player_detailpage&amp;t=178\">N=0 : A first MvvmCross Application (N+1 days of MvvmCross) ｜ N+1 days of MvvmCross</a></li>\n</ul>\n<h2 id=\"%E6%89%8B%E9%A0%86\">手順 <a class=\"direct-link\" href=\"#%E6%89%8B%E9%A0%86\">#</a></h2>\n<h3 id=\"1.-xamarin-studio-%E3%81%AE-preference-%E3%82%92%E9%96%8B%E3%81%8F\">1. Xamarin Studio の Preference を開く <a class=\"direct-link\" href=\"#1.-xamarin-studio-%E3%81%AE-preference-%E3%82%92%E9%96%8B%E3%81%8F\">#</a></h3>\n<p>システムメニュー → Preference → テキストエディタ → コード テンプレート です。</p>\n<p><img src=\"/img/posts/using_code_template_in_xamarin_studio_01.png\" alt=\"img1\"></p>\n<h3 id=\"2.-%E3%82%B3%E3%83%BC%E3%83%89%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">2. コードテンプレートを作成する <a class=\"direct-link\" href=\"#2.-%E3%82%B3%E3%83%BC%E3%83%89%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">#</a></h3>\n<p>追加 で &quot;新しいテンプレート&quot; の画面を開き、</p>\n<p><img src=\"/img/posts/using_code_template_in_xamarin_studio_02.png\" alt=\"img2\"></p>\n<p>のように設定します。</p>\n<ul>\n<li>ショートカット : pmvx</li>\n<li>グループ : C#</li>\n<li>説明 : 適当に</li>\n<li>Mime : text/x-csharp</li>\n<li>[展開されるテンプレート] にチェックを入れる</li>\n</ul>\n<p>テンプレート テキスト は以下の通り</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> $type$ $property$<span class=\"token punctuation\">;</span><br><span class=\"token keyword\">public</span> $type$ $Property$<br><span class=\"token punctuation\">{</span> <br>\t<span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> $property$<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>\t<span class=\"token keyword\">set</span> <span class=\"token punctuation\">{</span> $property$ <span class=\"token operator\">=</span> <span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span> <span class=\"token function\">RaisePropertyChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> $Property$<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>$type$</code>, <code>$property$</code>, <code>$Property$</code> という3つの変数を使っています。画面右端にあるドロップダウンで、各変数が選択できるので、それぞれ Default で既定値を設定します。</p>\n<p>ここでは、以下のようにしました。</p>\n<ul>\n<li>type : object</li>\n<li>property : _property</li>\n<li>Property : MyProperty</li>\n</ul>\n<p>OK を押して保存します。</p>\n<h3 id=\"3.-%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">3.  使ってみる <a class=\"direct-link\" href=\"#3.-%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h3>\n<p>コードエディタで <code>pmvx</code> とタイプすると、</p>\n<p><img src=\"/img/posts/using_code_template_in_xamarin_studio_03.png\" alt=\"img2\"></p>\n<p>となり、タブを2回ほど押すと、</p>\n<p><img src=\"/img/posts/using_code_template_in_xamarin_studio_04.png\" alt=\"img2\"></p>\n<p>と、テンプレートコードが挿入されます。<br>\nあとは、ハイライトされている部分を変更すると、テンプレート内も連動して変更されます。</p>\n<p>これでコード入力が楽になりました。</p>\n<p>コードテンプレートのインポート／エクスポートや、Visual Studio との互換性なども調べてみたいですね。</p>\n",
      "date_published": "2013-07-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/24/slides-is-very-useful/",
      "url": "https://blog.amay077.net/blog/2013/07/24/slides-is-very-useful/",
      "title": "オンラインでサクッとスライド作ってシェアできる Slides が便利だった件",
      "content_html": "<p>先日の <a href=\"http://connpass.com/event/2847/\">日本Androidの会浜松支部　第27回ミーティング -AndroidとHTML5-</a> で HTML5 中心の話題にも関わらず Xamarin の LT をした訳ですが、むりやりこじつけるために、HTML5 でプレゼンスライドを作りました。</p>\n<!--more-->\n<p>この手のもので最も有名なのが <a href=\"http://lab.hakim.se/reveal-js/\">reveal.js</a> というライブラリですが、環境準備が面倒だったので、HTML5 で作れてオンラインでシェアできるものを探してたどり着いたのが Slides(<a href=\"http://slid.es\">slid.es</a>) でした。</p>\n<ul>\n<li>[Slides - The easiest way to create and share beautiful presentations.] (<a href=\"http://slid.es/\">http://slid.es/</a>)</li>\n</ul>\n<p>使い方は簡単で、Google か Facebook のアカウントでサインインでき、無料で使えます。</p>\n<p>実はこれ reveal.js を使ったサービスで、機能もほぼ相違ないのですが、PDF へのエクスポートやデザインテーマは有償の Pro 版でないと使えなくなっています。reveal.js を直接使えば、エクスポートや Markdown 対応もできるので、まあ SaaS としての戦略でしょうか。</p>\n<p>reveal.js はライブラリなのでコンテンツは自力で HTML or Markdown で書く必要がありますが、Slides にはリッチエディタが付いているので、簡単に資料を書くことができます。</p>\n<p>凝った演出はできませんが、 LT くらいの資料なら十分実用できます。そのままシェアできますし。(逆に Private にするには Pro 版が必要)</p>\n<p>というわけで reveal.js 使いたいけどいろいろ面倒そう、という人は Slides を試されると良いかと思います。</p>\n<p>最後に、その時発表した Xamarin の LT 資料を貼って終わります。<br>\nXamarin もどうぞよろしくおねがいします。</p>\n<ul>\n<li><a href=\"http://slides.com/amay/intro_of_xamarin/embed\">Introduction of Xamarin: Slides</a></li>\n</ul>\n",
      "date_published": "2013-07-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/22/using-pcl-on-xamarin-studio/",
      "url": "https://blog.amay077.net/blog/2013/07/22/using-pcl-on-xamarin-studio/",
      "title": "Xamarin Studio で MvvmCross を使うための準備",
      "content_html": "<p>クロスプラットフォーム MVVM フレームワーク「<a href=\"https://github.com/slodge/MvvmCross\">MvvmCross</a>」を Mac の Xamarin Studio で使うための準備についてです。</p>\n<!--more-->\n<p>基本は、</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/17653208/getting-pcl-mvvmcross-nuget-and-xamarin-studio-to-play-nice-on-mac\">monotouch - Getting PCL, Mvvmcross, Nuget and Xamarin Studio to play &quot;nice&quot; on Mac - Stack Overflow</a></li>\n</ul>\n<p>のトレース。主には PCL と Nuget が正しく動くようにする手順です。</p>\n<h2 id=\"%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\">前提条件 <a class=\"direct-link\" href=\"#%E5%89%8D%E6%8F%90%E6%9D%A1%E4%BB%B6\">#</a></h2>\n<p>必要な(というか試した)環境は以下の通り。<br>\n（Xamarin の PCL サポートがまだ「進行中」なので、将来的には変わる可能性大）</p>\n<ul>\n<li>Xamarin Studio Version 4.0.10 (beta)</li>\n<li>Xamarin.Android Version: 4.8.0 (beta)</li>\n<li>Xamarin.iOS Version: 6.3.8.11 (beta)</li>\n<li>Xamarin Studio Add-in NuGet Package Management Version 0.5</li>\n<li>Mac OS X 10.8.4</li>\n</ul>\n<h2 id=\"%E6%89%8B%E9%A0%86\">手順 <a class=\"direct-link\" href=\"#%E6%89%8B%E9%A0%86\">#</a></h2>\n<h3 id=\"xamarin-studio\">Xamarin Studio <a class=\"direct-link\" href=\"#xamarin-studio\">#</a></h3>\n<ol>\n<li>Mac に Xamarin Studio を入れて、Beta チャンネルに切り替えて更新。</li>\n<li>アドインマネージャから NuGet Package Management をインストール。</li>\n</ol>\n<h3 id=\".netportable-dlls-%E3%82%92-win%E6%A9%9F%E3%81%8B%E3%82%89%E3%82%B3%E3%83%94%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B\">.NETPortable DLLs を Win機からコピってくる <a class=\"direct-link\" href=\"#.netportable-dlls-%E3%82%92-win%E6%A9%9F%E3%81%8B%E3%82%89%E3%82%B3%E3%83%94%E3%81%A3%E3%81%A6%E3%81%8F%E3%82%8B\">#</a></h3>\n<p>Win機の <code>C:¥Program Files (x86)¥Reference Assemblies¥MicrosoftFramework.NETPortable</code> を、Mac の <code>/Library/Frameworks/Mono.framework/External/xbuild-frameworks/.NETPortable/</code> へコピー。</p>\n<p>Win機がない場合は、<a href=\"http://amay077.github.io/blog/2013/07/21/building-testing-environment-for-mac-using-ietestdrive/\">これ</a> などで Win仮想環境を作り、<a href=\"http://www.microsoft.com/visualstudio/jpn/downloads\">Visual Studio Ultimate 2012 90日間試用版</a> を入れるとよい(Express 版は上記DLLsがないのでNG)。</p>\n<h3 id=\"nuget-%E3%81%AB%E3%83%91%E3%83%83%E3%83%81%E3%82%92%E3%81%82%E3%81%A6%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89\">Nuget にパッチをあててビルド <a class=\"direct-link\" href=\"#nuget-%E3%81%AB%E3%83%91%E3%83%83%E3%83%81%E3%82%92%E3%81%82%E3%81%A6%E3%81%A6%E3%83%93%E3%83%AB%E3%83%89\">#</a></h3>\n<p><a href=\"http://stackoverflow.com/questions/17653208/getting-pcl-mvvmcross-nuget-and-xamarin-studio-to-play-nice-on-mac\">ここ</a> の <strong>Patch to Nuget.Core.dll:</strong> にあるテキストを適当なファイルに保存(ここでは <code>patch.diff</code> とする)して、以下のコマンドを実行。</p>\n<pre><code>git clone https://git01.codeplex.com/nuget\ncd nuget\ngit checkout -b 2.6 origin/2.6 \n\npatch -p1 &lt; patch.diff\n\ncd src/Core\nxbuild\n\ncp bin/Debug/NuGet.Core.dll  ~/Library/Application\\ Support/XamarinStudio-4.0/LocalInstall/Addins/MonoDevelop.PackageManagement.0.5/NuGet.Core.dll\n</code></pre>\n<p>以上で、環境準備は終わり。</p>\n<h2 id=\"%E8%A9%A6%E3%81%99\">試す <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%99\">#</a></h2>\n<ol>\n<li>Xamarin Studio で Portable Class Library を作成する</li>\n<li>プロジェクト設定を見ると Xamarin.Android、Xamarin.iOS などがあるが、これらを<strong>チェックしてOKしても適用されてない</strong> <img src=\"/img/posts/using_pcl_on_xamarin_studio01.png\" alt=\"img1\"></li>\n<li>Nuget Manager から mvvmcorss で検索して &quot;MvvmCross - Hot Tuna  Starter Pack&quot; を Add してもエラーになる。<img src=\"/img/posts/using_pcl_on_xamarin_studio02.png\" alt=\"img1\"></li>\n</ol>\n<p>うーん、ダメか？</p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E4%BF%AE%E6%AD%A3%E3%81%99%E3%82%8B\">プロジェクトファイルをちょっと修正する <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E4%BF%AE%E6%AD%A3%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ポータブルクラスライブラリのプロジェクトファイル(xxx.csproj) をテキストエディタで開き、<code>&lt;TargetFrameworkProfile&gt;</code> の値を <code>Profile104</code> に書き換える。(修正前は Profile1 になってた。なぜ Profile104 かと言えば、Visual Studio で作った PCL プロジェクトのプロファイルが 104 だったから、という程度の理解レベル)</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Project</span> <span class=\"token attr-name\">DefaultTargets</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Build<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">ToolsVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>4.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">xmlns</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.microsoft.com/developer/msbuild/2003<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Configuration</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(Configuration)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Debug<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Configuration</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Platform</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(Platform)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span><span class=\"token punctuation\">'</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>AnyCPU<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Platform</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProductVersion</span><span class=\"token punctuation\">></span></span>10.0.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ProductVersion</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>SchemaVersion</span><span class=\"token punctuation\">></span></span>2.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>SchemaVersion</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectGuid</span><span class=\"token punctuation\">></span></span>{50D8E04F-FDE0-4A65-B388-5698BEFE8DC5}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ProjectGuid</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ProjectTypeGuids</span><span class=\"token punctuation\">></span></span>{786C830F-07A1-408B-BD7F-6EE04809D6DB};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ProjectTypeGuids</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>OutputType</span><span class=\"token punctuation\">></span></span>Library<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>OutputType</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>RootNamespace</span><span class=\"token punctuation\">></span></span>Portable2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>RootNamespace</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>AssemblyName</span><span class=\"token punctuation\">></span></span>Portable2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>AssemblyName</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>TargetFrameworkProfile</span><span class=\"token punctuation\">></span></span>Profile104<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworkProfile</span><span class=\"token punctuation\">></span></span>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>--Here!!!!!</span><br>    <span class=\"token attr-name\">&lt;TargetFrameworkVersion</span><span class=\"token punctuation\">></span></span>v4.0<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>TargetFrameworkVersion</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>PropertyGroup</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>PropertyGroup</span> <span class=\"token attr-name\">Condition</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span> <span class=\"token punctuation\">'</span>$(Configuration)|$(Platform)<span class=\"token punctuation\">'</span> == <span class=\"token punctuation\">'</span>Debug|AnyCPU<span class=\"token punctuation\">'</span> <span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>DebugSymbols</span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>DebugSymbols</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"%E5%86%8D%E5%BA%A6%E8%A9%A6%E3%81%99\">再度試す <a class=\"direct-link\" href=\"#%E5%86%8D%E5%BA%A6%E8%A9%A6%E3%81%99\">#</a></h2>\n<p>もう一度プロジェクトを開いて Nuget から &quot;MvvmCross - Hot Tuna  Starter Pack&quot; を Add すると、成功する。プロジェクトツリーを見ると必要なDLLやソースコードが配置されている。</p>\n<p>これで Xamarin Studio でも PCL が使えそう。<br>\nMvvmCross の Tutorial - <a href=\"http://mvvmcross.wordpress.com/\">MvvmCross N+1 Table of Context</a> を試せます。</p>\n",
      "date_published": "2013-07-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/21/building-testing-environment-for-mac-using-ietestdrive/",
      "url": "https://blog.amay077.net/blog/2013/07/21/building-testing-environment-for-mac-using-ietestdrive/",
      "title": "Mac で Windows の仮想マシンを使って IE のテスト環境を構築する",
      "content_html": "<p>Microsoft の <a href=\"http://www.modern.ie/ja\">modern.IE</a> というサイトで、Webサイトの IE対応を支援するサービスをいくつか提供していますが、その中に、「IEx 入りの仮想マシンの提供」が行われています。</p>\n<!--more-->\n<p>Virtual PC, Hyper-V, VirtualBox, VMware Fusion, Parallels などの主要な仮想環境用のイメージを配布しています。</p>\n<p>ただし、仮想マシンの期限が 90days です。また OS の言語設定が英語です。</p>\n<p>90days を過ぎるとまた再構築しなければならないので、日本語環境で使用するための初期設定をメモっておきます。</p>\n<h2 id=\"%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">仮想マシンをダウンロードする <a class=\"direct-link\" href=\"#%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%99%E3%82%8B\">#</a></h2>\n<p><a href=\"http://www.modern.ie/ja/virtualization-tools#downloads\">http://www.modern.ie/ja/virtualization-tools#downloads</a></p>\n<p>から、ホストPC の OS と仮想マシンの形式を選択します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive01.png\" alt=\"img1\"></p>\n<p>次に、テストしたい IE と OS のバージョンの組み合わせから、目的の仮想マシンをダウンロードします。Mac の場合は &quot;Grab them all with cURL&quot; の内容を Terminal にコピペして、一括ダウンロードができます。</p>\n<p>私は、ホストが Mac、目的は IE10+Win7 をダウンロードしました。</p>\n<p>ダウンロードすると、 IE10.Win7.For.MacVMware.part01.sfx 〜 IE10.Win7.For.MacVMware.part04.rar というファイルができているので、これを結合するために、Terminal で、以下のコマンドを実行します。(上のサイトの 「手順」 に書いてある内容です)</p>\n<pre><code>chmod +x IE10.Win7.For.MacVMware.part01.sfx\n./IE10.Win7.For.MacVMware.part01.sfx\n</code></pre>\n<p>コマンドの処理が終わると <code>IE10.Win7.For.MacVMware.vmwarevm</code>(9.75GB) ができています。これが仮想マシンのイメージファイルです。</p>\n<h2 id=\"%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">仮想マシンを起動する <a class=\"direct-link\" href=\"#%E4%BB%AE%E6%83%B3%E3%83%9E%E3%82%B7%E3%83%B3%E3%82%92%E8%B5%B7%E5%8B%95%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ファイルを直接実行するなり、仮想マシンのマネージャ使うなりして、仮想マシンを起動します。</p>\n<p>途中、「仮想マシンのアップグレードが必要です」と言われたので「はい」と答えました。<br>\n「この仮想マシンは移動またはコピーされた可能性があります。よく分からない場合は、[コピーしました] を選択してください。」と言われたので、よくわからないので「コピーしました」と答えました。</p>\n<p>起動するとこんな画面になります。<br>\nネットワークドライバなどがインストールされて、ホストPC とブリッジ接続でインターネットにもつながります。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive02.png\" alt=\"img1\"></p>\n<h2 id=\"%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">日本語キーボードを設定する <a class=\"direct-link\" href=\"#%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%82%AD%E3%83%BC%E3%83%9C%E3%83%BC%E3%83%89%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">#</a></h2>\n<p>まず、キーボードが英語なので、日本語キーボードを導入します。<br>\nデバイスマネージャを開きます。<br>\nスタートメニュー → 検索ボックスに <code>devmgmt.msc</code> を打ち込むのが（説明上）手っ取り早いです。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive03.png\" alt=\"img1\"></p>\n<p>Keyboards - Standard PS/2 Keyboard を右クリックして Properties を表示し、Driver タブから [Update Driver] ボタンを押します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive04.png\" alt=\"img1\"></p>\n<p>&quot;Browse my computer …&quot; を押します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive05.png\" alt=\"img1\"></p>\n<p>&quot;Let me pick from…&quot; を押します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive06.png\" alt=\"img1\"></p>\n<p>Show compatible hardware のチェックを <strong>外し</strong> ます。<br>\n次に (Standard keyborads) から &quot;Japanese PS/2 Keyboard (106/109 Key Ctrl + Eisuu)&quot; を選択して Next を押します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive07.png\" alt=\"img1\"></p>\n<p>ウィザードの手順に従ってインストール完了後、仮想マシンを一旦再起動します。</p>\n<p><strong>再起動後、この時点でもまだキーボード配列は英語のままです。</strong></p>\n<p>次にシステムの言語設定を Japanese にします。</p>\n<p>コントロールパネル から &quot;Change display language&quot; を押します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive08.png\" alt=\"img1\"></p>\n<p>&quot;Administrative&quot; タブから &quot;Change system locale&quot; を押し、&quot;Japanese&quot; を選択します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive09.png\" alt=\"img1\"></p>\n<p>その後、また再起動します。</p>\n<p>再起動後、タスクトレイに [EN] という言語選択のアイコンが表れるので、[JP] にすると日本語キーボードになります。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive11.png\" alt=\"img1\"></p>\n<p>いちいち切り替えるのは面倒なので、デフォルトを Japanese にしておきます。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive12.png\" alt=\"img1\"></p>\n<p>ついでに、時刻や通過表示も Japanese にします。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive13.png\" alt=\"img1\"></p>\n<p>忘れていました。タイムゾーンの変更もしておきます。<br>\nコントロールパネル の &quot;Change the time zone&quot; から、[Osaka, Sapporo, Kyoto] を選択します。</p>\n<p><img src=\"/img/posts/how_to_use_ie_testdrive14.png\" alt=\"img1\"></p>\n<h2 id=\"%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AB%E3%81%99%E3%82%8B\">表示を日本語にする <a class=\"direct-link\" href=\"#%E8%A1%A8%E7%A4%BA%E3%82%92%E6%97%A5%E6%9C%AC%E8%AA%9E%E3%81%AB%E3%81%99%E3%82%8B\">#</a></h2>\n<p>この Windows 7 は Enterprise Edition らしいので、</p>\n<ul>\n<li><a href=\"http://support.microsoft.com/kb/972813/ja\">Windows 7 Ultimate または Windows 7 Enterprise を搭載しているコンピューターに提供される Windows 7 の言語パック</a></li>\n</ul>\n<p>にある方法で日本語の言語パックを導入できるかなーと思ったんですが、Windows Update で言語パックの選択が表れず、うまくいきませんでした。</p>\n<p>どうしても日本語表示がいい！という方は、公式な方法ではないようですが、こちらの方法で日本語化できるようです。(おすすめはしないのでリンク貼りません、自己責任で。)</p>\n<p>ttp://nagabuchi.jugem.jp/?eid=443</p>\n<h2 id=\"windows-update-%E3%81%A8%E3%81%8B%E3%82%A6%E3%82%A4%E3%83%AB%E3%82%B9%E5%AF%BE%E7%AD%96%E3%81%A8%E3%81%8B\">Windows Update とかウイルス対策とか <a class=\"direct-link\" href=\"#windows-update-%E3%81%A8%E3%81%8B%E3%82%A6%E3%82%A4%E3%83%AB%E3%82%B9%E5%AF%BE%E7%AD%96%E3%81%A8%E3%81%8B\">#</a></h2>\n<p>テスト環境と言えど、最低限のセキュリティ対策は行なっておきましょう。<br>\nWindows Update を行なって最新の状態に、ウイルス対策は <a href=\"http://windows.microsoft.com/ja-jp/windows/security-essentials-download\">Microsoft Security Essentials</a> をインストールします。</p>\n<p>これで最低限の環境設定ができました。<br>\nではまた３ヶ月後にお会いしましょう。</p>\n",
      "date_published": "2013-07-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/07/17/list-of-chart-library-for-javascript/",
      "url": "https://blog.amay077.net/blog/2013/07/17/list-of-chart-library-for-javascript/",
      "title": "Javascript 製のチャート描画ライブラリのメモ",
      "content_html": "<p>Javascript 製のチャート描画ライブラリをいくつか調べたので備忘録として残しておく。</p>\n<!--more-->\n<p>やりたいのは、ストリーミングで次々やってくるデータをリアルタイムに表示する事。しかも順方向だけじゃなくて過去方向にも戻りたい。</p>\n<h2 id=\"smoothiecharts\">smoothiecharts <a class=\"direct-link\" href=\"#smoothiecharts\">#</a></h2>\n<p><a href=\"http://smoothiecharts.org/\">http://smoothiecharts.org/</a></p>\n<p>シンプルで、使うのも簡単。が、逆再生ができるのかよく分からなかったので保留。</p>\n<h2 id=\"cubism.js\">Cubism.js <a class=\"direct-link\" href=\"#cubism.js\">#</a></h2>\n<p><a href=\"http://square.github.io/cubism/\">http://square.github.io/cubism/</a></p>\n<p>言わずと知れたビジュアライゼーションライブラリ <a href=\"http://d3js.org/\">D3</a> のプラグイン。<br>\nなんか見た目がクール。<br>\nあまり突っ込んで調べてないので、要件を満たすかは不明。<br>\nちなみにモバイル決済の Square によるオープンソースプロジェクト。<br>\nD3 自体でもいろいろなチャート描画ができるが、なんか勝手に Fat なイメージを持ってる。</p>\n<h2 id=\"flot\">Flot <a class=\"direct-link\" href=\"#flot\">#</a></h2>\n<p><a href=\"http://www.flotcharts.org/\">http://www.flotcharts.org/</a></p>\n<p>こちらは jQuery のプラグイン。</p>\n<p>使い方が簡単で、配列を描画させてるだけだったので、配列操作で逆再生にも対応できそう。</p>\n<h2 id=\"google-chart\">Google Chart <a class=\"direct-link\" href=\"#google-chart\">#</a></h2>\n<p><a href=\"https://developers.google.com/chart\">https://developers.google.com/chart</a></p>\n<p>大御所。<br>\nなんか &quot;Connect to your data in realtime&quot; って謡ってるので、できそうな感じもするが試してない。これも高機能であるが故にレスポンス大丈夫かなあと勝手に思っている。</p>\n<h2 id=\"amcharts\">amCharts <a class=\"direct-link\" href=\"#amcharts\">#</a></h2>\n<p><a href=\"https://amcharts.zendesk.com/entries/22592917-Creating-charts-with-real-time-data\">https://amcharts.zendesk.com/entries/22592917-Creating-charts-with-real-time-data</a></p>\n<p>amCharts というプロダクトで、リアルタイムなチャートが実現できる模様。参考程度に。</p>\n<h2 id=\"%E3%81%9D%E3%81%AE%E4%BB%96\">その他 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">#</a></h2>\n<p>やりたいことは株価チャートに近いのでそっち方面で探すとたくさんありそうだけど、株価に特化しちゃってて機能過多＆使いづらい感。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<p>タイムリーにも同じようなまとめをしてくださってる方が居たのでメモ</p>\n<ul>\n<li><a href=\"http://qiita.com/hurutoriya/items/727296839a2ec638fdc4\">グラフ描画に良さげなJavaScriptライブラリ - Qiita</a></li>\n</ul>\n",
      "date_published": "2013-07-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/06/14/viewing-is-service-foreground/",
      "url": "https://blog.amay077.net/blog/2013/06/14/viewing-is-service-foreground/",
      "title": "Service が Foreground で動いているか確認する",
      "content_html": "<p>Android で「死ににくいサービス」を作るには [Service.startForegound](<a href=\"http://developer.android.com/reference/android/app/Service.html#startForeground\">http://developer.android.com/reference/android/app/Service.html#startForeground</a>(int, android.app.Notification) を呼び出す必要がありますが、動いてるサービスがちゃんと「Foregound になってるか？」は以下のようにして確認できます。(Notification 表示が強制されるから通知バー見ればいいじゃん、と言われればそうなんですけど、ちゃんとしたエビデンスっぽいのが欲しくて)</p>\n<!--more-->\n<h2 id=\"%E6%89%8B%E9%A0%86\">手順 <a class=\"direct-link\" href=\"#%E6%89%8B%E9%A0%86\">#</a></h2>\n<pre><code>adb shell dumpsys activity s &lt;サービス名&gt;\n</code></pre>\n<p>&lt;サービス名&gt; はサービスの完全名称を入れます。AndroidManifest.xml の <code>&lt;service android:name=</code> で定義したやつ。</p>\n<p>実行すると以下のように出力されます。</p>\n<blockquote>\n<p>ACTIVITY MANAGER SERVICES (dumpsys activity services)<br>\nUser 0 active services:</p>\n<ul>\n<li>ServiceRecord{41b2dd18 u0 com.amay077.android.gpsfaker/.service.GpsSignalService}<br>\nintent={cmp=com.amay077.android.gpsfaker/.service.GpsSignalService}<br>\npackageName=com.amay077.android.gpsfaker<br>\nprocessName=com.amay077.android.gpsfaker<br>\nbaseDir=/data/app/com.amay077.android.gpsfaker-1.apk<br>\ndataDir=/data/data/com.amay077.android.gpsfaker<br>\napp=ProcessRecord{416e19e8 3209:com.amay077.android.gpsfaker/u0a10072}<br>\nisForeground=true foregroundId=2130968576 foregroundNoti=Notification(pri=0 contentView=com.amay077.android.<br>\n(以下省略)</li>\n</ul>\n</blockquote>\n<p><code>isForegound=true</code> と表示されているので、確かに「このサービスはフォアグラウンドだ」と分かります。サービス側で <code>startForeground</code> を呼び出さなかった場合は、この項目は表れません。</p>\n<p><code>dumpsys</code> 今までコマンドめんどいと思ってあまり使ってませんでしたすいませんでした(汗</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<p>大変参考になりました。</p>\n<ul>\n<li><a href=\"http://yuki312.blogspot.com/2013/02/androidservicedump.html\">Yukiの枝折: Android:Service.dumpでサービスの状態をダンプする</a></li>\n</ul>\n",
      "date_published": "2013-06-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/06/13/view-wakelock-status/",
      "url": "https://blog.amay077.net/blog/2013/06/13/view-wakelock-status/",
      "title": "WakeLock の状態を確認する",
      "content_html": "<p>どのアプリが WakeLock を取得しているかを見る方法。</p>\n<!--more-->\n<pre><code>adb shell dumpsys power\n</code></pre>\n<p>を実行して、ずらっと出力される中から &quot;Wake Locks:&quot; を探す。<br>\n出力されるのはこんな感じの情報。</p>\n<blockquote>\n<p>POWER MANAGER (dumpsys power)</p>\n<p>Power Manager State:<br>\nmDirty=0x0<br>\n(中略)</p>\n<p>Settings and Configuration:<br>\nmDreamsSupportedConfig=true<br>\n(中略)</p>\n<p>Screen off timeout: 30000 ms<br>\nScreen dim duration: 6000 ms</p>\n<p>Wake Locks: size=1<br>\nSCREEN_BRIGHT_WAKE_LOCK        'WindowManager' ON_AFTER_RELEASE (uid=1000, pid=389, ws={WorkSource: uids=[10070]})</p>\n<p>(以下省略)</p>\n</blockquote>\n<p>&quot;Wake Locks: size=1&quot; となっており、<br>\n'WindowManager' という TAG で <code>SCREEN_BRIGHT_WAKE_LOCK</code> が取得されているのが分かる。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://kazumeat.hatenablog.com/entry/20110814/1313295257\">adb各種コマンド - 肉になるメモ</a></li>\n</ul>\n",
      "date_published": "2013-06-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/30/testing-fused-location-provider/",
      "url": "https://blog.amay077.net/blog/2013/05/30/testing-fused-location-provider/",
      "title": "Fused Location Provider を近くのショッピングセンターで評価してみた",
      "content_html": "<p>Android に新しく搭載された Fused Location Provider、これは GPS/WiFi/センサーを統合的に使ってその時ベストな位置を取得できるというもので、<a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=URcVZybzMUI#t=733s\">Google I/O のデモ</a> が衝撃的だったので、自分でも試してみました。</p>\n<!--more-->\n<h2 id=\"%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83%E3%81%A8%E3%81%8B\">検証環境とか <a class=\"direct-link\" href=\"#%E6%A4%9C%E8%A8%BC%E7%92%B0%E5%A2%83%E3%81%A8%E3%81%8B\">#</a></h2>\n<ul>\n<li>場所 : イオン豊橋南店（ええ田舎ですが何か？</li>\n<li>日時 : 2013/05/30 17:30頃</li>\n<li>天候 : 小雨（曇天だったので GPS は捕まえにくかったかも）</li>\n<li>端末 : au HTC J(!蝶) OS は 4.0.4</li>\n<li>GPS も WiFi も ON</li>\n<li>Android SDK Tools : rev.21.1</li>\n<li>Google Play service : rev.7</li>\n<li>FusedProvider の Priority : PRIORITY_HIGH_ACCURACY</li>\n<li>位置取得間隔 : 5秒</li>\n<li>姿勢 : スマホを常に左手で掲げて、見ながら歩きました。</li>\n</ul>\n<h2 id=\"%E3%81%9D%E3%81%AE1%3A%E9%A7%90%E8%BB%8A%E5%A0%B4%E3%80%9C1f%E3%80%9C%E9%A7%90%E8%BB%8A%E5%A0%B4\">その1:駐車場〜1F〜駐車場 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE1%3A%E9%A7%90%E8%BB%8A%E5%A0%B4%E3%80%9C1f%E3%80%9C%E9%A7%90%E8%BB%8A%E5%A0%B4\">#</a></h2>\n<p>駐車場に車を停めて、歩いて店内に入場、店内をなるべくゆっくり直線的にぐるっと徘徊して、退店、駐車場を歩いて戻って来ました。</p>\n<p>緑が実際の経路、青が Fused Provider の経路です。</p>\n<ul>\n<li><a href=\"https://maps.google.co.jp/maps/ms?msa=0&amp;msid=206106708723125678709.0004ddec1d5240e6ba1d3&amp;brcurrent=3,0x6004d3ebe16cdde1:0xfb92e7477942b89b,0&amp;ie=UTF8&amp;t=h&amp;ll=34.709597,137.387786&amp;spn=0.001372,0.001735&amp;source=embed\">FusedProviderの評価(イオン豊橋南店1F) を表示</a></li>\n</ul>\n<h2 id=\"%E3%81%9D%E3%81%AE2%3A%E9%A7%90%E8%BB%8A%E5%A0%B4%E3%80%9C1f%E3%80%9C2f%E3%80%9C%E3%81%90%E3%82%8B%E3%81%A3%E3%81%A8%E3%80%9C1f%E3%80%9C%E9%A7%90%E8%BB%8A%E5%A0%B4\">その2:駐車場〜1F〜2F〜ぐるっと〜1F〜駐車場 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE2%3A%E9%A7%90%E8%BB%8A%E5%A0%B4%E3%80%9C1f%E3%80%9C2f%E3%80%9C%E3%81%90%E3%82%8B%E3%81%A3%E3%81%A8%E3%80%9C1f%E3%80%9C%E9%A7%90%E8%BB%8A%E5%A0%B4\">#</a></h2>\n<p>もう一度。<br>\n今度は入店してすぐエスカレータで2Fへ。2Fフロアをぐるっと回ってからエスカレータで1Fへ降りて駐車場へ戻って来ました。</p>\n<ul>\n<li><a href=\"https://maps.google.co.jp/maps/ms?t=h&amp;brcurrent=3,0x6004d3ec8f3f5bf5:0x7b6f4e2f69453e37,1&amp;msa=0&amp;msid=206106708723125678709.0004ddec316197e38b987&amp;source=embed&amp;ie=UTF8&amp;ll=34.709546,137.388057&amp;spn=0.003479,0.004517\">FusedProviderの評価(イオン豊橋南店2F) を表示</a></li>\n</ul>\n<h2 id=\"%E7%B5%90%E6%9E%9C%E3%82%92%E3%81%BF%E3%81%A6\">結果をみて <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C%E3%82%92%E3%81%BF%E3%81%A6\">#</a></h2>\n<p>うーん、かいかぶり過ぎたか Fused Provider。</p>\n<p>確かに GPS と WiFi をシームレスに扱ってくれているようですが、期待していた屋内での測位結果はちょっと残念でした。</p>\n<p>I/O のセッションの中では、WiFi+Sensor を使ってると言っていたので、WiFi-AP の電波強度と加速度センサーの振れ具合で自律測位してくれるのかなあと思ったのですが、あまり自律測位が機能してないように見えます。</p>\n<h3 id=\"accuracy-%E3%81%AF%EF%BC%9F\">Accuracy は？ <a class=\"direct-link\" href=\"#accuracy-%E3%81%AF%EF%BC%9F\">#</a></h3>\n<p>屋外だとだいたい 10m前後、屋内でも 20〜40m くらいの精度でした。<br>\n上図の幅が約200mですが、実際の位置よりもっと離れている感じがします。</p>\n<p>Fused Provider を使うと、妙に Accuracy が小さい(精度の良い)値が得られるのですが、実際の位置がその精度が示す円の中にも入らないこともあり、それなら高い確率で実際の位置を包括する（精度の悪い）WiFi or 基地局測位 の方が有用では？とも思えました。</p>\n<p>また、施設内に WiFi-AP が何個あったとかの細かい調査はしていません（たぶん５〜６個）が、都会の繁華街とか地下街の方が圧倒的に多いと思うので、また違った結果が出るものと思います。</p>\n<h3 id=\"gps-%E3%81%AE%E5%8B%95%E3%81%8D%E3%81%AF%EF%BC%9F\">GPS の動きは？ <a class=\"direct-link\" href=\"#gps-%E3%81%AE%E5%8B%95%E3%81%8D%E3%81%AF%EF%BC%9F\">#</a></h3>\n<p>今回は <code>PRIORITY_HIGH_ACCURACY</code> を使いました。これは GPS を使います。(<code>PRIORITY_BALANCED_POWER_ACCURACY</code> は GPS を使いません［が、 <code>ACCESS_FINE_LOCATION</code> を付けないと精度が数kmレベルになります。］)</p>\n<p>記録中の GPS アイコンの動きは、点滅 → 数秒後消える → また点滅 → GPSを捕捉したらつきっぱなし という感じで、屋外に移動すると GPS を捕まえる、屋内では度々トライするが捕まえられないのですぐ消える。という動きをしてました。</p>\n<h3 id=\"%E7%8A%B6%E6%85%8B%E8%AA%8D%E8%AD%98%E3%81%AF%E8%B2%A2%E7%8C%AE%E3%81%97%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%9F\">状態認識は貢献してるのか？ <a class=\"direct-link\" href=\"#%E7%8A%B6%E6%85%8B%E8%AA%8D%E8%AD%98%E3%81%AF%E8%B2%A2%E7%8C%AE%E3%81%97%E3%81%A6%E3%82%8B%E3%81%AE%E3%81%8B%EF%BC%9F\">#</a></h3>\n<p>自律測位に状態認識(Activity Recognition)がもし使われているなら、持ちながらよりも、ポケットに入れっぱで歩いた方に最適化されてたかも知れないなあと思ったり。</p>\n<p><a href=\"http://amay077.github.io/blog/2013/05/18/getting-started-activity-recognition/\">ActivityRecognitionClient を試した</a> 時も、持ちながらよりも尻ポケに入れたまま歩いた方が認識されやすい気がしました。気だけですが。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>Fused Provider に期待しすぎないでください</li>\n<li>実際の位置から（精度値を超えて）大きく外れることもあるのが困る</li>\n<li>パワーマネジメントはなんかやってるぽい（計測してないけど）</li>\n</ul>\n",
      "date_published": "2013-05-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/28/using-localbroadcastmanager/",
      "url": "https://blog.amay077.net/blog/2013/05/28/using-localbroadcastmanager/",
      "title": "アプリ内でブロードキャストする場合は LocalBroadcastManager を使うと良いらしい",
      "content_html": "<p>サポートパッケージに<code>LocalBroadcastManager</code> というクラスがあるのを今頃知りまして。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://developer.android.com/reference/android/support/v4/content/LocalBroadcastManager.html\">LocalBroadcastManager ｜ Android Developers</a></li>\n</ul>\n<p>ブロードキャストは使い方を誤るとデータを(アプリの)外部に流出させる可能性があるわけですが(<a href=\"http://www.jssec.org/report/securecoding.html\">Android アプリのセキュア設計・セキュアコーディングガイド</a> 参照)、このクラスを使うと「他のアプリにデータを漏らさない」「意図しないブロードキャストを受信しない」「効率がよい」だそうです。</p>\n<h2 id=\"%E3%81%84%E3%81%A4%E4%BD%BF%E3%81%86%E3%82%93%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F\">いつ使うんですか？ <a class=\"direct-link\" href=\"#%E3%81%84%E3%81%A4%E4%BD%BF%E3%81%86%E3%82%93%E3%81%A7%E3%81%99%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>たとえば GPS を使うアプリで、GPS の受信は <code>IntentService</code> にやらせて、受信した位置を地図に表示するために、IntentService からブロードキャスト投げて、<code>Activity</code> に仕掛けたレシーバで受信する、なんてケースでしょうか。(いやそれは IntentService じゃなくて普通のサービスで aidl 使ってやれよ、とかいろいろあるわけですが。ん？PendingIntent でサービスを起動する方法だと、クライアントから bind するタイミングが無いからダメかな？)</p>\n<h2 id=\"%E4%BD%BF%E3%81%84%E6%96%B9\">使い方 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%84%E6%96%B9\">#</a></h2>\n<p>stackoverflow に良い使い方が載ってました</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/a/8875292\">android - how to use LocalBroadcastManager? - Stack Overflow</a></li>\n</ul>\n<h2 id=\"%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">使ってみた <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\">#</a></h2>\n<p>状態認識の結果も秘匿情報でしょう、ということで<a href=\"http://amay077.github.io/blog/2013/05/18/getting-started-activity-recognition/\">以前</a>作った <code>ActivityRecognitionClient</code> のサンプルを修正してみました。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/androidactivityrecognizingsample/commit/a041b300d3e9fdfe6227c05c3f21fb1e3876bbad\">amay077/androidactivityrecognizingsample · GitHub</a></li>\n</ul>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>ブロードキャストする時は、まず LocalBroadcastManager を使ってみよう。</li>\n<li>stackoverflow の回答へのダイレクトリンクとか、github の changeset へのダイレクトリンク便利すぎる！</li>\n</ul>\n",
      "date_published": "2013-05-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/27/fused-location-provider-on-xamarin/",
      "url": "https://blog.amay077.net/blog/2013/05/27/fused-location-provider-on-xamarin/",
      "title": "Xamarin.Android で Fused Location Provider(など)を使う",
      "content_html": "<p>Xamarin.Android は [Java ライブラリから C# のラッパを生成する機能](<a href=\"http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding_a_java_library_(.jar)\">http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding_a_java_library_(.jar)</a> がとっても強力(Binding というみたい)なので、Fused Location Provider や Geofencing など、Google I/O 2013 で発表された新機能が入った google-play-service.jar も使えるはずだ、と思い試してみました。</p>\n<!--more-->\n<h2 id=\"monodroid-samples-%E3%82%92%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB\">monodroid-samples をベースに <a class=\"direct-link\" href=\"#monodroid-samples-%E3%82%92%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB\">#</a></h2>\n<p>Xamarin.Android のサンプル集 <a href=\"https://github.com/xamarin/monodroid-samples\">monodroid-samples</a> に、既に Google Map v2 を使うサンプルがあり、これが Google Play Service を使っているので、これを参考にします。</p>\n<p>これね → <a href=\"https://github.com/xamarin/monodroid-samples/tree/master/MapsAndLocationDemo_v2\">MapsAndLocationDemo_v2</a> 、使い方は、</p>\n<ul>\n<li><a href=\"http://amay077.github.io/blog/2013/03/05/xamarin-android-using-google-maps-android-api-v2/\">Xamarin.Android で Google Maps Android API v2 を使う - Experiments Never Fail</a></li>\n</ul>\n<p>をどうぞ。</p>\n<h2 id=\"binding-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E3%81%84%E3%81%98%E3%82%8B\">Binding の設定をいじる <a class=\"direct-link\" href=\"#binding-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E3%81%84%E3%81%98%E3%82%8B\">#</a></h2>\n<p>Android SDK の Google Play Service をアップデートしても、Xamarin 側ですぐに <code>LocationClient</code> などが使えるわけではないです。<br>\nプロジェクト GooglePlayServices で、ラップする package などを設定しているため。</p>\n<p>その設定は <code>Transform/Metadata.xml</code> にあるので、これを以下のように設定します。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>metadata</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>remove-node</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.maps<span class=\"token punctuation\">'</span>]/class[@name=<span class=\"token punctuation\">'</span>GoogleMapOptionsCreator<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>remove-node</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name!=<span class=\"token punctuation\">'</span>com.google.android.gms.maps<span class=\"token punctuation\">'</span> <br>\t\tand @name != <span class=\"token punctuation\">'</span>com.google.android.gms.maps.model<span class=\"token punctuation\">'</span> <br>\t\tand @name != <span class=\"token punctuation\">'</span>com.google.android.gms.common<span class=\"token punctuation\">'</span><br>\t\tand @name != <span class=\"token punctuation\">'</span>com.google.android.gms.location<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>remove-node</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.maps.model<span class=\"token punctuation\">'</span>]/class[contains (@name, <span class=\"token punctuation\">'</span>Creator<span class=\"token punctuation\">'</span>)]<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>remove-node</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.location<span class=\"token punctuation\">'</span>]/class[contains (@name, <span class=\"token punctuation\">'</span>Creator<span class=\"token punctuation\">'</span>)]<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>\t\t<br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.maps<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>managedName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Android.Gms.Maps<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.maps.model<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>managedName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Android.Gms.Maps.Model<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.common<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>managedName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Android.Gms.Common<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span>  <br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.location<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>managedName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Android.Gms.Location<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span>  <br>\t<br>  \t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.maps.model<span class=\"token punctuation\">'</span>]/class[@name=<span class=\"token punctuation\">'</span>MarkerOptions<span class=\"token punctuation\">'</span>]/method[@name=<span class=\"token punctuation\">'</span>position<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>managedName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>SetPosition<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.maps.model<span class=\"token punctuation\">'</span>]/class[@name=<span class=\"token punctuation\">'</span>MarkerOptions<span class=\"token punctuation\">'</span>]/method[@name=<span class=\"token punctuation\">'</span>snippet<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>managedName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>SetSnippet<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>attr</span> <span class=\"token attr-name\">path</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>/api/package[@name=<span class=\"token punctuation\">'</span>com.google.android.gms.maps.model<span class=\"token punctuation\">'</span>]/class[@name=<span class=\"token punctuation\">'</span>MarkerOptions<span class=\"token punctuation\">'</span>]/method[@name=<span class=\"token punctuation\">'</span>title<span class=\"token punctuation\">'</span>]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>managedName<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>SetTitle<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>attr</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>metadata</span><span class=\"token punctuation\">></span></span></code></pre>\n<p><code>com.google.android.gms.location</code> を各所に追加しています。変更前は <a href=\"https://github.com/xamarin/monodroid-samples/blob/master/MapsAndLocationDemo_v2/GooglePlayServices/Transforms/Metadata.xml\">こちら</a> 。</p>\n<p>これだけで OK。(がここにたどり着くまでに半日くらいかかったorz)</p>\n<h2 id=\"%E4%BD%BF%E3%81%86\">使う <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%86\">#</a></h2>\n<p>これでリビルドすると、この GooglePlayServices を参照しているプロジェクトで、<code>Android.Gms.Location.LocationClient</code> などが使えるようになります。（Xamarin Studio を再起動しないとコード入力補完(Inteli先生 というのか？) に認識されないみたいですが。）</p>\n",
      "date_published": "2013-05-27T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/23/getting-started-fused-location-provider/",
      "url": "https://blog.amay077.net/blog/2013/05/23/getting-started-fused-location-provider/",
      "title": "Google I/O 2013 で発表された Fused Location Provider を使ってみる",
      "content_html": "<p><a href=\"http://amay077.github.io/blog/2013/05/18/getting-started-activity-recognition/\">Activity Recognition</a> に続いて使ってみました。</p>\n<!--more-->\n<h2 id=\"fused-location-provider-%E3%81%A8%E3%81%AF%EF%BC%9F\">Fused Location Provider とは？ <a class=\"direct-link\" href=\"#fused-location-provider-%E3%81%A8%E3%81%AF%EF%BC%9F\">#</a></h2>\n<p>GPS と WiFi とセンサー(加速度など) を組み合わせて、その状況に応じた最適な方法で位置を取得出来ます。今までよりも低消費電力で、精度のよい位置情報を。</p>\n<p>実際どんな感じかは、Google I/O 2013 のセッション動画にある <a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=URcVZybzMUI#t=733s\">Fused Location Provider のデモ</a> を見てください。</p>\n<p>次から使い方です。</p>\n<h2 id=\"1.-sdk-%E3%81%AE-google-play-services-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B\">1. SDK の Google Play Services を更新する <a class=\"direct-link\" href=\"#1.-sdk-%E3%81%AE-google-play-services-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B\">#</a></h2>\n<p><img src=\"/img/posts/getting_started_activity_recognition1.png\" alt=\"image1\"></p>\n<p>Activity Recognition と同じく Google Play services として提供されているので、SDK Manager でライブラリを更新します。</p>\n<h2 id=\"2.-eclipse-%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">2. Eclipse でプロジェクトを作る <a class=\"direct-link\" href=\"#2.-eclipse-%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>Android Studio は使ってません(まだよくわからないので)<br>\nEclipse で、いつもどおりに Android のプロジェクトを作ります。<br>\nFragment も使いませんよ、古きよき、BlankActivity なプロジェクトです。<br>\n名前はここでは FusedLocationProviderSample とします。</p>\n<h2 id=\"3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-google-play-services_lib-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">3. プロジェクトに google-play-services_lib を追加する <a class=\"direct-link\" href=\"#3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-google-play-services_lib-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Google Play services を使うために、SDK のフォルダにある google-play-services_lib が必要です。</p>\n<p>Ecplise の Import で <code>{your sdk location}/extras/google/google_play_services/libproject/google-play-services_lib</code> を選択します。自分の Workspace に Copy しておいた方が無難でしょう。</p>\n<p>コピーしたら、FusedLocationProviderSample で、 google-play-services_lib をライブラリ参照します。</p>\n<p><img src=\"/img/posts/getting_started_activity_recognition2.png\" alt=\"image2\"></p>\n<p>次から FusedLocationProviderSample の実装です。</p>\n<h2 id=\"4.-androidmanifest.xml-%E3%81%AE%E7%B7%A8%E9%9B%86\">4. AndroidManifest.xml の編集 <a class=\"direct-link\" href=\"#4.-androidmanifest.xml-%E3%81%AE%E7%B7%A8%E9%9B%86\">#</a></h2>\n<p>Fused Location Provider を使うのには今まで通り、<code>ACCESS_FINE_LOCATION</code> と <code>ACCESS_COARSE_LOCATION</code> を設定します。</p>\n<p>LocationClient は、指定した PERMISSION に応じてよしなに動いてくれるそうです。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.fusedlocationprovidersample<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionCode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-sdk</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>minSdkVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>targetSdkVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>17<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.ACCESS_FINE_LOCATION<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.permission.ACCESS_COARSE_LOCATION<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@drawable/ic_launcher<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.fusedlocationprovidersample.MainActivity<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>screenOrientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>portrait<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"5.-fused-location-provider-%E3%82%92%E4%BD%BF%E3%81%86\">5. Fused Location Provider を使う <a class=\"direct-link\" href=\"#5.-fused-location-provider-%E3%82%92%E4%BD%BF%E3%81%86\">#</a></h2>\n<p>ActivityRecognition は IntentService を使う必要があったために少々長いコードになりましたが、こちらは今までの <code>LocationProvider</code> が(も)使えるので、画面一つだけのシンプルなコードです。</p>\n<p>FusedLocationProvider を使うには、<a href=\"http://developer.android.com/reference/com/google/android/gms/location/LocationClient.html\">LocationClient</a> クラスを使います。</p>\n<p>大雑把な流れは:</p>\n<ol>\n<li>インスタンスを生成する<br>\nconnect を呼ぶ -&gt; ConnectionCallbacks.onConnected がコールバックされる</li>\n<li><a href=\"http://developer.android.com/reference/com/google/android/gms/location/LocationRequest.html\">LocationRequest</a> を指定して、requestLocationUpdates を呼ぶ。 -&gt; LocationListener.onLocationChanged が呼ばれる</li>\n</ol>\n<p>です。connect を呼んで onConnected を待つのと、位置取得条件が <code>LocationRequest</code> クラスになった以外は <code>LocationManager</code> と同じです。</p>\n<p>では、全コードです。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>fusedlocationprovidersample</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionResult</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GooglePlayServicesClient<span class=\"token punctuation\">.</span>ConnectionCallbacks</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GooglePlayServicesClient<span class=\"token punctuation\">.</span>OnConnectionFailedListener</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocationClient</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocationListener</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocationRequest</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Location</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Activity</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>\t<br>\t<span class=\"token comment\">// FusedLocationProvider 用の Client</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">LocationClient</span> _locationClient<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">TextView</span> _textResult<span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token comment\">// 以前と変わらない LocationListener</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">LocationListener</span> _locationListener <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocationListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLocationChanged</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">runOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> _textResult<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t            text <span class=\"token operator\">=</span> <span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hh:mm:ss.sss\"</span><span class=\"token punctuation\">,</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <br>\t\t                    <span class=\"token operator\">+</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">getLatitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span><br>\t\t                    <span class=\"token operator\">+</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">getLongitude</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span><br>\t\t                    <span class=\"token operator\">+</span> location<span class=\"token punctuation\">.</span><span class=\"token function\">getAccuracy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <br>\t\t                    <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> text<span class=\"token punctuation\">;</span><br><br>\t\t            _textResult<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t_textResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>text_result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">Button</span> buttonLocate <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button_locate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tbuttonLocate<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> _isStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_isStarted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token function\">startLocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\tbuttonLocate<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token function\">stopLocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\tbuttonLocate<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t<br>\t\t\t\t_isStarted <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>_isStarted<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">stopLocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startLocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t_locationClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocationClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onConnected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token comment\">// 2. 位置の取得開始！</span><br>\t\t\t\t<span class=\"token class-name\">LocationRequest</span> request <span class=\"token operator\">=</span> <span class=\"token class-name\">LocationRequest</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LocationRequest</span><span class=\"token punctuation\">.</span>PRIORITY_HIGH_ACCURACY<span class=\"token punctuation\">)</span><br>\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5秒おき</span><br>            \t_locationClient<span class=\"token punctuation\">.</span><span class=\"token function\">requestLocationUpdates</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> _locationListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDisconnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            \t_locationClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OnConnectionFailedListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onConnectionFailed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionResult</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token comment\">// 1. 位置取得サービスに接続！</span><br>\t\t_locationClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stopLocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_locationClient <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>_locationClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t_locationClient<span class=\"token punctuation\">.</span><span class=\"token function\">removeLocationUpdates</span><span class=\"token punctuation\">(</span>_locationListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t_locationClient<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// ConnectionCallbacks.onDisconnected が呼ばれるまで待った方がいい気がする</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"6.-%E5%8B%95%E3%81%8F%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F\">6. 動くのか！？ <a class=\"direct-link\" href=\"#6.-%E5%8B%95%E3%81%8F%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F\">#</a></h2>\n<p>HTC J(not蝶) で動かしてみました。</p>\n<p><img src=\"/img/posts/getting_started_fused_location_provider1.png\" alt=\"image3\"></p>\n<p>室内での結果ですが、最初 27m の精度だったのが、放っておくとどんどん精度が上がって行きました。が、地図に重ねてみないと実際合ってるのかよくわかりませんね。</p>\n<p>そのうち、地図に載せて検証してみたいです。</p>\n<h2 id=\"permission-%E3%81%A8-priority-%E3%81%A8%E7%B2%BE%E5%BA%A6%E3%81%AE%E8%A9%B1\">Permission と Priority と精度の話 <a class=\"direct-link\" href=\"#permission-%E3%81%A8-priority-%E3%81%A8%E7%B2%BE%E5%BA%A6%E3%81%AE%E8%A9%B1\">#</a></h2>\n<p>Permission と Priority の組み合わせで、位置の精度がどう変わるか、少し調べました。</p>\n<h3 id=\"fine_location%2Bcoarse_location-with-priority_high_accuracy\">FINE_LOCATION+COARSE_LOCATION with PRIORITY_HIGH_ACCURACY <a class=\"direct-link\" href=\"#fine_location%2Bcoarse_location-with-priority_high_accuracy\">#</a></h3>\n<p>GPS と WiFi と センサーフル活用。GPS が捕捉できなくても数十ｍの位置精度が概ね出るようです。</p>\n<h3 id=\"coarse_location-with-priority_high_accuracy\">COARSE_LOCATION with PRIORITY_HIGH_ACCURACY <a class=\"direct-link\" href=\"#coarse_location-with-priority_high_accuracy\">#</a></h3>\n<p>使えない。FINE_LOCATION が必要ってエラーになりました。</p>\n<h3 id=\"coarse_location-with-priority_balanced_power_accuracy\">COARSE_LOCATION with  PRIORITY_BALANCED_POWER_ACCURACY <a class=\"direct-link\" href=\"#coarse_location-with-priority_balanced_power_accuracy\">#</a></h3>\n<p>位置の精度が数km程度になりました。WiFi測位(従来の NETWORK_PROVIDER)よりも悪いです。うーんこれは期待はずれだなあ。</p>\n<p>結局、例えば屋内測位でしか使わないからGPS要らねって FINE_LOCATION を外すと、かえって精度が落ちるという事になります。(GPS使いませんPERMISSIONが欲しいな。。。)</p>\n<h2 id=\"%E3%81%8A%E3%81%BE%E3%81%91\">おまけ <a class=\"direct-link\" href=\"#%E3%81%8A%E3%81%BE%E3%81%91\">#</a></h2>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/android/releases#may_2013\">Google Maps Android API v2 Release Notes - Google Maps Android API v2 — Google Developers</a></li>\n</ul>\n<p>によると、Google Maps Android API v2 の [setMyLocationEnabled(true)](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap#setMyLocationEnabled(boolean)\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap#setMyLocationEnabled(boolean)</a> でも FusedLocationProvider が使われるようになったとのことです。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>公式のコンプリートな Getting Started は</p>\n<ul>\n<li><a href=\"http://developer.android.com/training/location/retrieve-current.html\">Retrieving the Current Location ｜ Android Developers</a></li>\n</ul>\n<p>にありますので、こちらを読まれた方が確実です。</p>\n<p>ここで作ったサンプルは、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/fusedlocationprovidersample\">amay077/fusedlocationprovidersample · GitHub</a></li>\n</ul>\n<p>に置いておきます。</p>\n",
      "date_published": "2013-05-23T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/20/digest-of-android-location-session-in-google-io2013/",
      "url": "https://blog.amay077.net/blog/2013/05/20/digest-of-android-location-session-in-google-io2013/",
      "title": "Google I/O 2013 の Android Location セッションまとめ",
      "content_html": "<p>これは、<a href=\"http://www.youtube.com/watch?v=URcVZybzMUI\">Google I/O 2013 - Beyond the Blue Dot: New Features in Android Location - YouTube</a> から主要な部分を切り出して勝手な解説を加えたものです。</p>\n<!--more-->\n<h2 id=\"%E6%99%82%E9%96%93%E3%81%8C%E3%81%AA%E3%81%84%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB\">時間がない人のために <a class=\"direct-link\" href=\"#%E6%99%82%E9%96%93%E3%81%8C%E3%81%AA%E3%81%84%E4%BA%BA%E3%81%AE%E3%81%9F%E3%82%81%E3%81%AB\">#</a></h2>\n<p>このセッションは、Android に追加された「Fused Location Provider」「Geofencing」「Activity Recognition」に関するお話です。</p>\n<p>これらの３つのデモだけ見れば、だいたい「すげー」ってなるかと。</p>\n<ul>\n<li>\n<p><a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=URcVZybzMUI#t=733s\">Fused Location Provider のデモ</a></p>\n</li>\n<li>\n<p><a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=URcVZybzMUI#t=1195s\">Geofencing のデモ</a></p>\n</li>\n<li>\n<p><a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=URcVZybzMUI#t=1661s\">Activity Recognition のデモ</a></p>\n</li>\n</ul>\n<p>で、これらの機能は Google Play services として提供されるので、新しい端末を待たなくても<strong>今日から使えます</strong>よ、と。</p>\n<h2 id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">はじめに <a class=\"direct-link\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">#</a></h2>\n<p>タイトルは「Beyond the Blue Dot」、Blue Dot とは…デモを観たら分かります。</p>\n<p><img src=\"/img/posts/google_io_android_location_001.png\" alt=\"&quot;1&quot;\"></p>\n<p>Intro&amp;Closing 担当の Waleed さん(右)と、Deep Dive してくれる Jaikumar さん(左)</p>\n<p><img src=\"/img/posts/google_io_android_location_002.png\" alt=\"2\"></p>\n<p>基本として、各種測位技術の比較表を。</p>\n<p><img src=\"/img/posts/google_io_android_location_008.png\" alt=\"8\"></p>\n<h2 id=\"fused-location-provider\">Fused Location Provider <a class=\"direct-link\" href=\"#fused-location-provider\">#</a></h2>\n<p>Intro を早々に飛ばして、ここから各機能の詳細説明。</p>\n<p>まず、現在の Location 周りの構成図。これが…</p>\n<p><img src=\"/img/posts/google_io_android_location_009.png\" alt=\"9\"></p>\n<p>こうなる。今までのレイヤの上に Google Play-services として構成される。</p>\n<p><img src=\"/img/posts/google_io_android_location_017.png\" alt=\"17\"></p>\n<p>さあてお待ちかねのデモ。</p>\n<p>まずは、実際の経路(緑) vs GPS(黄色)</p>\n<p>画像だけだと若干分かりづらいけど、屋内はすっ飛ばされてる。</p>\n<p><img src=\"/img/posts/google_io_android_location_018.png\" alt=\"18\"></p>\n<p>次、緑 vs WiFi測位(赤)</p>\n<p>もう、カックカクなのであります。</p>\n<p><img src=\"/img/posts/google_io_android_location_019.png\" alt=\"19\"></p>\n<p>そして、緑 vs Fused Location Provider(青 the Blue Dot)</p>\n<p>屋外は GPS によるスムースな軌跡、屋内は WiFi＋センサーによる自律測位で十分に滑らか。入出、退出時の切り替えも自動で行われる。(拍手！)</p>\n<p><img src=\"/img/posts/google_io_android_location_020.png\" alt=\"20\"></p>\n<p>使い方。</p>\n<p><a href=\"http://developer.android.com/reference/com/google/android/gms/location/LocationClient.html\">LocationClient</a> というのが増えてるので、それを使います。</p>\n<p><code>connect</code> した後は、<code>LocationListener</code> が使えます。(注:<code>android.location.LocationListener</code> ではなく新しい <code>com.google.android.gms.location.LocationListener</code> でした)</p>\n<p><img src=\"/img/posts/google_io_android_location_021.png\" alt=\"21\"></p>\n<p><img src=\"/img/posts/google_io_android_location_022.png\" alt=\"22\"></p>\n<p>[setPriority](<a href=\"http://developer.android.com/reference/com/google/android/gms/location/LocationRequest.html#setPriority(int)\">http://developer.android.com/reference/com/google/android/gms/location/LocationRequest.html#setPriority(int)</a> で電池消費と精度をコントロールできるとのこと。</p>\n<p><img src=\"/img/posts/google_io_android_location_024.png\" alt=\"24\"></p>\n<h2 id=\"geofencing\">Geofencing <a class=\"direct-link\" href=\"#geofencing\">#</a></h2>\n<p>次のトピック、ジオフェンシング。</p>\n<p>さっそくデモから。</p>\n<p>ジオフェンスが２つ仕掛けてあって、自車がフェンス内に入ると色が変わるというもの。</p>\n<p><img src=\"/img/posts/google_io_android_location_026.png\" alt=\"26\"></p>\n<p>使い方。</p>\n<p>同じく <code>LocationClient</code> から。<br>\n結果は IntentService で受け取ります。</p>\n<p><img src=\"/img/posts/google_io_android_location_028.png\" alt=\"28\"></p>\n<p>そして嬉しいのがコレ。</p>\n<p>消費電力が今までの 1/3 になってるとのことです。<br>\n実は、ジオフェンシングの機能自体は [addProximityAlert](<a href=\"http://developer.android.com/reference/android/location/LocationManager.html#addProximityAlert\">http://developer.android.com/reference/android/location/LocationManager.html#addProximityAlert</a>(double, double, float, long, android.app.PendingIntent) という形で既存だったのです(存在は知ってたが使ったこと無い)。</p>\n<p>ユーザーの大雑把な場所や、現在の状態(歩いてるのか留まっているのか)やら、ハードウェアに直接処理させているので実現できた、とか言ってるみたいです。</p>\n<p><img src=\"/img/posts/google_io_android_location_030.png\" alt=\"30\"></p>\n<h2 id=\"activity-recognition\">Activity Recognition <a class=\"direct-link\" href=\"#activity-recognition\">#</a></h2>\n<p>最後のトピック、行動(状態)認識。</p>\n<p>乗り物、徒歩、留まってる、自転車 を判別できます。</p>\n<p><img src=\"/img/posts/google_io_android_location_032.png\" alt=\"32\"></p>\n<p>これはライブデモ。<br>\n自転車と認識されているのは…</p>\n<p><img src=\"/img/posts/google_io_android_location_040.png\" alt=\"40\"></p>\n<p>…マークさんの実演でしたー。(会場ここが一番盛り上がってた)</p>\n<p><img src=\"/img/posts/google_io_android_location_041.png\" alt=\"41\"></p>\n<p>そして使い方、<br>\n<a href=\"http://developer.android.com/reference/com/google/android/gms/location/ActivityRecognitionClient.html\">ActivityRecognitionClient</a> というのを使います。<br>\nこれは早速使ってみたのでこちらもご参考に。</p>\n<ul>\n<li><a href=\"http://amay077.github.io/blog/2013/05/18/getting-started-activity-recognition/\">Google I/O 2013 で発表された行動認識(Activity Recognition)を使ってみる - Experiments Never Fail</a></li>\n</ul>\n<p><img src=\"/img/posts/google_io_android_location_043.png\" alt=\"43\"></p>\n<p><img src=\"/img/posts/google_io_android_location_044.png\" alt=\"44\"></p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Waleed さんに戻ってまとめなど。</p>\n<p>Google Play-services で提供してるから、使うなら？「今でしょ！」(言ってません)。<br>\nこれからも、消費電力・精度・使える場所(?) を改良していくぜい、とのこと。</p>\n<p><img src=\"/img/posts/google_io_android_location_049.png\" alt=\"49\"></p>\n<p>どうもありがとうございました。</p>\n<p><img src=\"/img/posts/google_io_android_location_050.png\" alt=\"50\"></p>\n<h2 id=\"%E9%9B%91%E6%84%9F\">雑感 <a class=\"direct-link\" href=\"#%E9%9B%91%E6%84%9F\">#</a></h2>\n<p>Fused Location Provider(GPS+WiFi+自律測位)は、カーナビ(GPS+自律測位)では普通に行われているものの、あちらは道路の上という縛りがあるのに対し、こちらはフリーダムな移動を処理しなければならないのですが、実用レベルの API を、誰でも使える形で提供してくる Google さん怖すぎ。</p>\n<p>国内でも大学とかベンチャーが頑張って屋内測位とか行動認識技術開発してるので、ぜひがんばってください。</p>\n<p>「なぜ Google Play-services で提供するのか？」に:</p>\n<ul>\n<li>既存デバイスにも対応できる</li>\n<li>短いサイクルでリリースできる</li>\n</ul>\n<p>などのメリットを説明していましたが、その後ツイッターで、</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"ja\"><p>@<a href=\"https://twitter.com/amay077\">amay077</a> おおー、参考になりました。ありがとうございます。ところで、これGooglePlayクラスのしただったのね。業務用のタブレットやスマホだとGooglePlay使えないから、ちょっと残念。</p>&mdash; new hirofumi hayashiさん (@picaosgeo) <a href=\"https://twitter.com/picaosgeo/status/335587102043549696\">2013年5月18日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>というやりとりをして気づきました。Google Play-services って「(オープンソースとしての)Android」じゃないのねーと(まあこれほどの技術の内部を公開なんて普通に考えてもありえない話ですが)。</p>\n<p><strong>「Google Play-services が使えない端末では利用できない」</strong> というのは割と盲点になりそうです(Kindle もダメだよね、たぶん。しかしエミュレータですら使えないのは何とかして欲しい)。</p>\n<p><a href=\"http://itpro.nikkeibp.co.jp/article/COLUMN/20130321/464924/\">Chrome との統合がうわさされる Android</a> ですが、Android の名を冠していない Google Play-services が充実していくのは、その流れなのかも知れませんね。</p>\n",
      "date_published": "2013-05-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/18/getting-started-activity-recognition/",
      "url": "https://blog.amay077.net/blog/2013/05/18/getting-started-activity-recognition/",
      "title": "Google I/O 2013 で発表された行動認識(Activity Recognition)を使ってみる",
      "content_html": "<p><a href=\"http://www.gizmodo.jp/2013/05/android_52.html\">Google I/O で発表</a>された Android の行動認識(動作認識)機能ですが、これは <a href=\"http://developer.android.com/google/play-services/index.html\">Google Play Services</a> で提供されているので、新しい API Ver でなくても(Froyo でも！)使えます、すばらしい！</p>\n<p>というわけで、早速使ってみました。</p>\n<!--more-->\n<h2 id=\"1.-sdk-%E3%81%AE-google-play-services-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B\">1. SDK の Google Play Services を更新する <a class=\"direct-link\" href=\"#1.-sdk-%E3%81%AE-google-play-services-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B\">#</a></h2>\n<p><img src=\"/img/posts/getting_started_activity_recognition1.png\" alt=\"image1\"></p>\n<p>SDK Manager で、Google Play service を最新に更新します。<br>\n私は勢いで Android SDK Tools なども最新にしてしまいましたが、これが必要だったかは定かでないです。また SDK Tools を更新したら Eclipse のプラグインも更新する必要がありました。</p>\n<h2 id=\"2.-eclipse-%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">2. Eclipse でプロジェクトを作る <a class=\"direct-link\" href=\"#2.-eclipse-%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>Android Studio は使ってません(まだよくわからないので)<br>\nEclipse で、いつもどおりに Android のプロジェクトを作ります。<br>\nFragment も使いませんよ、古きよき、BlankActivity なプロジェクトです。<br>\n名前はここでは <code>ActivityRecognizingSample</code> とします。</p>\n<h2 id=\"3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-google-play-services_lib-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">3. プロジェクトに google-play-services_lib を追加する <a class=\"direct-link\" href=\"#3.-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-google-play-services_lib-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>Google Play services を使うために、SDK のフォルダにある google-play-services_lib が必要です。</p>\n<p>Ecplise の Import で <code>{your sdk location}/extras/google/google_play_services/libproject/google-play-services_lib</code> を選択します。自分の Workspace に Copy しておいた方が無難でしょう。</p>\n<p>コピーしたら、ActivityRecognizingSample で、 google-play-services_lib をライブラリ参照します。</p>\n<p><img src=\"/img/posts/getting_started_activity_recognition2.png\" alt=\"image2\"></p>\n<p>次から ActivityRecognizingSample の実装です。</p>\n<h2 id=\"4.-intentservice-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E7%94%A8%E6%84%8F\">4. IntentService クラスの用意 <a class=\"direct-link\" href=\"#4.-intentservice-%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E7%94%A8%E6%84%8F\">#</a></h2>\n<p>行動認識結果は IntentService で受け取ります。そのためのクラス <code>ReceiveRecognitionIntentService</code> を作成します。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>activityrecognizingsample</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntentService</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReceiveRecognitionIntentService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IntentService</span> <span class=\"token punctuation\">{</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ReceiveRecognitionIntentService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReceiveRecognitionIntentService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onHandleIntent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Intent</span> intent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// まだ未実装</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"5.-androidmanifest.xml-%E3%81%AE%E7%B7%A8%E9%9B%86\">5. AndroidManifest.xml の編集 <a class=\"direct-link\" href=\"#5.-androidmanifest.xml-%E3%81%AE%E7%B7%A8%E9%9B%86\">#</a></h2>\n<p>行動認識を使うための権限 <code>com.google.android.gms.permission.ACTIVITY_RECOGNITION</code> をマニフェストに追加します。<br>\nあと、ReceiveRecognitionIntentService も忘れずに追加しておきます。<br>\n細かいところでは、MainActivity の画面の向きを縦（Portrait）に固定しておきます。試している時に画面の向きが変わると面倒なので。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.activityrecognizingsample<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionCode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-sdk</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>minSdkVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>targetSdkVersion</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>17<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-permission</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.google.android.gms.permission.ACTIVITY_RECOGNITION<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>allowBackup</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>icon</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@drawable/ic_launcher<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><br>        <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>theme</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@style/AppTheme<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>activity</span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MainActivity<span class=\"token punctuation\">\"</span></span><br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span> <br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>screenOrientation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>portrait<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>action</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.action.MAIN<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>category</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>android.intent.category.LAUNCHER<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>intent-filter</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>activity</span><span class=\"token punctuation\">></span></span><br>        <br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>service</span> <br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.ReceiveRecognitionIntentService<span class=\"token punctuation\">\"</span></span>   <br>            <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>@string/app_name<span class=\"token punctuation\">\"</span></span><br>    \t\t<span class=\"token attr-name\"><span class=\"token namespace\">android:</span>exported</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>false<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"6.-%E8%A1%8C%E5%8B%95%E8%AA%8D%E8%AD%98%E3%82%AF%E3%83%A9%E3%82%B9(activityrecognitionclient)%E3%82%92%E4%BD%BF%E3%81%86\">6. 行動認識クラス(ActivityRecognitionClient)を使う <a class=\"direct-link\" href=\"#6.-%E8%A1%8C%E5%8B%95%E8%AA%8D%E8%AD%98%E3%82%AF%E3%83%A9%E3%82%B9(activityrecognitionclient)%E3%82%92%E4%BD%BF%E3%81%86\">#</a></h2>\n<p>ここから、一気に行きます。</p>\n<p>行動認識には <a href=\"http://developer.android.com/reference/com/google/android/gms/location/ActivityRecognitionClient.html\"><code>ActivityRecognitionClient</code></a> を使います。</p>\n<p>大雑把な使い方は、</p>\n<ol>\n<li>インスタンスを生成する</li>\n<li><code>connect</code> を呼ぶ -&gt; <code>ConnectionCallbacks.onConnected</code> がコールバックされる</li>\n<li><code>requestActivityUpdates</code> に <code>ReceiveRecognitionIntentService</code> を仕掛けて、呼ぶ。 -&gt; <code>ReceiveRecognitionIntentService.onHandleIntent</code> が呼ばれる</li>\n<li><code>onHandleIntent</code> で <code>ActivityRecognitionResult</code> にて結果を取得する</li>\n</ol>\n<p>です。</p>\n<p>その後、認識結果を画面に表示するために、</p>\n<ol start=\"5\">\n<li>予め、<code>MainActivity</code> に <code>BroadcastReceiver</code> を仕掛けておく</li>\n<li><code>ReceiveRecognitionIntentService.onHandleIntent</code> で取得した認識結果を、Broadcast する。</li>\n</ol>\n<p>とします。</p>\n<p>では全コードをどうぞ。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>activityrecognizingsample</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ConnectionResult</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GooglePlayServicesClient<span class=\"token punctuation\">.</span>ConnectionCallbacks</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">GooglePlayServicesClient<span class=\"token punctuation\">.</span>OnConnectionFailedListener</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActivityRecognitionClient</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>os<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Bundle</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Activity</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">PendingIntent</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">BroadcastReceiver</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Intent</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntentFilter</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Menu</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">View</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>widget<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">ActivityRecognitionClient</span> _recClient<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 行動認識のメインクラス</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">TextView</span> _textResult<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 認識結果を表示するところ</span><br>\t<br>\t<span class=\"token comment\">// 認識結果は PendingIntent で通知してくれる</span><br>\t<span class=\"token comment\">//  PendingIntent に、Service を起動する Intent を仕込んでおいて、</span><br>\t<span class=\"token comment\">//  認識結果の取得はそっちで行う。 > ReceiveRecognitionIntentService.java</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PendingIntent</span> _receiveRecognitionIntent<span class=\"token punctuation\">;</span> <br>    <br>    <span class=\"token comment\">// ReceiveRecognitionIntentService で取得した認識結果は、Broadcast で通知されるので、</span><br>    <span class=\"token comment\">// それを受け取る Receiver 。ここで画面に認識結果を表示する。</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">BroadcastReceiver</span> _receiveFromIntentService <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BroadcastReceiver</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReceive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Intent</span> intent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> activityType <span class=\"token operator\">=</span> intent<span class=\"token punctuation\">.</span><span class=\"token function\">getIntExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"activity_type\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> confidence <span class=\"token operator\">=</span> intent<span class=\"token punctuation\">.</span><span class=\"token function\">getIntExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"confidence\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> time <span class=\"token operator\">=</span> intent<span class=\"token punctuation\">.</span><span class=\"token function\">getLongExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">runOnUiThread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token class-name\">String</span> text <span class=\"token operator\">=</span> _textResult<span class=\"token punctuation\">.</span><span class=\"token function\">getText</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\ttext <span class=\"token operator\">=</span> <span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hh:mm:ss.sss\"</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <br>\t\t\t\t\t\t\t<span class=\"token operator\">+</span> <span class=\"token function\">getNameFromType</span><span class=\"token punctuation\">(</span>activityType<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"(\"</span> <span class=\"token operator\">+</span><br>\t\t\t\t\t\t\t<span class=\"token operator\">+</span> confidence <span class=\"token operator\">+</span> <span class=\"token string\">\")\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> text<span class=\"token punctuation\">;</span><br>\t\t\t\t\t<br>\t\t\t\t\t_textResult<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token comment\">// http://developer.android.com/training/location/activity-recognition.html</span><br>\t\t<span class=\"token comment\">// からパクってきた関数</span><br>\t\t <span class=\"token comment\">/**<br>\t     * Map detected activity types to strings<br>\t     *@param activityType The detected activity type<br>\t     *@return A user-readable name for the type<br>\t     */</span><br>\t    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getNameFromType</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> activityType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>activityType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t            <span class=\"token keyword\">case</span> <span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">.</span>IN_VEHICLE<span class=\"token operator\">:</span><br>\t                <span class=\"token keyword\">return</span> <span class=\"token string\">\"in_vehicle\"</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token keyword\">case</span> <span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">.</span>ON_BICYCLE<span class=\"token operator\">:</span><br>\t                <span class=\"token keyword\">return</span> <span class=\"token string\">\"on_bicycle\"</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token keyword\">case</span> <span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">.</span>ON_FOOT<span class=\"token operator\">:</span><br>\t                <span class=\"token keyword\">return</span> <span class=\"token string\">\"on_foot\"</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token keyword\">case</span> <span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">.</span>STILL<span class=\"token operator\">:</span><br>\t                <span class=\"token keyword\">return</span> <span class=\"token string\">\"still\"</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token keyword\">case</span> <span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">.</span>UNKNOWN<span class=\"token operator\">:</span><br>\t                <span class=\"token keyword\">return</span> <span class=\"token string\">\"unknown\"</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token keyword\">case</span> <span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">.</span>TILTING<span class=\"token operator\">:</span><br>\t                <span class=\"token keyword\">return</span> <span class=\"token string\">\"tilting\"</span><span class=\"token punctuation\">;</span><br>\t        <span class=\"token punctuation\">}</span><br>\t        <span class=\"token keyword\">return</span> <span class=\"token string\">\"unknown - \"</span> <span class=\"token operator\">+</span> activityType<span class=\"token punctuation\">;</span><br>\t    <span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        _textResult <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">TextView</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>text_results<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token comment\">// IntentService から Broadcast される認識結果を受け取るための Receiver を登録しておく</span><br>        <span class=\"token function\">registerReceiver</span><span class=\"token punctuation\">(</span>_receiveFromIntentService<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntentFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive_recognition\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <br>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Button</span> buttonStart <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>button_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        buttonStart<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        \t<span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> _isStarted <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        \t<br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<br>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_isStarted<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token function\">startReckoning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\tbuttonStart<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token function\">stopReckoning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\tbuttonStart<span class=\"token punctuation\">.</span><span class=\"token function\">setText</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t<br>\t\t\t\t_isStarted <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>_isStarted<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token function\">stopReckoning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// ConnectionCallbacks.onDisconnected が呼ばれるまで待った方がいい気がする</span><br>    \t<span class=\"token function\">unregisterReceiver</span><span class=\"token punctuation\">(</span>_receiveFromIntentService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onDestroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">startReckoning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t_recClient <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ActivityRecognitionClient</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ConnectionCallbacks</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onConnected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token class-name\">Intent</span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span><br>\t\t                <span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ReceiveRecognitionIntentService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t_receiveRecognitionIntent <span class=\"token operator\">=</span> <span class=\"token class-name\">PendingIntent</span><span class=\"token punctuation\">.</span><span class=\"token function\">getService</span><span class=\"token punctuation\">(</span><br>\t\t\t\t\t\t<span class=\"token class-name\">MainActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> intent<span class=\"token punctuation\">,</span><br>\t\t                <span class=\"token class-name\">PendingIntent</span><span class=\"token punctuation\">.</span>FLAG_UPDATE_CURRENT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<br>\t\t\t\t<span class=\"token comment\">// 2. 行動認識開始！</span><br>\t\t\t\t<span class=\"token comment\">//  1秒間隔で認識間隔を通知。</span><br>\t\t\t\t<span class=\"token comment\">//  認識したら ReceiveRecognitionIntentService が呼び出されるようにしている。</span><br>\t\t\t\t_recClient<span class=\"token punctuation\">.</span><span class=\"token function\">requestActivityUpdates</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> _receiveRecognitionIntent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br><br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onDisconnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t_recClient <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NOTE disconnect してもここにこないよ？</span><br>\t\t\t<span class=\"token punctuation\">}</span><br><br>    \t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OnConnectionFailedListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onConnectionFailed</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ConnectionResult</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token comment\">// 接続でエラーが発生したらここにくるらしい</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<br>    \t<span class=\"token comment\">// 1. 行動認識サービスに接続！</span><br>    \t_recClient<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">stopReckoning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_recClient <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>_recClient<span class=\"token punctuation\">.</span><span class=\"token function\">isConnected</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    \t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>    \t<span class=\"token punctuation\">}</span><br>    \t<br>    \t_recClient<span class=\"token punctuation\">.</span><span class=\"token function\">removeActivityUpdates</span><span class=\"token punctuation\">(</span>_receiveRecognitionIntent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t_recClient<span class=\"token punctuation\">.</span><span class=\"token function\">disconnect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t\t<span class=\"token comment\">// ConnectionCallbacks.onDisconnected が呼ばれるまで待った方がいい気がする</span><br>    <span class=\"token punctuation\">}</span><br>    <br>    <br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>activityrecognizingsample</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ActivityRecognitionResult</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>google<span class=\"token punctuation\">.</span>android<span class=\"token punctuation\">.</span>gms<span class=\"token punctuation\">.</span>location<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DetectedActivity</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>app<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">IntentService</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>content<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Intent</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">import</span> <span class=\"token namespace\">android<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Log</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">/**<br> * 行動認識結果を取得するための IntentService <br> * <br> * ActivityRecognitionClient.requestActivityUpdates に仕込んでおくと<br> * 認識結果を受信する度にこれが呼ばれる。<br> * <br> */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ReceiveRecognitionIntentService</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">IntentService</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> TAG <span class=\"token operator\">=</span> <span class=\"token string\">\"ReceiveRecognitionIntentService\"</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ReceiveRecognitionIntentService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ReceiveRecognitionIntentService\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onHandleIntent</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Intent</span> intent<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token class-name\">ActivityRecognitionResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasResult</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 行動認識結果持ってないよ</span><br>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token comment\">// 認識結果を取得する</span><br>\t\t<span class=\"token class-name\">ActivityRecognitionResult</span> result <span class=\"token operator\">=</span> <br>\t\t\t\t<span class=\"token class-name\">ActivityRecognitionResult</span><span class=\"token punctuation\">.</span><span class=\"token function\">extractResult</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token class-name\">DetectedActivity</span> mostProbableActivity <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getMostProbableActivity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> activityType <span class=\"token operator\">=</span> mostProbableActivity<span class=\"token punctuation\">.</span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> confidence <span class=\"token operator\">=</span> mostProbableActivity<span class=\"token punctuation\">.</span><span class=\"token function\">getConfidence</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Receive recognition.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\" activityType - \"</span> <span class=\"token operator\">+</span> activityType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 行動タイプ</span><br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\" confidence - \"</span> <span class=\"token operator\">+</span> confidence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 確実性（精度みたいな）</span><br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\" time - \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hh:mm:ss.sss\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 時間</span><br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\" elapsedTime - \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hh:mm:ss.sss\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getElapsedRealtimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// よく分からん</span><br><br>\t\t<span class=\"token comment\">// 画面に結果を表示するために、Broadcast で通知。</span><br>\t\t<span class=\"token comment\">//  MainActivity にしかけた BroadcastReceiver で受信する。</span><br>\t\t<span class=\"token class-name\">Intent</span> notifyIntent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"receive_recognition\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tnotifyIntent<span class=\"token punctuation\">.</span><span class=\"token function\">setPackage</span><span class=\"token punctuation\">(</span><span class=\"token function\">getPackageName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tnotifyIntent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"activity_type\"</span><span class=\"token punctuation\">,</span> activityType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tnotifyIntent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"confidence\"</span><span class=\"token punctuation\">,</span> confidence<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tnotifyIntent<span class=\"token punctuation\">.</span><span class=\"token function\">putExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"time\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token function\">sendBroadcast</span><span class=\"token punctuation\">(</span>notifyIntent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"7.-%E5%8B%95%E3%81%8F%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F\">7. 動くのか！？ <a class=\"direct-link\" href=\"#7.-%E5%8B%95%E3%81%8F%E3%81%AE%E3%81%8B%EF%BC%81%EF%BC%9F\">#</a></h2>\n<p>HTC J(not蝶) で動かしてみました。</p>\n<p><img src=\"/img/posts/getting_started_activity_recognition3.jpg\" alt=\"image3\"></p>\n<p>on_foot ってのが「歩いてる」ってやつですね。<br>\n感覚としてはズボンの尻ポケに入れて、5mくらいは歩かないと認識されない感じ。結構 unknown が多いですね。</p>\n<p>クルマは、ダッシュボードに放置して運転してみたもの。開始から１分経たずに認識できています。</p>\n<p>自転車は、最初クルマと誤認したものの、その後認識しました。</p>\n<p>ここでは教科書通りの使い方をしましたが、なかなか感動します。</p>\n<h3 id=\"2013.5.21%E8%BF%BD%E8%A8%98-%E9%9B%BB%E8%BB%8A%E3%81%A0%E3%81%A8%E3%81%A9%E3%81%86%E3%81%AA%E3%82%8B%EF%BC%9F\">2013.5.21追記 電車だとどうなる？ <a class=\"direct-link\" href=\"#2013.5.21%E8%BF%BD%E8%A8%98-%E9%9B%BB%E8%BB%8A%E3%81%A0%E3%81%A8%E3%81%A9%E3%81%86%E3%81%AA%E3%82%8B%EF%BC%9F\">#</a></h3>\n<p>東京に出張する機会があったので、新幹線と在来線でも試してみました。</p>\n<p><img src=\"/img/posts/getting_started_activity_recognition4.png\" alt=\"image4\"></p>\n<p>新幹線は窓側の席だったので、窓の机に端末を放置していました。<br>\n在来線は座ることができなかったので、立った状態で端末は尻ポケ、カベに持たれてなるべく動かないようにしていました。</p>\n<p>結果は、在来線ではなんとか vehicle と認識されましたが、新幹線では認識できませんでした。<br>\n恐らく、新幹線は揺れが少なすぎるのだと思います。優秀ですね、日本の新幹線。</p>\n<h3 id=\"2013.5.27-%E8%BF%BD%E8%A8%98-%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%82%92%E8%A8%B1%E5%8F%AF%E3%81%99%E3%82%8B%E3%81%A8%E7%B2%BE%E5%BA%A6%E3%81%8C%E4%B8%8A%E3%81%8C%E3%82%8B%EF%BC%9F\">2013.5.27 追記 位置情報を許可すると精度が上がる？ <a class=\"direct-link\" href=\"#2013.5.27-%E8%BF%BD%E8%A8%98-%E4%BD%8D%E7%BD%AE%E6%83%85%E5%A0%B1%E3%82%92%E8%A8%B1%E5%8F%AF%E3%81%99%E3%82%8B%E3%81%A8%E7%B2%BE%E5%BA%A6%E3%81%8C%E4%B8%8A%E3%81%8C%E3%82%8B%EF%BC%9F\">#</a></h3>\n<p><a href=\"https://twitter.com/sos_jp\">@sos_jp</a> さんの記事、</p>\n<ul>\n<li><a href=\"http://sos.hatenablog.jp/entry/2013/05/19/162122\">Google Play servicesの新機能 - Activity Recognition - sos の 作業メモ</a></li>\n</ul>\n<p>によりますと、</p>\n<blockquote>\n<p>位置情報があるとより正確な判定になるようです</p>\n</blockquote>\n<p>とのことなので、もしかしたら FINE(+COURSE)_LOCATION とか付けとくと新幹線でも vechicle と認識デキるかもしれません。いずれ試してみます。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>公式のコンプリートな Getting Started は</p>\n<ul>\n<li><a href=\"http://developer.android.com/training/location/activity-recognition.html\">Recognizing the User's Current Activity ｜ Android Developers</a></li>\n</ul>\n<p>にありますので、こちらを読まれた方が確実です。</p>\n<p>ここで作ったサンプルは、</p>\n<ul>\n<li><a href=\"https://github.com/amay077/androidactivityrecognizingsample\">amay077/androidactivityrecognizingsample · GitHub</a></li>\n</ul>\n<p>に置いておきます。</p>\n",
      "date_published": "2013-05-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/16/xamarin-android-fail-build-on-latest-android-sdk/",
      "url": "https://blog.amay077.net/blog/2013/05/16/xamarin-android-fail-build-on-latest-android-sdk/",
      "title": "Android SDK を最新の r22 にしたら、Xamarin.Android でビルドできなくなった件",
      "content_html": "<p><a href=\"https://developers.google.com/events/io/\">Google I/O 2013</a> で<a href=\"http://japanese.engadget.com/2013/05/15/google-i-o-2013/\">いろいろ発表</a>があったので、試してみたくなるのがエンジニアってもんでしょう。</p>\n<!--more-->\n<h2 id=\"2013.5.19-%E8%BF%BD%E8%A8%98\">2013.5.19 追記 <a class=\"direct-link\" href=\"#2013.5.19-%E8%BF%BD%E8%A8%98\">#</a></h2>\n<p>Xamarin.Android の 4.6.6 で Android SDK r22 に対応したので、この記事は無意味になりました。</p>\n<p><img src=\"/img/posts/xamarin_android_fail_build_on_latest_android_sdk5.png\" alt=\"image5\"></p>\n<p>アップデート後、r22 でも無事ビルドできるようになりました。</p>\n<h2 id=\"1.eclipse-%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\">1.Eclipse のエラー <a class=\"direct-link\" href=\"#1.eclipse-%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\">#</a></h2>\n<p>Keynote から一夜明け、Android SDK を r22 に更新しました。<br>\nするとまず、昨日までビルドできていた Java の Android のプロジェクトがビルドできなくなりました。</p>\n<p>この症状は、こちらのツイート:</p>\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p>状況・ライブラリプロジェクトを使用・r22 でビルドが死んだ対策・SDK Build-tools を入れた（antは復旧）・&lt;classpathentry combineaccessrules=\"false\" kind=\"src\" path=\"/hoge\"/&gt; 追加</p>&mdash; dmpさん (@dmp) <a href=\"https://twitter.com/dmp/status/334839819781955586\">2013年5月16日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>に加えて、<a href=\"http://developer.android.com/sdk/installing/installing-adt.html\">Eclipse の ADT Plugin</a> を更新することで解決できました。(私の場合、<code>&lt;classpathentry〜</code> は行わなくても大丈夫でした。［勝手に追加されてました］)</p>\n<h2 id=\"2.xamarin.android-%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\">2.Xamarin.Android のエラー <a class=\"direct-link\" href=\"#2.xamarin.android-%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC\">#</a></h2>\n<p>やれやれと思ったところで、こんなツイートが。</p>\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p>I know you are all eager to try the new stuff but since Google shuffled some binaries in the latest SDK, it breaks Xamarin.Android for now</p>&mdash; Jérémie Lavalさん (@jeremie_laval) <a href=\"https://twitter.com/jeremie_laval/status/334879715611529217\">2013年5月16日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>「Google が SDK の場所を替えたので、Xamarin.Android は今壊れてる(意訳)」とのことです。</p>\n<p>マジで？と思って、試してみると確かにビルド時にエラーががが。</p>\n<p><img src=\"/img/posts/xamarin_android_fail_build_on_latest_android_sdk1.png\" alt=\"image1\"></p>\n<blockquote>\n<p>Error: Error executing tool '/…/android-sdk-macosx/platform-tools/aapt':</p>\n</blockquote>\n<h2 id=\"%E3%81%9D%E3%81%97%E3%81%A6%E5%9B%9E%E9%81%BF%E3%81%B8\">そして回避へ <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%97%E3%81%A6%E5%9B%9E%E9%81%BF%E3%81%B8\">#</a></h2>\n<p>先のトラブルで、「SDK Build-tools が新しく追加された」=「今までの場所にはもうない」、つまり、エラーになっているのは aapt(Android のパッケージ作成ツール) が意図した場所に存在しないからでは？と考えられます。</p>\n<p>というわけで、 aapt はどこへ行ったのか、Android SDK のフォルダを Finder(エクスプローラ)で覗いてみます。</p>\n<p><img src=\"/img/posts/xamarin_android_fail_build_on_latest_android_sdk2.png\" alt=\"image2\"></p>\n<p>むう、確かに <code>/platform-tools</code> の中には <code>aapt</code> は存在せず、代わりに <code>/build-tools/17.0.0</code> の中にあります。</p>\n<p>Xamarin Studio の設定で、aapt の場所を /build-tools に変更できれば良かったのですが、残念ながら見つけられず、仕方ないので <code>/build-tools/17.0.0</code> 配下のファイルとフォルダを、 <code>/platform-tools</code> にコピーしました。</p>\n<p><img src=\"/img/posts/xamarin_android_fail_build_on_latest_android_sdk3.png\" alt=\"image3\"></p>\n<p>そして Xamarin Studio に戻り、もう一度ビルドを実行、無事ビルドできました。</p>\n<p><img src=\"/img/posts/xamarin_android_fail_build_on_latest_android_sdk4.png\" alt=\"image4\"></p>\n<p>近いうちに Xamarin さん側で対応してくれると思いますが、それまでのつなぎとして。</p>\n",
      "date_published": "2013-05-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/14/getting-the-most-from-xamarin-studio/",
      "url": "https://blog.amay077.net/blog/2013/05/14/getting-the-most-from-xamarin-studio/",
      "title": "Xamarin Studio の各部名称覚え書き",
      "content_html": "<p>正式名称が不明だったが、Evolve2013 の Video で紹介されてたのでそこだけキャプチャしてみた</p>\n<!--more-->\n<p><img src=\"/img/posts/getting_the_most_from_xamarin_studio.png\" alt=\"image1\"></p>\n<p>左サイドバー、<strong>Solution Pad</strong> って言うんだね。</p>\n<p>動画はこちら</p>\n<ul>\n<li><a href=\"http://xamarin.com/evolve/2013#session-9v0ezipgkx\">”Getting the Most from Xamarin Studio” / Evolve 2013 Conference – Xamarin</a></li>\n</ul>\n<p>あ、スライドもあった(汗</p>\n<ul>\n<li><a href=\"http://www.slideshare.net/Xamarin/getting-the-most-from-xamarin-studio-michael-hutchinson\">Getting the Most from Xamarin Studio - Michael Hutchinson by @xamarinhq on @slideshare</a></li>\n</ul>\n",
      "date_published": "2013-05-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/08/update-components-using-xamarin-studio/",
      "url": "https://blog.amay077.net/blog/2013/05/08/update-components-using-xamarin-studio/",
      "title": "Xamarin Studio でコンポーネントを更新する方法",
      "content_html": "<p>分かりにくかったのでメモ。</p>\n<!--more-->\n<p><a href=\"http://amay077.github.io/blog/2013/04/22/xamarin-ios-using-gmap-ios-sdk/\">以前</a>使ってみた <a href=\"http://components.xamarin.com/view/googlemapsios/\">Google Maps Component</a>、「Polygon や Circle がないなー、対応してないのかなー」と思って <a href=\"http://componentsapi.xamarin.com/?link=T%3aGoogle.Maps.Circle\">API Doc</a> 見たら存在してたので、いつの間にかバージョンアップしてたらしい、確かに手持ちのバージョンは「1.1.2」、Webサイトの方は「1.2.2」になってた。</p>\n<h2 id=\"component-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B\">Component を更新する <a class=\"direct-link\" href=\"#component-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>じゃあ更新するか、と思って Xamarin Studio で入り口を探すものの見つからない。<br>\n結局、メニュー -&gt; Get More Components から、Google Maps を検索しなおしたら、ボタンが「Update」になってたので、押したら更新された。</p>\n<p><img src=\"/img/posts/update_components_using_xamarin_studio1.png\" alt=\"image1\"></p>\n<h2 id=\"component-%E3%81%AB%E4%BB%98%E5%B1%9E%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%8C%E5%A2%97%E3%81%88%E3%81%A6%E3%81%9F\">Component に付属のサンプルが増えてた <a class=\"direct-link\" href=\"#component-%E3%81%AB%E4%BB%98%E5%B1%9E%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%8C%E5%A2%97%E3%81%88%E3%81%A6%E3%81%9F\">#</a></h2>\n<p>更新後、Samples を見てみたら、、、お、 <strong>iOS Advanced Sample</strong> というのが増えてる！きっとアドバンスドなサンプルなのでしょうな（試せよ</p>\n<p><img src=\"/img/posts/update_components_using_xamarin_studio2.png\" alt=\"image1\"></p>\n<h2 id=\"component-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%97%E3%81%9F%E3%82%89-api-%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7%E3%81%8C%E7%84%A1%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%9F\">Component を更新したら API の互換性が無くなってた <a class=\"direct-link\" href=\"#component-%E3%82%92%E6%9B%B4%E6%96%B0%E3%81%97%E3%81%9F%E3%82%89-api-%E3%81%AE%E4%BA%92%E6%8F%9B%E6%80%A7%E3%81%8C%E7%84%A1%E3%81%8F%E3%81%AA%E3%81%A3%E3%81%A6%E3%81%9F\">#</a></h2>\n<p>更新後、意気揚々と以前作ったサンプルをビルドしてみたらビルドエラーが。<br>\nどうやら <code>MapView.AddMarker</code> や <code>MarkerOption</code> が無くなって、<code>Marker</code> に MapView を設定するように変更されたらしい。(以下は、さっきのアドバンスドなサンプルからの抜粋)</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> ViewDidLoad <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span>ViewDidLoad <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> camera <span class=\"token operator\">=</span> CameraPosition<span class=\"token punctuation\">.</span>FromCamera <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">37.81969</span><span class=\"token punctuation\">,</span> <span class=\"token number\">144.966085</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> mapView <span class=\"token operator\">=</span> MapView<span class=\"token punctuation\">.</span>FromCamera <span class=\"token punctuation\">(</span>RectangleF<span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">,</span> camera<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> sydneyMarker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Marker</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"Sydney\"</span><span class=\"token punctuation\">,</span><br>\t\tSnippet <span class=\"token operator\">=</span> <span class=\"token string\">\"Population: 4,605,992\"</span><span class=\"token punctuation\">,</span><br>\t\tPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">33.8683</span><span class=\"token punctuation\">,</span> <span class=\"token number\">151.2086</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\tMap <span class=\"token operator\">=</span> mapView<br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> melbourneMarker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Marker</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tTitle <span class=\"token operator\">=</span> <span class=\"token string\">\"Melbourne\"</span><span class=\"token punctuation\">,</span><br>\t\tSnippet <span class=\"token operator\">=</span> <span class=\"token string\">\"Population: 4,169,103\"</span><span class=\"token punctuation\">,</span><br>\t\tPosition <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationCoordinate2D</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">37.81969</span><span class=\"token punctuation\">,</span> <span class=\"token number\">144.966085</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>\t\tMap <span class=\"token operator\">=</span> mapView<br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token comment\">// Set the marker in Sydney to be selected</span><br>\tmapView<span class=\"token punctuation\">.</span>SelectedMarker <span class=\"token operator\">=</span> sydneyMarker<span class=\"token punctuation\">;</span><br><br>\tView <span class=\"token operator\">=</span> mapView<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これは、元の Google Maps SDK for iOS が根源なのか、Google Maps の Xamarin Component がそうしたのか知りませんが、ReleaseNotes とかないのかな？うっかり更新すると怖いな。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>Component の Update は、 Get More Components から</li>\n<li>むやみに Update すると互換性なくなってるかもなのでバックアップというかバージョン管理ちゃんとしよう</li>\n<li>つまり Xamarin Components に ReleaseNotes 欲しいです</li>\n</ul>\n",
      "date_published": "2013-05-08T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/05/06/circle-on-google-maps-sdk/",
      "url": "https://blog.amay077.net/blog/2013/05/06/circle-on-google-maps-sdk/",
      "title": "Google Maps SDK(Android/iOS) で円を描く",
      "content_html": "<p><a href=\"https://developers.google.com/maps/documentation/android/\">Google Maps Android API v2</a> にいつの間にか <code>Circle</code> が追加されてました。<a href=\"https://developers.google.com/maps/documentation/ios/?hl=ja\">Google Maps SDK for iOS</a> も同様に。</p>\n<!--more-->\n<p>ということで使ってみました。なぜか Xamarin でｗ<br>\nとはいえ、Xamarin.Android の場合、GoogleMaps の jar からラッパーを生成しているので API は Java 版と(ほぼ)同じです。</p>\n<p>Xamarin.Android での Google Maps API v2 の使い方は、手前味噌ながら弊ブログをどうぞ。</p>\n<ul>\n<li><a href=\"http://amay077.github.com/blog/2013/03/05/xamarin-android-using-google-maps-android-api-v2/\">Xamarin.Android で Google Maps Android API v2 を使う - Experiments Never Fail</a></li>\n</ul>\n<p>今回も、<a href=\"https://github.com/xamarin/monodroid-samples/tree/master/MapsAndLocationDemo_v2/SimpleMapDemo\">monodroid-samples</a> をベースにします。</p>\n<p>SampleMapActivity.cs の、<a href=\"https://github.com/xamarin/monodroid-samples/blob/master/MapsAndLocationDemo_v2/SimpleMapDemo/SampleMapActivity.cs#L88\">ここら辺</a> に以下のコードを挿入します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> ICELAND <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">64.88</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">18.32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> LIBREVILLE <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.401</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9.459</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>_map<span class=\"token punctuation\">.</span><span class=\"token function\">AddCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CircleOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeCenter</span><span class=\"token punctuation\">(</span>ICELAND<span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeStrokeColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>Blue<span class=\"token punctuation\">.</span><span class=\"token function\">ToArgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5f</span><span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 500km</span><br><br>_map<span class=\"token punctuation\">.</span><span class=\"token function\">AddCircle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CircleOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeCenter</span><span class=\"token punctuation\">(</span>LIBREVILLE<span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeStrokeColor</span><span class=\"token punctuation\">(</span>Color<span class=\"token punctuation\">.</span>DarkGreen<span class=\"token punctuation\">.</span><span class=\"token function\">ToArgb</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeStrokeWidth</span><span class=\"token punctuation\">(</span><span class=\"token number\">5f</span><span class=\"token punctuation\">)</span><br>               <span class=\"token punctuation\">.</span><span class=\"token function\">InvokeRadius</span><span class=\"token punctuation\">(</span><span class=\"token number\">500000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 500km</span></code></pre>\n<p>Xamarin.Android と Java で違いは無いと言っておきながら、<br>\nJava では <code>new CircleOptions().center(…).storokeColor(…).</code> と書いていた所が、Xamarin では <code>new CircleOptions().InvokeCenter(…).InvokeStorokeColor(…).</code> になっていますね。[Xamarin の Binding a Java Library (.jar)](<a href=\"http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding_a_java_library_(.jar)\">http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/binding_a_java_library_(.jar)</a> 辺りに情報があるでしょうか。</p>\n<p>動かすとこんな感じになります。</p>\n<p><img src=\"/img/posts/circle_on_google_maps_sdk.png\" alt=\"image1\"></p>\n<p>北緯65度付近のアイスランドと、赤道付近のリーブルヴィルという所に、どちらも半径500kmの円を追加していますが、Googleマップはメルカトル表示なので、見ての通り北へ行くほど円が大きくなります。</p>\n<p>面白いのは「真円は保たれている事」ですね。逆台形っぽい曲線になるかと思ったのですが。</p>\n<p>円をポリゴナイズした多角形と重ねてみると違いが分かるかもしれません。</p>\n<h3 id=\"2013.5.8%E8%BF%BD%E8%A8%98%3A%E5%A4%A7%E3%81%8D%E3%81%AA%E5%86%86%E3%82%92%E6%8F%8F%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F\">2013.5.8追記:大きな円を描いて調べてみました <a class=\"direct-link\" href=\"#2013.5.8%E8%BF%BD%E8%A8%98%3A%E5%A4%A7%E3%81%8D%E3%81%AA%E5%86%86%E3%82%92%E6%8F%8F%E3%81%84%E3%81%A6%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%81%BE%E3%81%97%E3%81%9F\">#</a></h3>\n<p>大きな円を描いてみたら、ちゃんと geodesic な(北へいけばいくほど距離が長くなる)形状になりました。</p>\n<p><img src=\"/img/posts/circle-on-google-maps-sdk2.png\" alt=\"image2\"></p>\n",
      "date_published": "2013-05-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/26/using-isolatedstorage-in-xamarin/",
      "url": "https://blog.amay077.net/blog/2013/04/26/using-isolatedstorage-in-xamarin/",
      "title": "Xamarin.Android/iOS で IsolatedStorage を使う",
      "content_html": "<p>アプリの設定情報なんかを保存する時、Android では SharedPreference 、iOS では NSUserDefaults を使うわけですが、プラットフォーム毎にコード書くのめんどい！と思って</p>\n<!--more-->\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p><a href=\"https://twitter.com/search/%23Xamarin\">#Xamarin</a> さん、SharedPref/android と userDefaults/ios が共通のInterfaceで使えるコンポーネントが欲しいです</p>&mdash; あめい@ざまらーさん (@amay077) <a href=\"https://twitter.com/amay077/status/326942931028148224\">2013年4月24日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>とツイートしたところ、Xamarin の中の人である <a href=\"https://twitter.com/atsushieno\">@atsushieno</a> さんから、</p>\n<blockquote class=\"twitter-tweet\" data-conversation=\"none\" lang=\"ja\"><p>IsolatedStorageじゃダメなんでしょうか? RT @<a href=\"https://twitter.com/amay077\">amay077</a>: <a href=\"https://twitter.com/search/%23Xamarin\">#Xamarin</a> さん、SharedPref/android と userDefaults/ios が共通のInterfaceで使えるコンポーネントが欲しいです</p>&mdash; Atsushi Enoさん (@atsushieno) <a href=\"https://twitter.com/atsushieno/status/327355284416757761\">2013年4月25日</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<p>とアドバイスを頂きました。</p>\n<p>IsolatedStorage(分離ストレージ) とは、.NET Framework(当然 Mono も)に用意されている、OS のファイルシステムとは切り離されたデータ領域の事で、アプリケーション毎、ユーザー毎など、アクセス権限を細かく設定できるのが特徴です。</p>\n<p>そこで気になったのは、Xamarin.Android/iOS で IsolatedStorage を利用した時に、実体はどこに保存されるのか？ということ。</p>\n<p>Android では、ストレージの <code>/data/data/&lt;アプリ名&gt;</code> 配下は、そのアプリ専用のデータ領域であり、そのアプリしかアクセス許可が与えられていない他、アプリをアンインストールするとそのデータ領域も削除されます。<br>\n(iOS は詳しくないですが、 userDefaults も同様だろうと思ってます。)</p>\n<p>で、調べてみました。</p>\n<h2 id=\"xamarin.android-%E3%81%AE%E5%A0%B4%E5%90%88\">Xamarin.Android の場合 <a class=\"direct-link\" href=\"#xamarin.android-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>Xamarin Studio で、適当な Xamarin.Android プロジェクトを作って、MainActivity の onCreate で、IsolatedStorage にファイルを作成しています。<br>\nIsolatedStorage は、どこまでアクセス許可を与えるかを <a href=\"http://msdn.microsoft.com/ja-jp/library/system.io.isolatedstorage.isolatedstoragescope.aspx\"><code>IsolatedStorageScope</code></a> 列挙体 で指定しますが、ここでは、SharedPreference の MODE_PRIVATE に最も近いであろう <code>Application</code> と <code>User</code> を組み合わせた Scope で生成する <code>GetUserStoreForApplication()</code> を使います。</p>\n<p>サンプルコードは、</p>\n<ul>\n<li><a href=\"http://ch3cooh.jp/index.php/tips/windowsphone7/system/strage/using-isolated-storage/\">分離ストレージ（Isolated Storage）を使ってデータの保存と取得を行う – CH3COOH(酢酸)の実験室</a></li>\n</ul>\n<p>を参考にさせてもらいました。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Runtime</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Views</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Widget</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>OS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>IsolatedStorage</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">IsolatedStorageTest</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"IsolatedStorageTest\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Activity1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> file <span class=\"token operator\">=</span> IsolatedStorageFile<span class=\"token punctuation\">.</span><span class=\"token function\">GetUserStoreForApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <br>            <span class=\"token comment\">// 分離ストレージにtest.txtというファイルを作成しストリームを開く</span><br>            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IsolatedStorageFileStream</span> strm <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>strm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// データを書き込む</span><br>                writer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                writer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Storage.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>上記の <code>var file = …</code> の次の行にブレークポイントを設置して、デバッグ実行します。<br>\nブレークしたら、変数 <code>file</code> をウォッチなどを覗いてみると、Non-public なフィールド <code>directory</code> が「/data/data/&lt;アプリ名&gt;/files/.config/.isolated-storage」<br>\nを示していることが分かります。</p>\n<p><img src=\"/img/posts/location_of_isolatedstorage_in_xamarin1.png\" alt=\"image1\"></p>\n<h2 id=\"xamarin.ios-%E3%81%AE%E5%A0%B4%E5%90%88\">Xamarin.iOS の場合 <a class=\"direct-link\" href=\"#xamarin.ios-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>次に Xamarin.iOS でも適当なプロジェクトを作って、<code>ViewDidLoad</code> に IsolatedStorage への書き出しコードを挿入します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Drawing</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>Foundation</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>UIKit</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>IsolatedStorage</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">IsolatedStorageiOSTest</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">IsolatedStorageiOSTestViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UIViewController</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">IsolatedStorageiOSTestViewController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"IsolatedStorageiOSTestViewController\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">}</span><br>\t\t<br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">DidReceiveMemoryWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// Releases the view if it doesn't have a superview.</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">DidReceiveMemoryWarning</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>            <span class=\"token comment\">// Release any cached data, images, etc that aren't in use.</span><br>        <span class=\"token punctuation\">}</span><br>\t\t<br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> file <span class=\"token operator\">=</span> IsolatedStorageFile<span class=\"token punctuation\">.</span><span class=\"token function\">GetUserStoreForApplication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <br>            <span class=\"token comment\">// 分離ストレージにtest.txtというファイルを作成しストリームを開く</span><br>            <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IsolatedStorageFileStream</span> strm <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test.txt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>                <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StreamWriter</span> writer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">StreamWriter</span><span class=\"token punctuation\">(</span>strm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// データを書き込む</span><br>                writer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                writer<span class=\"token punctuation\">.</span><span class=\"token function\">Write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Storage.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>\t\t<br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">bool</span></span> <span class=\"token function\">ShouldAutorotateToInterfaceOrientation</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UIInterfaceOrientation</span> toInterfaceOrientation<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// Return true for supported orientations</span><br>            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>toInterfaceOrientation <span class=\"token operator\">!=</span> UIInterfaceOrientation<span class=\"token punctuation\">.</span>PortraitUpsideDown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>デバッグして、<code>file</code> 変数を覗いてみると、<code>directory</code> が「&lt;省略&gt;/iPhone Simulator/6.1/Applications/&lt;アプリのUUID&gt;/Documents/.config/.isolated-storage」<br>\nを示していることが分かります。</p>\n<p><img src=\"/img/posts/location_of_isolatedstorage_in_xamarin2.png\" alt=\"image2\"></p>\n<p>ということで、IsolatedStorage の保存先は、Android では <code>/data/data/&lt;アプリ名&gt;/</code>、iOS の場合は <code>/&lt;アプリのUUID&gt;/Documents/</code> と、アプリごとの固有の場所になっている事が分かりました。</p>\n<h2 id=\"%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E4%B8%8A%E3%81%AE%E6%B3%A8%E6%84%8F\">セキュリティ上の注意 <a class=\"direct-link\" href=\"#%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E4%B8%8A%E3%81%AE%E6%B3%A8%E6%84%8F\">#</a></h2>\n<p>Android の <code>/data/data/&lt;アプリ名&gt;</code> はアプリしかアクセスできないディレクトリですが、データ自体が暗号化されるわけではありません。(端末のROOT化や、apkを入手してエミュレータでアプリを実行することで /data/data/ のデータは取り出せます。)</p>\n<p>また、iOS の <code>/&lt;アプリUIID&gt;/</code> はセキュアではないようです。(UUIDさえ分かれば他のアプリからもアクセスできるという事？)</p>\n<ul>\n<li><a href=\"http://software-security.sans.org/blog/2011/01/05/using-keychain-to-store-passwords-ios-iphone-ipad\">How Not to Store Passwords in iOS</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1560801/how-to-secure-nsuserdefaults\">iphone - How to secure NSUserDefaults? - Stack Overflow</a></li>\n<li><a href=\"http://iphonedevsdk.com/forum/iphone-sdk-development/28041-nsuserdefaults-secure.html\">NSUserDefaults Secure? - iPhone Dev SDK</a></li>\n</ul>\n<p>秘匿情報の保存には <code>KeyChain</code> を使え、と書いてありますね。</p>\n<p>さらに、.NET の IsolatedStorage の説明にも、「暗号化されていないキーやパスワードは保存するな」と書いてあります。</p>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/3ak841sy.aspx\">Scenarios for Isolated Storage - MSDN</a></li>\n</ul>\n<blockquote>\n<p>You <strong>should not use</strong> isolated storage in the following situations:</p>\n<ul>\n<li>To store high-value secrets, such as unencrypted keys or passwords, because isolated storage is not protected from highly trusted code, from unmanaged code, or from trusted users of the computer.</li>\n</ul>\n</blockquote>\n<p>(つか、<a href=\"http://msdn.microsoft.com/ja-jp/library/vstudio/3ak841sy.aspx#scenarios_for_isolated_storage\">日本語サイト</a>、誤訳ってない？)</p>\n<p>ということで、パスワードなどの秘匿情報をどうしても端末に保存する時は、</p>\n<ul>\n<li>iOS なら KeyChain を使う</li>\n<li>Android の場合は独自の暗号化を施す(Mono の <code>SecureString</code> とか <code>ProtectedData</code> が使える？)</li>\n</ul>\n<p>などの対策が必要です。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>IsolatedStorage は、SharedPreference や NSUserDefaults の代わりに、「アプリケーション情報格納領域」として使える\n<ul>\n<li>本文に書きませんでしたが、アプリ専用領域なので、アプリをアンインストールするとちゃんと消えます</li>\n</ul>\n</li>\n<li>ただし、パスワードとかの秘匿情報は保存しちゃダメよ</li>\n<li><a href=\"http://msdn.microsoft.com/ja-jp/library/system.io.isolatedstorage.isolatedstoragesettings\"><code>IsolatedStorageSettings</code></a> が使えたらもっと便利だったが、 System.Windows.dll が必要なのでムリー</li>\n</ul>\n<h2 id=\"%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E6%B0%97%E3%81%AB%E3%81%AA%E3%82%8B\">ちょっと気になる <a class=\"direct-link\" href=\"#%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E6%B0%97%E3%81%AB%E3%81%AA%E3%82%8B\">#</a></h2>\n<ul>\n<li><a href=\"http://msdn.microsoft.com/ja-jp/library/3ak841sy\">分離ストレージ - MSDN</a></li>\n</ul>\n<p>に、</p>\n<blockquote>\n<p>分離ストレージは Windows ストア の apps では使用できません。 代わりに、ローカル データとファイルを格納する Windows ランタイム API に含まれる Windows.Storage の名前空間にアプリケーション データのクラスを使用します。 詳細については、Windows Dev センターの&quot; アプリケーション データ &quot;を参照してください。</p>\n</blockquote>\n<p>と書いてある。Windows 8 の Store App だと、IsolatedStorage が使えなくて、代わりに WinRT を使う必要があるらしい。それを考えると、IsolatedStorage を直で使わずに１枚咬ませた方が良さそう。</p>\n",
      "date_published": "2013-04-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/22/xamarin-ios-using-gmap-ios-sdk/",
      "url": "https://blog.amay077.net/blog/2013/04/22/xamarin-ios-using-gmap-ios-sdk/",
      "title": "Google Maps SDK for iOS を Xamarin.iOS で使う",
      "content_html": "<p>Googleマップの iOS版とともに公開された <a href=\"https://developers.google.com/maps/documentation/ios/\">iOS用のMaps SDK</a> ですが、Xamarin.iOS でも使うことができます。(ちなみに Android用の Google Maps API v2 を Xamarin.Android で使う方法は<a href=\"http://amay077.github.io/blog/2013/03/05/xamarin-android-using-google-maps-android-api-v2/\">以前</a>書きました。)</p>\n<!--more-->\n<p><a href=\"http://components.xamarin.com/\">Xamarin Component Store</a> にて Free で(ラッパー)ライブラリが公開されているので、それを使います。</p>\n<p>コンポーネントをダウンロードすると、中にサンプルプロジェクトが含まれているのでそれを動かしてみます。</p>\n<h2 id=\"%E9%81%A9%E5%BD%93%E3%81%AA-xamarin.ios-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">適当な Xamarin.iOS プロジェクトを作る <a class=\"direct-link\" href=\"#%E9%81%A9%E5%BD%93%E3%81%AA-xamarin.ios-%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>メニュー -&gt; ファイル -&gt; 新規 -&gt; ソリューション -&gt; C# -&gt; iOS -&gt; iPhone -&gt; Single View Application を選択。ソリューションはなんでもいいです。どうせ後で捨てるので。テキトーに <code>HogeApp</code> とでもしましょうか。</p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-google-maps-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">プロジェクトに Google Maps コンポーネントを追加する <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AB-google-maps-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>メニュー -&gt; プロジェクト -&gt; Get More Components を選択します。</p>\n<p><strong>Google Maps</strong> を探しだして [Add to App] します。</p>\n<p><img src=\"/img/posts/gmap_on_xamarin_ios_1.png\" alt=\"image1\"></p>\n<p>しばらくすると、左側のビューの Components の中に &quot;Google Maps&quot; が作成されるので、それをダブルクリックして開きます。</p>\n<p>右に表示されるコンテンツのタブから「Samples」を選択します。</p>\n<p><img src=\"/img/posts/gmap_on_xamarin_ios_2.png\" alt=\"image2\"></p>\n<p>さらに &quot;iOS Sample&quot; の「Open Sample」を押します。<br>\nすると、左側のビューに「GoogleMapsSample」プロジェクトが追加されます。</p>\n<p><img src=\"/img/posts/gmap_on_xamarin_ios_3.png\" alt=\"image3\"></p>\n<p>この時点で HogeApp は意味がなくなってしまいましたが、ディスクから削除すると GoogleMapsSample も一緒に消えてしまうので、無視しておきます。GoogleMapsSample がどこにあるかは、上図のように「親フォルダを開く」すると Finder で確認できます。</p>\n<p>以降はこの GoogleMapsSample プロジェクトを使います。</p>\n<h2 id=\"api%E3%82%AD%E3%83%BC%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">APIキーを取得する <a class=\"direct-link\" href=\"#api%E3%82%AD%E3%83%BC%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ここからは、Component -&gt; GoogleMaps をダブルクリックすると表示される「Getting Started」の「The Google Maps API Key」に沿っていきます。</p>\n<h4 id=\"1.-create-an-api-project-in-the-google-api-console\">1. Create an API project in the <a href=\"https://code.google.com/apis/console\">Google API Console</a> <a class=\"direct-link\" href=\"#1.-create-an-api-project-in-the-google-api-console\">#</a></h4>\n<p>ブラウザで Google API Console へ移動して、左上のドロップダウンから「Create…」にてプロジェクトを作成します。既に存在しているなら、それを使ってもいいです。</p>\n<h4 id=\"2.-select-the-services-pane-in-your-api-project%2C-and-enable-the-google-maps-sdk-for-ios.-this-displays-the-google-maps-terms-of-service.\">2. Select the Services pane in your API project, and enable the Google Maps SDK for iOS. This displays the Google Maps Terms of Service. <a class=\"direct-link\" href=\"#2.-select-the-services-pane-in-your-api-project%2C-and-enable-the-google-maps-sdk-for-ios.-this-displays-the-google-maps-terms-of-service.\">#</a></h4>\n<p>左側のメニュー「Services」の中にある「Google Maps SDK for iOS」を ON にします。利用規約にも同意しましょう。</p>\n<h4 id=\"3.-select-the-api-access-pane-in-the-console%2C-and-click-create-new-ios-key.\">3. Select the API Access pane in the console, and click Create new iOS key. <a class=\"direct-link\" href=\"#3.-select-the-api-access-pane-in-the-console%2C-and-click-create-new-ios-key.\">#</a></h4>\n<p>左側のメニュー「API Access」を開き、ページの一番下に表示される「Create new iOS key」ボタンを押します。</p>\n<h4 id=\"4.-enter-one-or-more-bundle-identifiers-as-listed-in-your-application's-.plist-file%2C-such-as-com.example.myapp.\">4. Enter one or more bundle identifiers as listed in your application's .plist file, such as com.example.myapp. <a class=\"direct-link\" href=\"#4.-enter-one-or-more-bundle-identifiers-as-listed-in-your-application's-.plist-file%2C-such-as-com.example.myapp.\">#</a></h4>\n<p>入力欄に「com.example.myapp」とタイプします。本来はちゃんとした「あなたのアプリの固有ID」を入れるのでしょうが、当方 iOS 開発は詳しくないのでここでは例のままにします。</p>\n<h4 id=\"5.-click-create.\">5. Click Create. <a class=\"direct-link\" href=\"#5.-click-create.\">#</a></h4>\n<p>「Create」を押します。</p>\n<h4 id=\"6.-in-the-api-access-page%2C-locate-the-section-key-for-ios-apps-(with-bundle-identifiers)-and-note-or-copy-the-40-character-*api-key.\">6. In the API Access page, locate the section Key for iOS apps (with bundle identifiers) and note or copy the 40-character *API key. <a class=\"direct-link\" href=\"#6.-in-the-api-access-page%2C-locate-the-section-key-for-ios-apps-(with-bundle-identifiers)-and-note-or-copy-the-40-character-*api-key.\">#</a></h4>\n<p>すると、<strong>Key for iOS apps</strong> に 作成されたAPIキーが表示されるはずです。</p>\n<p><img src=\"/img/posts/gmap_on_xamarin_ios_4.png\" alt=\"image4\"></p>\n<p>この API key をコピーしておいて、Xamarin Studio に戻ります。</p>\n<h2 id=\"info.plist-%E3%82%92%E9%96%8B%E3%81%84%E3%81%A6%E3%80%81identifier-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%BE%E3%81%99\">Info.plist を開いて、Identifier を設定します <a class=\"direct-link\" href=\"#info.plist-%E3%82%92%E9%96%8B%E3%81%84%E3%81%A6%E3%80%81identifier-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%BE%E3%81%99\">#</a></h2>\n<p>Google API Console で設定した Identifier と一致させる必要があるので「com.example.myapp」を設定します。(普通は先にアプリの Identifier を決めてから API key を取得するのでしょうが)</p>\n<p><img src=\"/img/posts/gmap_on_xamarin_ios_5.png\" alt=\"image5\"></p>\n<h2 id=\"appdelegate.cs-%E3%82%92%E9%96%8B%E3%81%84%E3%81%A6%E3%80%81api-key-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">AppDelegate.cs を開いて、API key を設定する <a class=\"direct-link\" href=\"#appdelegate.cs-%E3%82%92%E9%96%8B%E3%81%84%E3%81%A6%E3%80%81api-key-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">#</a></h2>\n<p>コピーしておいた API key を、下図の位置に貼り付けます。</p>\n<p><img src=\"/img/posts/gmap_on_xamarin_ios_6.png\" alt=\"image6\"></p>\n<h2 id=\"%E5%8B%95%E3%81%8B%E3%81%99%EF%BC%81\">動かす！ <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%99%EF%BC%81\">#</a></h2>\n<p>以上で準備完了です。<br>\n実行してみましょう。Android版の Google Maps API v2 は、エミュレータでは実行できませんが、iOS版は、シミュレータでも実行できます。</p>\n<p>ばばーん！</p>\n<p><img src=\"/img/posts/gmap_on_xamarin_ios_7.png\" alt=\"image7\"></p>\n<p>あれ？ズームコントロールとか表示されないのね。</p>\n<p>とりあえず動く所までできたので、今日はこの辺で。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>Google Maps SDK for iOS も Xamarin で普通に使える！</li>\n<li>Xamarin さん、Component に含まれるサンプルの「よりよい取り出し方」教えてください</li>\n<li><code>CLLocationCoordinate2D</code> とか長ェよ、ただの <code>LatLng</code> だろ</li>\n<li>というように Google Maps Android API v2 とは設計思想は同じですが、インターフェースが違う(CLLocationCoordinate2D は CoreLocation のクラスですね)ので共通にはなりません。SDK が提供する機能にも差異があります。(さすがに Android &gt; iOS です)</li>\n</ul>\n",
      "date_published": "2013-04-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/16/deep-dive-android-binding/",
      "url": "https://blog.amay077.net/blog/2013/04/16/deep-dive-android-binding/",
      "title": "Android-Binding の Binding の実装を深掘りしてみる",
      "content_html": "<p>完全に自分用メモなので乱文です。</p>\n<!--more-->\n<h2 id=\"mvvm-%E3%81%A8%E3%81%AF\">MVVM とは <a class=\"direct-link\" href=\"#mvvm-%E3%81%A8%E3%81%AF\">#</a></h2>\n<p>Model-View-ViewModel なアーキテクチャ。<br>\nView(画面)は、ViewModel のプロパティ(Android-binding では IObservable)の変更を検知し、コントロール(Android ではウィジェット)の内容を置き換える。(OneWay の場合)</p>\n<p>TowWay の場合、ユーザーの操作によってコントロールの値が変化した時、ViewModel のプロパティにその変更を適用する。</p>\n<p>超断片的なので、詳しくはおググりください。</p>\n<p>例：<br>\nEditText の Text と、ViewModel の Address プロパティが関連付け(バインド)されていた場合、</p>\n<ul>\n<li>ViewModel.Address がプログラム処理によって変更された時に、EditText.Text が自動的に変更されるのが OneWay。</li>\n<li>上記に加え、EditText にユーザーが文字を入力した時に、ViewModel.Address にその値が適用されるのが、TwoWay。</li>\n</ul>\n<h2 id=\"android-binding-%E3%81%A8%E3%81%AF\">Android-Binding とは <a class=\"direct-link\" href=\"#android-binding-%E3%81%A8%E3%81%AF\">#</a></h2>\n<p>Android で MVVM できるライブラリ。</p>\n<ul>\n<li><a href=\"https://code.google.com/p/android-binding/\">Android-Binding</a></li>\n</ul>\n<h2 id=\"%E4%BD%95%E3%81%8C%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84%E3%81%AE%E3%81%8B%EF%BC%9F\">何が知りたいのか？ <a class=\"direct-link\" href=\"#%E4%BD%95%E3%81%8C%E7%9F%A5%E3%82%8A%E3%81%9F%E3%81%84%E3%81%AE%E3%81%8B%EF%BC%9F\">#</a></h2>\n<p>TwoWay の時、EditText にユーザーが文字列を入力して、ViewModel.Address に新しい値を設定する。すると、その変更をまた View が検知して、EditText の値を書き換える処理が動いてしまう(OneWay 側の動きをする)のではないか？</p>\n<p>通常の文字列などでは、EditText に同じ値が再設定されるだけなので問題なさげだが、それでも意図しないUI更新は気持ち悪い。</p>\n<h2 id=\"%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%82%8B\">調べてみる <a class=\"direct-link\" href=\"#%E8%AA%BF%E3%81%B9%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>Android-Binding では、この辺りを上手く処理しているように見えるので、実装を見てみる。</p>\n<p>Android-Binding で、ViewModel 側のプロパティを &quot;Property&quot;、それをバインドする View 側の定義を &quot;Attribute&quot; という。というか勝手にそう呼ぶことにする。(実体はどちらも IObservable の実装だが、この辺を説明しだすと混乱するので割愛)<br>\n前述の例だと、「EditText の Text」が &quot;Attribute&quot;、ViewModel.Address が &quot;Property&quot; になる。</p>\n<ol>\n<li>\n<p>Attribute に Property がバインドされると、<code>Attribute#onBind</code> が呼び出され、この中で <code>Attribute#Bridge</code> クラス(これは Observer である)が生成され、Bridge が Property の変更を監視する。と同時に <code>this.subscribe(mBridge)</code> にて TextViewAttribute 自身の変更も監視する。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Attribute.java#L120\">[github]</a></p>\n</li>\n<li>\n<p>[TextViewAttribute]ユーザーが EditText の Text を変更すると、<code>TextViewAttribute#onTextChanged</code> が呼び出され、さらに <code>notifyChanged</code> が呼び出される。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/viewAttributes/textView/TextViewAttribute.java#L68\">[github]</a></p>\n</li>\n<li>\n<p>[TextViewAttribute]notifyChanged() は Attribute の基底クラスである <code>Observable#notifyChanged()</code> が呼び出され、続いてオーバーロードである <code>notifyChanged(initiators)</code> が呼ばれる。 <a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Observable.java#L66\">[github]</a></p>\n</li>\n<li>\n<p>[TextViewAttribute]<code>initiators</code> とは、.NET イベントの sender のようなもので、イベント(コールバック)発生元のオブジェクトを示す。ただし、<code>Observable#notifyChanged()</code> の時点では、initiators はまだ空っぽ。</p>\n</li>\n<li>\n<p>[TextViewAttribute]<code>notifyChanged(Collection&lt;Object&gt; initiators)</code> にて、initiators に <code>this</code> つまり TextViewAttribute 自身を追加して、監視している Observer の <code>onPropertyChanged</code> を呼び出す。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Observable.java#L55\">[github]</a></p>\n</li>\n<li>\n<p>[TextViewAttribute]TextViewAttribute の監視者は <code>Attribute#Bridge</code> クラスであり、<code>Bridge#onPropertyChanged(prop, initiators)</code> が呼び出される。この時点で、<code>prop</code> は TextViewAttribute 自身、initiators にも TextViewAttribute 自身が格納されている。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Attribute.java#L125\">[github]</a></p>\n</li>\n<li>\n<p>[TextViewAttribute]<code>Bridge#onPropertyChanged</code> の最初の if文 <code>if (prop==mAttribute){</code> が true となり、<code>mBindedObservable._setObject(prop.get(), initiators);</code> が呼び出される。<code>mAttribute</code> は TextViewAttribute 自身であり、<code>mBindedObservable</code> はバインドした ViewModel の Property である。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Attribute.java#L127\">[github]</a></p>\n</li>\n<li>\n<p>[Property]呼び出されたのは、ViewModel の Property(Observable)、つまり <code>Observable#_setObject(newValue, initiators)</code> である。initiators には依然として TextViewAttbute が1件格納されている。ここから <code>Observable#set(newValue, initiators)</code> が呼び出される。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Observable.java#L82\">[github]</a></p>\n</li>\n<li>\n<p>[Property]<code>Observable#set(newValue, initiators)</code> では、<code>doSetValue</code> で、自身(ViewModel の Property)の値を書き換え、その後、initiators に this、つまり ViewModel の Property を追加して <code>notifyChanged</code> を呼び出す。この時点で initiators は 2件(TextViewAttribute と ViewModelのProperty) である。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Observable.java#L74\">[github]</a></p>\n</li>\n<li>\n<p>[Property]<code>notifyChanged(Collection&lt;Object&gt; initiators)</code> にて、initiators に更に this を追加して(この処理に意味があるのかは謎)、監視者である Observer の <code>onPropertyChanged(this, initiators)</code> を呼び出す。この時点で initiators は 3件(TextViewAttribute と ViewModelのProperty と ViewModelのProperty) <a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Observable.java#L55\">[github]</a></p>\n</li>\n<li>\n<p>[TextViewAttribute]再び Bridge#onPropertyChanged(prop, initiators) が呼び出される。ここでは prop は ViewModelのProperty である。これにより、最初の if文 は <code>false</code> となる。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Attribute.java#L130\">[github]</a></p>\n</li>\n<li>\n<p>[TextViewAttribute]次の if文 <code>else if (prop==mBindedObservable){</code> は <code>true</code> となるが、更にその次の if文 <code>if (initiators.contains(Attribute.this))</code> は、initiators に TextViewAttribute が含まれている為 false となり、処理は終わる。これにより、次の行にある <code>mAttribute._setObject(prop.get(), initiators);</code> は呼び出されない、つまり、EditText の Text に値が再設定されることはない。<a href=\"https://github.com/gueei/AndroidBinding/blob/master/Core/AndroidBinding/src/gueei/binding/Attribute.java#L131\">[github]</a></p>\n</li>\n</ol>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>Binder の実装は、Bridge が EditText と ViewModelのProperty 両方の変更を監視し、また initiators という仕組みをうまく使うことで、EdtiText が起こした Property の変更は、Attribute が検知しないように工夫されていた。</li>\n</ul>\n<p>Android-Binding の仕組みはなんとかわかったー。.NET の XAML はどうやってんのかな？</p>\n",
      "date_published": "2013-04-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/15/does-not-working-24h-in-dateformat/",
      "url": "https://blog.amay077.net/blog/2013/04/15/does-not-working-24h-in-dateformat/",
      "title": "DateFormat.format では HH:mm ではなく kk:mm を使う",
      "content_html": "<p>Android には <code>android.text.format.DateFormat</code> というユーティリティクラスがあるのですが、これの <code>format</code> メソッド、時刻の24時間形式に対応してません。</p>\n<!--more-->\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">long</span> t <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"By DateFormat\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"By SimpleDateFormat\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"HH:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<pre><code>04-09 22:42:14.435: D/By DateFormat(2860): HH:42 ←あ〜あ\n04-09 22:42:14.435: D/By SimpleDateFormat(2860): 22:42\n</code></pre>\n<p>Staclkoverflow とかにも「代わりに SimpleDateToimeFormat を使えば」と書いてあるわけですが、いやいやそれじゃユーティリティクラスの役割果たしてないでしょ？と思うところであります。</p>\n<p><strike>自分の中では、時刻は24h表示がデフォルトなので、「DateFormat クラス使えない子」というレッテルを貼ってしまいました。</strike></p>\n<h2 id=\"%E8%BF%BD%E8%A8%98-2013.7.24\">追記 2013.7.24 <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98-2013.7.24\">#</a></h2>\n<p>「HH でなく kk が使えるよ」とコメントで教えて頂きました。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">DateFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kk:mm\"</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"kk:mm\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>どうやら <a href=\"http://stackoverflow.com/questions/8907509/how-to-set-24-hours-format-for-date-on-java\">SimpleDateFormat でも使える</a>ようなので、「Java で 24h表記の場合は kk」って覚えておけばよさそうです。(k って何の略なの…)</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/5755073/24-hour-clock-not-working-in-dateformat-android\">java - 24 hour clock not working in dateformat android - Stack Overflow</a></li>\n</ul>\n<p>よく見たら、ここの Top Vote にも 「kk 使え」って書いてあったorz</p>\n",
      "date_published": "2013-04-15T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/12/bitcasa-clear-cache/",
      "url": "https://blog.amay077.net/blog/2013/04/12/bitcasa-clear-cache/",
      "title": "Bitcasa(Mac)が不安定になったらこのコマンドを叩け",
      "content_html": "<p><a href=\"http://amay077.github.com/blog/2013/03/25/bitcasa-tips-1/\">Bitcasa を使っていて「おや？」と思ったこと</a> や <a href=\"http://amay077.github.com/blog/2013/04/01/bitcasa-troubles-1/\">だんだんと Bitcasa が嫌になってきたでござるよ</a> でさまざまな Bitcasa の問題と対峙してきたわけですが、やっとそれらを克服する方法がわかりました。</p>\n<!--more-->\n<h2 id=\"%E8%BF%BD%E8%A8%98-2013.10.20\">追記 2013.10.20 <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98-2013.10.20\">#</a></h2>\n<p>より新しい情報(2013/7/30)として、以下の方法が Bitcasa のサポートに挙がっていました。</p>\n<ul>\n<li><a href=\"https://support.bitcasa.com/entries/25056968-How-to-delete-the-Bitcasa-cache-Windows-and-Mac-\">How to delete the Bitcasa cache (Windows and Mac) : Help Center</a></li>\n</ul>\n<hr>\n<p>問題が起こったら、アプリを終了させて下のコマンドを叩く！</p>\n<pre><code># ```\nrm -r ~/Library/Caches/com.bitcasa.Bitcasa\nrm -r ~/Library/Application\\ Support/com.bitcasa.Bitcasa \n</code></pre>\n<p>いやー、Caches の方は知ってて何度もトライしてたんですけど、Application Support の方は知りませんでしたわ。(むしろ Caches は Application Support のシンボリックリンクで、削除しても無意味というウワサも…)</p>\n<p>ともあれ、この操作を行った後は、ファイルのアップロードを延々と繰り返すこともなくなった※し、Finder でコピー時にエラーが発生することもなくなり、安定した気がします。</p>\n<p>※嘘でした。程なくして2GBのアップロードを繰り返すようになりました(泣)</p>\n<p>出典はコチラ</p>\n<ul>\n<li><a href=\"http://support.bitcasa.com/entries/22943756-Bitcasa-is-hanging-in-status-Finalizing-\">Bitcasa is hanging in status &quot;Finalizing&quot; : Bitcasa Help Center</a></li>\n</ul>\n<p>で、Kyle さんが @Jon さんに回答してるトコです</p>\n<blockquote>\n<p>@Jon: The &quot;Finalizing&quot; message usually indicates  a hiccup in the cache. We're working to figure out the root cause of this, and expect a fix in an upcoming release. In the meantime, you can work around it by doing the following:</p>\n<p>1 Exit the Bitcasa Desktop App</p>\n<p>2 Open Terminal and type:</p>\n<p>rm -r ~/Library/Caches/com.bitcasa.Bitcasa</p>\n<p>3 Press Enter, and wait few minutes</p>\n<p>4 Next, type:</p>\n<p>rm -r ~/Library/Application\\ Support/&gt;com.bitcasa.Bitcasa</p>\n<p>5 Relaunch the Bitcasa Desktop App</p>\n<p>April 04, 2013 03:04 pm</p>\n</blockquote>\n",
      "date_published": "2013-04-12T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/10/keep-preference-when-uninstall/",
      "url": "https://blog.amay077.net/blog/2013/04/10/keep-preference-when-uninstall/",
      "title": "SharedPreference は消さずにアプリだけアンインストールする方法",
      "content_html": "<p>ADB のコマンドで、</p>\n<pre><code>adb shell pm uninstall -k &lt;package name&gt;\n</code></pre>\n<!--more-->\n<p>を実行します。</p>\n<p>ヘルプには、</p>\n<blockquote>\n<p>pm uninstall: removes a package from the system.<br>\nOptions:<br>\n-k: keep the data and cache directories around after package removal.</p>\n</blockquote>\n<p>と書いてあります。</p>\n<p>「おっしゃ、別なPCでビルドしてインストールしたアプリの設定情報消したくなかったんだよね〜」</p>\n<p>と思いきや、署名(debug.keystore とか)が異なる環境でビルドされたアプリの場合、上記のコマンドでアンインストールしても、新しいアプリをインストールする時に、</p>\n<blockquote>\n<p>[2013-04-10 17:58:29 - MyApp] Installation error: INSTALL_FAILED_UPDATE_INCOMPATIBLE<br>\n[2013-04-10 17:58:29 - MyApp] Please check logcat output for more details.<br>\n[2013-04-10 17:58:29 - MyApp] Launch canceled!</p>\n</blockquote>\n<p>というエラーが出てアンインストールできません。<br>\n結局、</p>\n<pre><code>adb shell pm uninstall &lt;package name&gt;\n</code></pre>\n<p>で、アンインストールすることになります。</p>\n<p>という本末転倒なお話でした。</p>\n",
      "date_published": "2013-04-10T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/09/service-force-stop-when-bound/",
      "url": "https://blog.amay077.net/blog/2013/04/09/service-force-stop-when-bound/",
      "title": "bind されてても stopService で止まるサービスの作り方",
      "content_html": "<p>Android のサービスは、<code>startService</code> で「開始状態」、<code>bindService</code> で「接続状態」となり、サービスを停止させる <code>stopService</code> は、<code>unbindService</code> で接続を解除してから実行しないと止まらない、とドキュメントに書いてあります。</p>\n<!--more-->\n<p><a href=\"http://developer.android.com/guide/components/services.html#Lifecycle\">Managing the Lifecycle of a Service ｜ Android Developers</a> より</p>\n<blockquote>\n<p>In cases like this, stopService() or stopSelf() does not actually stop the service until all clients unbind.</p>\n</blockquote>\n<p>それから、一見、サービスが切断された時に呼び出されるように見える [<code>ServiceConnection.onServiceDisconnected</code>](<a href=\"http://developer.android.com/reference/android/content/ServiceConnection.html#onServiceDisconnected(android.content.ComponentName)\">http://developer.android.com/reference/android/content/ServiceConnection.html#onServiceDisconnected(android.content.ComponentName)</a> は、</p>\n<ul>\n<li><a href=\"http://into.cocolog-nifty.com/pulog/2011/10/android032-4-aa.html\">Androidアプリ開発メモ032:サービス その4:バインドされたサービス: ぷ～ろぐ</a></li>\n<li><a href=\"http://terurou.hateblo.jp/entry/20100519/1274252852\">Serviceのライフサイクルの動作確認 - DenkiYagi</a></li>\n<li><a href=\"http://developer.android.com/guide/components/bound-services.html#Binding\">Binding to a Service - Bound Services ｜ Android Developers</a></li>\n</ul>\n<blockquote>\n<p>onServiceDisconnected()<br>\nThe Android system calls this when the connection to the service is unexpectedly lost, such as when the service has crashed or has been killed. This is <strong>not</strong> called when the client unbinds.</p>\n</blockquote>\n<p>とあるように、実はサービスが異常終了した時などしか呼ばれないとのことです。</p>\n<p>今回、偶然にも、</p>\n<ul>\n<li>接続状態なのに stopService でサービスが止まる</li>\n<li><code>ServiceConnection.onServiceDisconnected</code> が呼ばれる</li>\n</ul>\n<p>という動きをするサービスができたので、備忘録として残しておきます。</p>\n<p>条件は、startService した後、bindService の第2引数を <code>Context.BIND_AUTO_CREATE</code> ではなく <code>0</code> にすること。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Intent</span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Intent</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TestService</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">ServiceConnection</span> conn <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ServiceConnection</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onServiceConnected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComponentName</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">IBinder</span> service<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServiceTest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onServiceConnected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\tbinder <span class=\"token operator\">=</span> <span class=\"token class-name\">ITestService<span class=\"token punctuation\">.</span>Stub</span><span class=\"token punctuation\">.</span><span class=\"token function\">asInterface</span><span class=\"token punctuation\">(</span>service<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">// stopService すると呼ばれる</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onServiceDisconnected</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ComponentName</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ServiceTest\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"onServiceDisconnected\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">unbindService</span><span class=\"token punctuation\">(</span>conn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これ呼ばないとリークする</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// サービス開始＆接続</span><br>context<span class=\"token punctuation\">.</span><span class=\"token function\">startService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>context<span class=\"token punctuation\">.</span><span class=\"token function\">bindService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">,</span> conn<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// not BIND_AUTO_CREATE</span><br><br><br><span class=\"token comment\">// ボタンを押したらサービス停止</span><br><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>btnCallTerminate<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\tcontext<span class=\"token punctuation\">.</span><span class=\"token function\">stopService</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>サービス側のコードは省略してしまったけど、stopService すると、</p>\n<ol>\n<li>ServiceConnection.onServiceDisconnected</li>\n<li>Service.onUnbind</li>\n<li>Service.onDestroy</li>\n</ol>\n<p>の順で呼ばれてます。onServiceDisconnected で <code>context.unbindService</code> を呼ばないと、アプリ終了時にメモリリークが検出されます。また、呼ばなくても、2. 3. は変わりません。</p>\n<p>外から stopService でなく、サービス内から <code>stopSelf</code> でも同じでした。</p>\n<p>接続中にサービスを停止しても、onServiceDisconnected で補足できるので、自然と言えば自然ですが、説明と違う動きをされると混乱しますね。(どこかに書いてあるのかな？)</p>\n",
      "date_published": "2013-04-09T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/04/01/bitcasa-troubles-1/",
      "url": "https://blog.amay077.net/blog/2013/04/01/bitcasa-troubles-1/",
      "title": "だんだんと Bitcasa が嫌になってきたでござるよ",
      "content_html": "<p>一度狂い始めた歯車は、なかなか元には戻らないもので…。</p>\n<!--more-->\n<p>Bitcasa の Mac 版クライアントでいろいろトラブルが。<br>\n**あくまで私の場合です。**正常に動いてる人も居る…よね。</p>\n<h3 id=\"2013.4.12-%E8%BF%BD%E8%A8%98\">2013.4.12 追記 <a class=\"direct-link\" href=\"#2013.4.12-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>コマンドでキャッシュをクリアするとだいぶ安定するようになりました！ → <a href=\"http://amay077.github.io/blog/2013/04/12/bitcasa-clear-cache/\">Bitcasa(Mac)が不安定になったらこのコマンドを叩け</a></p>\n<h2 id=\"2g-%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%82%92%E5%BB%B6%E3%80%85%E3%81%A8%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%99\">2G のファイルのアップロードを延々と繰り返す <a class=\"direct-link\" href=\"#2g-%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%82%92%E5%BB%B6%E3%80%85%E3%81%A8%E7%B9%B0%E3%82%8A%E8%BF%94%E3%81%99\">#</a></h2>\n<p>ある時から、2GB のファイルを何度も何度も延々と繰り返すようになりました。どのファイルかは分かりません。クライアントを更新したり、元に戻したり、アンインストールしたり、キャッシュを削除したりしても症状変わらず。</p>\n<p><a href=\"http://amay077.github.com/blog/2013/03/29/bitcasa-tips-2/\">Terminal から cp とかした</a>せいかなー。</p>\n<p>ともかく、時系列から見てこの症状が全ての元凶だと思うんですが、次々と不可解な事象が。。。</p>\n<h2 id=\"%E3%83%9F%E3%83%A9%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E5%8B%95%E3%81%84%E3%81%A6%E3%82%93%E3%81%AE%EF%BC%9F\">ミラーリングちゃんと動いてんの？ <a class=\"direct-link\" href=\"#%E3%83%9F%E3%83%A9%E3%83%BC%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%A1%E3%82%83%E3%82%93%E3%81%A8%E5%8B%95%E3%81%84%E3%81%A6%E3%82%93%E3%81%AE%EF%BC%9F\">#</a></h2>\n<p>デスクトップをミラーリング対象にしてあるんですけどね。<br>\nファイルをデスクトップにコピーしたんですけど、一向に Web から参照できるようにならないです。</p>\n<h2 id=\"%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%8C-exiting-%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%AA%E3%82%93%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9%E2%80%A6\">クライアントが Exiting のままなんですけど… <a class=\"direct-link\" href=\"#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%8C-exiting-%E3%81%AE%E3%81%BE%E3%81%BE%E3%81%AA%E3%82%93%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9%E2%80%A6\">#</a></h2>\n<p>ファイルをコピーして、Bitcasa を Exit。Exit のまま反日放置しても終わらず。仕方ないので強制終了しました。<br>\n次回起動すると、、、コピーしたはずのファイルがありません。Web で見てもありません。大きなファイルをアップした後でこの症状になりやすい感じがします。</p>\n<h2 id=\"%E3%81%84%E3%81%A4-web-%E3%81%A7%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AE%EF%BC%9F\">いつ Web で見られるようになるの？ <a class=\"direct-link\" href=\"#%E3%81%84%E3%81%A4-web-%E3%81%A7%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h2>\n<p>「Web で見られる＝クラウドのファイルがアップされた」と判断しているのですが、クライアントでファイルをコピーして、どれだけ放置しても Web で見られません。あれこれ手順を確かめてたら、以下の流れで確認できるようになりました。</p>\n<ol>\n<li>クライアントでファイルをコピー</li>\n<li>Bitcasa を終了 → タスクトレイアイコンが消えるまで待つ(&amp;運悪く Exiting のままにならない事を祈りながら)</li>\n<li>もう一度 Bitcasa を起動する</li>\n<li>起動した後、仮想ドライブが表示されるまで根気よく待つ(1分くらい)</li>\n</ol>\n<p>Finder に Bitcasa Infinite Drive がマウントされた時点で、Web を見てみると、1. でコピーしたファイルが確認できました。</p>\n<p>前はこんなんじゃなかったけどなあ。</p>\n<h2 id=\"%E3%81%9C%E3%80%81%E5%85%A8%E6%BB%85%EF%BC%9F16gb-%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%8C%E5%85%A8%E6%BB%85%EF%BC%9F3%E5%88%86%E3%82%82%E3%81%9F%E3%81%9F%E3%81%9A%E3%81%AB%E3%81%8B%EF%BC%9F%E2%80%A6\">ぜ、全滅？16GB のメモリが全滅？3分もたたずにか？… <a class=\"direct-link\" href=\"#%E3%81%9C%E3%80%81%E5%85%A8%E6%BB%85%EF%BC%9F16gb-%E3%81%AE%E3%83%A1%E3%83%A2%E3%83%AA%E3%81%8C%E5%85%A8%E6%BB%85%EF%BC%9F3%E5%88%86%E3%82%82%E3%81%9F%E3%81%9F%E3%81%9A%E3%81%AB%E3%81%8B%EF%BC%9F%E2%80%A6\">#</a></h2>\n<p>3分は言い過ぎですが、もうガンガン減ってく。頻繁に <code>purge</code> しないとスワップがスゴい。</p>\n<h2 id=\"%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1\">使ってるクライアントの情報 <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%81%AE%E6%83%85%E5%A0%B1\">#</a></h2>\n<ul>\n<li>1.04 (Build 1055)</li>\n<li>ProductName:\tMac OS X</li>\n<li>ProductVersion:\t10.8.2</li>\n<li>BuildVersion:\t12C2034</li>\n</ul>\n<p>もう、BackBlaze に帰ろうかな...</p>\n",
      "date_published": "2013-04-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/31/octopress-top-category-list-plugin/",
      "url": "https://blog.amay077.net/blog/2013/03/31/octopress-top-category-list-plugin/",
      "title": "Octopress Top Categories Plugin を使う",
      "content_html": "<p>サイドバーに表示するカテゴリリストを投稿数の多い順＆上位○件 の表示にするプラグインです。</p>\n<!--more-->\n<p>先生はこちら。</p>\n<ul>\n<li><a href=\"http://time.to.pullthepl.ug/blog/2012/8/20/octopress-top-categories-plugin\">Octopress Top Categories Plugin - Time To Pull The Plug</a></li>\n<li><a href=\"https://github.com/ctdk/octopress-category-list\">ctdk/octopress-category-list - GitHub</a></li>\n</ul>\n<h2 id=\"%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\">プラグインのダウンロード <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%A9%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%AE%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\">#</a></h2>\n<p><a href=\"https://github.com/ctdk/octopress-category-list\">ctdk/octopress-category-list - GitHub</a> から <code>plugins/category_list.rb</code> を自分の octopress リポジトリの <code>plugins/</code> へコピーします。</p>\n<h2 id=\"%E3%82%B5%E3%82%A4%E3%83%89%E3%83%90%E3%83%BC%E3%81%AB-topcategorylist-%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE-html-%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\">サイドバーに TopCategoryList を表示するための HTML を用意する <a class=\"direct-link\" href=\"#%E3%82%B5%E3%82%A4%E3%83%89%E3%83%90%E3%83%BC%E3%81%AB-topcategorylist-%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AE-html-%E3%82%92%E7%94%A8%E6%84%8F%E3%81%99%E3%82%8B\">#</a></h2>\n<p>自分の octopress リポジトリの <code>source/_includes/custom/asides/</code> に <code>top_category_list.html</code> というファイルを作成、内容は以下のようにする。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span><span class=\"token punctuation\">></span></span><br>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Top Categories<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>top-category-list<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>{% top_category_list counter:true %}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"top_category_list.html-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B\">top_category_list.html を使用するように設定を書き換える <a class=\"direct-link\" href=\"#top_category_list.html-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%82%92%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%82%8B\">#</a></h2>\n<p>自分の octopress リポジトリの <code>_config.yml</code> をエディタで開き、</p>\n<p>以下のように変更する</p>\n<pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token comment\"># [変更]custom/asides/top_category_list.html を任意の位置に挿入する</span><br><span class=\"token key atrule\">default_asides</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>custom/asides/about.html<span class=\"token punctuation\">,</span> asides/recent_posts.html<span class=\"token punctuation\">,</span> custom/asides/top_category_list.html<span class=\"token punctuation\">]</span><br><br><br><span class=\"token comment\"># [追加]カテゴリの表示件数</span><br><span class=\"token key atrule\">top_category_limit</span><span class=\"token punctuation\">:</span> <span class=\"token number\">15</span></code></pre>\n<h2 id=\"%E5%8B%95%E3%81%8B%E3%81%99\">動かす <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h2>\n<p><code>rake generate</code> して <code>rake preview</code> して確認した後、<code>rake deploy</code> しましょう。</p>\n<p>自分のブログに適用してみました。</p>\n<ul>\n<li><a href=\"http://amay077.github.com/\">Experiments Never Fail</a></li>\n</ul>\n<p>Top Category List だけだと当然ながらすべてのカテゴリがわからないので、別途全てのカテゴリを列挙するページを作って、'view All-Categories' でリンクしてます。</p>\n",
      "date_published": "2013-03-31T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/29/sublimetext2-boxselection/",
      "url": "https://blog.amay077.net/blog/2013/03/29/sublimetext2-boxselection/",
      "title": "Sublime Text 2 で箱型選択する",
      "content_html": "<p>Mac の場合、「<strong><code>option</code> キーを押しながらマウスをドラッグ</strong>」でした。</p>\n<!--more-->\n<p>キーボードでやるとか、Windows の人は、</p>\n<ul>\n<li><a href=\"http://www.sublimetext.com/docs/2/column_selection.html\">Column Selection - Sublime Text 2 Documentation</a></li>\n</ul>\n<p>を見てください。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/sublimetext2_boxselection_1.png\" alt=\"&quot;1&quot;\"></p>\n<p>切り取った後は、左詰めされます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/sublimetext2_boxselection_2.png\" alt=\"&quot;2&quot;\"></p>\n",
      "date_published": "2013-03-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/29/bitcasa-tips-2/",
      "url": "https://blog.amay077.net/blog/2013/03/29/bitcasa-tips-2/",
      "title": "Bitcasa は Mac の Terminal で操作できたよ",
      "content_html": "<p><a href=\"http://amay077.github.com/blog/2013/03/25/bitcasa-tips-1/\">Bitcasa を使っていて「おや？」と思ったこと</a> の続きというか対策というか。</p>\n<!--more-->\n<blockquote>\n<p>あれ？コピーしたと思ったんだけどなあ</p>\n<p>Finder でコピーして &lt;中略&gt; なんかファイル数が少ない事があったようななかったような。。。</p>\n</blockquote>\n<p>という事があって、アップし損ねたファイルをアップロードしようとした時の話。</p>\n<p>ファイルを一つずつ目視確認してくのツラいので、Finder で全ファイル選択して Bitcasa 側へコピー。その後、既に存在してるファイルはスキップするか訪ねてくるので「スキップ」、これで勝つる！と思ったら、そのチェックをすり抜けてまたアップロードを始めてしまう Bitcasa さん。。。例えば hoge.dat ってファイルがアップ済で、手元の hoge.data をコピーすると既に存在してる？とか訪ねてこずにいきなり hoge2.dat とかできちゃいます。。。</p>\n<p>これは厳しい。</p>\n<p>(Finder で Bitcasa Infinite Drive の中をよく観察していると、ファイル名がうっすらグレイで表示されているものがあります(ローカルにキャッシュされてないファイルなのかな？)。それらは更新日付が <code>1984年1月24日火曜日 17:00</code> になってて、これらのファイルの一致確認で「一致せず」と判断されてるのではないかと思われます。)</p>\n<p>Terminal でも使えればスクリプトでもなんでも使えるのですが、</p>\n<ul>\n<li><a href=\"http://www.itmedia.co.jp/pcuser/articles/1302/14/news019.html\">どっちが使える？：「Pogoplug cloud」vs.「Bitcasa」――容量無制限オンラインストレージ対決 (1/4) - ITmedia PC USER</a></li>\n</ul>\n<p>には、</p>\n<blockquote>\n<p>Bitcasaはコマンドプロンプトからはディレクトリが見えない（移動、作成、削除はできる）</p>\n</blockquote>\n<p>と書いてあったのでムリかなーと思いつつ、やってみました。</p>\n<pre><code>cd /Volumes/Bitcasa\\ Infinite\\ Drive\nls\n</code></pre>\n<p>すると、、、<strong>見える！私にも見えるぞ！</strong></p>\n<p>普通にディレクトリもファイルも確認できました。<code>cp mv mkdir</code>  などのコマンドも普通に使えました。(Windows だと NG なのかな？)</p>\n<p>これならイケるで！ということでこんなコマンドを用意。</p>\n<pre><code>cp -n -R . /Volumes/Bitcasa\\ Infinite\\ Drive/data\n</code></pre>\n<p>カレントディレクトリ(含むサブディレクトリ)のファイルを <code>Bitcasa Infinite Drive/data</code> ディレクトリに <strong>存在しないファイルだけ</strong> コピーします。</p>\n<p>ログを取りたい場合は、</p>\n<pre><code>cp -n -R -v . /Volumes/Bitcasa\\ Infinite\\ Drive/data &gt; log.txt\n</code></pre>\n<p>でおｋ。<br>\n注意点は <code>-n</code> は更新されてるかはチェックしてくれない事(というか、逆にタイムスタンプを判別したら Finder と同じ現象になると思う)</p>\n<p>コマンドが使えるのは嬉しいですね。<br>\nBitcasa のミラーリングバックアップはネットワークドライブに対応してませんが、定期的に cp するコマンドを走らせれば実用レベルだと思います。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/cp.1.html\">cp(1) OS X Manual Page</a> Linux の cp コマンドと微妙に違う。。。</li>\n</ul>\n",
      "date_published": "2013-03-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/26/walking-xamarin-components/",
      "url": "https://blog.amay077.net/blog/2013/03/26/walking-xamarin-components/",
      "title": "Xamarin Component Store を眺めてみる",
      "content_html": "<p>Xamarin には Component Store というものがあって、Xamarin で利用できる部品をここから購入することができます。(FREE もあります)</p>\n<!--more-->\n<p>こちらです</p>\n<ul>\n<li><a href=\"http://components.xamarin.com/\">Components / Xamarin</a></li>\n</ul>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_1.png\" alt=\"&quot;1&quot;\"></p>\n<p>TAGS のところで対応プラットフォームを絞りこめます。<br>\niOS は MonoTouch の歴史が長いだけあってなかなかの数のコンポーネントがありますが、Android, Windows に関してはまだこれから、という感じでしょうか。<br>\niOS/Android 両対応のコンポーネントも1ページに収まる程度の数はあります。</p>\n<h2 id=\"%E8%A9%A6%E3%81%97%E3%81%AB%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">試しにつかってみる <a class=\"direct-link\" href=\"#%E8%A9%A6%E3%81%97%E3%81%AB%E3%81%A4%E3%81%8B%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>試しに</p>\n<ul>\n<li><a href=\"http://components.xamarin.com/view/alert-center/\">Alert Center / Components / Xamarin</a></li>\n</ul>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_2.png\" alt=\"&quot;2&quot;\"></p>\n<p>を使ってみます。</p>\n<p>確か、Component Store は Xamarin Studio と連携してるとのことなので、そちらから使ってみましょう。</p>\n<h3 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">プロジェクトの作成 <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">#</a></h3>\n<p>Android Application、名称は <strong>AlertCenterSample</strong> としました。</p>\n<h3 id=\"%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92-(nu)get!\">コンポーネントを (Nu)Get! <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%82%92-(nu)get!\">#</a></h3>\n<p>メニュー → プロジェクト → Edit Components… から。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_3.png\" alt=\"&quot;3&quot;\"></p>\n<p>こんな画面になりました。次に <strong>Open Conponent Store</strong> をクリック。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_4.png\" alt=\"&quot;4&quot;\"></p>\n<p>Xamarin Components が出ました。Webサイトと同じやつです<br>\n。この中から <strong>Alert Center</strong> をクリック。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_5.png\" alt=\"&quot;5&quot;\"></p>\n<p>なんか動画が真っ黒ですが。気にせず <strong>Add to App</strong> をクリック。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_6.png\" alt=\"&quot;6&quot;\"></p>\n<p>ソリューションエクスプローラの Components に Alert Center が追加されました。また Getting Started が表示されています。</p>\n<p>これで部品が追加できたようです、簡単でした。ちなみにコレ、NuGet というものが使われているそうです。(私は VS2005 以前の人なので使った事がありません)</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_7.png\" alt=\"&quot;7&quot;\"></p>\n<p>ここから、Getting Started に表示されている通りに実装して動かしてみます。</p>\n<h3 id=\"androidmanifest-%E3%81%AB%E6%A8%A9%E9%99%90%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">AndroidManifest に権限を追加する <a class=\"direct-link\" href=\"#androidmanifest-%E3%81%AB%E6%A8%A9%E9%99%90%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h3>\n<p>最初、完全に見落としていましたが、AndroidManifest.xml に <code>SYSTEM_ALERT_WINDOW</code> 権限を追加してください、と書いてありました。<br>\nXamarin Studio での AndroidManifest.xml 編集については、</p>\n<ul>\n<li><a href=\"http://amay077.github.com/blog/2013/03/02/xamarin-android-permission/\">Xamarin.Android で PERMISSION を設定する - Experiments Never Fail</a></li>\n</ul>\n<p>をご参考に。</p>\n<p>確かに、<code>SYSTEM_ALERT_WINDOW</code> もありますね。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_9.png\" alt=\"&quot;9&quot;\"></p>\n<p>この手順を飛ばすと、ボタンをクリックした瞬間にアプリが落ちます(経験者</p>\n<h3 id=\"%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0\">コーディング <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0\">#</a></h3>\n<p>Getting Started のコードをコピペで。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token operator\">&lt;</span>省略<span class=\"token operator\">></span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Xamarin<span class=\"token punctuation\">.</span>Controls</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">AlertCenterSample</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"AlertCenterSample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Activity1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Get our button from the layout resource,</span><br>            <span class=\"token comment\">// and attach an event to it</span><br>            <span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">delegate</span><br>            <span class=\"token punctuation\">{</span><br>                AlertCenter<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>Init <span class=\"token punctuation\">(</span>Application<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                AlertCenter<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>PostMessage <span class=\"token punctuation\">(</span><span class=\"token string\">\"Knock knock!\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Who's there?\"</span><span class=\"token punctuation\">,</span> Resource<span class=\"token punctuation\">.</span>Drawable<span class=\"token punctuation\">.</span>Icon<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                AlertCenter<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span>PostMessage <span class=\"token punctuation\">(</span><span class=\"token string\">\"Interrupting cow.\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Interrupting cow who?\"</span><span class=\"token punctuation\">,</span><br>                                                 Resource<span class=\"token punctuation\">.</span>Drawable<span class=\"token punctuation\">.</span>Icon<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><br>                    Console<span class=\"token punctuation\">.</span>WriteLine <span class=\"token punctuation\">(</span><span class=\"token string\">\"Moo!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>そういえば、コンポーネントを取得直後、なぜか Xamarin Studio さんがそれを認識してくれずエラーが出ていました(ビルドはできた)が、Xamarin Studio を再起動したらエラーは消えました。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_8.png\" alt=\"&quot;8&quot;\"></p>\n<h3 id=\"%E5%8B%95%E3%81%8B%E3%81%99\">動かす <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%99\">#</a></h3>\n<p>ビルドして実行するだけです。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/walking_xamarin_components_10.png\" alt=\"&quot;10&quot;\"></p>\n<h3 id=\"ios%2Fandroid-%E4%B8%A1%E5%AF%BE%E5%BF%9C%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%A6%E3%82%82-'write-once'-%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84(%E3%81%8B%E3%82%82%E7%9F%A5%E3%82%8C%E3%81%AA%E3%81%84)\">iOS/Android 両対応と言っても 'Write once' ではない(かも知れない) <a class=\"direct-link\" href=\"#ios%2Fandroid-%E4%B8%A1%E5%AF%BE%E5%BF%9C%E3%81%A8%E8%A8%80%E3%81%A3%E3%81%A6%E3%82%82-'write-once'-%E3%81%A7%E3%81%AF%E3%81%AA%E3%81%84(%E3%81%8B%E3%82%82%E7%9F%A5%E3%82%8C%E3%81%AA%E3%81%84)\">#</a></h3>\n<p>Alert Center は、iOS/Android 両対応とされていますが、Getting Started の iOS と Android のコードをよく見るとわかりますが、異なっています。「Android は iOS に '似せて' いる」とも書かれています。<br>\n同じコードで iOS/Android 共に動く！という夢はやっぱり見ない方がいいです。クロスプラットフォームで開発する時は View の部分はプラットフォーム毎にプロジェクトを分けなければならないので、共有できるコードも少ないと思います。</p>\n<p>他のコンポーネントも、UI に絡むものは Look&amp;Feel が統一できるだけで、(コンポーネントを使った)実装はプラットフォーム毎に必要と考えた方が良いでしょう。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Xamarin Studio に統合された Component Store はとても簡単に使うことができました。</p>\n<p>試しに使った Alert Center の他にも、</p>\n<ul>\n<li><a href=\"http://components.xamarin.com/view/azure-mobile-services/\">Mobile Services by Windows Azure</a></li>\n<li><a href=\"http://components.xamarin.com/view/json.net\">Json.NET</a></li>\n<li><a href=\"http://components.xamarin.com/view/xamarin.auth\">Xamarin.Auth</a></li>\n<li><a href=\"http://components.xamarin.com/view/xamarin.mobile\">Xamarin.Mobile</a></li>\n<li><a href=\"http://components.xamarin.com/view/xamarin.social\">Xamarin.Social</a></li>\n<li><a href=\"http://components.xamarin.com/view/zxing.net.mobile\">ZXing.Net.Mobile</a></li>\n</ul>\n<p>などは、どこかで使えそうです。</p>\n<p>また、Component Store でなくても、.NET framework の基本的なクラスのみで書かれた(<strong>POCO</strong> な)ライブラリであれば、Xamarin でも概ね使うことができます。<br>\n例えば、Amazon Web Services の .NET SDK</p>\n<ul>\n<li><a href=\"http://aws.amazon.com/jp/sdkfornet/\">AWS SDK for .NET ｜ アマゾン ウェブ サービス（AWS 日本語）</a></li>\n</ul>\n<p>は、Xamarin.Mac で使うことができました。(Xamain.iOS/Android は未確認)</p>\n<p>View 部分の共有は最初から想定しない思想なので、Model 部分を開発する際に使えるコンポーネントがさらに充実していくことに期待します。</p>\n",
      "date_published": "2013-03-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/25/bitcasa-tips-1/",
      "url": "https://blog.amay077.net/blog/2013/03/25/bitcasa-tips-1/",
      "title": "Bitcasa を使っていて「おや？」と思ったこと",
      "content_html": "<p>BackBlaze から Bitcasa に乗り換えて半月ほど。<br>\n今は NAS やら先に Glacier に上げておいたデータをせこせこ Bitcasa にアップロードしているところです。</p>\n<!--more-->\n<p>主に Bitcasa の Mac版を使ってて、気になる挙動を挙げてみます。<br>\n<strong>※主観を多分に含みます</strong></p>\n<h3 id=\"2013.4.12-%E8%BF%BD%E8%A8%98\">2013.4.12 追記 <a class=\"direct-link\" href=\"#2013.4.12-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>コマンドでキャッシュをクリアするとだいぶ安定するようになりました！ → <a href=\"http://amay077.github.io/blog/2013/04/12/bitcasa-clear-cache/\">Bitcasa(Mac)が不安定になったらこのコマンドを叩け</a></p>\n<h2 id=\"%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B-bitcasa-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%A8%E3%81%8B\">使ってる Bitcasa ソフトウェアのバージョンとか <a class=\"direct-link\" href=\"#%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B-bitcasa-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%A8%E3%81%8B\">#</a></h2>\n<ul>\n<li>1.03 (Build 1041)</li>\n<li>ProductName:\tMac OS X</li>\n<li>ProductVersion:\t10.8.2</li>\n<li>BuildVersion:\t12C2034</li>\n</ul>\n<h2 id=\"%E5%A4%A7%E5%AE%B9%E9%87%8F%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%B8%80%E6%B0%97%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B%E3%81%A8%E9%80%94%E4%B8%AD%E3%81%A7%E9%80%B2%E6%8D%97%E3%81%8C%E9%80%B2%E3%81%BE%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B\">大容量のデータを一気にコピーすると途中で進捗が進まなくなる <a class=\"direct-link\" href=\"#%E5%A4%A7%E5%AE%B9%E9%87%8F%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%B8%80%E6%B0%97%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC%E3%81%99%E3%82%8B%E3%81%A8%E9%80%94%E4%B8%AD%E3%81%A7%E9%80%B2%E6%8D%97%E3%81%8C%E9%80%B2%E3%81%BE%E3%81%AA%E3%81%8F%E3%81%AA%E3%82%8B\">#</a></h2>\n<p>Bitcasa はソフトウェアをインストールすると、仮想ドライブとして Finder に表示され、以降そこへのファイルコピーがクラウドへのアップロードになります。</p>\n<p>外付けHDD や NAS から、大量＆大容量のファイルを一気に Bitcasaドライブへコピーすると、コピーが完了せずに途中で止まってる事象に多々遭遇しました。<br>\nもう少し詳しく書くと</p>\n<ul>\n<li>１時間くらい放置しておくとだいたい発生してる感じ</li>\n<li>Finder でのコピーの進捗ゲージが一向に進まない感じ</li>\n<li>ファイルサイズ(コピーするファイルの総容量)が 50GB くらいを超えると発生する感じ。(この現象を経験して以降、30〜40GB くらいで分割してコピーしてますがそれだと発生しません)</li>\n</ul>\n<p>こんな感じ。<br>\n容量については、Bitcasa の Cache とやらが既定で 35GB くらいなので、それを超えるとアウトなのかも＆設定で Cache 容量を増やせば耐えられるのかも。(未確認)</p>\n<h2 id=\"%E3%81%82%E3%82%8C%EF%BC%9F%E3%82%B3%E3%83%94%E3%83%BC%E3%81%97%E3%81%9F%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9%E3%81%AA%E3%81%82\">あれ？コピーしたと思ったんだけどなあ <a class=\"direct-link\" href=\"#%E3%81%82%E3%82%8C%EF%BC%9F%E3%82%B3%E3%83%94%E3%83%BC%E3%81%97%E3%81%9F%E3%81%A8%E6%80%9D%E3%81%A3%E3%81%9F%E3%82%93%E3%81%A0%E3%81%91%E3%81%A9%E3%81%AA%E3%81%82\">#</a></h2>\n<p>Finder でコピーして、Bitcasa がアップロード完了した(ステータスバーのアイコンでアップロード残が分かる)後、Bitcasa の Webサイトへ行ってちゃんとアップロードされたか確認してみると、なんかファイル数が少ない事があったようななかったような。。。もう一度、Bitcasa ドライブへ放り込むとちゃんとアップロードされたりして、、、よくわからないです。気のせいかもしれません、たぶんそうです。</p>\n<h2 id=\"10mb-remaining-%E3%81%8B%E3%82%89%E4%B8%80%E5%90%91%E3%81%AB%E6%B8%9B%E3%82%89%E3%81%AA%E3%81%84%E3%82%93%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9\">10MB Remaining から一向に減らないんですけど <a class=\"direct-link\" href=\"#10mb-remaining-%E3%81%8B%E3%82%89%E4%B8%80%E5%90%91%E3%81%AB%E6%B8%9B%E3%82%89%E3%81%AA%E3%81%84%E3%82%93%E3%81%A7%E3%81%99%E3%81%91%E3%81%A9\">#</a></h2>\n<p>ステータスバーで、アップロードの残り容量が常に確認できるんですけど、快調にアップロードが進行して、「よし、もう終わるな」ってくらいの容量でなぜか足踏み。\tファイルのアップロードは終わってるみたい。Mac を再起動などすると「All files are up to date」とか言われるんので、表示が間違ってるだけですかね。コピーの中止とかいろいろゴチャゴチャやってたので、ソフトウェアを再インストールでもすれば治るかもしれませんが面倒なのでやってません。</p>\n<h2 id=\"android-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E6%BF%81%E7%82%B9%E3%83%BB%E5%8D%8A%E6%BF%81%E7%82%B9%E3%81%AE%E6%89%B1%E3%81%84%E3%81%8C%E6%AE%8B%E5%BF%B5\">Android アプリで濁点・半濁点の扱いが残念 <a class=\"direct-link\" href=\"#android-%E3%82%A2%E3%83%97%E3%83%AA%E3%81%A7%E6%BF%81%E7%82%B9%E3%83%BB%E5%8D%8A%E6%BF%81%E7%82%B9%E3%81%AE%E6%89%B1%E3%81%84%E3%81%8C%E6%AE%8B%E5%BF%B5\">#</a></h2>\n<p>「ガンダム」が「カ゛ンタ゛ム」とか、「アップル」が「アッフ゜ル」に。<br>\nWeb ではちゃんと見えるので Androidアプリ固有の問題だと想いますが。</p>\n<p>総じてまだ荒削りだなー、という感じ。<br>\nまあ、これから改善されてくことに期待ですね、今のところは。</p>\n<h3 id=\"2013.3.26-%E8%BF%BD%E8%A8%98\">2013.3.26 追記 <a class=\"direct-link\" href=\"#2013.3.26-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>Bitcasa さん [1.04 (Build 1057)] が来てたのでアップデートしたら、<br>\n「xxMB Remaining」のところが「Finalizing...」のまま、かれこれ30分くらい経ってますね。。。</p>\n<p>その後、1時間くらい経過しましたが変化なしなので待ちきれず Bitcasa ソフトウェアを「Exit」しました。<br>\nそしたら今度は「Exiting Bitcasa...」のまま1時間くらい経過してますねorz</p>\n<h3 id=\"2013.3.26-%E3%81%95%E3%82%89%E3%81%AB%E8%BF%BD%E8%A8%98\">2013.3.26 さらに追記 <a class=\"direct-link\" href=\"#2013.3.26-%E3%81%95%E3%82%89%E3%81%AB%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>「Exiting Bitcasa...」のまま2時間くらい経過したので、待ちかねて Mac 毎再起動。<br>\nその後は何事もなかったかのように正常に動いてる Bitcasa さん。。。<br>\nちなみに [1.04 (Build 1057)] になってから、「xxMB Remainring(to go にラベルが変わった) で足踏み」は起こってないです。</p>\n<h3 id=\"2013.3.28-%E3%81%95%E3%82%89%E3%81%AB%E8%BF%BD%E8%A8%98\">2013.3.28 さらに追記 <a class=\"direct-link\" href=\"#2013.3.28-%E3%81%95%E3%82%89%E3%81%AB%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>[1.04 (Build 1057)] がどうにも調子悪いので [1.03 (Build 1041)] に入れなおした。<br>\n具体的には、Finder で大きめ(数GBくらい)のファイルを Bitcasa ドライブにコピーすると、程なくして「-50 エラー」でコピー失敗。Bitcasa 側には 0KB のファイルができて、消せなくなってしまった。<br>\n怖くてアップデートできないよー。</p>\n",
      "date_published": "2013-03-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/19/android-using-proguard/",
      "url": "https://blog.amay077.net/blog/2013/03/19/android-using-proguard/",
      "title": "Android で Proguard を使う(ADT17以降)",
      "content_html": "<p>割とハマったのでメモ。</p>\n<!--more-->\n<h2 id=\"proguard.cfg-%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95%E3%81%AF%E3%82%82%E3%81%86%E5%8F%A4%E3%81%84\">Proguard.cfg を使う方法はもう古い <a class=\"direct-link\" href=\"#proguard.cfg-%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95%E3%81%AF%E3%82%82%E3%81%86%E5%8F%A4%E3%81%84\">#</a></h2>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/bs-android/20120325/1332662384\">Androidに統合されたProGuardに関する改善点(ADT17) - Android(アンドロイド)情報-ブリリアントサービス</a><br>\n更新日-2012/03/25</li>\n</ul>\n<p>にあるように、ADT17 以降では、既定の難読化設定は SDK のディレクトリにありそれを参照するようになっている。<br>\nプロジェクト固有の設定は proguard-project.txt に書くように既定で準備されている。</p>\n<p>Android proguard でググって出てくる情報は、大抵は Proguard.cfg として説明されているので、その情報は断片的には使えるだろうが、古い情報として注意して参照したほうがよい。</p>\n<h2 id=\"-libraryjars-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">-libraryjars について <a class=\"direct-link\" href=\"#-libraryjars-%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h2>\n<p>外部ライブラリを使っている(/libs に jar を入れてる)場合、それらを -libraryjars xxx.jar と列挙しなければならないと <strong>思っていた</strong> が不要らしい。</p>\n<p>-libraryjars に列挙したら最初の一つしか library jar として認識してくれなくて「なにこれ？」と思ってググったら、</p>\n<ul>\n<li>[Using ProGuard with Android - StackOverflow]<br>\n(<a href=\"http://stackoverflow.com/questions/11246842/using-proguard-with-android/11249755#11249755\">http://stackoverflow.com/questions/11246842/using-proguard-with-android/11249755#11249755</a>) 回答日-2012/06/28</li>\n</ul>\n<blockquote>\n<ol>\n<li>ProGuard manual &gt; Troubleshooting &gt; Note: duplicate definition of program/library class</li>\n</ol>\n<p>The Android Ant/Eclipse builds already specify -injars/-libraryjars for you. If you specify them again in your configuration, ProGuard notes that they are duplicated. So don't specify -injars/-libraryjars.</p>\n</blockquote>\n<p>libs配下は既定で定義済だから proguard-project.txt の方で再定義しなくてよいらしい。</p>\n<h2 id=\"-dontwarn-%E3%81%A8%E3%81%8B--dontnote-%E3%81%A8%E3%81%8B\">-dontwarn とか -dontnote とか <a class=\"direct-link\" href=\"#-dontwarn-%E3%81%A8%E3%81%8B--dontnote-%E3%81%A8%E3%81%8B\">#</a></h2>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/rudi/20110205/1296914415\">Proguardでcan't find referenced class - そこはかとなく書くよ。</a></li>\n</ul>\n<p>「ほんとかなぁ」に同意。warning潰すのがデファクトなツールで良いの？</p>\n<h3 id=\"(%E7%A7%81%E3%81%8C)%E6%9C%AA%E8%A7%A3%E6%B1%BA%E3%81%AA%E5%95%8F%E9%A1%8C\">(私が)未解決な問題 <a class=\"direct-link\" href=\"#(%E7%A7%81%E3%81%8C)%E6%9C%AA%E8%A7%A3%E6%B1%BA%E3%81%AA%E5%95%8F%E9%A1%8C\">#</a></h3>\n<p>とあるメソッドの引数 <code>Hoge&lt;Piyo&gt; arg</code>  から、 <code>Class#getGenericInterfaces()</code> で <code>Piyo</code> を取得していたのだけど、Proguard かけたら、 <code>Hoge&lt;Piyo&gt;</code> が <code>Hoge</code> だけになって取れなくなってしまった。</p>\n<p>Java のイレイジャ云々か？とも思ったけど、メソッドの引数ならいけるはずだし…</p>\n<ul>\n<li><a href=\"http://blogs.wankuma.com/nagise/archive/2008/10/13/158708.aspx\">イレイジャではジェネリクスの何が消えるのか</a></li>\n</ul>\n<p>StackOverflow さんによると、</p>\n<ul>\n<li><a href=\"http://stackoverflow.com/a/14449289/789062\">Google Drive API doesn't play well with ProGuard (NPE)</a></li>\n</ul>\n<p><code>-keepattributes *Annotation*</code> をつけるといいよ的な事が書いてあるんだけど、うまくいかなかった。</p>\n<h2 id=\"%E9%9B%91%E6%84%9F\">雑感 <a class=\"direct-link\" href=\"#%E9%9B%91%E6%84%9F\">#</a></h2>\n<p>情報が新旧錯綜してる発展途上なツールを苦労して使って、設定も実装に依存するし(自動化できない)、運用時もデバッグしづらいし、この難読化って作業、コスパどうなんすかね？ 所詮 Webサービスのフロントエンドである Java プログラムに、そこまで難読化にこだわることはないんじゃないかなーという私見です。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/Superdry/20110121/1295641171\">ProGuardで-keepオプションのメモ - superdry memorandum :-D</a></li>\n</ul>\n",
      "date_published": "2013-03-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/18/xamarin-ios-using-gps/",
      "url": "https://blog.amay077.net/blog/2013/03/18/xamarin-ios-using-gps/",
      "title": "Xamarin.iOS で GPS を使う",
      "content_html": "<p>Xamarin.iOS で GPS を使ってみます。<br>\nちなみ当方、iOS開発についてはシロートに毛が生えた程度なため、Objective-C でも GPS は使ったことありません。</p>\n<!--more-->\n<p>ので、こちらのサンプルを、Xamarin.iOS で書きなおしてみました。</p>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/ntaku/20090228/1235816377\">GPSを利用する方法 - プログラミングノート</a></li>\n</ul>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// LocationManager 的なやつ</span><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">CLLocationManager</span> _man <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    _man <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CLLocationManager</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>    <span class=\"token comment\">// ボタンをタップした時</span><br>    btnListen<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <br>    <span class=\"token punctuation\">{</span><br>        _man<span class=\"token punctuation\">.</span>DesiredAccuracy <span class=\"token operator\">=</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 希望精度5kmくらい</span><br>        _man<span class=\"token punctuation\">.</span>LocationsUpdated <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token comment\">// 位置を受信した時のイベント</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> l <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>Locations<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>Locations<span class=\"token punctuation\">.</span>Length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>            <br>            lblLocation<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lat/Lng = {0}/{1}\"</span><span class=\"token punctuation\">,</span> <br>                                             l<span class=\"token punctuation\">.</span>Coordinate<span class=\"token punctuation\">.</span>Latitude<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>Coordinate<span class=\"token punctuation\">.</span>Longitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <br>\t\t<span class=\"token comment\">// 受信開始</span><br>        _man<span class=\"token punctuation\">.</span><span class=\"token function\">StartUpdatingLocation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>簡単すぎるやばい。<br>\nXamarin.iOS のクラスライブラリが CoreLocation をうまくラップしてくれて、<code>LocationsUpdated</code> てなイベントも用意してくれてます。(Android の LocatiomManager にはイベントはなかった)<br>\nそして何度も言いますが Obj-C のキモい構文じゃないのでコードが見やすい書きやすい。</p>\n<p>もうちょっとちゃんとしたサンプルは公式をみて下さい。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/ntaku/20090228/1235816377\">GPSを利用する方法 - プログラミングノート</a></li>\n<li><a href=\"http://docs.xamarin.com/samples/CoreLocation\">Core Location ｜ xamarin</a></li>\n</ul>\n",
      "date_published": "2013-03-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/18/xamarin-alpha-async-await-preview/",
      "url": "https://blog.amay077.net/blog/2013/03/18/xamarin-alpha-async-await-preview/",
      "title": "Xamarin の Alpha版で async/await を試す",
      "content_html": "<p>Xamarin Blog で &quot;<a href=\"http://blog.xamarin.com/brave-new-async-mobile-world/\">Alpha版だけど async/await 使えるようになったよー</a>&quot; との事だったのでさっそく試してみました。</p>\n<!--more-->\n<p>以前から、<a href=\"http://xamarin.uservoice.com/forums/144858-xamarin-suggestions/suggestions/2697497-async-await-support\">&quot;Good news – we plan to release full support for async/await in all our products in April of 2013.&quot;</a> と言われていたので予定どおりですかね。</p>\n<h2 id=\"alpha%E7%89%88%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">Alpha版をインストール <a class=\"direct-link\" href=\"#alpha%E7%89%88%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h2>\n<p>Xamarin Studio のシステムメニュー → アップデートをチェック で、 &quot;Update channel&quot; で <strong>Alpha</strong> を選ぶとインストールできます。もちろん、アルファ版なので自己責任で。</p>\n<p>インストール後の、Xamarin と各SDK のバージョンはこう↓なってました。</p>\n<blockquote>\n<p>Xamarin Studio<br>\nVersion 4.0.2 (build 18)<br>\nInstallation UUID: xxxxxx<br>\nRuntime:<br>\nMono 3.0.7 (master/514fcd7)<br>\nGTK 2.24.16<br>\nGTK# (2.12.0.0)<br>\nPackage version: 300070000</p>\n<p>Apple Developer Tools<br>\nXcode 4.6 (2066)<br>\nBuild 4H127</p>\n<p>Xamarin.Mac<br>\nXamarin.Mac: Not Installed</p>\n<p>Xamarin.Android<br>\nVersion: 4.7.0 (Trial Edition)<br>\nAndroid SDK: /Users/hrnv/dev/sdks/android-sdk-macosx</p>\n<p>Xamarin.iOS<br>\nVersion: 6.3.0.255 (Trial Edition)<br>\nHash: ba05545</p>\n</blockquote>\n<h2 id=\"%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%A0%E3%81%A8%E2%80%A6\">同期処理だと… <a class=\"direct-link\" href=\"#%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86%E3%81%A0%E3%81%A8%E2%80%A6\">#</a></h2>\n<p>「ボタンを押すと <strong>超時間のかかる処理</strong> を実行して、結果を表示する」というケースで試してみます。</p>\n<p>まず何も考えず同期処理で書くと、、、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// ボタンが押されたよ</span><br><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    button<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 実行中はボタン使えなくする</span><br><br>    <span class=\"token comment\">// 超時間のかかる計算</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token function\">HeavyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:{0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 結果を表示する</span><br>    button<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 超時間のかかる計算</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">HeavyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 超時間をかけて 5 を計算したつもり</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>こんな感じ。<br>\n動かしてみます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_async_await_preview_anr.png\" alt=\"&quot;anr&quot;\"></p>\n<p>あえなくフリーズ＆ANR、当然です。</p>\n<h2 id=\"async%2Fawait-%E5%8C%96\">async/await 化 <a class=\"direct-link\" href=\"#async%2Fawait-%E5%8C%96\">#</a></h2>\n<p>async/await については、ググればたくさん情報が出てきますが、探した中でもっとも簡単とおもわれる例を紹介します。</p>\n<ul>\n<li><a href=\"http://kimux.net/?p=902\">[C#]async/awaitの使い方メモ、その１。 ｜ Kimux.Net</a></li>\n</ul>\n<p>さて、先ほどのプログラムを、async/await 構文を使って非同期化してみます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// ボタンが押されたよ</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    button<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 実行中はボタン使えなくする</span><br><br>    <span class=\"token comment\">// 超時間のかかる計算</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">HeavyCalcAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// ここから下は UIスレッド で実行される</span><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:{0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 結果を表示する</span><br>    button<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// 超時間のかかる計算</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">HeavyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Thread<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">return</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 超時間をかけて 5 を計算したつもり</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">// HeavyCalc をラップして非同期で実行</span><br><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">Task<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">HeavyCalcAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">return</span> Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">HeavyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>変更点を、ソースの下の方から。<br>\nまず、<code>HeavyCalc</code> をラップして、 <code>HeavyCalcAsync</code> という関数を作りました。<code>Task</code> クラスを使って非同期で <code>HeavyCalc</code> を実行する処理です。async/await のルールに従って <code>Task</code> クラスを返値にします。メソッド名のおしりに &quot;Async&quot; を付けるのもルールです。</p>\n<p>次に、 <code>button1_Click</code> です。メソッドの定義に <code>async</code> キーワードを付けます。このメソッドが非同期である事を示すと共に、メソッド内に <code>await</code> キーワードが含まれる事を意味します。メソッド内に <code>await</code> が無いとエラーになります。(Xamarin Studio でもちゃんとエラーにしてくれました)</p>\n<p>最後に、「超時間のかかる計算」の呼び出し。<code>HeavyCalc</code> の代わりに <code>HeavyCalcAsync</code> を <code>await</code> 付きで記述します。</p>\n<p>これで終わり。<br>\n「button1_click は、非同期で HeavyCalcAsync を実行し、その終了を待って、その後続処理を <strong>UIスレッド</strong> で続行する」という意味になりました。</p>\n<p>動かしてみます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_async_await_preview_asyc.png\" alt=\"&quot;async&quot;\"></p>\n<p>ANR でませんし、ちゃんと計算後に画面が更新されます。</p>\n<h2 id=\"asynctask-%E3%81%A7%E6%9B%B8%E3%81%8F%E3%81%A8%E2%80%A6\">AsyncTask で書くと… <a class=\"direct-link\" href=\"#asynctask-%E3%81%A7%E6%9B%B8%E3%81%8F%E3%81%A8%E2%80%A6\">#</a></h2>\n<p>Android で非同期処理と言えば <code>AsyncTask</code> がよく紹介されてますので、一応、それを使うとどうなるのか書いてみます。</p>\n<p>まず、AsyncTask を拡張して、HeavyCalc をバックグラウンドで実行する <code>HeavyCalcTask</code> を用意します。<br>\n<code>OnPreExecute</code> と <code>OnPostExecute</code> でボタンを無効/有効 にしています。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// HeavyCalc を非同期で実行する AsyncTask</span><br><span class=\"token keyword\">class</span> <span class=\"token class-name\">HeavyCalcTask</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Android<span class=\"token punctuation\">.</span>OS<span class=\"token punctuation\">.</span>AsyncTask</span></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Button</span> button<span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token function\">HeavyCalcTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span> button<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>button <span class=\"token operator\">=</span> button<span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> implemented abstract members of AsyncTask</span><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnPreExecute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        button<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 実行中はボタン使えなくする</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span> <span class=\"token function\">DoInBackground</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">params</span> <span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> @<span class=\"token keyword\">params</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 超時間のかかる計算</span><br>        <span class=\"token keyword\">return</span> <span class=\"token function\">HeavyCalc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnPostExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span> result<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">{</span><br>        button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result:{0}\"</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 結果を表示する</span><br>        button<span class=\"token punctuation\">.</span>Enabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br>    <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使う方は、まあ普通に。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// ボタンが押されたよ</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">button1_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventArgs</span> e<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> asyncTask <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HeavyCalcTask</span><span class=\"token punctuation\">(</span>button<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    asyncTask<span class=\"token punctuation\">.</span><span class=\"token function\">Execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>クラスを作らなきゃいけないし、AsyncTask の仕方ないところですけど、View に対する処理とロジックが同じクラスに同居しちゃうし、複数の非同期処理を逐次実行できないし、とあまり良い所が見えません。</p>\n<p>そもそも Xamarin.iOS などとクロスプラットフォームを考えるならプラットフォーム固有の機能の利用は最小限に留めたいので、Xamarin.Android で AsyncTask を使う意味は「ない」でしょう。<br>\n(Xamarin.iOS でも async/await は使えるそうです。)</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>知らない人がコード見ると「これ await してたら ANR 起こりますよね？」とか「これ HeavyCalcAsync が非同期だから、次の行がすぐ実行されちゃいますよね？」とか言われそうｗ</li>\n<li>諸君らが愛してくれた <code>AsyncTask</code> は死んだ</li>\n<li>async/await が使えるようになるまでは <code>Task.Factory.StartNew</code> で。</li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://blog.xamarin.com/brave-new-async-mobile-world/\">Xamarin previews C# async on iOS and Android ｜ Xamarin Blog</a></li>\n<li><a href=\"http://kimux.net/?p=902\">[C#]async/awaitの使い方メモ、その１。 ｜ Kimux.Net</a></li>\n<li><a href=\"http://xin9le.net/archives/tag/async-await/page/2\">async/await : xin9le note</a></li>\n<li><a href=\"http://www.atmarkit.co.jp/fdotnet/chushin/masterasync_01/masterasync_01_01.html\">.NET開発における非同期処理の基礎と歴史 － ＠IT</a></li>\n</ul>\n",
      "date_published": "2013-03-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/18/backbraze-vs-pogoplug-vs-bitcasa/",
      "url": "https://blog.amay077.net/blog/2013/03/18/backbraze-vs-pogoplug-vs-bitcasa/",
      "title": "さよなら BackBlaze、ようこそ Bitcasa",
      "content_html": "<p>1年くらい前から、PC のバックアップに、BackBlaze を使ってました。<br>\n<a href=\"http://www.sourcenext.com/product/pc/sys/pc_sys_000789/\">SourceNext</a> のじゃなくて本家サイトからの購入で。</p>\n<!--more-->\n<p>BackBlaze は「１契約あたり１PC」となっているので、PC を買い換えた時にバックアップした内容引き継げないんですよね。<br>\nで、一回ダウンロードして、PCを &quot;解除&quot; して、新しいPCを &quot;登録&quot; してバックアップしなおすという手間が発生するわけですが、それなら Pogoplug, Bitcasa など、類似サービスも出てきてたので、こいつらを評価してみた次第です。<br>\nあと、PC のバックアップには Backblaze で満足していましたが、NAS のバックアップも一緒に行いたいなーという希望があったので。</p>\n<h2 id=\"backblaze\"><a href=\"http://www.backblaze.com/\">Backblaze</a> <a class=\"direct-link\" href=\"#backblaze\">#</a></h2>\n<ul>\n<li>$5/month:容量無制限 (2年契約すると $3.96/month)</li>\n</ul>\n<p>なんだかんだで１年くらい空気のような感覚で使ってました。まあコレ系サービスの宿命みたいなもんでしょうが「行きはよいよい帰りは怖い」で、溜める方は快適(放っておくだけ)なんですけど、取り出す方は苦労しました。「Mac の Timemachine みたいなことをクラウドでやってくれる」と捉えれば良いサービスだとおもいます。私の場合、NAS のバックアップをどうしても行いたかったので、Backblaze のサービス範囲を超えちゃいました。</p>\n<h3 id=\"good\">Good <a class=\"direct-link\" href=\"#good\">#</a></h3>\n<ul>\n<li>ちゃんとバックアップしてくれてた（ぉぃぉぃ</li>\n</ul>\n<h3 id=\"bad\">Bad <a class=\"direct-link\" href=\"#bad\">#</a></h3>\n<ul>\n<li>PCのバックアップが目的のサービスなので、ネットワークドライブのバックアップはできない。\n<ul>\n<li>Windows の時は、ネットワークドライブをドライブにマウントすることでバックアップ対象にできたような気がしないでもないが、Mac にしてからはネットワークドライブがバックアップ対象として選択できない。</li>\n</ul>\n</li>\n<li>ダウンロードが遅い。専用ツールでDL中、途中で失敗するとダイアログ表示して止まってる（勝手にリトライとかして欲しい）\n<ul>\n<li>結局、専用ツール使わず Web から zip ダウンロードした方が安定してた印象。</li>\n</ul>\n</li>\n<li>何日もかけてバカデカい zip を落として、OS のファイルシステムの仕様かなんかで解凍できなくて「意味無いじゃん」ってのを何度か体験した。。。(専用ツール用意してるなら zip じゃなくてローカルディスクにミラーリングとかしてほしいんすよね)</li>\n<li>こんな情報も <a href=\"http://d.hatena.ne.jp/de0/20130126/1359201444\">Backblazeは&quot;容量は&quot;無制限だけどファイル数は無制限じゃなかった話 - メモ帳DPA</a></li>\n</ul>\n<h2 id=\"pogoplug-cloud\"><a href=\"https://pogoplug.com/ja/cloud\">Pogoplug Cloud</a> <a class=\"direct-link\" href=\"#pogoplug-cloud\">#</a></h2>\n<ul>\n<li>¥500/month:容量無制限</li>\n</ul>\n<p>なんとも良いイメージを持つことはできませんでした。<br>\nアップロードが致命的に遅い印象。<br>\nPogoplug も Bitcasa も、ソフトをインストールすると、Finder に仮想的なドライブが表れるのですが、アップロードの際、Bitcasa のようにローカルにある程度キャッシュした後ちまちまアップロードするわけじゃなく、Pogoplugドライブへコピー＝ダイレクトにアップロードしてるっぽくて、それが遅い＆途中でエラーで終わっちゃう、とちゃんと動いてくれませんでした。<br>\nあと、専用ソフトのプリセットで Document フォルダをバックアップするようになっているのですが、そこに VMware のイメージファイルが保存されていて(VMware Fusion の既定の保存先がそこだった)、その巨大ファイルをアップロードしようとして途中でエラーになる、しかもプリセットなので削除できないみたいな「なんだかなあ」感も。<br>\nあいにく、1ヶ月で、契約解除となりました。</p>\n<h3 id=\"bad-2\">Bad <a class=\"direct-link\" href=\"#bad-2\">#</a></h3>\n<ul>\n<li>アップロードが遅すぎて遅すぎて…。しかもそこそこ大きなフォルダを指定すると決まって途中でエラーになるし。。。</li>\n<li>バックアップを途中で中止すると再開できない？再開しようとしても「もうすべてのファイルはバックアップ済です」的な動きをする。</li>\n</ul>\n<h2 id=\"bitcasa\"><a href=\"https://www.bitcasa.com/\">Bitcasa</a> <a class=\"direct-link\" href=\"#bitcasa\">#</a></h2>\n<ul>\n<li>$10/month:容量無制限 (1年契約すると $69/year)</li>\n</ul>\n<p>現在 $10 払って評価中。<br>\nPogoplug 同様、ソフトをインストールすると、 Finder に仮想ドライブが表れるタイプ。Pogoplug と違いある程度ローカルキャッシュを持っているので、仮想ドライブへのアクセスはそれほどストレスを感じません。<br>\n価格が一番高いけれど、「ローカルディスクのミラーリング＋任意データのアップロード」の両サービスを提供していると考えれば払うべき対価かと。</p>\n<h3 id=\"good-2\">Good <a class=\"direct-link\" href=\"#good-2\">#</a></h3>\n<ul>\n<li>アップロードはまあまあ速い印象(少なくとも Pogoplug よりは全然速い)</li>\n<li>ネットワークドライブとかのバックアップもできる。ただし監視対象はローカルディスクだけみたい。</li>\n<li>Web の管理画面で、写真、音楽とか動画の再生ができる。(メディアサーバっぽく使える)</li>\n</ul>\n<h3 id=\"bad-3\">Bad <a class=\"direct-link\" href=\"#bad-3\">#</a></h3>\n<ul>\n<li>Web の管理画面ではフォルダの移動ができない\n<ul>\n<li>けど、幸い仮想ドライブでの&quot;移動&quot;が 削除→追加 でなくちゃんと &quot;移動&quot; として扱われているようで、クラウドへの反映は一瞬で済んだ。</li>\n</ul>\n</li>\n<li>たまにアップロードの &quot;xxMB remaining…&quot; が一向に減らなくて、一度フォルダ削除して、再度アップロードするとすんなり完了したり。。。せっかちですかね。</li>\n</ul>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Backblaze は、ローカルディスクのバックアップとして最適<br>\nBitcasa は、高いけど機能豊富<br>\nPogoplug は安かろう悪かろう<br>\nってな印象。<br>\n私の目的は、「ローカルディスク＋NAS のバックアップ」なので、Bitcasa をしばらく評価していきます。</p>\n",
      "date_published": "2013-03-18T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/17/xamarin-android-using-gps-by-rx/",
      "url": "https://blog.amay077.net/blog/2013/03/17/xamarin-android-using-gps-by-rx/",
      "title": "Xamarin.Android で GPS を使う(Reactive Extensions版)",
      "content_html": "<p>RxM4A により <a href=\"http://amay077.github.com/blog/2013/03/01/how-to-use-rx-in-xamarin/\">Reactive Extensions が使えるようになった</a> ので、以前に <a href=\"http://amay077.github.com/blog/2012/10/03/locate-using-reactive4java/\">Android+reactive4Java でやったコレ</a> を Xamarin.Android でやってみます。</p>\n<!--more-->\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Amay077<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">.</span>Locations</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocationManagerExtenstion</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 渡した Action&lt;Location> を OnLocationChanged で実行されるようにしただけ</span><br>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocationListener</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">ILocationListener</span></span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> <span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Location<span class=\"token punctuation\">></span></span> _locationChangedHandler<span class=\"token punctuation\">;</span><br>            <br>            <span class=\"token keyword\">public</span> <span class=\"token function\">LocationListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>Location<span class=\"token punctuation\">></span></span> locationChangedHandler<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                _locationChangedHandler <span class=\"token operator\">=</span> locationChangedHandler<span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <br>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> ILocationListener implementation</span><br>            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnLocationChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token function\">_locationChangedHandler</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <br>            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnProviderDisabled</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> provider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnProviderEnabled</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> provider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnStatusChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> provider<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Availability</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> extras<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IConnectableObservable<span class=\"token punctuation\">&lt;</span>Location<span class=\"token punctuation\">></span></span> <span class=\"token function\">RequestLocationAsObservable</span><span class=\"token punctuation\">(</span><br>            <span class=\"token keyword\">this</span> <span class=\"token class-name\">LocationManager</span> locMan<span class=\"token punctuation\">,</span><br>            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> provider<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> Observable<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Create</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Location<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>o <span class=\"token operator\">=></span> <br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> isStop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// RemoveUpdates してもすぐ止まるか分からんので一応フラグ持っとく</span><br><br>                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> listener <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">LocationListener</span><span class=\"token punctuation\">(</span>l <span class=\"token operator\">=></span> <br>                    <span class=\"token punctuation\">{</span><br>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isStop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>                        o<span class=\"token punctuation\">.</span><span class=\"token function\">OnNext</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                    <span class=\"token comment\">// 位置取得開始</span><br>                    locMan<span class=\"token punctuation\">.</span><span class=\"token function\">RequestLocationUpdates</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <br>                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token comment\">// Dispose() した時に停止</span><br>                    <span class=\"token punctuation\">{</span><br>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isStop<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>                        isStop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>                        locMan<span class=\"token punctuation\">.</span><span class=\"token function\">RemoveUpdates</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                        o<span class=\"token punctuation\">.</span><span class=\"token function\">OnCompleted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    o<span class=\"token punctuation\">.</span><span class=\"token function\">OnError</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* empty */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Publish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Hot な Observable に</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>LocationManager</code> の拡張メソッドにしたいので、クラス名を慣例に習って <code>LocationManager.Extenstion.cs</code> に、メソッド <code>RequestLocationAsObservable</code> の第一引数に <code>this</code> を付けてます。</p>\n<p><code>LocationListener</code> Inner クラスは、C# では匿名クラスが使えないので、コンストラクタで指定した <code>Action</code> が <code>OnLocationChanged</code> で呼ばれるようにしただけです。</p>\n<p><code>RequestLocationAsObservable</code> メソッドがメイン。やってることは reactive4Java と同じです。Hot な Observable にしたので、最後に <code>.Publish()</code> してるので、返値が <code>IConnectableObservable</code> になってます。</p>\n<p>さて使う方。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Amay077<span class=\"token punctuation\">.</span>Android<span class=\"token punctuation\">.</span>Locations</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 拡張メソッドを使えるように</span><br><br><span class=\"token operator\">&lt;</span>省略<span class=\"token operator\">></span><br><br><span class=\"token comment\">// LocationManager を得る</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> locationMan <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>LocationManager<span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">GetSystemService</span><span class=\"token punctuation\">(</span>Context<span class=\"token punctuation\">.</span>LocationService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// RequestLocationAsObservable があたかも LocationManager のメンバのよ(ry</span><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> observable <span class=\"token operator\">=</span> locationMan<span class=\"token punctuation\">.</span><span class=\"token function\">RequestLocationAsObservable</span><span class=\"token punctuation\">(</span>LocationManager<span class=\"token punctuation\">.</span>GpsProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>observable<span class=\"token punctuation\">.</span><span class=\"token function\">Take</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3回取得</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">Timeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">TimeSpan</span><span class=\"token punctuation\">(</span><span class=\"token number\">10000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10秒待って取得できなかったらタイムアウト</span><br><span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span><br>    l <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> Android<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <br>              String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received: {0}/{1}\"</span><span class=\"token punctuation\">,</span> <br>                l<span class=\"token punctuation\">.</span>Latitude<span class=\"token punctuation\">,</span> l<span class=\"token punctuation\">.</span>Longitude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 位置が取得される度に呼ばれる</span><br>    e <span class=\"token operator\">=></span> Android<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"error:\"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span>Message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// エラー(タイムアウト含む)の時呼ばれる</span><br>    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Android<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"finished.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全部終わったら呼ばれる</span><br><br>observable<span class=\"token punctuation\">.</span><span class=\"token function\">Connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接続開始</span></code></pre>\n<p>Reactive Extensions と C# の拡張メソッドなどのおかげで、Java よりもずいぶんとすっきり書けました。</p>\n",
      "date_published": "2013-03-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/14/xamarin-ios-tutorial/",
      "url": "https://blog.amay077.net/blog/2013/03/14/xamarin-ios-tutorial/",
      "title": "Xamarin.iOS の Tutorial をなんとなくトレースしてみる",
      "content_html": "<p>Xamarin.Android ネタばかり書いてきましたが、そろそろクロスプラットフォームのことも考えたいので Xamarin.iOS にも手を出してみたいと思います。ちなみに当方、iOS開発についてはシロートに毛が生えた程度です。</p>\n<!--more-->\n<p>Xamarin の公式チュートリアルがあるので、それを英語も読まずに雰囲気でトレースしてみたいと思います。</p>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/ios/getting_started/hello%2C_world\">Hello, iPhone ｜ A First Xamarin.iOS Application Getting Started - Tutorial 3</a></li>\n</ul>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90(creating-a-new-xamarin.ios-iphone-project)\">プロジェクトの作成(Creating a new Xamarin.iOS iPhone Project) <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90(creating-a-new-xamarin.ios-iphone-project)\">#</a></h2>\n<p>とりあえず Xamarin Studio をたちあげて、新規 → ソリューション、C# → iOS → iPhone → Single View Application を選択、ソリューション名は「HelloWorld_iPhone」としました。</p>\n<h2 id=\"%E4%BD%9C%E6%88%90%E3%81%95%E3%82%8C%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%9C%BA%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B\">作成されたファイルを眺めてみる <a class=\"direct-link\" href=\"#%E4%BD%9C%E6%88%90%E3%81%95%E3%82%8C%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%9C%BA%E3%82%81%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_ios_created_screen.png\" alt=\"&quot;create_solution&quot;\"></p>\n<p>ソリューションツリーを眺めてみます。</p>\n<p>[参照] の中には <code>monotouch</code> が見えますね。Xamarin.Android では <code>Mono.Android</code> がありました。クロスプラットフォームにするときにはこいつらに依存しない Portable なライブラリプロジェクトが必要そうです。</p>\n<p><code>AppDelegate</code> とか <code>xxxViewController</code> とか iOS っぽいです、が <code>.cs</code> です。Obc-C のキモい構文じゃないだけでも嬉しいものです。</p>\n<h2 id=\"introduction-to-xcode-4-and-interface-developer\">Introduction to Xcode 4 and Interface Developer <a class=\"direct-link\" href=\"#introduction-to-xcode-4-and-interface-developer\">#</a></h2>\n<p>Tutorial(英語)では突然 Xcode の説明が始まります、なんのこっちゃ。<br>\nこれはえーと *.xib ファイルをダブルクリックすると Xcode が起動して UIレイアウトは Xcode の Interface Builder(IB) でやれよ、的な感じだからですねたぶん。<br>\nとりあえず <code>HelloWorld_iPhoneViewController.xib</code> をダブルクリックして IB を起動して追従します。</p>\n<p>##UI レイアウトの作成 (Creating the Interface)<br>\n見よう見まねで、Tutorial と同じようにレイアウトしました。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_ios_ib_1.png\" alt=\"&quot;ib1&quot;\"></p>\n<h2 id=\"%E3%82%A2%E3%82%A6%E3%83%88%E3%83%AC%E3%83%83%E3%83%88%E3%81%A8%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B-(adding-outlets-and-actions-to-the-ui)\">アウトレットとアクションを追加する (Adding Outlets and Actions to the UI) <a class=\"direct-link\" href=\"#%E3%82%A2%E3%82%A6%E3%83%88%E3%83%AC%E3%83%83%E3%83%88%E3%81%A8%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B-(adding-outlets-and-actions-to-the-ui)\">#</a></h2>\n<p>だんだん和訳にすらならなくなって来てますが。。。<br>\nOutlets とは、「UI要素と関連づいた変数」、Actions は「イベントハンドラ」の意ですかね。</p>\n<p>さて、Xcode のバーを展開して、<code>HelloWorld_iPhoneViewController.h</code> を表示、それを <code>option</code> キーを押しながらクリックします。<br>\nするとウィンドウが縦に分割されて、右側にソースコードが表示されます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_ios_ib_2.png\" alt=\"&quot;ib1&quot;\"></p>\n<h3 id=\"%E3%82%A2%E3%82%A6%E3%83%88%E3%83%AC%E3%83%83%E3%83%88%E3%81%AE%E8%BF%BD%E5%8A%A0(adding-an-outlet)\">アウトレットの追加(Adding an Outlet) <a class=\"direct-link\" href=\"#%E3%82%A2%E3%82%A6%E3%83%88%E3%83%AC%E3%83%83%E3%83%88%E3%81%AE%E8%BF%BD%E5%8A%A0(adding-an-outlet)\">#</a></h3>\n<p>[Click Me] と書かれたボタンを、<code>control</code>キーを押しながら、隣のソースコードの @end の上らへんにドラッグ＆ドロップします。<br>\n<img src=\"https://blog.amay077.net/img/posts/xamarin_ios_ib_3.png\" alt=\"&quot;ib1&quot;\"><br>\n次に表示されるウィンドウで Name を <strong>btnClickMe</strong> と入力して [Connect] ボタンを押すと、、、</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_ios_ib_4.png\" alt=\"&quot;ib1&quot;\"></p>\n<pre class=\"language-objc\"><code class=\"language-objc\"><span class=\"token keyword\">@property</span> <span class=\"token punctuation\">(</span>retain<span class=\"token punctuation\">,</span> nonatomic<span class=\"token punctuation\">)</span> IBOutlet UIButton <span class=\"token operator\">*</span>btnClickMe<span class=\"token punctuation\">;</span></code></pre>\n<p>という行が追加されました。<br>\nここで一旦 Xcode を保存して、Xamarin Studio に戻り(Xcodeは終了しなくてOK)、<code>HelloWorld_iPhoneViewController.designer.cs</code> を開いてみてみると、、、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">MonoTouch<span class=\"token punctuation\">.</span>Foundation</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloWorld_iPhone</span><br><span class=\"token punctuation\">{</span><br>\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Register</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"HelloWorld_iPhoneViewController\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>\t<span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld_iPhoneViewController</span><br>\t<span class=\"token punctuation\">{</span><br>\t\t<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Outlet</span></span><span class=\"token punctuation\">]</span><br>\t\t<span class=\"token return-type class-name\">MonoTouch<span class=\"token punctuation\">.</span>UIKit<span class=\"token punctuation\">.</span>UIButton</span> btnClickMe <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> ReleaseDesignerOutlets <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>btnClickMe <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\tbtnClickMe<span class=\"token punctuation\">.</span>Dispose <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\tbtnClickMe <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>btnClickMe</code> がこっちにも追加されてる！なにこれすごい。</p>\n<p>再び Xcode へ、btnClickMe と同じ要領で、次は Label もドラッグ＆ドロップし、Name は <strong>lblOutput</strong> とします。</p>\n<h3 id=\"%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E8%BF%BD%E5%8A%A0(adding-an-action)\">アクションの追加(Adding an Action) <a class=\"direct-link\" href=\"#%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E8%BF%BD%E5%8A%A0(adding-an-action)\">#</a></h3>\n<p>次はアクションを追加してみます。<br>\n[Action1] と書かれたボタンを <code>control</code> を押しながらD&amp;D、次のウィンドウで、Connection を <strong>Action</strong> に変更、Name を <strong>actnButtonClick</strong> とします。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_ios_ib_5.png\" alt=\"&quot;ib1&quot;\"></p>\n<pre class=\"language-objc\"><code class=\"language-objc\"><span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>IBAction<span class=\"token punctuation\">)</span>actnButtonClick<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>sender<span class=\"token punctuation\">;</span></code></pre>\n<p>という行が追加されました。</p>\n<p>次の [Action2] は、Tutorial には、Action1 と同じアクションに関連付けられるよ的な事が書いてあるぽいですが、面倒なので省略。</p>\n<h2 id=\"%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F(writing-the-code)\">コードを書く(Writing the Code) <a class=\"direct-link\" href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E6%9B%B8%E3%81%8F(writing-the-code)\">#</a></h2>\n<p>またまた Xcode を保存、Xamarin Studio へ。(Xcode はこれでお役御免)</p>\n<p><code>HelloWorld_iPhoneViewController.designer.cs</code> をみてみると、<strong>lblOutput</strong> と <strong>actnButtonClick</strong> に関連するコードが増えてるのが確認できます。</p>\n<p>これは Partial クラスですから、もう <code>HelloWorld_iPhoneViewController.cs</code> でもボタンやアクションが使えるはずです。早速実装してみます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloWorld_iPhone</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">partial</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld_iPhoneViewController</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">UIViewController</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> _numberOfTimesClicked <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token operator\">&lt;</span>省略<span class=\"token operator\">></span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">ViewDidLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Perform any additional setup after loading the view, typically from a nib.</span><br>            btnClickMe<span class=\"token punctuation\">.</span>TouchUpInside <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>            <span class=\"token punctuation\">{</span><br>                _numberOfTimesClicked<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>                lblOutput<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Clicked [\"</span> <span class=\"token operator\">+</span><br>                    _numberOfTimesClicked<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"] times!\"</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token operator\">&lt;</span>省略<span class=\"token operator\">></span><br><br>        <span class=\"token keyword\">partial</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">actnButtonClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">NSObject</span> sender<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            lblOutput<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token string\">\"Action button \"</span> <span class=\"token operator\">+</span>  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UIButton<span class=\"token punctuation\">)</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>CurrentTitle <span class=\"token operator\">+</span> <span class=\"token string\">\" clicked.\"</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>実装できたら、動かしてみます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_ios_created_debugger_scceeded.png\" alt=\"&quot;ib1&quot;\"></p>\n<p>動いた！(Action2 は実装してないので動きません)</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>Xamarin.iOS では、Xcode の IB で UIレイアウトを作成する</li>\n<li>ので Mac 必須(なんですか？)</li>\n<li>イベントハンドラの実装はラムダ式や Binding で行うことを考えると、Action って要らなくね？</li>\n<li>Xcode ワカラン</li>\n</ul>\n<h2 id=\"next\">Next <a class=\"direct-link\" href=\"#next\">#</a></h2>\n<ul>\n<li>プロジェクト作る画面に <strong>iPhone Storyboard</strong> とかあったので、ストーリーボード系はそっちでイケるみたいです。</li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/6710957/xcode-4-keyboard-shortcut-for-switching-assistant-editor-to-tracking-automatic#\">Xcode 4: Keyboard shortcut for switching Assistant Editor to Tracking (Automatic) mode? - StackOverflow</a></li>\n</ul>\n",
      "date_published": "2013-03-14T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/13/xamarin-studio-code-formatting/",
      "url": "https://blog.amay077.net/blog/2013/03/13/xamarin-studio-code-formatting/",
      "title": "Xamarin Studio でコード整形を Visual Studio っぽくする",
      "content_html": "<p>Xamarin Studio の既定のコードフォーマットは、メソッド名の後ろにスペースが空いていてどうにも気に入らない。いろいろ設定をさばくって(方言)いたら見つかりました。</p>\n<!--more-->\n<p>既定のフォーマットはこちら</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_studio_formatting_default.png\" alt=\"&quot;default_formatting&quot;\"></p>\n<p>変更は、システムメニュー → Preference から。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_studio_formatting_preference.png\" alt=\"&quot;default_formatting&quot;\"></p>\n<p>次に、ソースコード → コード フォーマッティング → C#ソースコード ときて、愛しの「Visual Studio」を選択！</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_studio_formatting_codeformatting.png\" alt=\"&quot;default_formatting&quot;\"></p>\n<p>変更が適用されるのは、新しいクラスを作った時から。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_studio_formatting_vs.png\" alt=\"&quot;default_formatting&quot;\"></p>\n<p>既存のクラスは、メニュー → 編集 → フォーマット で整形しなおせばおｋ</p>\n",
      "date_published": "2013-03-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/05/xamarin-android-using-google-maps-android-api-v2/",
      "url": "https://blog.amay077.net/blog/2013/03/05/xamarin-android-using-google-maps-android-api-v2/",
      "title": "Xamarin.Android で Google Maps Android API v2 を使う",
      "content_html": "<p>だんだん自力でサンプルプログラム書くのに疲れてきたので、MonoDroid のサンプル集に頼ることにします。</p>\n<ul>\n<li><a href=\"https://github.com/xamarin/monodroid-samples\">xamarin / monodroid-samples</a></li>\n</ul>\n<!--more-->\n<p>すごく豊富なので、これひと通り動かせば大抵のことはできるようになるんじゃないか。。。</p>\n<p>というわけで、この中の <a href=\"https://github.com/xamarin/monodroid-samples/tree/master/MapsAndLocationDemo_v2\">MapsAndLocationDemo_v2</a> を動かしてみます。<a href=\"http://Readme.md\">Readme.md</a> に沿って。</p>\n<h2 id=\"%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">ソースを取得する <a class=\"direct-link\" href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B\">#</a></h2>\n<p>まず monodroid-samples を Clone しときます。</p>\n<blockquote>\n<p>$git clone git://github.com/xamarin/monodroid-samples.git</p>\n</blockquote>\n<h2 id=\"%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B(building-the-client-library)\">クライアントライブラリをビルドする(Building the Client Library) <a class=\"direct-link\" href=\"#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%82%92%E3%83%93%E3%83%AB%E3%83%89%E3%81%99%E3%82%8B(building-the-client-library)\">#</a></h2>\n<p>ここでいうクライアントライブラリとは、Android SDK に含まれる <strong>Google Play services</strong> の事です。<br>\nこの準備は本家Android開発で Google Maps Android API v2 を使うときに必要なので、これが何者かは、</p>\n<ul>\n<li><a href=\"http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html\">throw Life - Google Maps Android API v2を使ってみた</a></li>\n</ul>\n<p>などを参考に。<br>\nSDK で Google Play services が取得できていれば、</p>\n<p><code>{※あなたのAndroidSDKディレクトリ}/extras/google/google_play_services/libproject/google-play-services_lib</code> ができているはず。</p>\n<p>※Xamarin.Android で使われる Android SDK は、Xamarin Studio のPreferences → SDK Locations → Android で確認できます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_android_sdk_locations.png\" alt=\"&quot;sdklocations&quot;\"></p>\n<p><code>google-play-services_lib</code> へ移動して、Ant 用のビルドファイルを生成します。</p>\n<blockquote>\n<p>$cd google-play-services_lib<br>\n$Android update project --path .<br>\n$ant debug</p>\n</blockquote>\n<p><a href=\"http://Readme.md\">Readme.md</a> では <code>android project update -p .</code> って書いてあるけど上のコマンドじゃないとうまくいかないんですけど？<br>\nあと <code>{あなたのAndroidSDKディレクトリ}/tools</code> にパス通しておかないと android コマンド使えないです。ant も(ry</p>\n<p>ant の実行に成功すると /bin の中に classes.jar とかができてるはずです。</p>\n<p>次に、Xamarin Studio で <code>MapsAndLocationDemo.sln</code> を開いて、GooglePlayService プロジェクトを展開します。<br>\nすると、`project.properties`` ファイルが赤くなってる(ちゃんと指定した位置に google-play-services_lib をコピってれば赤くなってないかも)ので、これを一度削除して、追加しなおします。リンクファイルとして、ね。</p>\n<p>一連の画像貼っときます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_studio_delete_file.png\" alt=\"&quot;red&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/xamarin_studio_add_exist_file.png\" alt=\"&quot;red&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/xamarin_studio_add_a_link.png\" alt=\"&quot;red&quot;\"></p>\n<h2 id=\"google-maps-v2-api-key\">Google Maps v2 API Key <a class=\"direct-link\" href=\"#google-maps-v2-api-key\">#</a></h2>\n<p>Google Maps v2 API Key の取得も本家と同じですが、<br>\nディレクトリが、<code>/Users/[USERNAME]/.local/share/Xamarin/Mono for Android/debug.keystore</code> なのでそこだけ注意。(←Mac の場合。Win は <a href=\"http://Readme.md\">Readme.md</a> 見て)</p>\n<p>該当のディレクトリへ移動して、以下のコマンドで表示されるキーの内、SHA-1 をコピーします。</p>\n<blockquote>\n<p>$ keytool -V -list -keystore debug.keystore -alias androiddebugkey -storepass android -keypass android</p>\n</blockquote>\n<p>あとは、</p>\n<ul>\n<li><a href=\"http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html\">throw Life - Google Maps Android API v2を使ってみた</a></li>\n</ul>\n<p>を参考に、Google API Console から、API key を取得します。<br>\nAPI Key を取得する際に必要なパッケージ名、取得した API Key を貼り付ける場所は、いずれも MapsAndLocationDemo プロジェクトの AndroidManifest.xml にあるので、先に開いておくとよいでしょう。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_studio_android_manifest.png\" alt=\"&quot;apikey&quot;\"></p>\n<p>API Key を取得したら、<code>com.google.android.maps.v2.API_KEY</code> のところに貼り付けて準備完了です。</p>\n<h2 id=\"a-note-about-google-play-services\">A Note About Google Play Services <a class=\"direct-link\" href=\"#a-note-about-google-play-services\">#</a></h2>\n<p>Google Play Services が端末にインストールされてないと動かんよ、つまりエミュレータでは動かんよ。Google Play Services のインストールの仕方など、私の知ったことではない。だそうです。</p>\n<h2 id=\"%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">動かしてみる <a class=\"direct-link\" href=\"#%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>「実機で」動かしてみます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_studio_android_google_maps_api_v2.png\" alt=\"&quot;play&quot;\"></p>\n<p>動いてます。(上は Show Map with Overlays を動かしたところ)</p>\n<p>今回はここまで。コードの深追いは日を改めて。</p>\n",
      "date_published": "2013-03-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/04/xamarin-android-send-implicit-intent/",
      "url": "https://blog.amay077.net/blog/2013/03/04/xamarin-android-send-implicit-intent/",
      "title": "Xamarin.Android で暗黙的Intent を発行する",
      "content_html": "<p>まあ特に特別なことはないんですが。。。</p>\n<!-- more -->\n<h2 id=\"%E9%9B%BB%E8%A9%B1%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B\">電話をかける <a class=\"direct-link\" href=\"#%E9%9B%BB%E8%A9%B1%E3%82%92%E3%81%8B%E3%81%91%E3%82%8B\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Intent</span><span class=\"token punctuation\">(</span>Intent<span class=\"token punctuation\">.</span>ActionCall<span class=\"token punctuation\">,</span> <br>    Android<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Uri<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tel:1234567890\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>context<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>※ 電話をかけるには <code>CALL_PHONE</code> 権限が必要です。権限の追加の仕方は<a href=\"http://amay077.github.com/blog/2013/03/02/xamarin-android-permission/\">こちら</a>。</p>\n<h2 id=\"%E5%9C%B0%E5%9B%B3%E3%82%92%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99\">地図を呼び出す <a class=\"direct-link\" href=\"#%E5%9C%B0%E5%9B%B3%E3%82%92%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%99\">#</a></h2>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> uri <span class=\"token operator\">=</span> String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"geo:{0},{1}?q={0},{1}({2})\"</span><span class=\"token punctuation\">,</span> <br>    <span class=\"token number\">35.710211</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139.810874</span><span class=\"token punctuation\">,</span><br>    <span class=\"token string\">\"東京スカイツリー\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Intent</span><span class=\"token punctuation\">(</span>Intent<span class=\"token punctuation\">.</span>ActionView<span class=\"token punctuation\">,</span> Android<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Uri<span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>context<span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>Android.Net.Uri</code> クラスは <code>System.Uri</code> クラスで代替できると嬉しかったかも。ちょっとだけ。いやダメか。</p>\n",
      "date_published": "2013-03-04T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/03/xamarin-android-using-child-application-class/",
      "url": "https://blog.amay077.net/blog/2013/03/03/xamarin-android-using-child-application-class/",
      "title": "Xamarin.Android でオレオレ Application クラスを使う",
      "content_html": "<p>オレオレApplicationクラスって、<a href=\"http://techbooster.org/android/application/2353/\">コレ</a>のことなんですが、正式名称知らないので勝手にこう呼んでます(^_^;)</p>\n<!-- more -->\n<p>Xamarin.Android では、Application クラスを継承するのに加えてもう二手間くらい必要みたいです。割と苦労したのでメモしておきます。</p>\n<h2 id=\"androidmanifest.xml-%E3%81%B8%E8%BF%BD%E8%A8%98\">AndroidManifest.xml へ追記 <a class=\"direct-link\" href=\"#androidmanifest.xml-%E3%81%B8%E8%BF%BD%E8%A8%98\">#</a></h2>\n<p>Xamarin.Android では最初は AndroidManifest.xml は存在しないのですが、<a href=\"http://amay077.github.com/blog/2013/03/02/xamarin-android-permission/\">このような手順</a>で追加できます。</p>\n<p>んで、&lt;application&gt; タグに <code>android:name</code> 属性を追記します。ここは Android本家と同じ要領です。</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>manifest</span> <span class=\"token attr-name\"><span class=\"token namespace\">xmlns:</span>android</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>http://schemas.android.com/apk/res/android<span class=\"token punctuation\">\"</span></span> <br>    <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionCode</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>versionName</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>1.0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">package</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HelloXamarinAndroiid.HelloXamarinAndroiid<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>uses-sdk</span> <span class=\"token punctuation\">/></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>application</span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>label</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>HelloXamarinAndroiid<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">android:</span>name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>.MyApplication<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>application</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>manifest</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"application-%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E7%B6%99%E6%89%BF%E3%81%97%E3%81%9F%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B\">Application クラスを継承したクラスを作る <a class=\"direct-link\" href=\"#application-%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E7%B6%99%E6%89%BF%E3%81%97%E3%81%9F%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>次に、クラスの実装ですが、Application クラスから派生させる他、</p>\n<ul>\n<li>[Application] 属性を付ける</li>\n<li><code>(IntPtr, JniHandleOwnership)</code> なコンストラクタを用意する</li>\n</ul>\n<p>ことが必要なようです。</p>\n<p>こんなかんじ。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloXamarinAndroiid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Application</span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// この属性が必要らしい</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyApplication</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Application</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// このコンストラクタを明示的に override 剃る必要があるらしい</span><br>        <span class=\"token keyword\">public</span> MyApplication <span class=\"token punctuation\">(</span><span class=\"token class-name\">IntPtr</span> javaReference<span class=\"token punctuation\">,</span> <span class=\"token class-name\">JniHandleOwnership</span> transfer<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>javaReference<span class=\"token punctuation\">,</span> transfer<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token comment\">// Test</span><br>            Android<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>Log<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MyApplication\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"OnCreate called.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>アプリを動かすと、ログが出力されてるのでこの手順でいいのかと。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://docs.xamarin.com/guides/android/advanced_topics/working_with_androidmanifest.xml\">Working with AndroidManifest.xml ｜ xamarin</a> 公式。ちょっとこれだけじゃ分かんなかったっす。</li>\n<li><a href=\"http://stackoverflow.com/questions/9928386/custom-application-child-class-in-mono-for-android\">c# - Custom Application child class in Mono for Android - Stack Overflow</a> Application そして StackOverflow のお世話に。</li>\n</ul>\n",
      "date_published": "2013-03-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/02/xamarin-android-permission/",
      "url": "https://blog.amay077.net/blog/2013/03/02/xamarin-android-permission/",
      "title": "Xamarin.Android で PERMISSION を設定する",
      "content_html": "<p>Xamarin.Android でプロジェクト作ると AndroidManifest.xml が見当たらない。<br>\nGPS使いたいんだけど権限設定どうしよう、と思ったらこうできました。</p>\n<!-- more -->\n<p>プロジェクトのオプションから、<br>\n<img src=\"https://blog.amay077.net/img/posts/xamarin_android_project_option.png\" alt=\"&quot;option&quot;\"></p>\n<p>ビルド→Android Application と来て、<br>\n<img src=\"https://blog.amay077.net/img/posts/xamarin_android_application_add.png\" alt=\"&quot;add&quot;\"></p>\n<p>Add すると権限などが設定できるようになります。<br>\n<img src=\"https://blog.amay077.net/img/posts/xamarin_android_application_created.png\" alt=\"&quot;added&quot;\"></p>\n<p>その後、おなじみ AndroidManifest.xml ができてました。<br>\n<img src=\"https://blog.amay077.net/img/posts/xamarin_android_androidmanifestxml.png\" alt=\"&quot;source&quot;\"></p>\n<p>Activity の設定はオートでやってくれるみたいなのでありません。<br>\nこれでオレオレ Applocation クラスも動かせるのかなあ。。。</p>\n",
      "date_published": "2013-03-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/01/xamarin-android-implement-parcelable/",
      "url": "https://blog.amay077.net/blog/2013/03/01/xamarin-android-implement-parcelable/",
      "title": "Xamarin.Android で画面遷移時にデータを渡す",
      "content_html": "<p><a href=\"http://amay077.github.io/blog/2013/02/28/helloworld-on-xamarin-android/\">前回のポスト</a>で HelloWorld を見てみましたが、次は Activity をもう一つ作って画面遷移してみます。</p>\n<!-- more -->\n<h2 id=\"activity-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">Activity を追加する <a class=\"direct-link\" href=\"#activity-%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>メニュー → 新規 → ファイル と選択するとこんなダイアログが出るので Activity クラス名を入力して決定します。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_percelable_create_activity.png\" alt=\"&quot;new_file_dialog&quot;\"></p>\n<p>すると <code>NextActivity.cs</code> ができます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>OS</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Runtime</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Views</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Widget</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloXamarinAndroid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"NextActivity\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NextActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Create your application here</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>作ってくれるのはここまでです。レイアウト用の Next.axml やリソースファイルは別途作成する必要があります。今回は必要ないのでスルーで。</p>\n<p>Android本家だと今はウィザードで Javaソース、レイアウトXML、リソースファイルまで作ってくれてしかも AndroidManifest.xml にも書いてくれちゃいます、便利な世の中になりましたね。</p>\n<p>ちなみに Xamarin.Android では AndroidManifest.xml への登録は必要ありません。</p>\n<h2 id=\"%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">画面遷移してみる <a class=\"direct-link\" href=\"#%E7%94%BB%E9%9D%A2%E9%81%B7%E7%A7%BB%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>画面遷移は本家と同じく Intent を使います。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// Goto NextActivity</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">NextActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>本家だと <code>NextActivity.class</code> としていたところは <code>typeof(NextActivity)</code> になってますね。</p>\n<h2 id=\"%E8%87%AA%E4%BD%9C%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92-intent-%E3%81%AB%E5%90%AB%E3%82%81%E3%82%8B\">自作クラスを Intent に含める <a class=\"direct-link\" href=\"#%E8%87%AA%E4%BD%9C%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%92-intent-%E3%81%AB%E5%90%AB%E3%82%81%E3%82%8B\">#</a></h2>\n<p>さて、画面遷移時にデータを渡すという、よくある処理をやってみたいと思います。<br>\nデータは <code>Card</code> というクラスにします。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloXamarinAndroid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Phone <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>C# なので、プロパティ作るのも楽でいいですね。getter/setter なんてアホらしくて…。<br>\nこの Card クラスのインスタンスを、MainActivity から NextActivity に渡したいと思います。</p>\n<h2 id=\"iparcelable-%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F%E3%81%84%E3%81%8C%EF%BC%9F\">IParcelable を実装したいが？ <a class=\"direct-link\" href=\"#iparcelable-%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%97%E3%81%9F%E3%81%84%E3%81%8C%EF%BC%9F\">#</a></h2>\n<p>Android では、Activity とか Service をまたぐオブジェクトは Percelable インターフェースを実装しなければならないのでした。<br>\n「じゃあ Xamarin では？」「IParcelable でしょ」というわけで <code>IParcelable</code> インターフェースを実装するわけですが、こいつが <code>IDisposable</code> や <code>IJavaObject</code> を継承していてこれらも実装させられます。</p>\n<p>なんか違う・・・とあきらめてググったところ、こんなんでました。</p>\n<ul>\n<li><a href=\"http://dan.clarke.name/2012/09/implementing-iparcelable-in-mono-for-android/\">Implementing IParcelable in Mono for Android » Dan Clarke</a></li>\n</ul>\n<p>以降、これに習うことにします。</p>\n<h3 id=\"mono.android.export-%E3%82%92%E5%8F%82%E7%85%A7%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">Mono.Android.Export を参照に追加する <a class=\"direct-link\" href=\"#mono.android.export-%E3%82%92%E5%8F%82%E7%85%A7%E3%81%AB%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h3>\n<p>いきなりこれを忘れて、謎のビルドエラーと１０分程格闘しました(汗)</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_assenbly_reference.png\" alt=\"&quot;assembly_reference&quot;\"></p>\n<p>ソリューションツリーの参照の右クリックメニューからアセンブリ参照ダイアログが出るので、<code>Mono.Android.Export</code> を見つけて追加します。</p>\n<h4 id=\"free-%E7%89%88%E3%81%A7%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AF%E3%81%93%E3%81%93%E3%81%A7%E3%80%8Ctrial-%E3%81%99%E3%82%8B%E3%81%8B%E3%80%81%E8%B2%B7%E3%81%86%E3%81%8B%E3%80%81%E3%81%A9%E3%81%A3%E3%81%A1%E3%81%8B%E3%81%AB%E3%81%9B%E3%81%84%E3%82%84%E3%80%8D%E3%81%A8%E8%A8%80%E3%82%8F%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">Free 版で使ってる人はここで「Trial するか、買うか、どっちかにせいや」と言われます。 <a class=\"direct-link\" href=\"#free-%E7%89%88%E3%81%A7%E4%BD%BF%E3%81%A3%E3%81%A6%E3%82%8B%E4%BA%BA%E3%81%AF%E3%81%93%E3%81%93%E3%81%A7%E3%80%8Ctrial-%E3%81%99%E3%82%8B%E3%81%8B%E3%80%81%E8%B2%B7%E3%81%86%E3%81%8B%E3%80%81%E3%81%A9%E3%81%A3%E3%81%A1%E3%81%8B%E3%81%AB%E3%81%9B%E3%81%84%E3%82%84%E3%80%8D%E3%81%A8%E8%A8%80%E3%82%8F%E3%82%8C%E3%81%BE%E3%81%99%E3%80%82\">#</a></h4>\n<p>Free 版はプログラムのサイズに制限があるのですが、アセンブリを追加することでその制限を超えてしまうものと思われます。</p>\n<h3 id=\"iparcelable-%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">IParcelable を実装する <a class=\"direct-link\" href=\"#iparcelable-%E3%82%92%E5%AE%9F%E8%A3%85%E3%81%99%E3%82%8B\">#</a></h3>\n<p>Card クラスを、<code>IParcelable</code> を実装するのと共に <code>Java.Lang.Object</code> から派生させます。<br>\nあーそういうことですか。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloXamarinAndroid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span>  <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IParcelable</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Phone <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> phone<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Phone <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> IParcelable implementation</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">DescribeContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WriteToParcel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parcel</span> dest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ParcelableWriteFlags</span> flags<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            dest<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            dest<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>まだ何か足りません。あ、CREATOR だ。</p>\n<h2 id=\"creator-%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E6%BA%96%E5%82%99%E3%81%99%E3%82%8B\">CREATOR フィールドを準備する <a class=\"direct-link\" href=\"#creator-%E3%83%95%E3%82%A3%E3%83%BC%E3%83%AB%E3%83%89%E3%82%92%E6%BA%96%E5%82%99%E3%81%99%E3%82%8B\">#</a></h2>\n<p>本家では <code>public static final Parcelable.Creator&lt;MyParcelable&gt; CREATOR = …</code> な感じで用意していましたが、Xamarin.Android では次の２点が異なります。</p>\n<ol>\n<li>匿名クラスが使えないので、<code>IParcelableCreator</code> インターフェースを実装したクラスを用意する。</li>\n<li>CREATOR フィールドの代わりに <code>IParcelableCreator</code> を返す static メソッドを用意し、<code>[ExportField(&quot;CREATOR&quot;)]</code> 属性を付ける。</li>\n</ol>\n<p>これらを実装すると、 Card クラスはこうなります。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Java<span class=\"token punctuation\">.</span>Interop</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloXamarinAndroid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">Card</span>  <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IParcelable</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Name <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Phone <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token function\">Card</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> phone<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Phone <span class=\"token operator\">=</span> phone<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> IParcelable implementation</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">int</span></span> <span class=\"token function\">DescribeContents</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">WriteToParcel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parcel</span> dest<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ParcelableWriteFlags</span> flags<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            dest<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            dest<span class=\"token punctuation\">.</span><span class=\"token function\">WriteString</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span><br><br>        <span class=\"token punctuation\">[</span><span class=\"token function\">ExportField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CREATOR\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">IParcelableCreator</span> <span class=\"token function\">GetCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">MyParcelableCreator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">// Parcelable.Creator の代わり</span><br>        <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyParcelableCreator</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IParcelableCreator</span></span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">region</span> IParcelableCreator implementation</span><br>            <span class=\"token return-type class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span> IParcelableCreator<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromParcel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Parcel</span> source<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> name <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> phone <span class=\"token operator\">=</span> source<span class=\"token punctuation\">.</span><span class=\"token function\">ReadString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Card</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token return-type class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> IParcelableCreator<span class=\"token punctuation\">.</span><span class=\"token function\">NewArray</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> size<span class=\"token punctuation\">)</span><br>            <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Java<span class=\"token punctuation\">.</span>Lang<span class=\"token punctuation\">.</span>Object</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endregion</span></span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これでやっと、「受け渡し可能な」クラスが作成できました。</p>\n<h2 id=\"%E5%8F%97%E3%81%91%E6%B8%A1%E3%81%97%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">受け渡ししてみる <a class=\"direct-link\" href=\"#%E5%8F%97%E3%81%91%E6%B8%A1%E3%81%97%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>まず渡す方。Intent に詰めます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\">button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> card <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Card</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"amay\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"987-654-3321\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// Goto NextActivity</span><br>    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> intent <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Intent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">NextActivity</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    intent<span class=\"token punctuation\">.</span><span class=\"token function\">PutExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// intent に Card を詰める</span><br><br>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">StartActivity</span><span class=\"token punctuation\">(</span>intent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>次に取り出す方。Intent から取り出します。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloXamarinAndroid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"NextActivity\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">NextActivity</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Create your application here</span><br><br>            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> card <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Intent<span class=\"token punctuation\">.</span><span class=\"token function\">GetParcelableExtra</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"card\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Card</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Show toast</span><br>            Toast<span class=\"token punctuation\">.</span><span class=\"token function\">MakeText</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><br>                String<span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name:{0}, phone:{1}\"</span><span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">.</span>Name<span class=\"token punctuation\">,</span> card<span class=\"token punctuation\">.</span>Phone<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><br>                ToastLength<span class=\"token punctuation\">.</span>Long<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p><code>〜 as Type</code> 句は型が違っていたら null にしてくれる書き方です。<br>\nあと Toast。<code>.Show()</code> は忘れずに。</p>\n<p>これで実装完了。動かしてみます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_parcel_received.png\" alt=\"&quot;receive_parcel&quot;\"></p>\n<p>以上、受け渡し可能なクラスの実装方法でした。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<ul>\n<li>Mono.Android.Export の追加を忘れない</li>\n<li>CREATOR フィールドの代わりに [ExportField(&quot;CREATOR&quot;)] 属性を付ける</li>\n<li>Java の匿名クラスは意外と便利だった</li>\n<li>せっかくプロジェクト作ったので GitHub に置いておきます - <a href=\"https://github.com/amay077/XamarinAndroid_ParcelableSample/tree/Posted_Qiita\">amay077 / XamarinAndroid_ParcelableSample</a></li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://dan.clarke.name/2012/09/implementing-iparcelable-in-mono-for-android/\">Implementing IParcelable in Mono for Android » Dan Clarke</a></li>\n<li><a href=\"https://github.com/xamarin/monodroid-samples/tree/master/ExportAttribute\">monodroid-samples/ExportAttribute at master · xamarin/monodroid-samples</a> なんだ、本家のサンプルあるじゃん</li>\n<li><a href=\"http://docs.xamarin.com/guides/android/advanced_topics/limitations\">Limitations ｜ xamarin</a> 制限だったり、制限が解除された情報が載ってるので要チェック</li>\n</ul>\n",
      "date_published": "2013-03-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/03/01/how-to-use-rx-in-xamarin/",
      "url": "https://blog.amay077.net/blog/2013/03/01/how-to-use-rx-in-xamarin/",
      "title": "Xamarin.Android で Reactive Extensions を使う",
      "content_html": "<p>なんか一気にハードル上がったような。。。</p>\n<!-- more -->\n<p>Reactive Extensions(Rx) については、</p>\n<ul>\n<li><a href=\"http://www.atmarkit.co.jp/fdotnet/introrx/introrx_01/introrx_01_01.html\">Reactive Extensionsの概要と利用方法 － ＠IT</a></li>\n</ul>\n<p>などを読んで頂くとして、Rx は昨年 <a href=\"http://www.infoq.com/jp/news/2012/11/rx-net-open-source\">オープンソース化され</a>、本家を Mono for Android で使えるようにした</p>\n<ul>\n<li><a href=\"http://rxm4a.codeplex.com/\">RxM4A - Mono For Android Reactive Extensions</a></li>\n</ul>\n<p>というプロジェクトがあります。<br>\nMono で使えるということは Xamarin でももちろん…ということで使ってみます。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B\">サンプルアプリケーションを作る <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>とりあえず Xamarin.Android で &quot;XamarinAndroidRxSample&quot; というプロジェクトを作りました。</p>\n<h2 id=\"rxm4a-%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92-clone-%E3%81%99%E3%82%8B\">RxM4A のソースを Clone する <a class=\"direct-link\" href=\"#rxm4a-%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%92-clone-%E3%81%99%E3%82%8B\">#</a></h2>\n<p>上記のサイトからソースを取得します。以下のコマンドでもおｋ(要git)</p>\n<blockquote>\n<p>$git clone <a href=\"https://git01.codeplex.com/rxm4a\">https://git01.codeplex.com/rxm4a</a></p>\n</blockquote>\n<h2 id=\"%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">ソリューションにプロジェクトを追加する <a class=\"direct-link\" href=\"#%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>ソリューションツリーのソリューションのところで右クリック→追加→既存のプロジェクトを追加</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_android_rxm4a.png\" alt=\"&quot;add_project&quot;\"></p>\n<p>で、先ほど取得した RxM4A のディレクトリへ移動します。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_android_rxm4a_projects.png\" alt=\"&quot;projects&quot;\"></p>\n<p>RxMonoForAndroid の中から以下のプロジェクトを追加します。</p>\n<ul>\n<li>System.Reactive.Interfaces</li>\n<li>System.Reactive.Core</li>\n<li>System.Reactive.Linq</li>\n</ul>\n<p>フォルダを掘ってくと xxx.csproj ってファイルがあるので、それを選択します。<br>\n依存関係があるので、上記の順番通りやらないとなにかエラーが出ますが、最終的に３つ揃えば問題ないでしょう。</p>\n<h2 id=\"%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">参照を追加する <a class=\"direct-link\" href=\"#%E5%8F%82%E7%85%A7%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%99%E3%82%8B\">#</a></h2>\n<p>XamarinAndroidRxSample から、今追加した３つのプロジェクトを参照に追加します。</p>\n<p>ソリューションツリーの XamarinAndroidRxSample のところで右クリック→参照アセンブリの追加 から、</p>\n<p>(画像紛失しますた)(画像紛失しますた)</p>\n<p>ダイアログのタブで Projects を選ぶと３つ出てくるのでチェックをいれて OK してください。</p>\n<h2 id=\"reactive-extensions-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">Reactive Extensions を使ってみる <a class=\"direct-link\" href=\"#reactive-extensions-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>ボタンを押した時の処理で Rx を使ってみます。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token comment\">// Main.cs</span><br><span class=\"token punctuation\">(</span>ここまで省略<span class=\"token punctuation\">)</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Util</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reactive<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// これ必要</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">XamarinAndroidRxSample</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"XamarinAndroidRxSample\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Activity1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Get our button from the layout resource,</span><br>            <span class=\"token comment\">// and attach an event to it</span><br>            <span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">delegate</span><br>            <span class=\"token punctuation\">{</span><br>                Observable<span class=\"token punctuation\">.</span><span class=\"token function\">Range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0〜9 のリスト</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 偶数だけ抽出</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> n <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 値を２倍して</span><br>                <span class=\"token punctuation\">.</span><span class=\"token function\">Subscribe</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">=></span> Log<span class=\"token punctuation\">.</span><span class=\"token function\">Debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Activity1\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 出力</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>動かしてみた結果</p>\n<p>(画像紛失しますた)</p>\n<p>全然 Rx っぽくない(Linq だけでできる) 処理ですけど、Rx 関連クラスが使えることは確認できました。</p>\n<p>使い倒すには、RxMonoForAndroid 配下の他のプロジェクトを参照に追加して〜となるでしょう。</p>\n<h2 id=\"%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%82%84%E3%82%8B%E3%81%AE%EF%BC%9F\">アセンブリ参照はどうやるの？ <a class=\"direct-link\" href=\"#%E3%82%A2%E3%82%BB%E3%83%B3%E3%83%96%E3%83%AA%E5%8F%82%E7%85%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%82%84%E3%82%8B%E3%81%AE%EF%BC%9F\">#</a></h2>\n<p>ここではプロジェクト参照で行ったのですけど、各Rxプロジェクトをビルドしてできた</p>\n<ul>\n<li>System.Reactive.Interfaces.dll</li>\n<li>System.Reactive.Core.dll</li>\n<li>System.Reactive.Linq.dll</li>\n</ul>\n<p>をアセンブリ参照してもいいでしょ？と思ってやってみました。<br>\nそれぞれの System.Reactive.Linq プロジェクトの <code>/bin/Debug</code> ディレクトリの中に上記ファイルができているので、てっとり早くそれを XamarinAndroidRxSample でアセンブリ参照してみました。(ほんとはちゃんと Release ビルドしてね)</p>\n<p>そしたらアプリは動くには動いたのですが、ソリューションツリーに怪しげなエラーが↓</p>\n<p>(画像紛失しますた)</p>\n<p>アプリとDLLでターゲットフレームワークが違う(アプリは ICS4.0.3 でDLLは 4.0.0) だとこうなるんでしょうか？<br>\nYes、アプリ側を 4.0.0 にしてプロジェクトクリーン→Xamarin Studio を再起動したら消えました。(けどアプリの方がバージョン上位だったのに、下位互換性はどうなってるんでしょ？)</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">サンプルプロジェクト <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\">#</a></h2>\n<p>これも github においておこう。RxM4A は Submodule として登録してみた。</p>\n<ul>\n<li><a href=\"https://github.com/amay077/XamarinAndroid_RxSample\">amay077 / XamarinAndroid_RxSample</a></li>\n</ul>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://www.atmarkit.co.jp/fdotnet/introrx/introrx_01/introrx_01_01.html\">Reactive Extensionsの概要と利用方法 － ＠IT</a></li>\n<li><a href=\"http://rxm4a.codeplex.com/\">RxM4A - Mono For Android Reactive Extensions</a></li>\n<li><a href=\"http://neue.cc/\">neue cc</a> スーパー勉強になります</li>\n<li><a href=\"http://d.hatena.ne.jp/okazuki/20111114/1321277465\">かずきのBlog@Hatena</a> 膨大なサンプル集がようやく Android開発で活かせます！</li>\n<li><a href=\"https://code.google.com/p/reactive4java/\">reactive4java</a> Java ではこれ使ってました</li>\n</ul>\n",
      "date_published": "2013-03-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/02/28/helloworld-on-xamarin-android/",
      "url": "https://blog.amay077.net/blog/2013/02/28/helloworld-on-xamarin-android/",
      "title": "Xamarin.Android で作った HelloWorld のソースを眺めてみる",
      "content_html": "<p>MonoDroid とか Mono for Android とか呼ばれてた時は、「あーどうせ MonoDevelop と他のモジュールあれこれインストールしなきゃいけないんでしょ？」と腰が重かったのですが、<a href=\"http://www.forest.impress.co.jp/docs/news/20130221_588816.html\">Xamarin 2.0 としてオールインワン化</a>されるとこうも食指が動きますか。</p>\n<!-- more -->\n<p>さっそく Xamarin.Android のプロジェクトを作って、中身をみてみました。</p>\n<h2 id=\"%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\">ダウンロード <a class=\"direct-link\" href=\"#%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\">#</a></h2>\n<p><a href=\"http://xamarin.com/\">Xamarin.com</a> から <strong>Download Now</strong> しましたよ。あ、環境は Mac(Lion) です。</p>\n<h2 id=\"%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">インストール <a class=\"direct-link\" href=\"#%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h2>\n<p>dmg 開いてインストーラっぽいのを実行するだけ。Android と iOS の SDK の場所を聞かれましたがデフォのまま続行しました。たぶん Android 開発者はもう SDK あるのでそこを指定しても良いのでしょう。</p>\n<h2 id=\"%E8%B5%B7%E5%8B%95%E3%80%81%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\">起動、プロジェクト作成 <a class=\"direct-link\" href=\"#%E8%B5%B7%E5%8B%95%E3%80%81%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\">#</a></h2>\n<p>C# - Android - Android Ice Cream Sandwitch Application を選択。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_create_project.png\" alt=\"&quot;create_project&quot;\"></p>\n<p>ちなみに <a href=\"http://VB.NET\">VB.NET</a> もありますが、Android用のプロジェクトテンプレがありませんでした。</p>\n<h2 id=\"%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%81%AF%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\">プロジェクトの中身はこんな感じ <a class=\"direct-link\" href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%B8%AD%E8%BA%AB%E3%81%AF%E3%81%93%E3%82%93%E3%81%AA%E6%84%9F%E3%81%98\">#</a></h2>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_helloworld.png\" alt=\"&quot;project&quot;\"></p>\n<p>ソリューションツリー、Visual Studio っぽさと Android っぽさが同居していてなんか不思議な感じです。</p>\n<p>「参照」「Properties」「Resource.designer.cs」あたりは Visual Studio っぽいですね。<br>\n一方、「Assets」「drawable」「layout」「values」あたりは Android っぽいですね。<br>\nちなみに、<code>layout/Main.axml</code> というファイルがあります。一瞬「ザムル(Xaml)？」と見間違えましたが、開いてみるとなんのことはない、ただの Android Layout XML でした(^_^;)</p>\n<p>そして <code>MainActivity.cs</code> 、混血ですね。</p>\n<p>ソースを見てみましょう。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>App</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Content</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Runtime</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Views</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>Widget</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">using</span> <span class=\"token namespace\">Android<span class=\"token punctuation\">.</span>OS</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">HelloXamarinAndroid</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Activity</span> <span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span>Label <span class=\"token operator\">=</span> <span class=\"token string\">\"HelloXamarinAndroid\"</span><span class=\"token punctuation\">,</span> MainLauncher <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Activity1</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">Activity</span></span><br>    <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> bundle<span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">base</span><span class=\"token punctuation\">.</span><span class=\"token function\">OnCreate</span><span class=\"token punctuation\">(</span>bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Set our view from the \"main\" layout resource</span><br>            <span class=\"token function\">SetContentView</span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Layout<span class=\"token punctuation\">.</span>Main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// Get our button from the layout resource,</span><br>            <span class=\"token comment\">// and attach an event to it</span><br>            <span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">delegate</span><br>            <span class=\"token punctuation\">{</span><br>                button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} clicks!\"</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ソースの中にも Android の要素がたくさん確認できます。</p>\n<p><code>[Activity (Label = &quot;HelloXamarinAndroid&quot;, MainLauncher = true)]</code><br>\nこれ、本家では AndroidManifest.xml の Intent-Filter に定義する設定ですね。ここに書けちゃうみたいです。</p>\n<p><code>public class Activity1 : Activity</code><br>\nActivity クラスを継承するのも変わりません。</p>\n<p><code>protected override void OnCreate(Bundle bundle)</code><br>\nonCreate を override するのも、その中で setContentView するのも、findViewById するのも本家と変わりません。C# っぽくメソッド名が大文字で始まっているのと、若干メンバ名(<a href=\"http://R.id\">R.id</a> が <a href=\"http://Resource.Id\">Resource.Id</a> とか)が変わっているくらいです。</p>\n<p>そしてボタンクリックらへんの処理、</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token keyword\">delegate</span><br><span class=\"token punctuation\">{</span><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} clicks!\"</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre>\n<p>C# ならではの匿名delegate 使ってます。OnClickListener インターフェースを実装しなければならない本家に比べて短く書けます。<br>\n更に短くするなら以下でしょうか。</p>\n<pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> button <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">FindViewById</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Button<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span>Resource<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">.</span>myButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>button<span class=\"token punctuation\">.</span>Click <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>sender<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span><br>    button<span class=\"token punctuation\">.</span>Text <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">Format</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{0} clicks!\"</span><span class=\"token punctuation\">,</span> count<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>まず <code>var</code>。型推論ですよ Variant じゃないですよ。<br>\nそしてイベントハンドラはラムダ式で１行で書けます。いや嬉しい。</p>\n<p>あと地味にイベントハンドラが += で複数追加できるのもありがたいと思う時が来るでしょう。</p>\n<h2 id=\"%E3%83%93%E3%83%AB%E3%83%89%E3%80%81%E5%AE%9F%E8%A1%8C\">ビルド、実行 <a class=\"direct-link\" href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%80%81%E5%AE%9F%E8%A1%8C\">#</a></h2>\n<p>実行すると、こんなダイアログが出てきます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/xamarin_device_select.png\" alt=\"&quot;devices&quot;\"></p>\n<p>実機もちゃんと認識されます。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>ソースコード見るまで勘違いしてました。クロスプラットフォームをうたっているから HelloWorld くらいなら &quot;Write once, run anywhere&quot; なのかと。</p>\n<p>全然違いました。Xamarin.Android は気持ち良いくらいに Android SDK のラッパですし、Xamarin.iOS は iOS SDK のラッパでした。</p>\n<p>UI は共通化できませんし、プラットフォーム固有の機能を使うロジックも共通化できません。M-V-VM なら、共通化できるのは M の一部と VM くらい？それも <code>DependencyProperty</code> みたいなのは用意されていないので自作する必要があります。</p>\n<p>しかしラッパなだけに元々 Android の開発をしていた人にとっての学習コストは低いです。<br>\nObj-C やりたくねー、って思ってた人にもちょうど良いかも知れません。</p>\n<p>なんといっても、スマホアプリ開発で async/await とか Reactive Extensions とか使えるのかと思うと wktk です(^^)</p>\n<p>最後に Xamarin.android も Xamarin Studio も、ここまで完成度が高いとは思ってませんでした。Xamarin さん、Mono さんごめんなさい。(ソースコードエディタで日本語入力ができないのは僕だけでしょうか？)<br>\nなんか C# 楽しいので<a href=\"https://store.xamarin.com/\">買っちゃい</a>そうです、INDEE くらいなら。</p>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li><a href=\"http://ufcpp.wordpress.com/2013/02/24/xamarin-2-0/\">Xamarin 2.0 ｜ ++C++; // 未確認飛行 C ブログ</a></li>\n</ul>\n<p>Mono ランタイムが同梱されているのですね。上の HelloWorld で 1.2MB くらいでした。</p>\n",
      "date_published": "2013-02-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/02/25/static-contents-on-jetty/",
      "url": "https://blog.amay077.net/blog/2013/02/25/static-contents-on-jetty/",
      "title": "jetty で静的コンテンツを有効にして起動するまで",
      "content_html": "<p>jetty で静的コンテンツを有効にして起動するまで</p>\n<p>index.html とかホストしたいだけなんですけど、意外に苦労したのでメモ。</p>\n<!-- more -->\n<h2 id=\"jetty-%E3%81%AE%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\">jetty のダウンロード <a class=\"direct-link\" href=\"#jetty-%E3%81%AE%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89\">#</a></h2>\n<p><a href=\"http://download.eclipse.org/jetty/\">Jetty Ecripse Downloads</a> から stable-8 をダウンロード。(9 がまだ RC だったおので、念のため)</p>\n<h2 id=\"%E9%81%A9%E5%BD%93%E3%81%AA%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E5%B1%95%E9%96%8B\">適当なディレクトリに展開 <a class=\"direct-link\" href=\"#%E9%81%A9%E5%BD%93%E3%81%AA%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E5%B1%95%E9%96%8B\">#</a></h2>\n<pre><code>~/dev/sdks/jetty-8.1.9\n</code></pre>\n<p>にしてみました。</p>\n<h2 id=\"%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">とりあえず起動してみる <a class=\"direct-link\" href=\"#%E3%81%A8%E3%82%8A%E3%81%82%E3%81%88%E3%81%9A%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<pre><code>$ cd ~/dev/sdks/jetty-8.1.9\n$ java -jar start.jar\n</code></pre>\n<p><a href=\"http://localhost:8080\">http://localhost:8080</a> にアクセス。</p>\n<p>動いた、ふむふむ。</p>\n<h2 id=\"%E6%99%AE%E9%80%9A%E3%81%AE-html-%E3%81%A8%E3%81%8B%E3%82%92%E3%81%B6%E3%81%A3%E3%81%93%E3%82%80%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B\">普通の HTML とかをぶっこむディレクトリを作る <a class=\"direct-link\" href=\"#%E6%99%AE%E9%80%9A%E3%81%AE-html-%E3%81%A8%E3%81%8B%E3%82%92%E3%81%B6%E3%81%A3%E3%81%93%E3%82%80%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%82%92%E4%BD%9C%E3%82%8B\">#</a></h2>\n<p>'htdocs' にしました。</p>\n<pre><code>$ cd ~/dev/sdks/jetty-8.1.9\n$ mkdir htdocs\n</code></pre>\n<p>適当な HTML を htdocs に入れる。</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ja<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span><br>\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>H1</span><span class=\"token punctuation\">></span></span>Hello World!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>H1</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"jetty-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A7%E3%80%81%E9%9D%99%E7%9A%84%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B-handler-%E3%81%A8%E3%81%8B%E3%81%84%E3%81%86%E3%82%84%E3%81%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">jetty の設定ファイルで、静的コンテンツを有効にする Handler とかいうやつを設定する <a class=\"direct-link\" href=\"#jetty-%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A7%E3%80%81%E9%9D%99%E7%9A%84%E3%82%B3%E3%83%B3%E3%83%86%E3%83%B3%E3%83%84%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B-handler-%E3%81%A8%E3%81%8B%E3%81%84%E3%81%86%E3%82%84%E3%81%A4%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">#</a></h2>\n<p><code>etc/jetty.xml</code> をコピーして、<code>etc/jetty_static.xml</code> とか適当な名前にする。</p>\n<p>handler の設定のところに ResourceHandler のブロックを入れる</p>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token prolog\">&lt;?xml version=\"1.0\"?></span><br><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">Configure</span> <span class=\"token name\">PUBLIC</span> <span class=\"token string\">\"-//Jetty//Configure//EN\"</span> <span class=\"token string\">\"http://www.eclipse.org/jetty/configure.dtd\"</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token comment\">&lt;!-- =============================================================== --></span><br><span class=\"token comment\">&lt;!-- Configure the Jetty Server                                      --></span><br><span class=\"token comment\">&lt;!--                                                                 --></span><br><span class=\"token comment\">&lt;!-- Documentation of this file format can be found at:              --></span><br><span class=\"token comment\">&lt;!-- http://wiki.eclipse.org/Jetty/Reference/jetty.xml_syntax        --></span><br><span class=\"token comment\">&lt;!--                                                                 --></span><br><span class=\"token comment\">&lt;!-- Additional configuration files are available in $JETTY_HOME/etc --></span><br><span class=\"token comment\">&lt;!-- and can be mixed in.  For example:                              --></span><br><span class=\"token comment\">&lt;!--   java -jar start.jar etc/jetty-ssl.xml                         --></span><br><span class=\"token comment\">&lt;!--                                                                 --></span><br><span class=\"token comment\">&lt;!-- See start.ini file for the default configuraton files           --></span><br><span class=\"token comment\">&lt;!-- =============================================================== --></span><br><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Configure</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Server<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.eclipse.jetty.server.Server<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br>    <span class=\"token comment\">&lt;!-- Server Thread Pool                                          --></span><br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>ThreadPool<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token comment\">&lt;!-- Default queued blocking threadpool --></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>New</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.eclipse.jetty.util.thread.QueuedThreadPool<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>minThreads<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>10<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxThreads<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>200<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>detailedDump<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>New</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br>    <span class=\"token comment\">&lt;!-- Set connectors                                              --></span><br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Call</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>addConnector<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Arg</span><span class=\"token punctuation\">></span></span><br>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>New</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.eclipse.jetty.server.nio.SelectChannelConnector<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>host<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jetty.host<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>port<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jetty.port<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>8080<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>maxIdleTime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>300000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Acceptors<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>statsOn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>confidentialPort<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>8443<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lowResourcesConnections<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>20000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>\t    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>lowResourcesMaxIdleTime<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>5000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>New</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Arg</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Call</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br>    <span class=\"token comment\">&lt;!-- Set handler Collection Structure                            --></span> <br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handler<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>New</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Handlers<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.eclipse.jetty.server.handler.HandlerCollection<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>handlers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Array</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.eclipse.jetty.server.Handler<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br><br>           <span class=\"token comment\">&lt;!-- ここから --></span><br>           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Item</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>New</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>org.eclipse.jetty.server.handler.ResourceHandler<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><br>             <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>resourceBase<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Property</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>files.base<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">default</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./htdocs<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>New</span><span class=\"token punctuation\">></span></span><br>           <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Item</span><span class=\"token punctuation\">></span></span><br>           <span class=\"token comment\">&lt;!-- ここまで --></span><br><br>\t\t\t<span class=\"token comment\">&lt;!-- よくわからないのでコメントアウトしてみた<br>           &lt;Item><br>             &lt;New id=\"Contexts\" class=\"org.eclipse.jetty.server.handler.ContextHandlerCollection\"/><br>           &lt;/Item><br>           &lt;Item><br>             &lt;New id=\"DefaultHandler\" class=\"org.eclipse.jetty.server.handler.DefaultHandler\"/><br>           &lt;/Item> --></span><br>         <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Array</span><span class=\"token punctuation\">></span></span><br>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>New</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br><br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br>    <span class=\"token comment\">&lt;!-- extra options                                               --></span><br>    <span class=\"token comment\">&lt;!-- =========================================================== --></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stopAtShutdown<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendServerVersion<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>sendDateHeader<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>true<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gracefulShutdown<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>1000<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dumpAfterStart<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>Set</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>dumpBeforeStop<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>false<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Set</span><span class=\"token punctuation\">></span></span><br><br><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>Configure</span><span class=\"token punctuation\">></span></span></code></pre>\n<h2 id=\"%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">設定ファイルを指定して起動してみる <a class=\"direct-link\" href=\"#%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<pre><code>$ cd ~/dev/sdks/jetty-8.1.9\n$ java -jar start.jar --ini etc/jetty_static.xml\n</code></pre>\n<p>--ini は不要な気もするのだけど、付けないとエラーになっちゃった。</p>\n<p>これで、 <a href=\"http://localhost:8080\">http://localhost:8080</a> にアクセスすると、さっきつくった Hello World が表示されるはず。</p>\n",
      "date_published": "2013-02-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/02/19/htc-j-networkprovider-bug/",
      "url": "https://blog.amay077.net/blog/2013/02/19/htc-j-networkprovider-bug/",
      "title": "HTC J で NETWORK_PROVIDER で位置測位した時の機種依存バグ？",
      "content_html": "<p>[Androidの機種依存問題を吸収するプロジェクトAndroid-Device-Compatibilityを公開したお話](mixi Engineers' Blog <a href=\"http://alpha.mixi.co.jp/2013/11572/\">http://alpha.mixi.co.jp/2013/11572/</a>) を見て、あーそう言えばこんなんあったなーと思い出したのでメモ。</p>\n<h2 id=\"%E7%97%87%E7%8A%B6\">症状 <a class=\"direct-link\" href=\"#%E7%97%87%E7%8A%B6\">#</a></h2>\n<p>下記条件を満たす時に、LocationManager.requestLocationUpdates すると、最新の位置が取得されず、<strong>前回測位した位置</strong> が返される。</p>\n<p>時刻は更新されてたか、、、あーどうだったかな。</p>\n<!-- more -->\n<h2 id=\"%E6%9D%A1%E4%BB%B6\">条件 <a class=\"direct-link\" href=\"#%E6%9D%A1%E4%BB%B6\">#</a></h2>\n<ul>\n<li>NETWORK_PROVIDER で位置を取得した場合（GPS じゃない）</li>\n<li>WiFi が無効の場合（つまり携帯電話の基地局のみを使った測位の場合）</li>\n<li>スリープ中な場合</li>\n<li>HTC J である(IS03, Nexus S では発生してない。 HTC J Butterfly はわからない)</li>\n</ul>\n<h2 id=\"%E3%81%93%E3%82%93%E3%81%AA%E4%BA%8B%E3%81%97%E3%81%A6%E3%81%9F%E3%82%89%E8%A6%8B%E3%81%A4%E3%81%91%E3%81%9F\">こんな事してたら見つけた <a class=\"direct-link\" href=\"#%E3%81%93%E3%82%93%E3%81%AA%E4%BA%8B%E3%81%97%E3%81%A6%E3%81%9F%E3%82%89%E8%A6%8B%E3%81%A4%E3%81%91%E3%81%9F\">#</a></h2>\n<p>早い話が HexRinger なんですが、このアプリは、AlarmManager で一定時間毎に WiFi/基地局から位置を取得しています。デバッグで移動中のログを取ってたら、「この時間帯、電車で寝てたのになんか位置変わってないんだけどｗ」となりました。</p>\n<h2 id=\"%E5%AF%BE%E7%AD%96\">対策 <a class=\"direct-link\" href=\"#%E5%AF%BE%E7%AD%96\">#</a></h2>\n<p>WakeLock する。ただし PARTIAL_WAKE_LOCK だとダメで、画面も起こしてやらないとダメだった。<br>\nSCREEN あるいは FULL_WAKELOCK が必要な常駐アプリって、最悪やん。</p>\n<h2 id=\"%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E8%A9%A6%E3%81%97%E3%81%9F%E4%BA%8B%E3%81%A8%E3%81%8B%E6%8E%A8%E6%B8%AC\">いろいろ試した事とか推測 <a class=\"direct-link\" href=\"#%E3%81%84%E3%82%8D%E3%81%84%E3%82%8D%E8%A9%A6%E3%81%97%E3%81%9F%E4%BA%8B%E3%81%A8%E3%81%8B%E6%8E%A8%E6%B8%AC\">#</a></h2>\n<ul>\n<li>測位前に通信させればいけるか？と思ったけどダメだった。</li>\n<li>そもそも「最寄りの基地局情報」がスリープ状態だと更新されないんじゃないか説。</li>\n</ul>\n<p>設置場所が山奥過ぎてこの地雷を踏む人はそうはいないと思いますが、「HTC J だけど問題ないよ？」「Butterfly でもダメだったわー」とかの情報あったらコメントください。 m(_ _)m</p>\n",
      "date_published": "2013-02-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/02/19/googlemap-v2-anchor/",
      "url": "https://blog.amay077.net/blog/2013/02/19/googlemap-v2-anchor/",
      "title": "Google Maps API v2 のマーカーの Anchor を探る",
      "content_html": "<p>Google Maps API の Marker には、[Anchor](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/MarkerOptions#anchor\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/MarkerOptions#anchor</a>(float, float) というプロパティがあり、緯度経度と、画像のどの位置をマッピングさせるかを設定する事ができます。</p>\n<!-- more -->\n<p>Marker の既定の画像は、よく見るピンみたいなやつですが、既定の Anchor は、0.5f/1.0f になっています。設定値は、画像に対する「x軸の割合」と「y軸の割合」で、言わんとすることは、「緯度経度の位置を画像の、横方向はちょうど真ん中、縦方向は最下部に合わせる」という事です。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/marker_anchor.png\" alt=\"Marker.anchor の設定値\"></p>\n<p>以下のように、設定値を変更すると、それぞれマーカーの表示位置が変わります。(Android SDK に同梱される Google Maps API v2 のサンプルをベースにしています)</p>\n<pre class=\"language-java\"><code class=\"language-java\">mAdelaide <span class=\"token operator\">=</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addMarker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MarkerOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>ADELAIDE<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adelaide\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">snippet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Population: 1,213,000\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">anchor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 既定値と同じ</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\">mAdelaide <span class=\"token operator\">=</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addMarker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MarkerOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>ADELAIDE<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adelaide\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">snippet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Population: 1,213,000\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">anchor</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 左上</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\">mAdelaide <span class=\"token operator\">=</span> mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addMarker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MarkerOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span>ADELAIDE<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Adelaide\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">snippet</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Population: 1,213,000\"</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">anchor</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 右中</span></code></pre>\n<p><img src=\"https://blog.amay077.net/img/posts/marker_anchor_sample.png\" alt=\"Marker.anchor examples\"></p>\n<h2 id=\"v1-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%A3%E3%81%91%EF%BC%9F\">v1 ではどうだったっけ？ <a class=\"direct-link\" href=\"#v1-%E3%81%A7%E3%81%AF%E3%81%A9%E3%81%86%E3%81%A0%E3%81%A3%E3%81%9F%E3%81%A3%E3%81%91%EF%BC%9F\">#</a></h2>\n<p>Google Maps API v1 では、<a href=\"https://developers.google.com/maps/documentation/android/v1/reference/\">ItemizedOverlay</a> の <code>boundCenter</code> と <code>boundCenterBottom</code> に相当する機能ですね。こちらはメソッド名の通り、「中央/中心」と「中央/下部」しか対応してなかったので、より柔軟になったと言えます。</p>\n<h2 id=\"%E3%83%8F%E3%83%9E%E3%82%8A%E3%81%A9%E3%81%93%E3%82%8D\">ハマりどころ <a class=\"direct-link\" href=\"#%E3%83%8F%E3%83%9E%E3%82%8A%E3%81%A9%E3%81%93%E3%82%8D\">#</a></h2>\n<ul>\n<li>最初、anchor はピクセル指定だ、と勝手に勘違いして、画像のサイズを取得してゴニョゴニョやってたのは内緒。</li>\n<li>0.0〜1.0 の範囲であることを忘れて、0〜100 の値を設定すると、<strong>「マーカーが全部消えます」</strong></li>\n</ul>\n",
      "date_published": "2013-02-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2013/01/19/gets-context-on-android-junit/",
      "url": "https://blog.amay077.net/blog/2013/01/19/gets-context-on-android-junit/",
      "title": "Android の jUnit テストで Context が欲しい時",
      "content_html": "<p>Activity のテストなら <code>ActivityInstrumentationTestCase2</code> 、 Service なら <code>ServiceTestCase</code> を使うべきなんでしょうけど、Android って事あるごとに Context が必要なので、ただのクラスライブラリのテストでも必要なことがシバシバ。</p>\n<!-- more -->\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// HogeTest.java</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HogeTest</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">InstrumentationTestCase</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token comment\">/** ApplicationContext を取得します */</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Context</span> <span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstrumentation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTargetContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<ul>\n<li>[androidの単体テスト(AndroidTestCase) - Androidのド肝] (<a href=\"http://blog.haw.co.jp/android/?p=471\">http://blog.haw.co.jp/android/?p=471</a>) - クラス図がとても役に立ちました</li>\n<li><a href=\"http://stackoverflow.com/questions/5544205/accessing-application-context-from-testsuite-in-setup-before-calling-getactivi\">android - Accessing application context from TestSuite in Setup() before calling getActivity() - Stack Overflow</a></li>\n</ul>\n",
      "date_published": "2013-01-19T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/12/26/osm-on-googlemapv2/",
      "url": "https://blog.amay077.net/blog/2012/12/26/osm-on-googlemapv2/",
      "title": "Google Maps Android API v2 で OpenStreetMap を表示する",
      "content_html": "<p>この記事は <a href=\"http://atnd.org/events/34052\">FOSS4G Advent Calendar 2012</a> の 12/26 の記事です。</p>\n<p>ベクトル地図が扱える新しい Google Maps Android API v2 については、<a href=\"http://qiita.com/items/7ad0244c0fb4b431e090\">Google Map Android API v2 の v1 からの変更点メモ</a> で書きました。</p>\n<p>ここでは、v2 で新しく追加された <code>TileOverlay</code> を使って、OpenStreetMap を重ねてみます。</p>\n<!-- more -->\n<h2 id=\"urltileprovider-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6-openstreetmap-%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\">UrlTileProvider を使って OpenStreetMap を表示する <a class=\"direct-link\" href=\"#urltileprovider-%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6-openstreetmap-%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\">#</a></h2>\n<p>SDK に同梱されるサンプル /extras/google/google_play_services/samples/maps の TileOverlayDemoActivity.java を見れば一目瞭然なので、それをベースにします。</p>\n<h3 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89\">サンプルのコード <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%81%AE%E3%82%B3%E3%83%BC%E3%83%89\">#</a></h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//TileOverlayDemoActivity.java</span><br><span class=\"token comment\">/** This returns moon tiles. */</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> MOON_MAP_URL_FORMAT <span class=\"token operator\">=</span><br>        <span class=\"token string\">\"http://mw1.google.com/mw-planetary/lunar/lunarmaps_v1/clem_bw/%d/%d/%d.jpg\"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">GoogleMap</span> mMap<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUpMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    mMap<span class=\"token punctuation\">.</span><span class=\"token function\">setMapType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GoogleMap</span><span class=\"token punctuation\">.</span>MAP_TYPE_NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">TileProvider</span> tileProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlTileProvider</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">URL</span> <span class=\"token function\">getTileUrl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> zoom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// The moon tile coordinate system is reversed.  This is not normal.</span><br>            <span class=\"token keyword\">int</span> reversedY <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> zoom<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> y <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><br>           <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>US<span class=\"token punctuation\">,</span> MOON_MAP_URL_FORMAT<span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> reversedY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addTileOverlay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TileOverlayOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tileProvider</span><span class=\"token punctuation\">(</span>tileProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>修正前のコードは、Google Moon のタイル画像を使用しています。</p>\n<p>これを OpenStreetMap を使用するように改造します。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//OsmTileOverlayDemoActivity.java</span><br><span class=\"token comment\">/** This returns moon tiles. */</span><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> OSM_MAP_URL_FORMAT <span class=\"token operator\">=</span><br>        <span class=\"token string\">\"http://tile.openstreetmap.org/%d/%d/%d.png\"</span><span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">private</span> <span class=\"token class-name\">GoogleMap</span> mMap<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUpMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    mMap<span class=\"token punctuation\">.</span><span class=\"token function\">setMapType</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GoogleMap</span><span class=\"token punctuation\">.</span>MAP_TYPE_NONE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token class-name\">TileProvider</span> tileProvider <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlTileProvider</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token class-name\">URL</span> <span class=\"token function\">getTileUrl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> zoom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>US<span class=\"token punctuation\">,</span> OSM_MAP_URL_FORMAT<span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>                url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>            <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>    mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addTileOverlay</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TileOverlayOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">tileProvider</span><span class=\"token punctuation\">(</span>tileProvider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>できました。うーん、簡単すぎる。<br>\nURL は OpenStreetMap のものを使います。y軸の値は、Google Moon では逆順となっていたのを正順のまま使用するだけです。</p>\n<p>こんな感じで表示できます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/advent2012_osm.png\" alt=\"OpenStreetMap on Google Map API\"></p>\n<p>移動、拡大・縮小だけでなく、API v2 の恩恵で、回転やチルトもできるのが嬉しいですね。</p>\n<h2 id=\"tileoverlay-%E3%82%92%E9%80%8F%E9%81%8E%E3%81%95%E3%81%9B%E3%82%8B\">TileOverlay を透過させる <a class=\"direct-link\" href=\"#tileoverlay-%E3%82%92%E9%80%8F%E9%81%8E%E3%81%95%E3%81%9B%E3%82%8B\">#</a></h2>\n<p>さて、ベース地図を Google から他のものに差し替えてしまうならこれまでの使い方で十分でしょう。しかし Google のベクトル3Dグリグリ地図をベース地図として使いたいとは誰しもが思うことでしょう。</p>\n<p>ここでは、Google地図の上に TileOverlay を透過で表示することにチャレンジしてみます。<br>\nケースとしては、雨雲レーダーのメッシュや、統計メッシュなどを重ね合わせる事が考えられます。</p>\n<p>さて、API v2 のもう一つの新機能 GroundOverlay には [setTransparentcy](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/GroundOverlay#setTransparency(float)\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/GroundOverlay#setTransparency(float)</a> というズバリなメソッドがあり、それを使えば一発です。</p>\n<p>しかし、TileOverlay とその関連クラスには、透過に関するメソッドは見当たりません。<br>\nそこで TileProvider でダウンロードされた画像データを直接弄って、透過にします。</p>\n<p>TileProvider は文字通り <a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile\">Tile</a> を Provide します。そしてこの Tile はタイル画像データそのものです。</p>\n<p><a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data\">Tile.data</a> の説明には次のように記述があります。</p>\n<blockquote>\n<p>A byte array containing the image data. The image will be created from this data by calling [decodeByteArray(byte[], int, int)](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/null#decodeByteArray\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/null#decodeByteArray</a>(byte[], int, int)).</p>\n</blockquote>\n<p>つまりこのプロパティの中身を透過させてあげれば良さげ、という事になります。</p>\n<p>上記のコードで使用した UrlTileProvider の [getTile](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/UrlTileProvider#getTile\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/UrlTileProvider#getTile</a>(int, int, int) を override して…と思ったら、<br>\n＿人人人人人人人人人＿<br>\n＞　突然の final！　＜<br>\n￣^Y^Y^Y^Y^Y^Y^Y^￣<br>\nという事で override できません。</p>\n<p>仕方ががないので、独自の TileProvider を別途用意して、UrlTileProvider を内包する形で <code>TransparencyUrlTileProvider</code> というクラスを実装します。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransparencyUrlTileProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TileProvider</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> OSM_MAP_URL_FORMAT <span class=\"token operator\">=</span> <span class=\"token string\">\"http://tile.openstreetmap.org/%d/%d/%d.png\"</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> _transparency<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 透過率(0〜255)</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">UrlTileProvider</span> _osmTileProv<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 内包する TileProvider</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">TransparencyUrlTileProvider</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> transparency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t_transparency <span class=\"token operator\">=</span> transparency<span class=\"token punctuation\">;</span><br><br>\t\t_osmTileProv <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UrlTileProvider</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">URL</span> <span class=\"token function\">getTileUrl</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> zoom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t            <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Locale</span><span class=\"token punctuation\">.</span>US<span class=\"token punctuation\">,</span> OSM_MAP_URL_FORMAT<span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token class-name\">URL</span> url <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>\t                url <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MalformedURLException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AssertionError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t            <span class=\"token punctuation\">}</span><br>\t            <span class=\"token keyword\">return</span> url<span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Tile</span> <span class=\"token function\">getTile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> zoom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Tile</span> tile <span class=\"token operator\">=</span> _osmTileProv<span class=\"token punctuation\">.</span><span class=\"token function\">getTile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// TODO ここで Tile の透過処理を行う</span><br><br>\t\t<span class=\"token keyword\">return</span> tile<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使う側は、こんな感じになります。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token class-name\">GoogleMap</span> mMap<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setUpMap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// mMap.setMapType(GoogleMap.MAP_TYPE_NONE); ベース地図は消さない</span><br><br>    mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addTileOverlay</span><span class=\"token punctuation\">(</span><br>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">TileOverlayOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>        <span class=\"token punctuation\">.</span><span class=\"token function\">tileProvider</span><span class=\"token punctuation\">(</span><br>            <span class=\"token keyword\">new</span> <span class=\"token class-name\">TransparencyUrlTileProvider</span><span class=\"token punctuation\">(</span><span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">256</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ここまでで改造前と同じく OpenStreetMap が「非透過で」表示されるのは確認できます。</p>\n<p>次にいよいよ Bitmap の透過処理です。<br>\nまず、Tile から Bitmap を抜き出します。API リファレンスによると、<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Tile#data\">Tile.data</a> というメンバがあるハズが…見つかりません。代わりに <code>Tile.bM</code> という byte[] なメンバがあります。こいつで間違いないでしょう。</p>\n<h3 id=\"2013.4.22-%E8%BF%BD%E8%A8%98\">2013.4.22 追記 <a class=\"direct-link\" href=\"#2013.4.22-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>Tile.data が見つからないのは、どうやらバグのようです。間違えて Proguard で難読化されてしまったようです。</p>\n<ul>\n<li><a href=\"https://code.google.com/p/gmaps-api-issues/issues/detail?id=5082\">Issue 5082 - gmaps-api-issues - Bug: Public field &quot;data&quot; in Tile wrongly obfuscated - Google Maps API bug reports and feature requests</a></li>\n</ul>\n<h3 id=\"2013.4.22-%E8%BF%BD%E8%A8%98%E7%B5%82%E3%82%8F%E3%82%8A\">2013.4.22 追記終わり <a class=\"direct-link\" href=\"#2013.4.22-%E8%BF%BD%E8%A8%98%E7%B5%82%E3%82%8F%E3%82%8A\">#</a></h3>\n<p><a href=\"http://Tile.bM\">Tile.bM</a> の byte[] から Bitmap インスタンスを生成します。</p>\n<pre><code>Bitmap bitmap = BitmapFactory.decodeByteArray(tile.bM, 0, tile.bM.length);\n</code></pre>\n<p>次に透過処理ですが、Android ではちょっと面倒なようです。<br>\n以下のサイトを参考にさせて頂いて、関数を作成しました。</p>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/hypercrab/20110730/1312038162\">Android: Bitmap の背景を透明にする - 入隠者通信 ～病を嗜む～</a></li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Bitmap</span> <span class=\"token function\">makeTransparentBmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Bitmap</span> bmp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> transparency<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>     <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> bmp<span class=\"token punctuation\">.</span><span class=\"token function\">getWidth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>     <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> bmp<span class=\"token punctuation\">.</span><span class=\"token function\">getHeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>     <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pixels <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>width <span class=\"token operator\">*</span> height<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br><br>     <span class=\"token class-name\">Bitmap</span> bitmap <span class=\"token operator\">=</span> <span class=\"token class-name\">Bitmap</span><span class=\"token punctuation\">.</span><span class=\"token function\">createBitmap</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">,</span>height<span class=\"token punctuation\">,</span><span class=\"token class-name\">Bitmap<span class=\"token punctuation\">.</span>Config</span><span class=\"token punctuation\">.</span>ARGB_8888 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>     bmp<span class=\"token punctuation\">.</span><span class=\"token function\">getPixels</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>     <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> y <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> y<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> x<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>      \t <span class=\"token keyword\">int</span> pixel <span class=\"token operator\">=</span> pixels<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> width<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><br>      \t pixels<span class=\"token punctuation\">[</span>x <span class=\"token operator\">+</span> y <span class=\"token operator\">*</span> width<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">argb</span><span class=\"token punctuation\">(</span>transparency<span class=\"token punctuation\">,</span><br>      \t\t\t <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">red</span><span class=\"token punctuation\">(</span>pixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">green</span><span class=\"token punctuation\">(</span>pixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">blue</span><span class=\"token punctuation\">(</span>pixel<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>       <span class=\"token punctuation\">}</span><br>     <span class=\"token punctuation\">}</span><br>     bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">eraseColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span><span class=\"token function\">argb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>     bitmap<span class=\"token punctuation\">.</span><span class=\"token function\">setPixels</span><span class=\"token punctuation\">(</span>pixels<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>     <span class=\"token keyword\">return</span> bitmap<span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>では TODO の所に組み込みます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TransparencyUrlTileProvider</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">TileProvider</span> <span class=\"token punctuation\">{</span><br><br>    <span class=\"token operator\">&lt;</span>前略<span class=\"token operator\">></span><br><br>\t<span class=\"token annotation punctuation\">@Override</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Tile</span> <span class=\"token function\">getTile</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> zoom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">Tile</span> tile <span class=\"token operator\">=</span> _osmTileProv<span class=\"token punctuation\">.</span><span class=\"token function\">getTile</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> zoom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// Tile の透過処理を行う</span><br>       <span class=\"token class-name\">Bitmap</span> bmp <span class=\"token operator\">=</span> <span class=\"token class-name\">BitmapFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeByteArray</span><span class=\"token punctuation\">(</span>tile<span class=\"token punctuation\">.</span>bM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> tile<span class=\"token punctuation\">.</span>bM<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>       <span class=\"token class-name\">Bitmap</span> transparentBmp <span class=\"token operator\">=</span> <span class=\"token function\">makeTransparentBmp</span><span class=\"token punctuation\">(</span>bmp<span class=\"token punctuation\">,</span> _transparency<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>       <span class=\"token comment\">// Tile を作り直す</span><br>\t\t<span class=\"token class-name\">ByteArrayOutputStream</span> bos <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayOutputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\ttransparentBmp<span class=\"token punctuation\">.</span><span class=\"token function\">compress</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CompressFormat</span><span class=\"token punctuation\">.</span>PNG<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> bos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">Tile</span> tranparentTile <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Tile</span><span class=\"token punctuation\">(</span>tile<span class=\"token punctuation\">.</span>width<span class=\"token punctuation\">,</span> tile<span class=\"token punctuation\">.</span>height<span class=\"token punctuation\">,</span> bos<span class=\"token punctuation\">.</span><span class=\"token function\">toByteArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token keyword\">return</span> tranparentTile<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token operator\">&lt;</span>以下略<span class=\"token operator\">></span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>動かしてみます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/advent2012_osmwithg.png\" alt=\"OpenStreetMap with Google Map API\"></p>\n<p>これは、GoogleMap の衛星写真の上に OpenStreetMap を透過して重ねた例です（分かりづらい</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>このように Google Maps Android API v2 では、TileProvider を使って、タイル地図画像を簡単に表示させることができます。</p>\n<p>Google Maps Javascript API や、MapKit でも他のタイル地図画像を利用することはできましたが、それらよりもより簡単に使えます。ハックというよりも API が公式にサポートしている、という感じです。</p>\n<p>これまで Android には、Javascript の OpenLayers や、 iOS の route-me のような、地図タイルデータソースを扱える地図SDKはありませんでした（いや OsmDroid くらいか）</p>\n<p>それを Google Maps Android API v2 がサポートしたのですから使わない手はありません。地図SDK としては一番高性能で事実上標準なのですから。</p>\n<p>これに、OpenStreetMap や電子国土地図、衛星画像などの背景地図や、統計データメッシュや、アメダスなどの主題図的なタイル地図が重ねられるといろいろできそうだなあ、という感じです。<br>\n(Yahoo! さんの<a href=\"http://weather.yahoo.co.jp/weather/zoomradar/\">雨雲レーダー</a> のタイル画像もこっそり試してみて「こりゃ面白い」と思ったので公式に提供して欲しいですｗ)</p>\n<p>私にはタイル地図データを作る知識は無いので、タイル地図のポータルみたいなものがあるといいなあと思います。 <a href=\"https://www.facebook.com/chitaikyo\">地図タイル工法協会</a> さんよろしくおねがいします。</p>\n<p>というわけで、Android で地図使いたいなら(今のところ) Google Maps API v2 一択！ 他社さんもガンバレ！</p>\n<p>※あれ？このネタどこが FOSS4G だ？ま、いっか。</p>\n",
      "date_published": "2012-12-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/12/26/edittext-ontextchanged/",
      "url": "https://blog.amay077.net/blog/2012/12/26/edittext-ontextchanged/",
      "title": "Android/EditTextでIMEの未確定文字列が確定された瞬間(のフォーク)",
      "content_html": "<p>Android の EditText の文字列と、String 変数値を同期させたいケースって結構あると思うんですけど、<a href=\"http://developer.android.com/reference/android/view/View.OnFocusChangeListener.html\">LostFocus</a> みたいなのでやると、オンフォーカスな状態で Activity が閉じられた時に LostFocus が呼ばれなくてあぼんとなるのは VB6あがりのプログラマ(=私)なら誰もが経験するんじゃないでしょうか？</p>\n<!-- more -->\n<p>じゃあ <a href=\"http://developer.android.com/reference/android/text/TextWatcher.html\">onTextChanged</a> だぜ、って仕込んでみると、Android のこれは IME で変換中の文字列もバンバン飛んで来まして大変使い勝手が悪い。(サジェストなんかする際には必要なんでしょうけども)</p>\n<p>例えば、以下で紹介されている方法</p>\n<ul>\n<li><a href=\"http://blog.global-eng.co.jp/android/2011/04/08/textwatcher%e3%81%a7edittext%e3%81%ae%e5%85%a5%e5%8a%9b%e5%86%85%e5%ae%b9%e3%82%92%e3%83%aa%e3%82%a2%e3%83%ab%e3%82%bf%e3%82%a4%e3%83%a0%e3%81%ab%e5%8f%8d%e6%98%a0%e3%81%99%e3%82%8b/\">TextWatcherでEditTextの入力内容をリアルタイムに反映する / GE Android Blog</a></li>\n</ul>\n<p>を実装しますと、IME確定前の文字列もじゃんじゃん同期してくれちゃいます。</p>\n<p>これに起因したであろう Android アプリもありまして(Instagram とか。今は治ってる。)、なんとかならんかなーと思っていました。</p>\n<p>そんな時、こちら↓</p>\n<ul>\n<li><a href=\"http://www.spiritek.co.jp/spkblog/2012/10/25/androidedittext%e3%81%a7ime%e3%81%ae%e6%9c%aa%e7%a2%ba%e5%ae%9a%e6%96%87%e5%ad%97%e5%88%97%e3%81%8c%e7%a2%ba%e5%ae%9a%e3%81%95%e3%82%8c%e3%81%9f%e7%9e%ac%e9%96%93/\">Android/EditTextでIMEの未確定文字列が確定された瞬間 ｜ SpiriteK Blog</a></li>\n</ul>\n<p>の記事にめぐり逢いまして、まさに私が求めていたそのもの。</p>\n<p>ですが、未確定文字＝下線付き(<code>UnderlineSpan</code>)である、という前提がどうにもしっくり来ませんで(未確定文字に下線を付けない IME もそりゃあるだろうなーという意味で)。</p>\n<p>もちろん、その前で言及されている内部クラス <code>android.view.inputmethod.ComposingText</code> を文字列比較するのもうーん…。</p>\n<p>で、自分でも試行錯誤してみたところ、[Spanned.getSpanFlags](<a href=\"http://developer.android.com/reference/android/text/Spanned.html#getSpanFlags(java.lang.Object)\">http://developer.android.com/reference/android/text/Spanned.html#getSpanFlags(java.lang.Object)</a> というメソッドがあるのに気づきました。あと、<a href=\"http://developer.android.com/reference/android/text/Spanned.html#SPAN_COMPOSING\">SPAN_COMPOSING</a> というフラグも。</p>\n<p>これらを使って、文字列が確定されているかどうか？を識別することができるのではないかと考え、前出の記事のコードを以下のように修正してみました。</p>\n<p><strong>DetermineComposingText.java</strong></p>\n<pre class=\"language-java\"><code class=\"language-java\">edit1<span class=\"token punctuation\">.</span><span class=\"token function\">addTextChangedListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TextWatcher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">int</span> currentLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onTextChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> before<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">beforeTextChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> start<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> after<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        currentLength <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterTextChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Editable</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"after:\"</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> currentLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">boolean</span> unfixed <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br>        <span class=\"token class-name\">Object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> spanned <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getSpans</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>spanned <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> obj <span class=\"token operator\">:</span> spanned<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// UnderlineSpan での判定から getSpanFlags への判定に変更。</span><br>                <span class=\"token comment\">// if (obj instanceof android.text.style.UnderlineSpan) {</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">getSpanFlags</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Spanned</span><span class=\"token punctuation\">.</span>SPAN_COMPOSING<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token class-name\">Spanned</span><span class=\"token punctuation\">.</span>SPAN_COMPOSING<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    unfixed <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>unfixed<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token class-name\">Toast</span> toast <span class=\"token operator\">=</span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token function\">getApplicationContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"確定\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_SHORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            toast<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p><code>s.getSpanFlags(obj) &amp; Spanned.SPAN_COMPOSING) == Spanned.SPAN_COMPOSING)</code> で SPAN_COMPOSING(未確定文字)のフラグが立っているかを判定しています。</p>\n<p>とりあえず手持ちの ATOK では修正前と同じように動作しているようです。</p>\n<p>IME 側で「未確定文字は SPAN_COMPOSING を必ず設定する」ものかどうかは分かりませんが、個人的には UnderlineSpan を使った手法よりもすっきりしました、というお話でした。</p>\n",
      "date_published": "2012-12-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/12/25/googlemap-v2-zindex/",
      "url": "https://blog.amay077.net/blog/2012/12/25/googlemap-v2-zindex/",
      "title": "Google Maps Android API v2 の図形の描画順(zIndex)を探る",
      "content_html": "<p>Google Maps Android API v1 では Overlay をレイヤのように使うことで図形群の前後関係をコントロールできましたが、v2 では <code>Polyline</code> や <code>Polygon</code> クラスに <code>zIndex</code> が導入されました。</p>\n<p>いくつかの図形を重ねて描画し、zIndex が与える影響を調べてみました。</p>\n<!-- more -->\n<h2 id=\"zindex-%E3%81%AA%E3%81%97-%E3%81%AE%E5%A0%B4%E5%90%88\">zIndex なし の場合 <a class=\"direct-link\" href=\"#zindex-%E3%81%AA%E3%81%97-%E3%81%AE%E5%A0%B4%E5%90%88\">#</a></h2>\n<p>まず zIndex を指定しない場合。</p>\n<ol>\n<li>マーカー</li>\n<li>線(太)</li>\n<li>線(細)</li>\n<li>ポリゴン(青)</li>\n<li>ポリゴン(緑)</li>\n</ol>\n<p>の順で <code>GoogleMap</code> に追加しています。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> TOKYO <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.691</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139.693</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> NAGOYA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.1805</span><span class=\"token punctuation\">,</span> <span class=\"token number\">136.9073</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> TOYOHASHI <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">34.770</span><span class=\"token punctuation\">,</span> <span class=\"token number\">137.391</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> MATSUMOTO <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">36.239</span><span class=\"token punctuation\">,</span> <span class=\"token number\">137.969</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> SHIZUOKA <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">34.99</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138.39</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> MAEBASHI <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">36.38</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139.04</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// マーカー</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addMarker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MarkerOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138.71</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"富士山\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// ライン</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolyline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolylineOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> NAGOYA<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolyline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolylineOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> NAGOYA<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// ポリゴン</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolygon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolygonOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> MATSUMOTO<span class=\"token punctuation\">,</span> TOYOHASHI<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">fillColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>CYAN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolygon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolygonOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> MAEBASHI<span class=\"token punctuation\">,</span> SHIZUOKA<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">fillColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>結果、こうなりました。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/zindex_off.png\" alt=\"noZindex\"></p>\n<p>前後関係を見ると、奥から</p>\n<ol>\n<li>ポリゴン(青)</li>\n<li>ポリゴン(緑)</li>\n<li>線(太)</li>\n<li>線(細)</li>\n<li>マーカー</li>\n</ol>\n<p>となりました。描画順＝追加した順、であれば、マーカーや線は、ポリゴンによって覆い隠されてしまうのですが、そうなりませんでした。<br>\n図形によって前後関係が決められていて、<br>\n奥から ポリゴン → ライン → マーカー となるようです。<br>\nちなみに、zindex を指定しない時の既定値は <code>0</code> です。</p>\n<h2 id=\"zindex-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">zIndex を設定してみる <a class=\"direct-link\" href=\"#zindex-%E3%82%92%E8%A8%AD%E5%AE%9A%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">#</a></h2>\n<p>次に zIndex を次のように設定してみます。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// マーカー</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addMarker</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">MarkerOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">position</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.47</span><span class=\"token punctuation\">,</span> <span class=\"token number\">138.71</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">title</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"富士山\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// ライン</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolyline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolylineOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> NAGOYA<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">zIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolyline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolylineOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> NAGOYA<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">zIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// ポリゴン</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolygon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolygonOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> MATSUMOTO<span class=\"token punctuation\">,</span> TOYOHASHI<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">fillColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>CYAN<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">zIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolygon</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolygonOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> MAEBASHI<span class=\"token punctuation\">,</span> SHIZUOKA<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">fillColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>GREEN<span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">zIndex</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>結果は以下のとおり。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/zindex_on.png\" alt=\"noZindex\"></p>\n<ol>\n<li>線(太)</li>\n<li>線(細)</li>\n<li>ポリゴン(青)</li>\n<li>ポリゴン(緑)</li>\n<li>マーカー</li>\n</ol>\n<p>む、ライン、ポリゴンに関係なく、zIndex で指定した順に奥から描画されているようです。</p>\n<h2 id=\"developer-guide-%E3%81%AE%E8%AA%AC%E6%98%8E\">Developer Guide の説明 <a class=\"direct-link\" href=\"#developer-guide-%E3%81%AE%E8%AA%AC%E6%98%8E\">#</a></h2>\n<p>いつも試してから見る公式ガイドｗ</p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/android/lines#customize_a_polyline\">Customize a Polyline - Google Maps Android API v2</a></li>\n</ul>\n<blockquote>\n<p>Z-index<br>\nThe stack order of this Polyline, relative to other overlays (polylines, polygons, ground overlays and tile overlays) in the map. A Polyline with a high z-index is drawn above overlays with lower z-indexes. Two overlays with the same z-index are drawn in an arbitrary order. Set this property with PolylineOptions.zIndex(). You can change this after the Polyline has been added to the map with the Polyline.setZIndex() method.</p>\n</blockquote>\n<p>まあ、それっぽいことが書いてあるわｗ<br>\nどうやら <code>GroundOverlay</code> や <code>TileOverlay</code> にも zIndex があり、前後関係をコントロールできるようですね。</p>\n<h2 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h2>\n<p>Google Maps Android API v2 の Polyline と Polygon の zIndex はまとめると次のようになります。</p>\n<ul>\n<li>指定しない(<code>0</code>)と、追加の順番に関わらず <em><strong>Polyline の方が Polygon よりも手前</strong></em> に描画される。Polyline 同士、Polygon 同士は、追加順に奥から描画される。</li>\n<li>指定した場合、Polyline、Polygon の区別なく、<em><strong>zIndex の順で</strong></em> 奥から描画される。</li>\n<li>マーカーは常に一番手前に描画される。</li>\n</ul>\n<p>ということで、zIndex をうまく設定すれば、図形群の前後関係を調整・変更することができます。</p>\n",
      "date_published": "2012-12-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/12/24/googlemap-v2-geodesic-line/",
      "url": "https://blog.amay077.net/blog/2012/12/24/googlemap-v2-geodesic-line/",
      "title": "Google Maps Android API v2 で大圏コースを表示する",
      "content_html": "<p>GoogleMap は<a href=\"http://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%AB%E3%82%AB%E3%83%88%E3%83%AB%E5%9B%B3%E6%B3%95\">メルカトル図法</a>なので、地図上の２点間を結んだ直線は最短距離になりません。(メルカトル図法で正しいのは角度だけ、でしたよね。)</p>\n<p>地球上の２点間の最短距離は「<a href=\"http://ja.wikipedia.org/wiki/%E5%A4%A7%E5%9C%8F%E3%82%B3%E3%83%BC%E3%82%B9\">大圏コース</a>」と呼ばれます。</p>\n<p>で、Android 版の新しい API を使うと、この大圏コースを簡単に表示することができます。</p>\n<!-- more -->\n<p>こんな感じ、赤がただの直線、青が大圏コースです。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/greatcircle.png\" alt=\"greatcircle\"></p>\n<p>やり方は以下のとおりで、<code>geodesic</code> を <code>true</code> にすれば大圏コースになります。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">GoogleMap</span> mMap<span class=\"token punctuation\">;</span><br><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> TOKYO <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">35.691</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139.693</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token keyword\">final</span> <span class=\"token class-name\">LatLng</span> HAWAII <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LatLng</span><span class=\"token punctuation\">(</span><span class=\"token number\">19.87</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">155.56</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// ただの直線</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolyline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolylineOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> HAWAII<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>RED<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">geodesic</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// 大圏コース</span><br>mMap<span class=\"token punctuation\">.</span><span class=\"token function\">addPolyline</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">PolylineOptions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>TOKYO<span class=\"token punctuation\">,</span> HAWAII<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">color</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">.</span>BLUE<span class=\"token punctuation\">)</span><br>    <span class=\"token punctuation\">.</span><span class=\"token function\">geodesic</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>Developper Guide に説明があります。</p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/android/lines#geodesic_and_non-geodesic_lines\">Polylines and Polygons - Google Maps Android API v2</a></li>\n</ul>\n<blockquote>\n<p>A Geodesic line is a line that follows the curvature of the earth. In contrast, a non-geodesic line will be drawn using the coordinate system of your screen. By Default, Polyline and Polygon objects will draw non-geodesic lines. You can change any Polyline or Polygon to use geodesic lines by setting the geodesic property to true.</p>\n</blockquote>\n<blockquote>\n<p>適当訳<br>\nGeodesic なラインとは地球上の曲がった線のことです。non-geodesic ってやつは画面座標系で描いた線で、これがデフォルトです。Polyline や Polygon を geodesic にしたければ geodesic プロパティを true にするとよろし。</p>\n</blockquote>\n<p>ちなみにこの「２点間の最短距離」は [Location.distanceBetween](<a href=\"http://developer.android.com/reference/android/location/Location.html#distanceBetween\">http://developer.android.com/reference/android/location/Location.html#distanceBetween</a>(double, double, double, double, float[]) メソッドで求められます。</p>\n<p>どうやら、Javascript 版にはもともとこの機能があったようで、以下のサイトに例があります。</p>\n<ul>\n<li><a href=\"http://user.numazu-ct.ac.jp/~tsato/tsato/geoweb/googlemaps/great-circle/\">Googleマップで大圏コースを表示する</a></li>\n</ul>\n<p>あと、iOS 版の Google Maps API にもあるみた…あれ、ないや。<br>\n(余談ですが iOS 版の API には Polygon を描く機能もないんですね)</p>\n<ul>\n<li><a href=\"https://developers.google.com/maps/documentation/ios/lines\">Polylines - Google Maps SDK for iOS</a></li>\n</ul>\n<h2 id=\"%E3%81%9D%E3%81%AE%E4%BB%96\">その他 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%AE%E4%BB%96\">#</a></h2>\n<p>つか、Android の GoogleMap さん、思いっきり縮小しても世界が画面内に収まらないので、大圏コースの例が見せにくいわ。</p>\n",
      "date_published": "2012-12-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/12/20/googlemap-andro-api-v2-changes/",
      "url": "https://blog.amay077.net/blog/2012/12/20/googlemap-andro-api-v2-changes/",
      "title": "Google Maps Android API v2 の v1 からの変更点メモ",
      "content_html": "<p><a href=\"http://www.atmarkit.co.jp/ait/articles/1212/04/news110.html\">Android の Map API が刷新</a>され、</p>\n<ul>\n<li>ベクトル地図！</li>\n<li>回転、視点変更</li>\n<li>屋内、地下街マップの表示</li>\n</ul>\n<p>が可能になりました。Googleマップアプリの機能が API で提供された感じです。これは感涙。</p>\n<!-- more -->\n<p>v2 になって導入手順が大幅に変わりましたが、 <a href=\"https://twitter.com/adamrocker\">@adamrocker</a> さんが早速解説して下さっています。</p>\n<ul>\n<li><a href=\"http://www.adamrocker.com/blog/334/google-maps-android-api-v2.html\">throw Life - Google Maps Android API v2を使ってみた</a></li>\n</ul>\n<p>ここでは、Google Map Android API v1 からの変更点を中心に紹介してみます。</p>\n<h2 id=\"%E4%BA%92%E6%8F%9B%E6%80%A7\">互換性 <a class=\"direct-link\" href=\"#%E4%BA%92%E6%8F%9B%E6%80%A7\">#</a></h2>\n<p><em><strong>あ・り・ま・せ・ん、以上！</strong></em></p>\n<p>Fragment 化、3D対応などにより、API の設計思想そのものが変わった様で、既存のコードをそのまま流用できることはないでしょう。<br>\n前の MapView に似せた <a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/MapView\">com.google.android.gms.maps.MapView</a> というクラスがありますが、クラス名が同じだけでメンバは全然別物です。</p>\n<h2 id=\"%E3%81%98%E3%82%83%E3%81%82%E3%80%81v1-%E3%81%AE%E3%81%82%E3%81%AE%E6%A9%9F%E8%83%BD%E3%81%AF-v2-%E3%81%A7%E3%81%A9%E3%81%86%E3%82%84%E3%82%93%E3%81%AE%EF%BC%9F\">じゃあ、v1 のあの機能は v2 でどうやんの？ <a class=\"direct-link\" href=\"#%E3%81%98%E3%82%83%E3%81%82%E3%80%81v1-%E3%81%AE%E3%81%82%E3%81%AE%E6%A9%9F%E8%83%BD%E3%81%AF-v2-%E3%81%A7%E3%81%A9%E3%81%86%E3%82%84%E3%82%93%E3%81%AE%EF%BC%9F\">#</a></h2>\n<h3 id=\"%E7%A7%BB%E5%8B%95%E3%80%81%E6%8B%A1%E5%A4%A7%E3%83%BB%E7%B8%AE%E5%B0%8F%E3%81%AA%E3%81%A9\">移動、拡大・縮小など <a class=\"direct-link\" href=\"#%E7%A7%BB%E5%8B%95%E3%80%81%E6%8B%A1%E5%A4%A7%E3%83%BB%E7%B8%AE%E5%B0%8F%E3%81%AA%E3%81%A9\">#</a></h3>\n<p><img src=\"https://blog.amay077.net/img/posts/gmap2_basic.png\" alt=\"BasicMap\"></p>\n<p>v1 では <a href=\"https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/MapController.html\">MapController</a> の animateTo とか setZoom で行なっていましたが、そもそも v2 には MapController クラスがなくなっています。</p>\n<p>v2 では <a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap\">GoogleMap</a> クラスの animateCamera() や moveCamera() で移動、拡大・縮小を行います。<br>\nこれらに加えて、角度(bearing)、視点(tilt) も設定します。animateCamera は Google Earth みたいなアニメーションが定義できてカッコいいですよ。</p>\n<p>ちなみに、無段階ズームになった影響で、Zoom の値が int から float になっています。値が示す地図縮尺は変化ないようです。v1 の Zoom=15 と v2 の Zoom=15.0f は同じ意味です。</p>\n<h4 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h4>\n<p>SDK に同梱されるサンプル /extras/google/google_play_services/samples/maps の該当箇所を添えておきます。</p>\n<ul>\n<li>CameraDemoActivity.java</li>\n</ul>\n<h3 id=\"%E3%82%BA%E3%83%BC%E3%83%A0%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%A8%E3%81%8B%E3%81%AE%E8%A1%A8%E7%A4%BAon%2Foff\">ズームボタンとかの表示ON/OFF <a class=\"direct-link\" href=\"#%E3%82%BA%E3%83%BC%E3%83%A0%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%A8%E3%81%8B%E3%81%AE%E8%A1%A8%E7%A4%BAon%2Foff\">#</a></h3>\n<p><img src=\"https://blog.amay077.net/img/posts/gmap2_uisettings.png\" alt=\"UISettings\"></p>\n<p>v1 では MapView の setBuiltInZoomControls でズームボタンの表示ON/OFF ができました。<br>\nv2 では、GoogleMap から [UISettings](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap#getUiSettings()\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap#getUiSettings()</a> を取得して設定します。<br>\nv2 では、ズームボタンの他に、コンパスが増えているのでそれらの表示制御と、各種ジェスチャ(スクロール、回転、チルト)の有効/無効 が設定できます。</p>\n<h4 id=\"%E5%8F%82%E8%80%83-2\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83-2\">#</a></h4>\n<ul>\n<li>UiSettingsDemoActivity.java</li>\n</ul>\n<h3 id=\"%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E8%A1%A8%E7%A4%BA\">マーカー表示 <a class=\"direct-link\" href=\"#%E3%83%9E%E3%83%BC%E3%82%AB%E3%83%BC%E8%A1%A8%E7%A4%BA\">#</a></h3>\n<p><img src=\"https://blog.amay077.net/img/posts/gmap2_markers.png\" alt=\"Markers\"><br>\nAPI の使い方で一番大きく変わったのはこの辺りかと思います。</p>\n<p>v1 では、MapView に <a href=\"https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/ItemizedOverlay.html\">ItemizedOverlay</a> を add して、OverlayItem(＝マーカー)を登録して…って感じでしたが、全滅です。</p>\n<p>v2 でのマーカー表示は [GoogleMap.addMarker](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addMarker(com.google.android.gms.maps.model.MarkerOptions)\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addMarker(com.google.android.gms.maps.model.MarkerOptions)</a> を使います。<br>\nOverlay の概念が事実上なくなって、GoogleMap クラスから Marker オブジェクトを生成するようになりました。</p>\n<p>マーカーのグループ管理ができなくなってちょっと不便に感じます。(v1 では、ローソンとファミマのマーカーを管理するのに、lawsonOverlay と famimaOverlay を用意しておけば良かった)</p>\n<p>v2 のメリットは、マーカーがドラッグをサポートするようになったのと、情報ウィンドウ(ふきだし)が標準搭載されたことです。</p>\n<h4 id=\"%E5%8F%82%E8%80%83-3\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83-3\">#</a></h4>\n<ul>\n<li>MarkerDemoActivity.java</li>\n</ul>\n<h3 id=\"%E5%9B%B3%E5%BD%A2(%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A8%E3%81%8B%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%A8%E3%81%8B)%E6%8F%8F%E7%94%BB\">図形(ラインとかポリゴンとか)描画 <a class=\"direct-link\" href=\"#%E5%9B%B3%E5%BD%A2(%E3%83%A9%E3%82%A4%E3%83%B3%E3%81%A8%E3%81%8B%E3%83%9D%E3%83%AA%E3%82%B4%E3%83%B3%E3%81%A8%E3%81%8B)%E6%8F%8F%E7%94%BB\">#</a></h3>\n<p><img src=\"https://blog.amay077.net/img/posts/gmap2_polygons.png\" alt=\"Polygons\"><br>\nこれも大きく作り替えないといけないところです。</p>\n<p>v1 では、Overlay の [draw](<a href=\"https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Overlay.html#draw\">https://developers.google.com/maps/documentation/android/v1/reference/com/google/android/maps/Overlay.html#draw</a>(android.graphics.Canvas, com.google.android.maps.MapView, boolean) を override して、Canvas の drawLine などの描画メソッドを呼び出す感じでした。</p>\n<p>v2 では、Overlay がありませんし、Canvas を直接さわれる口がありません。<br>\nではどうするかというと、<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polygon\">Polygon</a> , <a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polyline\">Polyline</a> というクラスが用意されています。</p>\n<p>GoogleMap クラスの [addPolygon](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolygon(com.google.android.gms.maps.model.PolygonOptions)\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolygon(com.google.android.gms.maps.model.PolygonOptions)</a> , [addPolyline](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolyline(com.google.android.gms.maps.model.PolylineOptions)\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#addPolyline(com.google.android.gms.maps.model.PolylineOptions)</a> メソッドで追加します。Marker と同じく Overlay の概念はありません。</p>\n<p>また add した Polygon や Polyline は、[remove](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polygon.html#remove()\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/model/Polygon.html#remove()</a> するか [GoogleMap.clear](<a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#clear()\">https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/GoogleMap.html#clear()</a> するまで地図上に登録されています。</p>\n<p>v2 になって、描画処理は重くなったなあという印象です。<br>\nv1 の感覚で図形を add しまくると、すごくもっさりします。画面に表示すべきものだけ、さらに非同期でパラパラと図形が描画されていくような処理を実装しないとストレスフルな感じになりそうです。</p>\n<h4 id=\"%22%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E9%A0%98%E5%9F%9F%22-%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95\">&quot;表示している領域&quot; の取得方法 <a class=\"direct-link\" href=\"#%22%E8%A1%A8%E7%A4%BA%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E9%A0%98%E5%9F%9F%22-%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95\">#</a></h4>\n<p>v1 では、getMapCenter , getLatitudeSpan, getLongitudeSpan でなんとなく取得できました。<br>\nv2 では、GoogleMap.getProjection で得られる <a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/Projection\">Projection</a> クラスの getVisibleRegion から取得できます。</p>\n<p>注意点は、回転している時とチルトしている時、いずれも &quot;表示している範囲を包括する矩形&quot; が得られるようですが、特にチルトしている時は奥行き分が領域に含まれますので、視点を倒せば倒すほど遠くが見える(領域が広がる)ことになります。画面に表示しているものだけ図形を描画する時など、奥行きはある程度のしきい値を持たないと範囲が広くなりすぎです。</p>\n<h4 id=\"%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E6%89%80\">ハマった所 <a class=\"direct-link\" href=\"#%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E6%89%80\">#</a></h4>\n<p>Polygon は当然塗りつぶしができるわけですが、これポリゴンの座標群が「時計回り」でないと塗りつぶされません。地理情報システムの業界では、&quot;ポリゴンの外周は時計回り、穴は反時計回り&quot; という常識があるのですが、それに習ったものと思われます。この原因にたどり着くまで、始点と終点が一致してないのかな、少数の切り捨てで一致してないのかとか、小一時間悩みました。</p>\n<h4 id=\"%E5%8F%82%E8%80%83-4\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83-4\">#</a></h4>\n<ul>\n<li>PolygonDemoActivity.java</li>\n<li>PolylineDemoActivity.java</li>\n</ul>\n<h3 id=\"mapview-%E3%81%A8%E3%81%AF%E4%B8%80%E4%BD%93%EF%BC%9F\">MapView とは一体？ <a class=\"direct-link\" href=\"#mapview-%E3%81%A8%E3%81%AF%E4%B8%80%E4%BD%93%EF%BC%9F\">#</a></h3>\n<p>冒頭で紹介した <a href=\"https://developers.google.com/maps/documentation/android/reference/com/google/android/gms/maps/MapView\">com.google.android.gms.maps.MapView</a> ですが、地図の表示はできたものの、その後、位置を移動しようと</p>\n<pre><code>GoogleMap gMap = ((MapView) findViewById(R.id.map)).getMap();\ngMap.animateCamera(CameraUpdateFactory.newLatLng(new LatLng(35, 130)));\n</code></pre>\n<p>というコードを実行した所、 <code>java.lang.NullPointerException: CameraUpdateFactory is not initialized</code> が発生してしまいました。え？どうやって移動するの？</p>\n<h4 id=\"%E5%8F%82%E8%80%83-5\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83-5\">#</a></h4>\n<ul>\n<li>RawMapViewDemoActivity.java</li>\n</ul>\n<h2 id=\"%E5%A2%97%E3%81%88%E3%81%9F%E6%A9%9F%E8%83%BD\">増えた機能 <a class=\"direct-link\" href=\"#%E5%A2%97%E3%81%88%E3%81%9F%E6%A9%9F%E8%83%BD\">#</a></h2>\n<p>v1 感覚だと使うのに苦労しそうな v2 ですが、冒頭で紹介した機能以外に追加されてる機能もあります。</p>\n<h3 id=\"%E6%83%85%E5%A0%B1%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6(%E3%81%B5%E3%81%8D%E3%81%A0%E3%81%97)\">情報ウィンドウ(ふきだし) <a class=\"direct-link\" href=\"#%E6%83%85%E5%A0%B1%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6(%E3%81%B5%E3%81%8D%E3%81%A0%E3%81%97)\">#</a></h3>\n<p>これこれ、マーカーをタップすると表示される「ふきだし」。<br>\nv1 には無かったので、自作か外部ライブラリ使いしか無かったんですよね。<br>\nサンプル MarkerDemoActivity.java で使い方が紹介されてます。</p>\n<h2 id=\"%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%A4%E3%81%A8%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%A4\">タイルオーバーレイとグラウンドオーバーレイ <a class=\"direct-link\" href=\"#%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%A4%E3%81%A8%E3%82%B0%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89%E3%82%AA%E3%83%BC%E3%83%90%E3%83%BC%E3%83%AC%E3%82%A4\">#</a></h2>\n<p>GIS'er 感涙の両機能。<br>\nタイルオーバーレイは、他のタイル地図サービスをオーバーレイできる、ってことですね。OpenStreetMap とか。iOS の <a href=\"http://qiita.com/items/8d89eeea614ce4293514\">route-me</a> みたいなことができると期待してます。だれかハックを！<br>\n<img src=\"https://blog.amay077.net/img/posts/gmap2_tileoverlay.png\" alt=\"TileOverlay\"></p>\n<p>グラウンドオーバーレイは、画像ファイルに位置情報を与えてやると、それが地面に張り付いたように表示されるというものです。<br>\n<img src=\"https://blog.amay077.net/img/posts/gmap2_groudoverlay.png\" alt=\"GroundOverlay\"></p>\n<p>タイルオーバーレイのサンプルは TileOverlayDemoActivity.java 、グラウンドオーバーレイのサンプルは GroundOverlayDemoActivity.java です。</p>\n<h2 id=\"%E9%9B%91%E6%84%9F\">雑感 <a class=\"direct-link\" href=\"#%E9%9B%91%E6%84%9F\">#</a></h2>\n<p>Google Map Android API v2 をざっと使ってみての感想です。</p>\n<p>v1 と互換性がなくなり、使い方がガラっと変わったのはある程度想定していました。2次元と3次元の溝は深いです。</p>\n<p>Android と関係ないですが、iOS の MapKit も同じようなことになるのではないかと思っています。(地図アプリは 3D に対応しましたが MapKit は 2D のまま。3D用のMapKit は &quot;まったく別のもの&quot; として提供されるのではないかと。)</p>\n<p>導入の仕方が難しくなっちゃったなー、と。<br>\nなぜ Google API Console で管理するのはよいとしても、ライブラリプロジェクトを参照しないといけないのか、とか。<br>\n(実は Fragment 初めて使いました…)</p>\n<p>あと、Google Play Service や API Console との結びつきが強くなり、利用状況がモニタリングできる環境が整いつつあります。こりゃ課金も現実味を帯びてきたなあ、と。</p>\n<p>そんなわけで、導入がちょいと面倒だったり、v1 と互換性まったくないですけど、なにしろ Googleマップアプリのあの地図レンダリングと機能がアプリに組み込めるのは嬉しい限りです。新たに地図アプリ作るなら使わない手はないですね！</p>\n<p>まだ使いこなしてはいないので、順次 Post していきたいと思います。<br>\n最後に拙作の Android アプリ「HexRinger」の Map API v2 対応試作版をステマして終わります。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/gmap2_hexringer.png\" alt=\"HexRinger\"></p>\n",
      "date_published": "2012-12-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/12/20/asynctest-on-junit/",
      "url": "https://blog.amay077.net/blog/2012/12/20/asynctest-on-junit/",
      "title": "jUnit で非同期処理のテストがちょっと楽になるクラス作ってみた",
      "content_html": "<p>非同期メソッドのテストって、皆さんどうやってるんでしょう？<br>\nちょっとググってみたけど「<code>Object.wait</code> とか <code>CountDownLatch</code> とか <code>Future</code> で待て」とかあんまり良い答えが見つからなかったので、自分でユーティリティクラス作ってみた。</p>\n<!-- more -->\n<p>まあ CountDownLatch で待ってるだけなんですけども。</p>\n<p>2013.1.10 修正:メソッドに全部 <code>synchronized</code> つけたら動かんやん、恥ずかし…</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**<br> * success または error が呼ばれるまで get() で待ってる Future みたいなクラス<br> * <br> * @author @amay077<br> */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FutureResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> TIMEOUT <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">TimeUnit</span> TIMEOUT_UNIT <span class=\"token operator\">=</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">CountDownLatch</span> _latch <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountDownLatch</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">T</span> _value<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Exception</span> _error<span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FutureResultException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> serialVersionUID <span class=\"token operator\">=</span> <span class=\"token number\">1L</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">FutureResultException</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> detailException<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>detailException<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><br>\t<br>\t<span class=\"token comment\">/**<br>\t * 非同期処理が成功したら呼ぶメソッド<br>\t */</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t_value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span><br>\t\t_latch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">/**<br>\t * 非同期処理が失敗したら呼ぶメソッド<br>\t */</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">void</span> <span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t_error <span class=\"token operator\">=</span> ex<span class=\"token punctuation\">;</span><br>\t\t_latch<span class=\"token punctuation\">.</span><span class=\"token function\">countDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">/**<br>\t * 非同期処理が終わるまで待って結果を返す。<br>\t * エラーだったら例外を投げる。<br>\t */</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">T</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_latch<span class=\"token punctuation\">.</span><span class=\"token function\">await</span><span class=\"token punctuation\">(</span>TIMEOUT<span class=\"token punctuation\">,</span> TIMEOUT_UNIT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureResultException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TimeoutException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureResultException</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_error <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">throw</span> _error<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token keyword\">return</span> _value<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br><span class=\"token punctuation\">}</span></code></pre>\n<p>Future インターフェースを implements しようと思ったけど数が多くてやめたｗ<br>\n使い方はこんな感じ。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAsyncMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">FutureResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FutureResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token comment\">// 非同期なメソッドを実行</span><br>\thoge<span class=\"token punctuation\">.</span><span class=\"token function\">asyncMethod</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnReceiveListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onReceive</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// 正そうな値を受信しtら success を呼ぶ</span><br>\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">success</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t\t<br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onError</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// エラーを受信した場合は error を呼ぶ</span><br>\t\t\tresult<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>ex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<br>\t<span class=\"token comment\">// 検証</span><br>\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// get で success か error かタイムアウトするまで待ってる。</span><br>\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <br>\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br></code></pre>\n<h2 id=\"%E5%8F%82%E8%80%83\">参考 <a class=\"direct-link\" href=\"#%E5%8F%82%E8%80%83\">#</a></h2>\n<p>なんて記事を書いたあとにもっかいググってみたらこんなライブラリがあるようで。詳細はまだ見てない。</p>\n<ul>\n<li><a href=\"http://code.google.com/p/awaitility/\">Awaitility</a> - Awaitility is a small Java-based DSL for synchronizing asynchronous operations. It makes it easy to test asynchronous code. - Google Project Hosting</li>\n</ul>\n",
      "date_published": "2012-12-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/11/20/win7-on-macmini/",
      "url": "https://blog.amay077.net/blog/2012/11/20/win7-on-macmini/",
      "title": "Mac mini(late 2012)に Windows7(32bit)をインストールしたメモ",
      "content_html": "<p>Windows8(32bit) でもいけます。</p>\n<!-- more -->\n<ol>\n<li>Mountain Lion の Bootcampアシスタントで Windows7_32bit のディスク入れて続行しようとすると「対応してません」とエラーが出る</li>\n<li>とりあえず「サポートソフトウェア」はUSBメモリに取得しておく</li>\n<li>Bootcampアシスタントはあきらめ「ディスクユーティリティ」でパーティションを作る</li>\n<li>再起動→起動時に option(ALT)キー押しっぱなし→windows のディスクを選択</li>\n<li>Windows7_32bit をインストール</li>\n<li>インストール後、デバイスマネージャ見ると黄色がいっぱい。ネットもつながらない</li>\n<li>サポートソフトウェアは64bit用だが、中には兼用のものもあるので、入れられるものは入れておく</li>\n<li>Broadcom からイーサネットコントローラのドライバをダウンロードしてインストール</li>\n<li>ネットがつながった、これで勝つる。</li>\n</ol>\n<p>※他に古い Mac mini があるなら、そこから Bootcamp でサポートソフトウェアをダウンロードしておくと、32bit のドライバが使える<br>\n※けどどーしても Bluetooth ドライバが見つからない。。。</p>\n",
      "date_published": "2012-11-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/11/20/how-to-install-jade-on-express/",
      "url": "https://blog.amay077.net/blog/2012/11/20/how-to-install-jade-on-express/",
      "title": "Express で ejs のつもりなのに jade が入っちゃう時",
      "content_html": "<pre><code>$ express -t ejs myapp\n</code></pre>\n<p>で ejs を入れたつもりが、<code>views/index.jade</code> とかが入っちゃう。</p>\n<!-- more -->\n<pre><code>$ express -tejs myapp\n            ^スペース空けない\n</code></pre>\n<p>と、正しく ejs が使われる。</p>\n<p>なんなのよこれ。express が rc だから？</p>\n<p>##0:51追記<br>\nあーっ、ヘルプ見たら <code>express -e myapp</code> が正しいのね。</p>\n<pre><code>$ express -h\n</code></pre>\n<blockquote>\n<p>Usage: express [options]</p>\n<p>Options:</p>\n<p>-h, --help          output usage information<br>\n-V, --version       output the version number<br>\n-s, --sessions      add session support<br>\n-e, --ejs           add ejs engine support (defaults to jade)<br>\n-J, --jshtml        add jshtml engine support (defaults to jade)<br>\n-H, --hogan         add hogan.js engine support<br>\n-c, --css <engine>  add stylesheet <engine> support (less|stylus) (defaults to plain css)<br>\n-f, --force         force on non-empty directory</p>\n</blockquote>\n<p>##環境</p>\n<ul>\n<li>Mac OS X 10.8.2</li>\n<li>node v0.9.2</li>\n<li>express 3.0.0rc5</li>\n</ul>\n",
      "date_published": "2012-11-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/11/20/fingerprint-error-on-googlemap-api-v1/",
      "url": "https://blog.amay077.net/blog/2012/11/20/fingerprint-error-on-googlemap-api-v1/",
      "title": "Google Maps API Key の取得で「入力されたフィンガープリントは無効です。」が出るようになった件",
      "content_html": "<p>Android で Googleマップを利用する際に必ず通る道である Google Map API Key の取得。<br>\n久しぶりに行ったら、少しハマったのでメモ。</p>\n<!-- more -->\n<p>手順は、</p>\n<p><a href=\"http://wikiwiki.jp/android/?Maps%20API%20Key%A4%CE%BC%E8%C6%C0\">Maps API Keyの取得 - Android Wiki</a></p>\n<p>など、たくさん出てくるが、この通りやっても <strong>「入力されたフィンガープリントは無効です。」</strong> とエラーになってしまう。</p>\n<p>「いやいやご冗談を。」と、よぉ〜く見直したら、</p>\n<p>##keytool の結果が MD5 じゃなくて SHA1 になってるッ！！！</p>\n<p>という話。</p>\n<pre><code>$  keytool -list -keystore ~/.android/debug.keystore \n</code></pre>\n<blockquote>\n<p>キーストアのパスワードを入力してください:</p>\n</blockquote>\n<p>*****************  WARNING WARNING WARNING  *****************<br>\n<em>キーストアに保存された情報の整合性は</em><br>\n<em>検証されていません。整合性を検証するには</em><br>\n<em>キーストアのパスワードを入力する必要があります。</em><br>\n*****************  WARNING WARNING WARNING  *****************</p>\n<blockquote></blockquote>\n<p>キーストアのタイプ: JKS<br>\nキーストア・プロバイダ: SUN</p>\n<blockquote></blockquote>\n<p>キーストアには1エントリが含まれます</p>\n<blockquote></blockquote>\n<p>androiddebugkey,2011/10/05, PrivateKeyEntry,<br>\n証明書のフィンガプリント(SHA1): xx:xx:xx:xx:xx:xx:xx:…</p>\n<p>上のリンク先のコメントにチラッと説明があった。<br>\nどうやら Java7 を導入すると SHA1 に替わってしまうらしい。</p>\n<p>-v を足して実行すると、MD5 も表示されるので、そこからコピーして解決。</p>\n<pre><code>$  keytool -list -keystore ~/.android/debug.keystore -v\n</code></pre>\n<blockquote>\n<p>キーストアのパスワードを入力してください:</p>\n</blockquote>\n<p>*****************  WARNING WARNING WARNING  *****************<br>\n<em>キーストアに保存された情報の整合性は</em><br>\n<em>検証されていません。整合性を検証するには</em><br>\n<em>キーストアのパスワードを入力する必要があります。</em><br>\n*****************  WARNING WARNING WARNING  *****************</p>\n<blockquote></blockquote>\n<p>キーストアのタイプ: JKS<br>\nキーストア・プロバイダ: SUN</p>\n<blockquote></blockquote>\n<p>キーストアには1エントリが含まれます</p>\n<blockquote></blockquote>\n<p>別名: androiddebugkey<br>\n作成日: 2011/10/05<br>\nエントリ・タイプ: PrivateKeyEntry<br>\n証明書チェーンの長さ: 1<br>\n証明書[1]:<br>\n所有者: CN=Android Debug, O=Android, C=US<br>\n発行者: CN=Android Debug, O=Android, C=US<br>\nシリアル番号: 4e8bdcd5<br>\n有効期間の開始日: Wed Oct 05 13:28:05 JST 2011終了日: Fri Sep 27 13:28:05 JST 2041<br>\n証明書のフィンガプリント:<br>\nMD5:  xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:…<br>\nSHA1: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:…<br>\nSHA256: xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:…<br>\n署名アルゴリズム名: SHA1withRSA<br>\nバージョン: 3</p>\n<p>気づかねぇよ、こんなもん（←やつあたり</p>\n",
      "date_published": "2012-11-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/20/how-to-use-shiftjis-on-sublimetext2/",
      "url": "https://blog.amay077.net/blog/2012/10/20/how-to-use-shiftjis-on-sublimetext2/",
      "title": "SublimeText2 で Shift-jis を使う",
      "content_html": "<p>SublimeText2 は大変便利なテキストエディタですが、shift-jis に対応していないのが玉にキズでした。</p>\n<!-- more -->\n<p><img src=\"https://blog.amay077.net/img/posts/shiftjis.png\" alt=\"mojibake\"></p>\n<p>そんな時、@umibose さんのツイートが！</p>\n<blockquote>\n<p>Sublime Text 2でSJISもいける！<a href=\"https://t.co/XxCrfPd0\">https://t.co/XxCrfPd0</a></p>\n</blockquote>\n<p>M.Hayakawaさん (@umibose) <a href=\"https://twitter.com/umibose/status/256247651710951424\">10月 11, 2012</a></p>\n<p>ふむ、ConvertToUTF8 というものできるのか。というわけで早速試してみました。</p>\n<p>以下手順。</p>\n<p>##1. Sublime Package Control の導入<br>\n<a href=\"http://wbond.net/sublime_packages/package_control/installation\">Installation – Sublime Package Control – a Sublime Text 2 Package Manager by wbond</a> の手順。</p>\n<p>まず、SublimeText2 にパッケージコントロールシステムを導入します。(既に入っていればスキップ)</p>\n<p>SublimeText2 を起動し、 <code>ift + ctrl + @</code> (ctrl+`) を押すと、画面下部にコンソールが表示されます。(Win版のショートカット知りません)</p>\n<p>ここに、上記リンクにある import〜 の一文を貼り付けて Enter！</p>\n<p>なんだかインストールが終わった感じなら Sublime を再起動します。</p>\n<p>##2. ConvertToUTF8 の導入<br>\n<a href=\"https://github.com/seanliang/ConvertToUTF8\">ConvertToUTF8 - Github</a> の手順。</p>\n<p><code>ift + command + p</code>(Win版はry) を押すと、Command Palette が開くので、そこで <code>Package Control: Install Package</code> を選択。（ある程度入力するとサジェストされます）</p>\n<p>次に出てくるポップアップ(画面名分からん)で <code>ConvertToUTF8</code> を選択。</p>\n<p>インストールが終わったら Sublime を再起動すれば…</p>\n<p><img src=\"https://blog.amay077.net/img/posts/choise_charcode.png\" alt=\"choice\"></p>\n<p>お、なんか文字コード選択が出た（でない場合もある？）<br>\nそして…<br>\n<img src=\"https://blog.amay077.net/img/posts/shiftjis_correct.png\" alt=\"choice\"></p>\n<p>おっしゃー！<br>\nこれであとは日本語入力時の挙動が直ってくれたら最強エディタですね。</p>\n<p><a href=\"https://twitter.com/umibose\">@umibose</a> さん、ありがとうございます！</p>\n",
      "date_published": "2012-10-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/20/helloworld-of-haskell/",
      "url": "https://blog.amay077.net/blog/2012/10/20/helloworld-of-haskell/",
      "title": "Mac に Homebrew で Haskell 入れて HelloWorld",
      "content_html": "<p>OS は Mountain Lion、Homebrew は入ってる前提で。</p>\n<!-- more -->\n<p>##インストール<br>\n「処理系」の GHC と、開発用プラットフォームをインストールする。</p>\n<pre><code>brew install ghc\n</code></pre>\n<blockquote>\n<p>==&gt; Downloading <a href=\"http://www.haskell.org/ghc/dist/7.4.2/ghc-7.4.2-x86_64-apple-darwin.tar.bz2\">http://www.haskell.org/ghc/dist/7.4.2/ghc-7.4.2-x86_64-apple-darwin.tar.bz2</a><br>\n######################################################################## 100.0%<br>\n==&gt; ./configure --prefix=/usr/local/Cellar/ghc/7.4.2<br>\n==&gt; make install<br>\n==&gt; Caveats<br>\nThis brew is for GHC only; you might also be interested in haskell-platform.<br>\n==&gt; Summary<br>\n/usr/local/Cellar/ghc/7.4.2: 6209 files, 842M, built in 18.9 minutes</p>\n</blockquote>\n<p>20分弱かかった。</p>\n<pre><code>brew install haskell-platform\n</code></pre>\n<blockquote>\n<p>==&gt; Downloading <a href=\"http://lambda.haskell.org/platform/download/2012.2.0.0/haskell-platform-2012\">http://lambda.haskell.org/platform/download/2012.2.0.0/haskell-platform-2012</a><br>\n######################################################################## 100.0%<br>\n==&gt; ./configure --prefix=/usr/local/Cellar/haskell-platform/2012.2.0.0 --enable-unsupported-<br>\n==&gt; EXTRA_CONFIGURE_OPTS=&quot;--libdir=/usr/local/Cellar/haskell-platform/2012.2.0.0/lib/ghc&quot; ma<br>\n==&gt; Caveats<br>\nRun <code>cabal update</code> to initialize the package list.</p>\n</blockquote>\n<p>If you are replacing a previous version of haskell-platform, you may want<br>\nto unregister packages belonging to the old version. You can find broken<br>\npackages using:<br>\nghc-pkg check --simple-output<br>\nYou can uninstall them using:<br>\nghc-pkg check --simple-output | xargs -n 1 ghc-pkg unregister --force<br>\n==&gt; Summary<br>\n/usr/local/Cellar/haskell-platform/2012.2.0.0: 869 files, 174M, built in 13.4 minutes</p>\n<p>全部で３０分ほど。途中「ほんとに動いてんの？」って状態になったが焦らず放っておいたら終わってた。</p>\n<p>##対話式インタプリタを起動する</p>\n<pre><code>ghci\n</code></pre>\n<blockquote>\n<p>GHCi, version 7.4.2: <a href=\"http://www.haskell.org/ghc/\">http://www.haskell.org/ghc/</a>  :? for help<br>\nLoading package ghc-prim ... linking ... done.<br>\nLoading package integer-gmp ... linking ... done.<br>\nLoading package base ... linking ... done.<br>\nPrelude&gt;</p>\n</blockquote>\n<p>##ハロワ</p>\n<pre><code>Prelude&gt; putStrLn &quot;Hello, World&quot;\n</code></pre>\n<blockquote>\n<p>Hello, World</p>\n</blockquote>\n<p>##GHCi の終了<br>\n意外と分からなかった。</p>\n<pre><code>:quit\n</code></pre>\n<blockquote>\n<p>Leaving GHCi.</p>\n</blockquote>\n<p>##【未解決】runhaskell で「lexical error (UTF-8 decoding error)」エラー</p>\n<p><a href=\"http://www.haskell.org/haskellwiki/10%E5%88%86%E3%81%A7%E5%AD%A6%E3%81%B6Haskell\">10分で学ぶHaskell - HaskellWiki</a> にあった REPL じゃなくてソースをビルドして実行する方法でエラーが。</p>\n<pre class=\"language-hs\"><code class=\"language-hs\"><span class=\"token hvariable\">main</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"What is 2 + 2?\"</span><br>          <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token builtin\">readLn</span><br>          <span class=\"token keyword\">if</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">==</span> <span class=\"token number\">4</span><br>              <span class=\"token keyword\">then</span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"You're right!\"</span><br>              <span class=\"token keyword\">else</span> <span class=\"token builtin\">putStrLn</span> <span class=\"token string\">\"You're wrong!\"</span></code></pre>\n<p>を Test.hs で保存して、</p>\n<pre><code>ghc --make Test.hs\n</code></pre>\n<p>を実行して、Test, Test.hi, Test.o ファイルが生成される。<br>\nで、</p>\n<pre><code>runhaskell Test\n</code></pre>\n<p>とすると</p>\n<blockquote>\n<p>Test:1:1: lexical error (UTF-8 decoding error)</p>\n</blockquote>\n<p>というエラーが。よく分からないからとりあえず、</p>\n<pre><code>runghc Test.hs\n</code></pre>\n<p>で満足してる。まだ入り口にも立ってない気分。</p>\n<p>##参考</p>\n<ul>\n<li><a href=\"http://www.haskell.org/haskellwiki/10%E5%88%86%E3%81%A7%E5%AD%A6%E3%81%B6Haskell\">10分で学ぶHaskell - HaskellWiki</a></li>\n<li><a href=\"http://d.hatena.ne.jp/hide_o_55/20110427/1303914801\">Haskell再入門 1日目(環境構築) - WebService::Blog-&gt;new( user =&gt; ’hide_o_55’ )</a></li>\n</ul>\n",
      "date_published": "2012-10-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/sourcetree-supports-git-svn/",
      "url": "https://blog.amay077.net/blog/2012/10/03/sourcetree-supports-git-svn/",
      "title": "SourceTree は git-svn したリポジトリも使えます",
      "content_html": "<p>Mac 最強の git/Mercurial クライアントである <a href=\"http://www.sourcetreeapp.com/\">SourceTree</a> ですが、git-svn した Subversion リポジトリもほとんどシームレス い扱うことができます。</p>\n<!--more-->\n<p>以下、方法です。</p>\n<p>I. Terminal で git svn clone する。※リポジトリがデカイと結構時間かかります。</p>\n<pre><code>git svn clone -s http://osmdroid.googlecode.com/svn osmdroid\n</code></pre>\n<p>-s オプションをつけているので、最後 /trunk としない所がミソ。</p>\n<p>II. SourceTree の ファイル → 開く で I. のフォルダを作業フォルダとして開く。</p>\n<p>III. ごらんの通り、普通に SourceTree で開けました。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/sourcetree01.png\" alt=\"sourcetree\"></p>\n<ul>\n<li>プッシュは <code>git svn dcommit</code> と同じ、つまり SVN へのコミットになります。</li>\n<li>プルは <code>git svn rebase</code> つまり SVN からの Update になります。</li>\n<li>ブランチは少し注意が必要で、git のローカルブランチとして作成するか、SVN のブランチとして作成するかを選択するダイアログが表示されます。前者を選択した場合は、SVN へは手動でマージしなければなりません。<br>\n<img src=\"https://blog.amay077.net/img/posts/sourcetree02.png\" alt=\"sourcetree_branch\"></li>\n</ul>\n<p>git svn のコマンドは普通の git と少し違うのですが、SourceTree がそのあたりを吸収してくれて、SVN をリモートリポジトリと見立てて動作します。</p>\n<p>あわよくば、SVNリポジトリの URL を直接 SourceTree で開けると尚便利でしたが、まあいいでしょう。</p>\n<p>SVN の不便なところに気軽にローカルブランチが作れないというのがあったので、git-svn を使うことでローカルブランチ作り放題です。</p>\n<p>Mac の SVNクライアントで「これだ！」というのがなかったのですが、これで満足です。</p>\n<p>##参考</p>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/idesaku/20090323/1237825080\">git-svnの使い方を覚えた - idesaku blog</a></li>\n<li><a href=\"http://www.sourcetreeapp.com/\">SourceTree</a> - なんか &quot;Supports SVN via git-svn or hgsubversion&quot; って書いてあるので git-svn の代わりに hgsubversion でもいけそうですね。</li>\n</ul>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/rx-cold-to-hot/",
      "url": "https://blog.amay077.net/blog/2012/10/03/rx-cold-to-hot/",
      "title": "Cold を Hot にできる。そう、Publish ならね。",
      "content_html": "<p>Rx いいよ Rx とか言っておきながら、いままで Cold と Hot の違いについて、ちゃんとわかってませんでしたスイマセン。</p>\n<!--more-->\n<p>そのため、</p>\n<ul>\n<li><a href=\"http://qiita.com/items/07762776102dbc84b1c7\">reactive4java で端末の方位を取得しつづける - Qiita</a></li>\n<li><a href=\"http://qiita.com/items/e15ba88d51938531b1a3\">reactive4java で位置を取得し続ける - Qiita</a></li>\n</ul>\n<p>で作ったサンプルプログラム、盛大にバグってましたorz</p>\n<h2 id=\"cold-%E3%81%AA-observable-%E3%81%A8-hot-%E3%81%AA-observable\">Cold な Observable と Hot な Observable <a class=\"direct-link\" href=\"#cold-%E3%81%AA-observable-%E3%81%A8-hot-%E3%81%AA-observable\">#</a></h2>\n<p>音楽プレーヤ iPod に例えると自分なりにしっくり来ました。<br>\nObservable が iPod で、Observer は聴く人。<br>\nなんとこの iPod はイヤホンジャックがたくさんあります。<br>\nそしてさらにこの iPod はイヤホンを接続するだけで再生が始まり、抜くと停止します。</p>\n<p>Cold な iPod では、聴く人がイヤホンを接続すると、音楽が最初から再生されます。<br>\n次の人がイヤホンを接続すると、また音楽が最初から再生されます。(最初の人は、再生されなおすわけじゃないよ。)</p>\n<p>Hot な iPod では、最初に聴く人がイヤホンを接続すると、音楽が再生され始めます。<br>\n次の人が、イヤホンを接続すると、その人は途中から聴くことになります。一つのストリーミング放送をみんなで聴くみたいな。<br>\n最後の人がイヤホンを外すと、再生が止まります(この辺はストリーミングと微妙に感覚が異なる、ストリーミングって、聴いてる人が居ようが居まいが流され続けるってイメージだから)。</p>\n<h2 id=\"%E4%BD%95%E3%81%8C%E5%95%8F%E9%A1%8C%E3%81%8B\">何が問題か <a class=\"direct-link\" href=\"#%E4%BD%95%E3%81%8C%E5%95%8F%E9%A1%8C%E3%81%8B\">#</a></h2>\n<p>以上を踏まえた上で、<a href=\"http://qiita.com/items/e15ba88d51938531b1a3\">reactive4java で位置を取得し続ける - Qiita</a> で作ったプログラムのどこが問題だったかというと。</p>\n<p>位置を聞くために接続をすると、その都度、<code>locMan.requestLocationUpdates</code> が呼ばれているという事です。上記の音楽プレーヤで例えると、<code>player.start()</code> です。</p>\n<p>位置情報の取得は、ホントに無限ストリーミングなので、一見問題無さげに見えますが、２つリスナを登録するのは頂けません。(中には複数のリスナを登録できない API もあるでしょう、ありました。それで気づいたんです。)</p>\n<p>これは最初の register でのみ <code>locMan.requestLocationUpdates</code> が実行され、2番目以降の register では、observer.next だけが呼ばれるようにしないといけません。<br>\nそのためには、register した複数の observer を保持・管理する必要があります。うげー。</p>\n<h2 id=\"%E3%81%9D%E3%81%93%E3%81%A7-publish-%E3%81%A7%E3%81%99%E3%82%88%E3%80%82\">そこで Publish ですよ。 <a class=\"direct-link\" href=\"#%E3%81%9D%E3%81%93%E3%81%A7-publish-%E3%81%A7%E3%81%99%E3%82%88%E3%80%82\">#</a></h2>\n<p>.publish() を Observable のおしりにくっつけます。はい、これだけ。本当に。簡単すぎて「いいの？」って思っちゃうくらい。</p>\n<p>``java getCurrectLocationAsHotObservable.java<br>\n/**</p>\n<ul>\n<li>位置を取得し続ける(Hot)<br>\n*/<br>\npublic static ObservableBuilder<Location> getCurrentLocationAsHotObservable(<br>\nfinal Context context, final String provider) {<br>\nreturn ObservableBuilder.from(<br>\ngetCurrentlocationAsObservable(context, provider)<br>\n).publish(); // Cold → Hot へ変換！<br>\n}</li>\n</ul>\n<pre><code>\nこれだけで、複数の人が位置を聴きに来ても、``locMan.requestLocationUpdates`` が呼ばれるのは１回だけである、Hot な Observable になります。Rx すげえよ Rx！\n\nreactive4java のソースを読んだところ、前述の「複数の observer を保持・管理して、最初だけリスナ登録して、誰もいなくなったらリスナ解除する」みたいな面倒なことを publish の中(正確には observeOn)で行なってくれているようです。\n\nますます Reactive Extensions が好きになりましたよ。\n\n## .NET の Reactive Extensions と reactive4java の違い\n.NET の Reactive Extenstions では、Publish は、``IConnectableObservable&lt;T&gt;`` を返すそうです。そして ``Subscribe`` しただけでは再生は開始されず、``Connect`` した時に再生されるのだ、とも。\n\n一方、[reactive4java](http://reactive4java.googlecode.com/svn/trunk/Reactive4Java/docs/javadoc/index.html) では、``publish`` は、普通の ``Observable&lt;T&gt;`` を返します。Observable には register(.NET の Subscribe に相当)しかないので、これを呼び出した時に再生が開始されます。\n\n特に reactive4java の挙動で困っていませんが、今後のバージョンアップで .NET 側に合わせられるかも知れません。\nConnecableObservable という interface は既に用意されていますが、使われていないようです。\n\n## 参考\n* [Rx入門 (14) – Cold to Hot変換 : xin9le note](http://xin9le.net/archives/104)\n* [Reactive Extensions再入門 その３６「ColdからHotへ！Publishメソッドと参照カウンタ？RefCountメソッド」 - かずきのBlog@Hatena](http://d.hatena.ne.jp/okazuki/20120212/1329059831)\n* [neue cc - Reactive Extensions for .NET (Rx) メソッド探訪第7回:IEnumerable vs IObservable](http://neue.cc/2010/06/24_263.html)\n\nRx の神々のみなさんが懇切丁寧に解説してくださってるのに、失敗しないと気づかない自分のバカバカ！</code></pre>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/range-of-sleep/",
      "url": "https://blog.amay077.net/blog/2012/10/03/range-of-sleep/",
      "title": "端末をスリープにさせない設定の有効範囲は？",
      "content_html": "<ul>\n<li><a href=\"http://www.adakoda.com/android/000207.html\">画面をスリープ状態にさせないためには - 逆引きAndroid入門</a></li>\n</ul>\n<p>について、これってどの期間で有効になるのか気になったので調べてみた。</p>\n<!-- more -->\n<p>「Activity.onCreate でスリープ抑制、onDestroy で解除」という実装をした時、そのアプリがバックグラウンドにまわった時はどうなるの？というところ。</p>\n<p>結論は「ちゃんといい感じで動いてくれた」。<br>\nアプリ(というかその Activity)がフォアグラウンドの時は、スリープは期待通り抑制される。<br>\nアプリがバックグラウンドにまわった場合は、システムの設定値に応じて、スリープになる。</p>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/osm-vs-ios-map/",
      "url": "https://blog.amay077.net/blog/2012/10/03/osm-vs-ios-map/",
      "title": "OpenStreetMap と iOS6 の地図を比べてみました",
      "content_html": "<p>####9.20追記:OpenStreetMap≒MapQuest な事など加筆修正しました</p>\n<p>完全に乗り遅れた感がありますが、OpenStreetMap とiOS6の地図を比べてみました。</p>\n<!-- more -->\n<p><a href=\"http://www.openstreetmap.org/\">OpenStreetMap</a> は誰でも編集できて自由に使える地図のWikipedia です。<br>\n(iOS6地図ガッカリ事件に際して、OpenStreetMap のデータに原因があるかのような報道がありましたが、<a href=\"http://www.osmf.jp/news/protestagainstnyt\">きっぱりと否定</a>しています。)</p>\n<p>OpenStreetMap を使ったアプリを開発する方法はさまざまですが、ここでは、MapQuest社の開発キットを紹介します。</p>\n<ul>\n<li><a href=\"http://developer.mapquest.com/web/products/featured/apple-ios-maps-api\">Apple iOS Maps API - MapQuest Developer Network</a></li>\n</ul>\n<p>またお約束ではございますが、この記事は、Yahoo さん、Mapion さんの完全なパクリでございます、ご了承ください！</p>\n<ul>\n<li>ヤフーさんのYOLPの記事は<a href=\"http://blog.olp.yahoo.co.jp/archives/20120920_yolpios6.html\">こちら</a></li>\n<li>マピオンさんのネタ記事は<a href=\"http://labs.mapion.co.jp/blog/labs/ios6.php\">こちら</a> ☆(ゝω・)v</li>\n</ul>\n<p>###OpenStreetMap と MapQuest社 について<br>\nOpenStreetMap は「地図データ」、MapQuest社はそのデータを利用してアプリやサービスを提供する企業です。OpenStreetMap の「◯年◯月◯日時点」のスナップショットを自社で運用して、デザインを調整し、Webサービスやアプリ、SDK として提供しています。</p>\n<p>ここで紹介している地図画像は OpenStreetMap そのものではなく、「MapQuest の〜」です。起源は同じ、見た目も似ていますが、正確には異なることをご了承ください。OpenStreetMap 本家の地図はリンクから確認できるようにしてあります。</p>\n<p>では、さっそく。</p>\n<p>##東京スカイツリー<br>\n###iOS6:<br>\n<img src=\"https://blog.amay077.net/img/posts/sky-ios.png\" alt=\"sky\"></p>\n<p>###OpenStreetMap(MapQuest):<a href=\"http://www.openstreetmap.org/?lat=35.71003&amp;lon=139.81066&amp;zoom=17&amp;layers=M\">→本家</a><br>\n<img src=\"https://blog.amay077.net/img/posts/sky-osm.png\" alt=\"sky\"></p>\n<p>ちゃんとあるよスカイツリー。</p>\n<p>##渋谷ヒカリエ<br>\n###iOS6:<br>\n<img src=\"https://blog.amay077.net/img/posts/hirarie-ios.png\" alt=\"hikarie\"></p>\n<p>###OpenStreetMap(MapQuest):<a href=\"http://www.openstreetmap.org/?lat=35.659051&amp;lon=139.70417&amp;zoom=18&amp;layers=M\">→本家</a><br>\n<img src=\"https://blog.amay077.net/img/posts/hirarie-osm.png\" alt=\"hikarie\"></p>\n<p>ちゃんとあるよヒカ…な、ない！<br>\n※本家にはちゃんとヒカリエありました！<a href=\"http://qiita.com/items/03cf7e04cac886b84136#comment-055c7f54ebf92d3bd05b\">hal_sk</a> さん、ありがとうございます。</p>\n<p>##新宿駅周辺<br>\n###iOS6:<br>\n<img src=\"https://blog.amay077.net/img/posts/shinjuku-ios.png\" alt=\"shinjuku\"></p>\n<p>###OpenStreetMap(MapQuest):<a href=\"http://www.openstreetmap.org/?lat=35.68926&amp;lon=139.70072&amp;zoom=17&amp;layers=M\">→本家</a><br>\n<img src=\"https://blog.amay077.net/img/posts/shinjuku-osm.png\" alt=\"sinjuku\"></p>\n<p>Apple よ、これが線路だ！</p>\n<p>##新東名高速道<br>\n###iOS6:<br>\n<img src=\"https://blog.amay077.net/img/posts/tomei-ios.png\" alt=\"tomei\"></p>\n<p>###OpenStreetMap(MapQuest):<a href=\"http://www.openstreetmap.org/?lat=34.9941&amp;lon=138.4068&amp;zoom=12&amp;layers=M\">→本家</a><br>\n<img src=\"https://blog.amay077.net/img/posts/tomei-osm.png\" alt=\"tomei\"></p>\n<p>最初に新東名を描いたのは誰でしょう？</p>\n<p>##まとめ</p>\n<p>いかがでしたか？</p>\n<p>OpenStreetMap は、誰もが編集できる自由な地図です。日夜マッパーさん達が新しい道路や建物を描いてくださっています。そのため、情報量では、少なくともiOS6地図よりは優っています。(場所によっては Googleマップより詳細な地域も ex:<a href=\"http://www.ikedahayato.com/index.php/archives/15493\">北朝鮮までカバー！地図のWikipedia「OpenStreetMap（OSM）」がすごい件 ｜ ihayato.news</a>)</p>\n<p>しかし地図デザインはというと、洗練されてはいません。<br>\nOpenStreetMap はデータであり、デザインは範疇ではない、と言えます(補足２へ)。</p>\n<p>地図のデザインとは、色合い、線の種類や太さ、注記やアイコンの大きさ・配置、どんな情報を表示する／しないかの取捨選択、時には人が見やすいようなディフォルメを加えたり、と職人さんの苦労の賜物です。</p>\n<ul>\n<li><a href=\"http://blog.olp.yahoo.co.jp/archives/20120928_chukihaichi.html\">これがニッポンの地図づくり！地図職人のこだわりお見せします - YOLP</a></li>\n<li><a href=\"http://blog.olp.yahoo.co.jp/archives/20120720-mapdesign.html\">YOLP地図デザインスタッフが語るスマートフォン専用スタイル地図の5つの魅力 - YOLP</a></li>\n<li><a href=\"http://www.mapion.co.jp/topics/gooddesign/\">グッドデザイン賞をマピオンの地図が受賞：マピオン</a></li>\n</ul>\n<p>iOS6マップは、「スカスカ」「注記がおかしい」「位置がズレてる」などが指摘されていますが、それが解決されたとしても、「地図デザイン力」で、Yahoo、Mapion、Google などの他社に追いつけるでしょうか？</p>\n<p>テクノロジーだけでも、コンテンツだけでも、両方揃っていてもダメ。<br>\nお金では買えない価値がある。<br>\n買えるものは・・・<strong>企業じゃね？</strong></p>\n<p>というわけで１年後、iOS6マップと地図業界がどうなっているかが楽しみです。</p>\n<p>####補足</p>\n<ul>\n<li>本記事内で紹介したiOS6地図画像は、マピオンさんの記事から拝借しました。問題があったら言ってください。</li>\n<li>同OpenStreetMap地図画像は、<a href=\"https://play.google.com/store/apps/details?id=com.mapquest.android.ace&amp;hl=ja\">MapQuest社のAndroidアプリ</a>からキャプチャしたものです。<a href=\"http://itunes.apple.com/us/app/mapquest/id316126557?mt=8\">iOS版</a>は日本では使えませんでした、なんだよぅ。</li>\n<li>Qiita でこんな事書いていいのかしら？SDKに触れてるから、いいよね？問題があったら言ってください(またか)</li>\n</ul>\n<p>####補足２<br>\nOpenStreetMap を使った地図サイトの「見た目」は、地図データを描画する &quot;マップレンダラー&quot; に何を採用するかで大きく異なります。<a href=\"http://openstreetmap.org\">openstreetmap.org</a> のサイトでは <a href=\"http://wiki.openstreetmap.org/wiki/JA:Mapnik\">Mapnik</a> というライブラリが採用されていますが、他にも<a href=\"http://wiki.openstreetmap.org/wiki/Rendering\">さまざまなもの</a>があるようです。<br>\nしかし &quot;マップレンダラー&quot; は地図に適用するスキンのようなもので、よく目的にあった地図を作るには地図データそのものを「加工」する必要があるのではないかと思っています。(この辺、ちょっと勉強不足)</p>\n<p>OpenStreetMap については、 <a href=\"http://qiita.com/items/03cf7e04cac886b84136#comment-49a56e8d30273ad833e4\">dkastl@github</a> さんから良いコメントを頂いたので、全力で和訳してみました。</p>\n<blockquote>\n<p>OpenStreetMap の特長は、問題や間違っている情報を見つけた時に、すぐにそれを修正したり新しいオブジェクトを追加できることです。<br>\nそして、あなたが次に訪れた場所は、地図に載るでしょう。(^^)</p>\n<p>そして、高速道路や新しい建物のような人気のスポットに間違いを見つけたらあなたはラッキー、それを(修正して)貢献し、賞賛を受けられます。</p>\n</blockquote>\n<p>OpenStreetMapの創始者であるスティーブ・コースト氏は、先に日本で行われたOpenStreetMapの国際会議(SotM)でこう語っています。</p>\n<blockquote>\n<p>“LinuxがプロプライエタリなUNIXの品質を凌駕したように、Wikipediaがプロプライエタリな辞書を超えたように、OpenStreetMapの地図の情報は、将来、プロプライエタリな地図を超えるだろう</p>\n</blockquote>\n<p>via <a href=\"http://itpro.nikkeibp.co.jp/article/COLUMN/20120910/421702/?ST=cloud&amp;P=3\">SotM 2012 Tokyo レポート - “地図のWikipedia”OpenStreetMapの国際会議が日本で初開催：ITpro</a></p>\n<p>そんな OpenStreetMap の未来に期待しつつ、今日も私は<a href=\"http://www.openstreetmap.org/?lat=34.72014&amp;lon=137.4328&amp;zoom=17&amp;layers=M\">のんほいパーク</a>を描き続けるのです。</p>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/nodejs-by-homebrew/",
      "url": "https://blog.amay077.net/blog/2012/10/03/nodejs-by-homebrew/",
      "title": "Homebrew で Nodes.js をやってみた",
      "content_html": "<p>##環境</p>\n<ul>\n<li>Mac OS X 10.7</li>\n<li>Homebrew はインストール済み</li>\n</ul>\n<p>##参考</p>\n<ul>\n<li><a href=\"http://d.hatena.ne.jp/nomnel/20111204/1323003399\">Node.jsでHello worldするまで - 飲む、寝る。</a></li>\n</ul>\n<!-- more -->\n<p>手順はほぼこのとおり。</p>\n<p>##手順</p>\n<pre><code>$ brew install node.js\n</code></pre>\n<blockquote>\n<p>Warning: It appears you have MacPorts or Fink installed.<br>\nSoftware installed with other package managers causes known problems for<br>\nHomebrew. If a formula fails to build, uninstall MacPorts/Fink and try again.<br>\n==&gt; Downloading <a href=\"http://nodejs.org/dist/v0.8.4/node-v0.8.4.tar.gz\">http://nodejs.org/dist/v0.8.4/node-v0.8.4.tar.gz</a><br>\n######################################################################## 100.0%<br>\n==&gt; ./configure --prefix=/usr/local/Cellar/node/0.8.4 --without-npm<br>\n==&gt; make install<br>\n==&gt; Caveats<br>\nHomebrew has NOT installed npm. We recommend the following method of<br>\ninstallation:<br>\ncurl <a href=\"http://npmjs.org/install.sh\">http://npmjs.org/install.sh</a> | sh</p>\n</blockquote>\n<blockquote>\n<p>After installing, add the following path to your NODE_PATH environment<br>\nvariable to have npm libraries picked up:<br>\n/usr/local/lib/node_modules<br>\n==&gt; Summary<br>\n/usr/local/Cellar/node/0.8.4: 79 files, 11M, built in 6.2 minutes</p>\n</blockquote>\n<p>なんか、 MacPorts/Fink と仲が悪そうだけど、とりあえず無視して次へ。</p>\n<pre><code>$ curl http://npmjs.org/install.sh | sh\n</code></pre>\n<blockquote>\n<p>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>\nDload  Upload   Total   Spent    Left  Speed<br>\n100    85    0    85    0     0    109      0 --:--:-- --:--:-- --:--:--   384<br>\nsh: line 1: syntax error near unexpected token `newline'<br>\nsh: line 1: `&lt;html&gt;Moved: &lt;a href=&quot;<a href=\"https://npmjs.org/install.sh\">https://npmjs.org/install.sh</a>&quot;&gt;<a href=\"https://npmjs.org/install.sh\">https://npmjs.org/install.sh</a> &lt;/a&gt;'</p>\n</blockquote>\n<p>うお、エラーだ！どうやら URL が変わった(http → http***s*** になっただけ)らしい。<br>\nURL を修正してリトライ。</p>\n<pre><code>$ curl https://npmjs.org/install.sh | sh\n</code></pre>\n<blockquote>\n<p>% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current<br>\nDload  Upload   Total   Spent    Left  Speed<br>\n100  7882  100  7882    0     0   5672      0  0:00:01  0:00:01 --:--:--  7977<br>\ntar=/usr/bin/tar<br>\nversion:<br>\nbsdtar 2.8.3 - libarchive 2.8.3<br>\ninstall npm@1.1<br>\nfetching: <a href=\"http://registry.npmjs.org/npm/-/npm-1.1.62.tgz\">http://registry.npmjs.org/npm/-/npm-1.1.62.tgz</a><br>\n0.8.4<br>\n1.1.62<br>\ncleanup prefix=/usr/local</p>\n</blockquote>\n<blockquote>\n<p>All clean!</p>\n</blockquote>\n<blockquote>\n<p>npm@1.1.62 prepublish .<br>\nnpm prune ; rm -rf test/<em>/</em>/node_modules ; make -j4 doc</p>\n</blockquote>\n<blockquote>\n<p>sh: npm: command not found<br>\nmake: Nothing to be done for `doc'.<br>\n/usr/local/bin/npm -&gt; /usr/local/lib/node_modules/npm/bin/npm-cli.js<br>\nnpm@1.1.62 /usr/local/lib/node_modules/npm<br>\nIt worked</p>\n</blockquote>\n<pre><code>\n**npm: command not found** が気になるけど成功したぽい。\n\n##Hello World!!\n\n前述のサイトそのまんまなので略。\nふむ、うまくいった。\n\n</code></pre>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/mvvm-on-android/",
      "url": "https://blog.amay077.net/blog/2012/10/03/mvvm-on-android/",
      "title": ".NET の MVVM + Messenger パターンにあこがれて、Java で Messenger クラスを自作してみた",
      "content_html": "<p>MVVM + Messenger パターンとは、</p>\n<ul>\n<li><a href=\"http://tnakamura.hatenablog.com/entry/20110218/mvvm_messenger\">いまさら聞けない「MVVM + Messenger パターン」超入門 - present</a></li>\n</ul>\n<p>らへんを参照。</p>\n<!-- more -->\n<p>勉強がてら、Android(Java) で、Messenger を実装してみようとした。<br>\n要は、View 側で regist された Action<Message> を溜めておき、ViewModel 側から send(new Message()) した時に invoke させればいいんでしょ？と。</p>\n<p>とりあえずこんな感じになると思われる。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Messenger</span> <span class=\"token punctuation\">{</span><br>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action1</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _actions <span class=\"token operator\">=</span> <br>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action1</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token class-name\">String</span> nameOfT <span class=\"token operator\">=</span> <span class=\"token comment\">/* TODO action から T を取得 */</span><br>\t\t_actions<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nameOfT<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">/* TODO message の型をキーにして _actions から取り出して invoke */</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>これの実装中、いくつか問題にハマった。</p>\n<p>##問題1:X&lt;T&gt; の T が取れない</p>\n<p>Action<Message> を溜める時に、Message をキーにして Map に入れておけばいいでしょ、と思ったのだが、できない。<br>\n<code>Action&lt;T&gt;</code> の <code>T</code> が取り出せない。</p>\n<p>よく調べてみると</p>\n<ul>\n<li><a href=\"http://www.ne.jp/asahi/hishidama/home/tech/java/generics.html#erasure\">Java総称型メモ(Hishidama's Java Generics Memo)</a></li>\n<li><a href=\"http://blogs.wankuma.com/nagise/archive/2008/10/13/158708.aspx\">イレイジャではジェネリクスの何が消えるのか</a></li>\n</ul>\n<p>だそうです。ふむーなるほど、実行時には T は消えてしまっていると。</p>\n<p>しかしいろいろ試していたら、こんな方法で文字列としては取り出すことができました。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Messenger</span> <span class=\"token punctuation\">{</span><br>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action1</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _actions <span class=\"token operator\">=</span> <br>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action1</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// action が使ってる Generics な型を取り出す(という意味？)。</span><br>\t\t<span class=\"token comment\">// action.getClass().getInterfaces(); でもいけるかと思ったら、Action1 までしか取り出せなかった。</span><br>\t\t<span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> types <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGenericInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 文字列化したら Action1&lt;T> の T の部分も実際の型名が得られた。</span><br>\t\t<span class=\"token comment\">// ex: \"hoge.mvvm.Action1&lt;com.piyo.MyMessage>\"</span><br>\t\t<span class=\"token class-name\">String</span> typeString <span class=\"token operator\">=</span> types<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// &lt; > 内だけ取り出す\t\t</span><br>\t\t<span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> typeString<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> typeString<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">String</span> nameOfT <span class=\"token operator\">=</span> typeString<span class=\"token punctuation\">.</span><span class=\"token function\">subSequence</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t_actions<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nameOfT<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">/* TODO message の型をキーにして _actions から取り出して invoke */</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>##問題2:&lt;? extend T&gt; or &lt;? super T&gt; ?</p>\n<p>次の問題、今度は send の方。<br>\n<code>_actions.get(nameOfMessage)</code> で取り出した <code>Action1&lt;? extend Message&gt;</code> は、invoke メソッドの型が <code>null</code> になってて、使えませんでした。<br>\nなので仕方なく、Generics パラメータなしの <code>Action1</code> で受けることに。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Messenger</span> <span class=\"token punctuation\">{</span><br>\t<br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action1</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> _actions <span class=\"token operator\">=</span> <br>\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action1</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">></span></span> <span class=\"token keyword\">void</span> <span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token comment\">// action が使ってる Generics な型を取り出す(という意味？)。</span><br>\t\t<span class=\"token comment\">// action.getClass().getInterfaces(); でもいけるかと思ったら、Action1 までしか取り出せなかった。</span><br>\t\t<span class=\"token class-name\">Type</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> types <span class=\"token operator\">=</span> action<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getGenericInterfaces</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token comment\">// 文字列化したら Action1&lt;T> の T の部分も実際の型名が得られた。</span><br>\t\t<span class=\"token comment\">// ex: \"hoge.mvvm.Action1&lt;com.piyo.MyMessage>\"</span><br>\t\t<span class=\"token class-name\">String</span> typeString <span class=\"token operator\">=</span> types<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token comment\">// &lt; > 内だけ取り出す\t\t</span><br>\t\t<span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> typeString<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">int</span> end <span class=\"token operator\">=</span> typeString<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\">\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token class-name\">String</span> nameOfT <span class=\"token operator\">=</span> typeString<span class=\"token punctuation\">.</span><span class=\"token function\">subSequence</span><span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t_actions<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nameOfT<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unchecked\"</span><span class=\"token punctuation\">)</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> messengerTypeName <span class=\"token operator\">=</span> message<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<br>\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>_actions<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>messengerTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br><br>\t\t<span class=\"token comment\">// Action1&lt;? extends Message> だと、invoke の型が null になってしまう。</span><br>\t\t<span class=\"token comment\">// が、_actions は追加/取得を兼ねているので Action1&lt;? super Message> にすることもできず…\t\t</span><br>\t\t<span class=\"token comment\">// 仕方なく Generics 未使用で。</span><br>\t\t<span class=\"token annotation punctuation\">@SuppressWarnings</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rawtypes\"</span><span class=\"token punctuation\">)</span><br>\t\t<span class=\"token class-name\">Action1</span> action <span class=\"token operator\">=</span> _actions<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>messengerTypeName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\taction<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>とりあえず動くけど、なんかスッキリしない。。。</p>\n<p>##ここまで実装しておいて…</p>\n<ul>\n<li><a href=\"http://gushwell.ldblog.jp/archives/52146816.html\">MVVM：Messengerを理解するために自作してみた(2):Gushwell's C# Dev Notes</a></li>\n</ul>\n<p>を発見。<br>\nあれ、Map じゃなくて List でしたか。1回の Send で複数の Callback が走るのね。ま、いいや Android で使うだけだし。<br>\n.NET はいいなあ <code>typeof(T)</code> が使えて。</p>\n<p>##使い方<br>\nだいたいこんな感じで使える。</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/** ダイアログを表示させるメッセージ */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DialogMessage</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Message</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> callback<span class=\"token punctuation\">;</span> <br>\t<br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">DialogMessage</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> message<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span><br>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>callback <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/** View側 */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br><br>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">MyViewModel</span> _vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyViewModel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>activity_my<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \t<br>\t\t<span class=\"token comment\">// Messenger に Message に対応する Action を登録する。</span><br>    \t<span class=\"token class-name\">Messenger</span> messenger <span class=\"token operator\">=</span> _vm<span class=\"token punctuation\">.</span><span class=\"token function\">getMessenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    \tmessenger<span class=\"token punctuation\">.</span><span class=\"token function\">register</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">DialogMessage</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DialogMessage</span> dlgMsg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token keyword\">boolean</span> isOk <span class=\"token operator\">=</span> <span class=\"token function\">showDialog</span><span class=\"token punctuation\">(</span>dlgMsg<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ホントは非同期なのでもう少し複雑</span><br>\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\tdlgMsg<span class=\"token punctuation\">.</span>callback<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>isOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// VM に結果を通知する</span><br>\t\t\t<span class=\"token punctuation\">}</span><br>\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>\t<span class=\"token comment\">// 終了ボタンが押されたら Finish コマンドを実行。</span><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">exitButton_Click</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t_vm<span class=\"token punctuation\">.</span>commandExit<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br><span class=\"token comment\">/** ViewModel ※ Command インターフェースの定義とかは省略 */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyViewModel</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Messenger</span> _messenger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Messenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Messenger</span> <span class=\"token function\">getMessenger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">return</span> _messenger<span class=\"token punctuation\">;</span><br>\t<span class=\"token punctuation\">}</span><br><br>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Command</span> commandExit <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Command</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token comment\">// ダイアログを表示する Message を送る</span><br>\t\t\t_messenger<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">DialogMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"終了します\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Action1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Boolean</span> pushOk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token comment\">// ダイアログの表示結果を受ける</span><br>\t\t\t\t\t<span class=\"token class-name\">Log</span><span class=\"token punctuation\">.</span><span class=\"token function\">d</span><span class=\"token punctuation\">(</span>TAG<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Pushed button is OK? -> \"</span> <span class=\"token operator\">+</span> pushOk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>##その他</p>\n<ul>\n<li>.NET の Messenger はなぜ Singleton なんだろう？VM と View の関係が 1:n だから？</li>\n<li>Messenger に否定的な見解もあるようで。確かに「View の変化は ViewModel の状態変化でのみ行われるべき」という主張にも一理ある。 → <a href=\"http://torokonbu.blogspot.com/2011/12/mvvmmvvm-dialog-behavior.html\">トロこんぶ: MVVMでメッセンジャーを使わずにダイアログを表示する(MVVM Dialog Behaviorライブラリ提供)</a></li>\n<li>ちょっと Trigger まで頭回ってません → <a href=\"http://ugaya40.net/wpf/mvvm_viewmodel_to_vew.html\">MVVMパターンでViewModelからViewを操作したい - the sea of fertility</a></li>\n<li>register/send を持ってる Messenger を View と ViewModel が使うのはちょっと違和感。View には register だけ、ViewModel には send のみを公開する interface を公開すべきかな。</li>\n</ul>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/locate-using-reactive4java/",
      "url": "https://blog.amay077.net/blog/2012/10/03/locate-using-reactive4java/",
      "title": "reactive4java で位置を取得し続ける",
      "content_html": "<p><a href=\"http://qiita.com/items/07762776102dbc84b1c7\">前回</a>に続き、 reactive4java ネタ。<br>\n調子に乗って Android で位置を取得し続けるのを reactive4java を使ってやってみた。</p>\n<!--more-->\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">/**<br> * 位置を取得し続ける(finish は呼ばれない)<br> */</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Observable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Location</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCurrentLocationAsObservable</span><span class=\"token punctuation\">(</span>\t\t\t<br>\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">Context</span> context<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> provider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t<span class=\"token keyword\">return</span> <span class=\"token class-name\">Reactive</span><span class=\"token punctuation\">.</span><span class=\"token function\">createWithCloseable</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Func1</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Observer</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Location</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Closeable</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">volatile</span> <span class=\"token keyword\">boolean</span> _stop <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span><br><br>\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Closeable</span> <span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Observer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">Location</span><span class=\"token punctuation\">></span></span> observer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">LocationManager</span> locMan <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">LocationManager</span><span class=\"token punctuation\">)</span>context<span class=\"token punctuation\">.</span><span class=\"token function\">getSystemService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Context</span><span class=\"token punctuation\">.</span>LOCATION_SERVICE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">LocationListener</span> listener <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LocationListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onStatusChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> provider<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Bundle</span> extras<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>\t\t\t\t<br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onProviderEnabled</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> provider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><br>\t\t\t\t<br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onProviderDisabled</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> provider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\tobserver<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><br>\t\t\t\t\t\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">InvalidParameterException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LocationProvider disabled.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t<br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onLocationChanged</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Location</span> location<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t\t<br>\t\t\t\t\t<span class=\"token comment\">// 発火</span><br>\t\t\t\t\tobserver<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t\t<br>\t\t\t<span class=\"token comment\">// 位置取得開始</span><br>\t\t\tlocMan<span class=\"token punctuation\">.</span><span class=\"token function\">requestLocationUpdates</span><span class=\"token punctuation\">(</span>provider<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Looper</span><span class=\"token punctuation\">.</span><span class=\"token function\">getMainLooper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Closeable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t<span class=\"token annotation punctuation\">@Override</span><br>\t\t\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_stop<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>\t\t\t\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t\t\t_stop <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\tlocMan<span class=\"token punctuation\">.</span><span class=\"token function\">removeUpdates</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t\tobserver<span class=\"token punctuation\">.</span><span class=\"token function\">finish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>\t\t\t\t<span class=\"token punctuation\">}</span><br>\t\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span><br>\t\t<span class=\"token punctuation\">}</span><br>\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>使い方は、方位の時とほとんど同じ。パラメータが Float から Location に代わっただけ。</p>\n<p><code>_stop</code> フラグは、Listener を unregister しても溜まってるデータは流しちゃうんじゃないか、という事で用意した。<br>\n方位のやつは AtomicBoolean を使ったけどこっちは volatile でやってる。確かどっかで 'AtomicBoolean の方が確実に Atomic' って言ってた気がするけど、そもそもそんなに神経質になるところじゃないか。</p>\n<p>Observable にすることで、「ｎ秒間位置を取得して貯めて、その中で一番精度の良いものを通す」みたいなことも簡単にできる。</p>\n<p>Android の場合、購読開始時に registerXXXListener、Close で unregisterXXXEventListener てのがひとつのパターン。<br>\nたぶん BroadcastReceiver にも適用できる。</p>\n<p>XXXListener も BroadcastReceiver も Observable でラップしちゃえば、その後は同じように扱えるので便利♪</p>\n<p>##追記 9.27<br>\n実はこのプログラム、Cold でしたー。というわけで、Hot についての記事を書きました。</p>\n<ul>\n<li><a href=\"http://qiita.com/items/3a7bda9d0fdcb9248800\">Cold を Hot にできる。そう、Publish ならね。 - Qiita</a></li>\n</ul>\n<p>##参考</p>\n<ul>\n<li><a href=\"http://qiita.com/items/07762776102dbc84b1c7\">reactive4java で端末の方位を取得しつづける - Qiita</a></li>\n<li><a href=\"http://stackoverflow.com/questions/3786825/java-volatile-boolean-vs-atomicboolean\">Java: volatile boolean vs AtomicBoolean - Stack Overflow</a></li>\n</ul>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/how-to-use-hxlinq/",
      "url": "https://blog.amay077.net/blog/2012/10/03/how-to-use-hxlinq/",
      "title": "hxLINQ というのがあったので使ってみた。",
      "content_html": "<p>hxLINQ というのがあったので使ってみた。<br>\nJSLinq をベースにして作られたものらしい。<br>\nFlash/JS/PHP/Neko/C++ でテスト済だそうです。</p>\n<!-- more -->\n<p>##導入<br>\nまず、 hxLINQ をインストールします。</p>\n<pre><code>haxelib install hxLINQ\n</code></pre>\n<p>Sublime Text2 と <a href=\"https://github.com/clemos/haxe-sublime2-bundle\">haxe-sublime2-bundle</a> を使っている場合は、<code>shift+ctrl+L</code> で ライブラリの一覧が出るのでそこから選択するだけです。ﾁｮｰｲｰﾈ!</p>\n<p>##使い方</p>\n<p>こんな感じで。</p>\n<pre><code>var it = new hxLINQ.LINQ([1,2,3,4,5,6,7,8,9])\n.where(function(v:Int, i:Int):Bool {\n\treturn v % 2 == 0; // 抽出(偶数のみ)\n})\n.select(function(v:Int):Float {\n\treturn v / 10.0; // 加工(10で除算)\n})\n.iterator();\n\nwhile(it.hasNext()) {\n\ttrace(it.next()); // out:0.2, 0.4, 0.6, 0.8\n}\n</code></pre>\n<p>ひと通りの機能は揃ってるので使えそうな感じだけど、Rx の機能まで求めてしまうのは贅沢でしょうか。</p>\n<p>##参考</p>\n<ul>\n<li><a href=\"https://github.com/andyli/hxLINQ\">andyli / hxLINQ</a></li>\n<li><a href=\"http://lib.haxe.org/p/hxLINQ\">hxLINQ - lib.haxe.org</a></li>\n</ul>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2012/10/03/hexnode-error-window-is-not-found/",
      "url": "https://blog.amay077.net/blog/2012/10/03/hexnode-error-window-is-not-found/",
      "title": "haxenode でエラー window is not defined",
      "content_html": "<p><a href=\"http://blog.fukaoi.org/2012/06/19/haxe_nodejs_express\">HaxeでつくるWebアプリ開発(node.js + Express) ｜ 深追い Fukaoi.org</a> を参考に、<a href=\"http://haxenode.org/\">haxenode</a>を使ってみたときにハマったこと。</p>\n<!-- more -->\n<pre><code>import js.Node;\n\nclass RootNode {\n\tstatic function main() {\n\t var server = Node.http.createServer( function(\n\t      req:NodeHttpServerReq, res:NodeHttpServerResp){\n\t        res.setHeader(&quot;Content-Type&quot;,&quot;text/plain&quot;);\n\t        res.writeHead(200);\n\t        res.end(Hoge.print());\n\t      }\n\t    );\n\t \n\t    server.listen(1337,&quot;localhost&quot;);\n\t    trace( 'Server running at http://127.0.0.1:1337/' );\n   \t}\t\n}\n\n@:keep\n@:expose\nclass Hoge {\n\tpublic static function print():String {\n\t\treturn &quot;Hello World.\\n&quot;;\n\t}\n}\n</code></pre>\n<p>こんな感じでサンプル作って、</p>\n<pre><code>node rootnode.js\n</code></pre>\n<p>を実行したところ、</p>\n<blockquote>\n<p>/.../bin/haxenode.js:53<br>\nvar o = window;<br>\n^<br>\nReferenceError: window is not defined<br>\nat $hxExpose (/.../bin/haxenode.js:53:10)<br>\nat /.../bin/haxenode.js:13:1<br>\nat Object.<anonymous> (/.../bin/haxenode.js:62:3)<br>\nat Module._compile (module.js:449:26)<br>\nat Object.Module._extensions..js (module.js:467:10)<br>\nat Module.load (module.js:356:32)<br>\nat Function.Module._load (module.js:312:12)<br>\nat Module.runMain (module.js:492:10)<br>\nat process.startup.processNextTick.process._tickCallback (node.js:244:9)</p>\n</blockquote>\n<p>こんなエラーが出ました。</p>\n<p>いろいろ試したところ、Hoge クラスに <code>@:keep</code> と <code>@:expose</code> をどちらも指定するとダメみたい。どちらか片方だけなら正常。<br>\n<a href=\"http://haxe.org/doc/compiler\">--dead-code-elimination</a> をあきらめて、minify とかすればいいのかな。<br>\n<code>@:keep</code> と <code>@:expose</code> は意味が被る、というか expose は keep を包括するような感じなので、@:expose だけでよさそうな気もします。</p>\n<p>##参考</p>\n<ul>\n<li><a href=\"http://haxe.org/manual/tips_and_tricks\">Tips and Tricks - Haxe</a></li>\n</ul>\n",
      "date_published": "2012-10-03T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2011/01/21/android-static/",
      "url": "https://blog.amay077.net/blog/2011/01/21/android-static/",
      "title": "Android の static 変数はヤバい",
      "content_html": "<p>今まで Windows アプリケーションしか作ったことのない人（私のような）が、Android アプリケーションをつくりはじめて戸惑うところの一つに、Activity のライフサイクルがあります。今回これ関連で、 見事に static 変数でハマりましたので、メモしておきます。</p>\n<!--more-->\n<p>Android Developper では、Activity のライフサイクルは以下の図で説明されています。</p>\n<p><img src=\"https://developer.android.com/images/activity_lifecycle.png\" alt=\"&quot;image1&quot;\"></p>\n<p>この図の説明は、<a href=\"http://www.android-group.jp/index.php?cmd=read&amp;page=%CA%D9%B6%AF%B2%F1%2FAndroid%20SDK%20WG%20%C2%E81%B2%F3%20%A5%BB%A5%C3%A5%B7%A5%E7%A5%F3%A1%CA2008.10.25%A1%CB&amp;word=activity#iee83184\">日本Androidの会のページ</a> などで解説されているので、ここでは割愛しますが、ポイントなのは、</p>\n<p>アプリケーションを終了（onDestroy）しても、プロセスは死んでいない。<br>\nという事です。static 変数でハマったと書きましたが、static 変数はプロセス毎に保持されるものですが、Windows アプリケーションでは、アプリケーションを終了して再起動すれば、static 変数も初期化されます。</p>\n<p>Android アプリケーションでも普通そうだろう、と思うのが人情です。</p>\n<p>で、上のライフサイクルです。この図では、アプリケーションを終了してもプロセスが終了するとは書かれていません。他のアプリケーションによってメモリが必要になった時だけ、プロセスが殺される、とあります。これはつまり、Android アプリケーションでは、起動→終了→再起動しても、（ほとんどの場合）static 変数は初期化されない、という事になります。</p>\n<p>ホントにそうでしょうか？サンプルを作ってためしてみました。</p>\n<h3 id=\"static-%E5%A4%89%E6%95%B0%E3%81%AE%E7%94%9F%E5%AD%98%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">static 変数の生存を確認するサンプル <a class=\"direct-link\" href=\"#static-%E5%A4%89%E6%95%B0%E3%81%AE%E7%94%9F%E5%AD%98%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">#</a></h3>\n<p>gist 789458</p>\n<p>static 変数を用意し、LogCat に出力した後、1加算するだけです。上記のコードを実行すると、LogCat にカウンタ値が出力されます。↓こんな感じで。</p>\n<blockquote>\n<p>01-21 18:16:54.937: DEBUG/MainActivity(2869): static member:0</p>\n</blockquote>\n<p>さて、これを「戻る」で終了し、再び起動してみます。</p>\n<blockquote>\n<p>01-21 18:17:43.443: DEBUG/MainActivity(2869): static member:1</p>\n</blockquote>\n<p>カウンタが加算されている事が分かります。なんども終了→起動を繰り返すとどんどん加算されていきます。</p>\n<blockquote>\n<p>01-21 18:17:43.443: DEBUG/MainActivity(2869): static member:2<br>\n01-21 18:17:45.112: DEBUG/MainActivity(2869): static member:3<br>\n01-21 18:17:48.876: DEBUG/MainActivity(2869): static member:4</p>\n</blockquote>\n<p>このようにアプリケーションを終了しても static 変数は（プロセスは）生存していることが分かりました。</p>\n<p>次に破棄された事を確認してみます。他のアプリでメモリが必要になった時～というのは再現させにくいので、タスク管理ソフトを使います。</p>\n<p>自分は、<a href=\"http://jp.androlib.com/android.application.nextapp-systempanel-iFtq.aspx\">SystemPanel Lite</a> を使いました。このソフトで作成したアプリケーションを選択してタスクを終了させた後、再度アプリケーションを起動してみます。すると、</p>\n<blockquote>\n<p>01-21 18:17:50.223: DEBUG/MainActivity(2869): static member:0</p>\n</blockquote>\n<p>出力結果はこのようになり、タスクが終了させられたので、カウンタも 0 に戻った事が確認できます。</p>\n<p>このように、Android アプリケーション開発では、static 変数は要注意です。</p>\n<p>各Activity から共有できるからと多用すると、特に状態を格納するなどで使うと不具合の元になりそうです。</p>\n<p>※だれか Activity じゃなくて ”アプリケーション&quot; が終了するタイミングを補足する方法、教えてください</p>\n",
      "date_published": "2011-01-21T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2011/01/17/nagoya-android-study-1/",
      "url": "https://blog.amay077.net/blog/2011/01/17/nagoya-android-study-1/",
      "title": "第1回 名古屋Android勉強会に参加してきました",
      "content_html": "<p>1/15（日） に行われた Android の初心者向け勉強会に参加してきました。</p>\n<!--more-->\n<p><a href=\"http://atnd.org/events/11259\">第1回 名古屋Android勉強会 : ATND</a></p>\n<p>自分は昨年の9月頃から Android をぼちぼちと仕事と趣味でやってたので、今回参加してよいものが迷ったのですが、参加して良かったです。やはり我流は基本がいくつも抜け落ちている。やっぱり基礎は大事ですね。講師の有山さん( @keiji_ariyama ) の説明も分かりやすかったですし、実体験を交えて話される内容は説得力がありました。</p>\n<p>勉強会の内容は、以下をご覧頂くとして－</p>\n<ul>\n<li><a href=\"http://www.ustream.tv/channel/nagoya-tsubu\">nagoya-tsubu on USTREAM</a> ※2011/1/14~ のやつ</li>\n<li><a href=\"http://togetter.com/li/89590\">Togetter - 「#tsubu 第1回Android名古屋勉強会 2011/01/15」</a></li>\n</ul>\n<p>個人的な発見だった点を備忘録してみます。</p>\n<ul>\n<li>\n<p>Android を生業としてる人は AVD（エミュレータの事）を10種類以上用意している</p>\n<ul>\n<li>いろいろな環境でテストされているんだなーと。</li>\n</ul>\n</li>\n<li>\n<p>AVD を起動する時に 「Wipe User Data」 というオプションがあるのだけど、その意味が 「AVD をファクトリーリセット（作成時に戻す）」だと分かった。</p>\n<ul>\n<li>こちらは twitter で <a href=\"http://twitter.com/androidzaurus\">@androidzaurus</a> さんに教えていただきました。ありがとうございます。 そして twitter すげェ！</li>\n</ul>\n</li>\n<li>\n<p>多言語対応。文字列などのリソースは言語毎に res/values-xx に入れる。日本語なら res/values-ja 。 Android 端末側の言語設定に準じた res/values-xx が使われ、該当するものが用意されていないと res/values が使われる。 <a href=\"http://twitter.com/cyberspacefarm\">@cyberspacefarm</a> さんに補足いただきました。ありがとうございます。そして twitter すげェ！(2回目)</p>\n</li>\n<li>\n<p>画面（Activity の増やし方）1. Activity を継承したクラスを作る 2.レイアウトファイル(xml)を作る 3. 1 の onCreate を実装する 4. AndroidManifest.xml に追記する。</p>\n<ul>\n<li>\n<ol start=\"4\">\n<li>を知らなかったです。以前、画面遷移のサンプル作ろうとして挫折してた…</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>画面のレイアウトについて。 RelativeLayout 使おうぜ。</p>\n<ul>\n<li>難しそうなんだよなー。RelativeLayout …</li>\n</ul>\n</li>\n<li>\n<p>UnitTest について。Activity, Service, ContentsProvider に特化したテストクラスが用意されている。</p>\n<ul>\n<li>素直に知りませんでした。 Service のテストは便利そう。Activity のテストは、講師の有山さん曰く「面倒すぎてやってない」、うん納得。</li>\n</ul>\n</li>\n<li>\n<p>UnitTest の苦手なところ、「開発者の意図しない ”新しいバグ” を発見すること。」、その為に行うのが MonkeyTest 。ただし過信してはいけない。</p>\n<ul>\n<li>大いに納得。</li>\n</ul>\n</li>\n</ul>\n<p>こんな感じで勉強会終了。最後の方のテストの話は、 NUnit とかで単体テストを経験してたのでなんとかついていけましたが、会場の方々は結構しんどかったのかも。時間も 13:00～18:00 と長丁場だったので、さすがに疲れましたね。</p>\n<p>さて、その後は、メイン(?)の懇親会へ。</p>\n<p>懇親会では、 お隣りにさせて頂いた <a href=\"http://twitter.com/leibun\">@leibun</a> さん始め、<a href=\"http://groups.google.co.jp/group/android-nagoya-tsubu\">つ部</a> の一部の方々とお知り合いになることができましたし、 twitter で度々絡んでくださってた <a href=\"http://twitter.com/katono123\">@katono123</a> さんともリアルにお話できてとても楽しかったです。</p>\n<p>是非とも次回の つ部の会合(?) に参加してみたいと思いましたし、アプリを作ってみたいと思いました。</p>\n<p>最後に、講師の有山さん、主催・共催して頂いたつ部・日本Android東海支部のスタッフの皆さん、参加された皆さん、どうもありがとうございました。</p>\n",
      "date_published": "2011-01-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2011/01/13/timeoutable-locationlistener/",
      "url": "https://blog.amay077.net/blog/2011/01/13/timeoutable-locationlistener/",
      "title": "TimeoutableLocationListener というのを作ってみた",
      "content_html": "<p>Android で GPS の位置を受信する場合、LocationListener というインターフェースを渡して位置が受信できるのをジッと待つわけです。Android での GPS の使い方はググるといっぱいでてきますもんね。</p>\n<!--more-->\n<p>で、LocationManager.onStatusChanged というメソッドがあって、例えば屋内とかで、受信できずにあきらめた場合、こいつが呼び出されるのかと思いきや、期待したようなタイミングで受信してくれません。</p>\n<p>結局自力でタイムアウト処理を書いて GPS を止めるハメになるのですが、いつも同じ処理を書くのが面倒なので、共通っぽいクラスにしてみました。</p>\n<p>gist 777790</p>\n<p>LocationListener の代わりにこの TimeoutableLocationListener をセットします。いつもと違うのは以下の2箇所です。</p>\n<ul>\n<li>コンストラクタで、LocationManager , タイムアウト時間（ミリ秒）, タイムアウト時に呼び出されるリスナ を渡す。</li>\n<li>自分のクラスで onLocationChanged を Override した時に、必ず base.onLocationChanged を呼び出す。</li>\n</ul>\n<p>interface じゃなくなっちゃったので、ちょっと不自由ですが、まあ使えるのではないかと思います。</p>\n",
      "date_published": "2011-01-13T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2011/01/07/android-sensors/",
      "url": "https://blog.amay077.net/blog/2011/01/07/android-sensors/",
      "title": "Android のセンサーの種類について",
      "content_html": "<p>Android ではたくさんのセンサーがサポートされています。</p>\n<!--more-->\n<p><a href=\"http://developer.android.com/reference/android/hardware/Sensor.html\">API リファレンス</a>によると、現在想定されているのは以下の種類です。</p>\n<ul>\n<li>TYPE_ACCELEROMETER - 加速度センサー</li>\n<li>TYPE_LIGHT - 照度センサー</li>\n<li>TYPE_MAGNETIC_FIELD - 地磁気センサー</li>\n<li>TYPE_ORIENTATION - 方位センサー</li>\n<li>TYPE_PROXIMITY - 近接センサー</li>\n<li>TYPE_TEMPERATURE - 温度センサー</li>\n<li>TYPE_GYROSCOPE - ジャイロスコープ（ジャイロセンサー）</li>\n<li>TYPE_PRESSURE - 圧力センサー</li>\n<li>TYPE_GRAVITY - 重力センサー？</li>\n<li>TYPE_LINEAR_ACCELERATION - ？</li>\n<li>TYPE_ROTATION_VECTOR - ？</li>\n</ul>\n<p>加速度センサーは、端末の前後（Y軸）・左右（X）・上下（Z）の動きを検知するものです。他のサイトでは、「加速度センサー=重力センサー」と言ってる人もいるようですが、私は違うと思います。もちろん、重力による動き、つまり重力加速度も検知されます。机の上に置きっぱなしでも重力は常にかかっているので、下方向への値が常に検出されるのが面白いところです。</p>\n<p>照度センサーは、明るさを検知するもので、液晶の自動輝度調整なんかに役立ってますね。</p>\n<p>地磁気センサーは、磁場の強さを図るものです。たぶん富士の樹海に行くと面白い結果を返すのかも知れません。<br>\nおそらく 方位センサー は、地磁気センサーをラップして作られているのではないかと思います。</p>\n<p>近接センサーは、至近距離にモノがあるかどうかを検知します。スマホで通話中に画面にタッチして誤操作しないのは、このセンサーによって画面をロックしてるからだそうです。という説明を聞いたときは目からウロコでした。</p>\n<p>温度センサーは、端末の温度を測るものです。気温は測れないようです。</p>\n<p>と、ここまでが、今入手できる Android には普通に搭載されているセンサーです。</p>\n<p>次に、今後の端末に搭載が期待されるのがジャイロスコープです。これは「X/Y/Z軸それぞれについての回転」を検出するものです。松坂がメジャーに行った時、ジャイロボールというのが話題になりましたね。どーでもいいですね。えーと、加速度センサー（3軸）とジャイロスコープ（3軸）を合わせたものが6軸センサーと呼ばれ、より正確な姿勢判別・制御が行えるとのことです。</p>\n<p>そしてなんとこのジャイロスコープ、iPhone4 には既に搭載されているとのことです。くそう、悔しいですね。</p>\n<p>圧力センサー、たぶん気圧が検知できるんだと思います。主に高度の取得に役立つのでしょう。GPS の高さも精度があまりよくないですから。</p>\n<p>この２つのセンサーは、近い将来一般化するだろうとの事です。</p>\n<p>そして Android SDK の Level:9 （Gingerbread） から追加された謎のセンサータイプ達です。</p>\n<p>TYPE_GRAVITY は 重力センサーで間違いないだろうと思います。加速度センサーでも重力は検出できますが、端末の向きによって X/Y/Z 軸のどこに重力加速度が検出されるか分かりません。加速度センサーを使う上で一番難しいのが「如何に重力加速度を除外するか」だそうです。もしかしたらこのセンサーは、そういった問題の助けになるのかも知れません。</p>\n<p>そして全く読めないのが最後の二つ。</p>\n<p>TYPE_LINEAR_ACCELERATION 、”直線的” な ”加速度” ？なんじゃそりゃ。ベクトルを決めてそれに対する加速度だけを得ることができるのかな？</p>\n<p>TYPE_ROTATION_VECTOR 、ベクトルの回転 ？？？う、うーむ。これもベクトルを決めて、それに対する回転量だけを得られる、のかな？</p>\n<p>展開の速い Android ですから、謎なセンサータイプも近い将来、何か分かるでしょう。<br>\nその時には、また新しいセンサーが搭載されているかも。</p>\n<p>私が、センサーに興味を持ったのは、昨年、</p>\n<p><a href=\"http://hasc.jp/hc2010/symposium.html\">HASC Challenge 2010 シンポジウム</a></p>\n<p>というイベントに（仕事で）参加させていただいた事がきっかけです。</p>\n<p>HASC Challege とは、加速度センサーを装着して収集したデータから、人間の行動（歩く、走る、階段の昇り降り、など）の認識率の高さを競い合うものです。</p>\n<p>このシンポジウムに参加するまでは、加速度センサーで人間の行動を識別できるなどとは思ってもみなかったのですが、成果の発表でかなり高い認識率を示していたのに驚きました。そして、加速度センサーだけでなく、いろいろなセンサーを組み合わせることで更に高速に正確に行動を認識できるようになる、と。</p>\n<p>シンポジウムの様子は、Toggetter と Ustream で見られますので、是非ご覧ください。</p>\n<ul>\n<li><a href=\"http://togetter.com/li/76812\">Togetter - 「HASC Challenge 2010 シンポジウム #HC2010 まとめ」</a></li>\n<li><a href=\"http://www.ustream.tv/channel/hasc2010\">HASC Challenge 2010 Symposium on USTREAM</a></li>\n</ul>\n<p>これらのセンサー技術は、例えば GPS と組み合わせる事でより正確な位置を検出したり、GPS が使えない場合の補助になったりしますし、AR（拡張現実）分野でも、端末の正確な姿勢判定に役立ちます。</p>\n<p>スマートフォンから離れますが、PlayStation Move や今話題の Kinnect などもセンサ技術ですよね。</p>\n<p>今、**センサーがアツい！**です。これからもっと熱くなるんではないかと思います。<br>\n今のうちにセンサーの事をもっともっと勉強しておきたいです。</p>\n",
      "date_published": "2011-01-07T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2011/01/05/google-latitude/",
      "url": "https://blog.amay077.net/blog/2011/01/05/google-latitude/",
      "title": "Google Latitude の履歴情報を晒してみる",
      "content_html": "<p>昨年の暮れ、Google Latitude の iPhone 版が公開され、ツイッターなどでにぎわってましたが、自分は Android で 二年前から使ってたわー（嘘）、数ヶ月前から使ってました。</p>\n<!--more-->\n<p>その機能の中に 「履歴を保存する」 というのがあって、これまた興味本位で 「ON」 にしていたのですが、PC 版の <a href=\"https://www.google.com/latitude/\">Google Latitude</a> サイトで見られたんですね、初めて気づきました。</p>\n<p>で、その中には、自宅や職場の位置が教えてもいないのに表示されていて、これがまた当たってるもんだから Google こえーわー なんですが、どんな位置が保存されているかも見ることができます。</p>\n<p>試しに自分の行動履歴を晒してみます。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/latitude_1.png\" alt=\"&quot;1&quot;\"></p>\n<p>といっても 自宅（豊橋）と職場（名古屋）を往復するだけの日々ですねｗ<br>\nこれなら Google さんにとっても自宅と職場の位置は容易に推測できるでしょう。<br>\nなんか、大阪 や 岡山 へ行ったことになってますが、記憶にないですｗ<br>\n恐らく例の WiFi による測位で位置がぶっ飛ぶ現象だと思います。<br>\nデータの時刻を見てみると、驚くことに２４時間、定期的に位置情報が送信されていることが分かります。こわー。<br>\n深夜時間帯は１時間に１回、日中は短ければ１分間隔にもなりますね。たぶん移動具合によって感覚を伸ばしたり縮めたりしてるんでしょうね、Google さんの事ですから。<br>\n位置の取得方法は、 GPS＋WiFi＋携帯基地局 のハイブリッドなようです。<br>\n次の画像を見てください。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/latitude_2.png\" alt=\"&quot;2&quot;\"></p>\n<p>履歴の点をクリックすると、Accuracy （精度） の円が表示されます。<br>\nこの絵では半径５kmくらいなので恐らく携帯基地局からの推定位置ですが、他の点をクリックすると、円の大きさが小さいものも確認できます。<br>\nただ、さすがに深夜に勝手に GPS を起動させてるとは思いにくいので、基本は WiFi＋基地局で、他のアプリで GPS を使ってる時だけ、コバンザメのように GPS の位置をもらって送信してるんだと思います。</p>\n<p>あとあと、画面の右上に ▲ の再生ボタンがあって、行動履歴をトレースできます。致せり尽くせりですね。</p>\n<p>さあ、こんな Google の怖くて便利な世界に、あなたも飛び込んでみませんか？<br>\nAndroid 版 Google Latitude では、メニュー の プライバシー から、「ロケーション履歴を有効にする」を ON にするだけです。<br>\n簡単ですね、あーこわいこわい♪</p>\n",
      "date_published": "2011-01-05T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2011/01/02/wifi-location-accuracy2/",
      "url": "https://blog.amay077.net/blog/2011/01/02/wifi-location-accuracy2/",
      "title": "WiFi 位置測位の精度を調べてみた（沿岸道路編）",
      "content_html": "<p>えーと、今年もよろしくおねがいします。</p>\n<!--more-->\n<p>WiFi 位置測位の精度を調べてみた で、WiFi（というか NETWORK_PROVIDER）の位置測位が結構精度が高い事を紹介しましたが、いろんなケースでデータを取ってみないとなんとも言えないので、今日浜松に遊びに行った際に GPS_PROVIDER と NETWORK_PROVIDER でロギングしてみました。</p>\n<h3 id=\"%E7%92%B0%E5%A2%83\">環境 <a class=\"direct-link\" href=\"#%E7%92%B0%E5%A2%83\">#</a></h3>\n<ul>\n<li>使用端末： IS03</li>\n<li>移動ルート： 愛知県豊橋市 → 静岡県浜松市</li>\n<li>移動手段： 車（主に国道1号線、国道23号線）</li>\n<li>移動時間： 約50分</li>\n<li>GPS 有効、WiFi 有効</li>\n</ul>\n<h3 id=\"%E8%A8%88%E6%B8%AC%E6%96%B9%E6%B3%95\">計測方法 <a class=\"direct-link\" href=\"#%E8%A8%88%E6%B8%AC%E6%96%B9%E6%B3%95\">#</a></h3>\n<ul>\n<li>5分に1回計測を行う。</li>\n<li>GPS（GPS_PROVIDER） と WiFi（NETWORK_PROVIDER） を同時に計測開始する。</li>\n<li>GPS を起動し、計測が完了したらすぐにGPSを終了する。5分後また起動…その繰り返し。</li>\n</ul>\n<h3 id=\"%E7%B5%90%E6%9E%9C%EF%BC%88%E9%9D%92%EF%BC%9Agps%E3%80%81%E8%B5%A4%EF%BC%9Anetwork%EF%BC%89\">結果（青：GPS、赤：NETWORK） <a class=\"direct-link\" href=\"#%E7%B5%90%E6%9E%9C%EF%BC%88%E9%9D%92%EF%BC%9Agps%E3%80%81%E8%B5%A4%EF%BC%9Anetwork%EF%BC%89\">#</a></h3>\n<p><img src=\"https://blog.amay077.net/img/posts/wifilocation_21.png\" alt=\"&quot;1&quot;\"></p>\n<p>ロギング間隔を前回の1分から5分にしたので、点と点の距離が結構開いてます。<br>\n前回の電車通勤時では、線路周辺に WiFi 基地局がたくさんあるため NETWORK_PROVIDER でもなかなかの精度が出ると予想しましたが、その推測は正しかったようで、今回の場合、家がほとんどない沿岸道路（浜名バイパス）を走行時の測位はかなり精度が落ちています。</p>\n<p>おそらく WiFi での測位をあきらめ、3G基地局での測位に切り替わっていると思われます。<br>\nちなみにこの時に Accuracy は、3900～4900m 、浜松市街では 60～80m でした。</p>\n<p>また今回位置がぶっ飛ぶ現象は発生しませんでした。偶然かなあ。</p>\n<p>印象としては NETWORK_PROVIDER でも Accuracy が 100m 以内のデータはそれなり精度で使えるんじゃないかなあ、という感じです。</p>\n",
      "date_published": "2011-01-02T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/29/cell-location-accuracy/",
      "url": "https://blog.amay077.net/blog/2010/12/29/cell-location-accuracy/",
      "title": "基地局での位置測位の精度を調べてみた",
      "content_html": "<p>前回、WiFi 位置測位の精度を調べてみた の続きで、GPS も WiFi も無効だった場合、つまり携帯電話の基地局による位置測位の精度を調べてみました。</p>\n<!--more-->\n<p>経路は前回と同じです。<br>\n計測方法も同じで、ただ GPS も WiFi も端末の設定で OFF にしています。<br>\nで結果です。（青が 前回と同じGPSデータ、黄色が基地局の測位結果です）</p>\n<p><img src=\"https://blog.amay077.net/img/posts/celllocation_map.png\" alt=\"&quot;photo&quot;\"></p>\n<p>どうです？こちらも結構使えそうでしょ？<br>\nAccuracy （精度）の値は、3000～5000ｍ 、だいたい目視でもその範囲内で収まってる感じです。<br>\nしかも WiFi のように突然位置がぶっ飛ぶ現象も起こってません。</p>\n<p>さて、んじゃあ WiFi 捨ててこっち使えば？あるいは WiFi とこっちで精度の高いほう使えば？ってトコなんですが、「WiFi が有効な時に、あえて基地局だけを使って測位する方法」が分からんのです。(・・;)</p>\n<p>Android の位置を取得するための Provider は GPS_PROVIDER と NETWORK_PROVIDER の二つしかなく、WiFi と基地局は NETWORK_PROVIDER に分類されると思うのですが、その中で基地局のみと指定する事ができるのかすら分かってません。</p>\n<p>誰か知ってたら教えてください。m(_ _)m</p>\n",
      "date_published": "2010-12-29T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/28/wifi-location-accuracy/",
      "url": "https://blog.amay077.net/blog/2010/12/28/wifi-location-accuracy/",
      "title": "WiFi 位置測位の精度を調べてみた",
      "content_html": "<p>Android の位置測位には GPS を使うものと、WiFi（+基地局?）を使うものがあります。</p>\n<!--more-->\n<p>既に知れ渡っている通り、GPS は精度は高いですが、電池消費が激しいです。</p>\n<p>一方 WiFi による位置測位は、データベース化された無線LANルータの位置と、Android 端末での電波強度などから位置を推定するもので、GPS ほど精度は高くないものの、GPS が使えない屋内などでも使用できる利点があります。（詳しくは 「wifi 位置情報 仕組み」 とかでググってください）</p>\n<p>今回は、GPS ほどは電池を消費しない、WiFi による位置測位がどれ程の精度か、ためしに自分が会社から帰る道程で計測してみました。</p>\n<h3 id=\"%E7%92%B0%E5%A2%83\">環境 <a class=\"direct-link\" href=\"#%E7%92%B0%E5%A2%83\">#</a></h3>\n<p>使用端末： IS03<br>\n移動ルート： JR金山駅 → 二川駅 （共に愛知県）<br>\n移動手段： JR東海道線・特別快速 （Max 時速100km/h くらい？）<br>\n移動時間： 約1時間</p>\n<h3 id=\"%E8%A8%88%E6%B8%AC%E6%96%B9%E6%B3%95\">計測方法 <a class=\"direct-link\" href=\"#%E8%A8%88%E6%B8%AC%E6%96%B9%E6%B3%95\">#</a></h3>\n<p>1分に1回計測を行う。<br>\nGPS（GPS_PROVIDER） と WiFi（NETWORK_PROVIDER） を同時に計測開始する。<br>\nGPS を起動し、計測が完了したらすぐにGPSを終了する。1分後また起動…その繰り返し。</p>\n<h3 id=\"%E8%A8%88%E6%B8%AC%E7%B5%90%E6%9E%9C\">計測結果 <a class=\"direct-link\" href=\"#%E8%A8%88%E6%B8%AC%E7%B5%90%E6%9E%9C\">#</a></h3>\n<p>まず GPS です。画面左上から右下へ向かうルートです。73点測位されました。（★は気にしないで下さい。私のお気に入りの場所です(^^）</p>\n<p><img src=\"https://blog.amay077.net/img/posts/wifilocation_1.png\" alt=\"&quot;1&quot;\"></p>\n<p>つぎに WiFi です。こちらは 65 点測位されました。Android の位置取得の仕組みは位置情報が変化しないとイベントが発生しないため、GPS よりもやや少なくなっています。それでも予想外の多さでした。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/wifilocation_2.png\" alt=\"&quot;2&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/wifilocation_3.png\" alt=\"&quot;3&quot;\"></p>\n<p>途中、ヒゲのようなものが出ています。大きな誤差のように見えますが、異常なのは1点だけです。<br>\nそれを削除したのが 2枚目の画像で、キレイな線になっています。<br>\nこのようなヒゲができる原因としては、WiFi では無線ルータの ID に対して位置を付与するため、その無線ルータが引越しなどで移動すると、付与した位置とズレてしまうことになります。 推測ですが、このような「移動した無線ルータ」から位置を取得してしまったのではないかと考えます。</p>\n<h3 id=\"2010.12.29-%E8%BF%BD%E8%A8%98\">2010.12.29 追記 <a class=\"direct-link\" href=\"#2010.12.29-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>このヒゲ、Accuracy で判断できないのか？と <a href=\"http://twitter.com/#!/RKisato/status/19792645240918016\">@RKisato さんからご指摘</a>いただきましたが、この点の Accuracy は 5000m 、しかし実際はもっとズレています。他にも Accuracy が 5000 に近い点は複数ありましたが、ここほどずれていませんでした。なので、Accuracy も判定基準に成り得ないと思っています。</p>\n<p>GPS と WiFi（ゴミ削除後）を重ねてみました。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/wifilocation_4.png\" alt=\"&quot;4&quot;\"></p>\n<p>意外な程、ぴったりと重なっています。もっと拡大すると1～2km ズレているところもありますが、俯瞰した地図では、 WiFi 測位は GPS と比べてもまったく問題とならない精度であることが分かりました。</p>\n<h3 id=\"%E6%87%B8%E6%A1%88\">懸案 <a class=\"direct-link\" href=\"#%E6%87%B8%E6%A1%88\">#</a></h3>\n<ul>\n<li>今回は電車に乗っての測位でした。線路の周りには家屋がたくさんあり、そこでは家庭用の無線ルータが数多く使われています。つまり今回のケースは WiFi 測位に有利な環境だったと想像できます。これが山岳地帯など家屋（無線ルータ）の少ない地域だともっと精度が落ちていたと思われます。</li>\n<li>同時に GPS でも測位していた事により精度が向上した？ Android では、GPS を有効する時に、そのデータを（個人が特定できない程度に）Google に送信する事に同意するよう求められます。これも推測ですが、GPS と WiFi がどちらも有効な場合、GPS の測位結果を、最寄りの無線ルータの緯度経度として登録するような仕組みが動いているのではないかと思います。これにより、実は WiFi 測位の精度を改善しながら計測していた可能性があります。</li>\n<li>WiFi も無効だったらどうする？ GPS 程ではないにせよ、WiFi も電池は消費するので、電池の持ちにウルサイ人は、好んで WiFi を OFF にしています。その時に NETWORK_PROVIDER を使って位置を測位するとどうなるのか？恐らく携帯電話の基地局から位置が側位されるはずです。その際の精度も検証の必要があります。</li>\n</ul>\n<h4 id=\"2010.12.29-%E8%BF%BD%E8%A8%98-2\">2010.12.29 追記 <a class=\"direct-link\" href=\"#2010.12.29-%E8%BF%BD%E8%A8%98-2\">#</a></h4>\n<p>検証しました → 基地局での位置測位の精度を調べてみた</p>\n<h4 id=\"2010.12.29-%E8%BF%BD%E8%A8%98-3\">2010.12.29 追記 <a class=\"direct-link\" href=\"#2010.12.29-%E8%BF%BD%E8%A8%98-3\">#</a></h4>\n<p>ここで示した地図上の軌跡は「時間軸」が考慮されていません。一見、「同じ時刻で同じ位置」であるように見えますが、同じ位置で見たときに時刻がズレているかも知れません。（というより必ずズレはあって、それが許容範囲内かどうかがポイントですが）</p>\n<h3 id=\"%E3%81%BE%E3%81%A8%E3%82%81\">まとめ <a class=\"direct-link\" href=\"#%E3%81%BE%E3%81%A8%E3%82%81\">#</a></h3>\n<ul>\n<li>WiFi による位置測位は、予想よりも高い精度であることが分かった。</li>\n<li>しかし、場所を変えて検証する必要がある。</li>\n<li>ヒゲの対策を盛り込めば、十分に実用できるレベルである。</li>\n<li>Android が普及すればする程、Google は情報を手にし、WiFi 測位の精度も上がっていきます。いずれ GPS を凌駕する日が来るかも？です。</li>\n</ul>\n",
      "date_published": "2010-12-28T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/26/microlog4android-patternformatter/",
      "url": "https://blog.amay077.net/blog/2010/12/26/microlog4android-patternformatter/",
      "title": "microlog4android で PatternFormatter を使う",
      "content_html": "<p>前回 から連続ポストですが、 <a href=\"http://code.google.com/p/microlog4android/\">microlog4android</a> の Formatter の中の一つ PatternFormatter について調べたのでメモ。</p>\n<!--more-->\n<p>[Log4j] にも PatternFormatter はあるので同じかなーと思いつつ、少し違うようです。</p>\n<p>microlog4android の<a href=\"https://github.com/johanlkarlsson/microlog4android\">ソースコード</a> から、使える項目の説明を抜粋したのが以下です。</p>\n<ul>\n<li>%i : the client id</li>\n<li>%c : prints the name of the Logger</li>\n<li>%d : prints the date (absolute time)</li>\n<li>%m : prints the logged message</li>\n<li>%P : prints the priority, i.e. Level of the message.</li>\n<li>%r : prints the relative time of the logging. (The first logging is done at time 0.)</li>\n<li>%t : prints the thread name.</li>\n<li>%T : prints the Throwable object.</li>\n<li>%% : prints the ‘%’ sign.</li>\n</ul>\n<p>よく使うのは %d, %m, %P, %T って所でしょうか。</p>\n<p>中でも %d 時刻の出力について詳しく見ていきます。</p>\n<p>%d を普通に使うと以下のような出力になります。ex:“%d [%P] %m %T”</p>\n<blockquote>\n<p>13:07:27,683 [INFO] information</p>\n</blockquote>\n<p>%d には {} でフォーマットが指定できます。使用できるのは、ABSOLUTE / DATE / ISO8601 の３種類。これも ソースコード から抜粋。何も指定しないと（つまり上記は）ABSOLUTE という事です。</p>\n<p>次に DATE を指定した場合です。ex:“%d{DATE} [%P] %m %T”</p>\n<blockquote>\n<p>26 DEC 2010 13:34:20,120 [INFO] information</p>\n</blockquote>\n<p>最後に ISO8601 の場合です。ex:“%d{ISO8601} [%P] %m %T”</p>\n<p>2010-12-26 13:36:40,684 [INFO] information</p>\n<p>日本人的に一番みやすいのは ISO8601 ですかね。文字列でソートしやすいし。</p>\n<p>[Log4j] では、 %d{yyyy-MM-dd} って感じで直接書式を指定できるっぽいですが microlog4android ではサポートされていないようです。実装されてる様子もありませんでした。</p>\n<p>(余談ですが、microlog4android の中の実装では String.format とか SimpleDateFormat とか使われていませんでした。思うに、コイツらメチャ遅いからだと思います。)</p>\n<p>最後に使い方はこんな感じです。</p>\n<h3 id=\"using-patternformatter-example\">Using PatternFormatter example <a class=\"direct-link\" href=\"#using-patternformatter-example\">#</a></h3>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// initialize logger</span><br><span class=\"token class-name\">PatternFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternFormatter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>formatter<span class=\"token punctuation\">.</span><span class=\"token function\">setPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d{ISO8601} [%P] %m %T\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>logger<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// write to LogCat</span><br><span class=\"token class-name\">LogCatAppender</span> logCatAppender <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LogCatAppender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>logCatAppender<span class=\"token punctuation\">.</span><span class=\"token function\">setFormatter</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span>logCatAppender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token comment\">// write to text file of SD-card.(need WRITE_EXTERNAL_STORAGE permission)</span><br><span class=\"token class-name\">FileAppender</span> fileAppender <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileAppender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>fileAppender<span class=\"token punctuation\">.</span><span class=\"token function\">setAppend</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>fileAppender<span class=\"token punctuation\">.</span><span class=\"token function\">setFileName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"microlog4android.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>fileAppender<span class=\"token punctuation\">.</span><span class=\"token function\">setFormatter</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span>fileAppender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>前回のソースコードと照らし合わせてみてください。</p>\n<h4 id=\"2010.12.27-%E8%BF%BD%E8%A8%98\">2010.12.27 追記 <a class=\"direct-link\" href=\"#2010.12.27-%E8%BF%BD%E8%A8%98\">#</a></h4>\n<p>うぉ！時刻が UTC(GMT?) で出力されますね。まあいいか。</p>\n",
      "date_published": "2010-12-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/26/getting-start-of-microlog4android/",
      "url": "https://blog.amay077.net/blog/2010/12/26/getting-start-of-microlog4android/",
      "title": "Getting start of microlog4android",
      "content_html": "<p><a href=\"http://code.google.com/p/microlog4android/\">microlog4android</a> は、Android 用のロガーライブラリ。</p>\n<p><a href=\"http://logging.apache.org/log4j/1.2/\">Log4j</a> のような使い方ができ、簡単に Android アプリケーションにログ機能を実装できます。</p>\n<!--more-->\n<p>もうちょっと詳しく言うと、Log4j を真似て作った <a href=\"http://microlog.sourceforge.net/site/\">Microlog</a> というモバイル用のロガーライブラリがあり、その中から Android に必要なものを切り出し+追加したのがこの microlog4android です。</p>\n<p>元々は Log4j を Android で使おうと思って色々試していたのですがうまくいかなかったので、 <a href=\"http://www.quora.com/\">Quora</a> で聞いてみた所、これを教えてもらったので使ってみました。</p>\n<p>ドキュメントが充実しておらず、結構苦労したので、Getting Start 的なものを書いてみました。（Eclipse の場合です）</p>\n<ol>\n<li>microlog4android のサイトから microlog4android-1.0.0.jar をダウンロードする。2011.01.19追記：ログに出力されるログを日本時間で出力するよう改造してみました。下の GitHub に置いてある完成品をどうぞ。</li>\n<li>自分の Android プロジェクトに、jar を取り込む。</li>\n<li>AndroidManifest.xml に android.permission.WRITE_EXTERNAL_STORAGE を追加する。（ログを SD-card に書きだす為に）</li>\n<li>メインの Activity に以下のように記述する。</li>\n</ol>\n<p>Most simple example of microlog4android</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// singleton logger object</span><br><span class=\"token keyword\">static</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Logger</span> logger <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br><span class=\"token comment\">// Called when the activity is first created.</span><br><span class=\"token annotation punctuation\">@Override</span><br><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// initialize logger</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">setLevel</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Level</span><span class=\"token punctuation\">.</span>INFO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// write to LogCat</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">LogCatAppender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token comment\">// write to text file of SD-card.(need WRITE_EXTERNAL_STORAGE permission)</span><br>    <span class=\"token class-name\">FileAppender</span> fileAppender <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileAppender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    fileAppender<span class=\"token punctuation\">.</span><span class=\"token function\">setAppend</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    fileAppender<span class=\"token punctuation\">.</span><span class=\"token function\">setFileName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"microlog4android.log\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">addAppender</span><span class=\"token punctuation\">(</span>fileAppender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token comment\">// test logging</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"debug\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// &lt;- no logging by level</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"information\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"warning\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    logger<span class=\"token punctuation\">.</span><span class=\"token function\">fatal</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fatal\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>とりあえずこれで、アプリを実行すると LogCat と SD-card（ルートの microlog4android.log）にログが出力されます。</p>\n<p>完成品をとりあえず <a href=\"https://github.com/amay077/microlog4androidSample\">GitHub</a> に置いておきますので、ご参考に。</p>\n<p>レベルを INFO にしているので、logger.debug はログに出力されません。</p>\n<p>ハマりがちなのは、setFileName でディレクトリを指定した場合、そのディレクトリが存在してないと IOException が出る事です。(むーなんか使いにくいな)</p>\n<h3 id=\"2010.12.27-%E8%BF%BD%E8%A8%98\">2010.12.27 追記 <a class=\"direct-link\" href=\"#2010.12.27-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>setFileName のハマりポイントもう一つ。 設定は、SD-card のルートからの相対パスで行います。フルパスだと IOException が出ます。 たとえば Xperia で SD-card の sample ディレクトリ内にログファイルを作りたい場合、 /sdcard/sample/log.txt は NG で、 /sample/log.txt もしくは sample/log.txt が OK です。</p>\n<p>他にも Log4j みたく config ファイルから設定を読み込んだり、Formatter を定義してログに出力する項目をカスタマイズできるのですが、それはまたいつの日か。</p>\n<h3 id=\"2010.12.26-%E8%BF%BD%E8%A8%98\">2010.12.26 追記 <a class=\"direct-link\" href=\"#2010.12.26-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>書いた！ → microlog4android で PatternFormatter を使う</p>\n",
      "date_published": "2010-12-26T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/20/androidvisibility-gone/",
      "url": "https://blog.amay077.net/blog/2010/12/20/androidvisibility-gone/",
      "title": "android:visibility の gone について調べてみた",
      "content_html": "<p>Android の UI レイアウト作成で、コンポーネントの表示・非表示についての visibility プロパティについて調べてみました。</p>\n<!--more-->\n<p>visibility は<a href=\"http://developer.android.com/reference/android/view/View.html#attr_android:visibility\">リファレンス</a>によると、visible / invisible / gone の３種類があるとのこと。</p>\n<p>自分は VB6 とか C# 出の人間なので、「なんで２種類(Boolean)じゃないんだろう」と思っていましたので、ためしにやってみました。</p>\n<p>レイアウトにボタン（じゃなくても良いけど）を２つ貼り、一つ（A とします）を可変幅に、もう一つ（B とします）を固定幅にしました。<br>\nボタンBは常に固定幅で画面右にあって、ボタンAは残った領域に fill するイメージです。<br>\n（※ボタンA の layout_weight を B より大きな値にセットするのがミソです）</p>\n<p>この状態で、ボタン B の visibility を変えてみて、どんな変化が起こるか確認してみました。</p>\n<p>それが↓これ。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/androidvisibility_1.png\" alt=\"&quot;1&quot;\"></p>\n<p>なるほど。<br>\ninvisible は、そこに存在するけど見えていない。ので空白の領域ができる。<br>\ngone は、存在自体が無くなる。ので ボタンA がいっぱいまで表示される。<br>\nVB6 や C# に例えていうなら、Visible の true が &quot;visible&quot; で、false は &quot;gone&quot; なんですね、納得。</p>\n<p>ちなみに &quot;gone&quot; を<a href=\"http://eow.alc.co.jp/gone/\">英和辞典で調べる</a>と、「消失した、いなくなった」 という意味もあるそうで、なるほど。</p>\n",
      "date_published": "2010-12-20T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/06/qcar-sdk/",
      "url": "https://blog.amay077.net/blog/2010/12/06/qcar-sdk/",
      "title": "QCAR SDK で複数のオブジェクトを認識する",
      "content_html": "<p><a href=\"https://ar.qualcomm.com/qdevnet/developer_guide\">QCAR SDK の Developper Guide</a> の Tips and tricks → Detecting and tracking simultaneous Image Targets を見ると、この SDK では複数のオブジェクトを認識することができるそう。</p>\n<!--more-->\n<h2 id=\"detecting-and-tracking-image-targets-simultaneously\">Detecting and Tracking Image Targets Simultaneously <a class=\"direct-link\" href=\"#detecting-and-tracking-image-targets-simultaneously\">#</a></h2>\n<p><img src=\"https://blog.amay077.net/img/posts/qcar_1.png\" alt=\"&quot;1&quot;\"></p>\n<blockquote>\n<p>The QCAR SDK is also capable of simultaneous tracking of up to 5 Image Targets - as shown in the screenshot on top of this page. This feature can be enabled by providing hints to the QCAR SDK. The Image Targets sample allows you to switch on this feature by uncommenting the highlighted two lines in the native source ImageTargets.cpp:</p>\n<p>via <a href=\"https://ar.qualcomm.com/qdevnet/developer_guide/369\">ar.qualcomm.com</a></p>\n</blockquote>\n<p>説明を読むと、５つのオブジェクトまで同時に認識できるそうです。</p>\n<p>複数の認識を有効にするには、コードで SDK にヒントを設定する必要があって、サンプル 「ImageTarget」では、ImageTargets.cpp （つまり NDK の方）を以下のように修正すればよいとのこと。</p>\n<pre class=\"language-c\"><code class=\"language-c\">JNIEXPORT <span class=\"token keyword\">void</span> JNICALL<br><span class=\"token function\">Java_com_qualcomm_QCARSamples_ImageTargets_ImageTargets_onQCARInitializedNative</span><br>    <span class=\"token punctuation\">(</span>JNIEnv <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> jobject<span class=\"token punctuation\">)</span><br><span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// Comment in to enable tracking of up to 2 targets simultaneously and</span><br>    <span class=\"token comment\">// split the work over multiple frames:</span><br>    QCAR<span class=\"token operator\">::</span><span class=\"token function\">setHint</span><span class=\"token punctuation\">(</span>QCAR<span class=\"token operator\">::</span>HINT_MAX_SIMULTANEOUS_IMAGE_TARGETS<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    QCAR<span class=\"token operator\">::</span><span class=\"token function\">setHint</span><span class=\"token punctuation\">(</span>QCAR<span class=\"token operator\">::</span>HINT_IMAGE_TARGET_MULTI_FRAME_ENABLED<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>ためしにやってみました。</p>\n<p>３つの画像を認識するようにしてみましたよ。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/qcar_2.png\" alt=\"&quot;2&quot;\"></p>\n<p>おぉ～、なんかスゲー。</p>\n<p>なんかスゴいライブラリな気がして来ましたよ、この QCAR SDK 。</p>\n",
      "date_published": "2010-12-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/06/opengl-android-gl-eclipse/",
      "url": "https://blog.amay077.net/blog/2010/12/06/opengl-android-gl-eclipse/",
      "title": "OpenGLチュートリアル android-gl を Eclipse でビルドする方法",
      "content_html": "<p><a href=\"http://twitter.com/#!/npaka\">@npaka</a> さんの <a href=\"http://www.saturn.dti.ne.jp/~npaka/android/OpenGL/index.html\">Androidメモ - OpenGLによる3Dグラフィックス</a> で解説されている OpenGLチュートリアル <a href=\"http://code.google.com/p/android-gl/\">android-gl</a> が、Eclipse でビルドできない！（たぶん Ant でビルドするサンプル）</p>\n<!--more-->\n<p>ので、色々調べてビルドできるようになったので、その手順を書いておきます。</p>\n<ol>\n<li>SVN からソースコードをエクスポートします。</li>\n<li>他の Android プロジェクト（なんでもいい）から &quot;default.properties&quot; というファイルをコピーします。</li>\n<li>&quot;/src/edu/union/&quot; ディレクトリから R.java ファイルを削除します。（R.java は本来自動生成されるものなので）</li>\n<li>&quot;/res/layout/main.xml&quot; ファイルを &lt;TextView id=&quot;@+id/text&quot; から &lt;TextView android:id=&quot;@+id/text&quot; に修正します。</li>\n<li>Eclipse でプロジェクトをインポートします。</li>\n<li>ビルドすると &quot;android requires .class compatibility set to 5.0&quot; というエラーが出るので、このエラーメッセージでググって解決します。（よくあるエラーみたいです）</li>\n<li>もう一度ビルドすると成功するハズです。</li>\n</ol>\n<p>↓こんなサンプルアプリが実行できるハズですよ、と。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/open_gl_1.png\" alt=\"&quot;1&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/open_gl_2.png\" alt=\"&quot;2&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/open_gl_3.png\" alt=\"&quot;3&quot;\"></p>\n",
      "date_published": "2010-12-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/06/hamackathon2/",
      "url": "https://blog.amay077.net/blog/2010/12/06/hamackathon2/",
      "title": "ハマッカソン2 - #hamackathon に参加してきました",
      "content_html": "<p>2010/12/4(土)、2回目の開催となる 浜松ハッカソン（ハマッカソン）、テーマがモバイルと聞いて Android  で参加してきました。</p>\n<!--more-->\n<p><a href=\"http://www.flickr.com/photos/bigmac/5234115832/\" title=\"Untitled by mackato, on Flickr\"><img src=\"http://farm6.staticflickr.com/5283/5234115832_748685714b.jpg\" width=\"500\" height=\"332\" alt=\"Untitled\"></a></p>\n<ul>\n<li>浜松ハッカソン公開Wiki</li>\n<li>第2回 浜松ハッカソン(ハマッカソン2) 開催レポート - Blog on AIRS</li>\n<li>ハマッカソン２に参加 - あきそふと開発日記</li>\n</ul>\n<p>当日の Android チーム（というか自分）のレポです。</p>\n<p>他の2チーム（HTML5チーム、 iPhoneチーム）は、チーム開発でしたが、Androidチームは一匹狼が多いのか銘々で好き勝手にアプリを作るという感じでした。</p>\n<p>んで自分は、以前から「こんなのあったらイイな～」という俺得アプリを作りました。</p>\n<p>###アプリ名：<br>\n自宅から離れると勝手にマナーモードになるアプリ</p>\n<p>###概要：<br>\n自宅でケータイをマナーモード状態で放置して重要なTELに気づかない。<br>\nまたは、会社で恥ずかしい着信音が鳴り響いてひんしゅくを買う。<br>\nので、エリアに応じてマナーモードを ON/OFF する（+α）ようなアプリが欲しいなーって事で作りました。</p>\n<p>既に同種の（というかまんまの）アプリがあるというのに！<br>\n作者様に敬意を表する意味で、ここで宣伝させていただきます。</p>\n<ul>\n<li><a href=\"http://androider.jp/?p=21377\">AutoSetter (for 1.6) 場所によって端末の設定を自動で切替える 【300円】 ｜ アンドロイダー</a></li>\n</ul>\n<p>まあなんとか妥協に妥協を重ねて時間内にデモれるくらいのアプリができ、プレゼンさせてもらった所、なかなか好評価を頂きまして、 Androidチームとして優勝できました！</p>\n<p>写真だけじゃなんのこっちゃ分かりませんがこんなアプリです。</p>\n<p><a href=\"http://www.flickr.com/photos/bigmac/5234111922/\" title=\"Untitled by mackato, on Flickr\"><img src=\"http://farm6.staticflickr.com/5043/5234111922_286d7c8003.jpg\" width=\"500\" height=\"332\" alt=\"Untitled\"></a></p>\n<p>しかしまあ、この妥協具合は無いわ。最初「できる」と思ったのが恥ずかしいくらい。<br>\nどんな感じかというと。。。</p>\n<h3 id=\"%E5%BD%93%E5%88%9D%E4%BA%88%E5%AE%9A\">当初予定 <a class=\"direct-link\" href=\"#%E5%BD%93%E5%88%9D%E4%BA%88%E5%AE%9A\">#</a></h3>\n<ol>\n<li>地図アプリを起動したら地図を GeoHex を表示する。</li>\n<li>マナーモードを ON or OFF するエリアを選択する。</li>\n<li>現在位置を取得する。GPS は電池消耗が激しいので WiFi か3G基地局から。</li>\n<li>エリア内に現在位置が入ったら Intent を発行する。</li>\n<li>精度を含む現在位置が複数Hexにヒットした場合は、面積が一番大きいHexを採用する。</li>\n<li>受信側アプリで Intent を受け取ったらマナーモードを ON or OFF する。</li>\n<li>地図アプリは、タスクキラーに備えて AlarmManager で 5分置きとかに起動するようにする。</li>\n<li>マナーモードON/OFFだけじゃなくて他にも何かできたらいいな。</li>\n</ol>\n<h3 id=\"%E5%AE%9F%E7%B8%BE\">実績 <a class=\"direct-link\" href=\"#%E5%AE%9F%E7%B8%BE\">#</a></h3>\n<ul>\n<li>\n<ol>\n<li>\n<ol start=\"2\">\n<li>は、事前に作って GitHub に登録してあった。つまりフライングギリギリ（汗<br>\nけど、<a href=\"http://geogames.net/labs/geohex\">GeoHex</a> は譲れなかったしね。</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>は、GPS のみに。しかも通常 LocationManager を使うところを GoogleMap API の MyLocationOverlay で済ませた。</li>\n</ol>\n</li>\n<li>\n<ol start=\"4\">\n<li>は Intent 発行でなく、マナーモード ON/OFF 処理を直書き（大汗</li>\n</ol>\n</li>\n<li>\n<ol start=\"5\">\n<li>は 「GPS だから無視していっか」と妥協。</li>\n</ol>\n</li>\n<li>\n<ol start=\"6\">\n<li>は Intent 使ってないので当然ボツｗ</li>\n</ol>\n</li>\n<li>\n<ol start=\"7\">\n<li>は 「デモには関係ないから」 とスルー（滝汗</li>\n</ol>\n</li>\n<li>\n<ol start=\"8\">\n<li>はデモ効果があるのでマジメに考えたｗ マナーモードON/OFF だけじゃなく、メディアボリュームをゼロにしたり、バイブレータを振動させたり、メーラーを起動したりした。</li>\n</ol>\n</li>\n</ul>\n<p>マトモに実装したのは、1. 2. 8 だけというｗｗｗ<br>\nいーんですよ、「機能を削ってでも納期を守る」 のがオトナですからｗ</p>\n<p>Androidチームの成果物は、こうしてできた私のアプリと、 <a href=\"http://twitter.com/mackato\">@mackato</a> さんの 「ケモノカメラ」 、<a href=\"http://twitter.com/kiwofusi\">@kiwofusi</a> さんの 「ワンセグでTwitter（途中まで）」、 <a href=\"http://twitter.com/w1mvy\">@w1mvy</a> さんは加速度センサ、 <a href=\"http://twitter.com/natsumesou\">@natsumesou</a> さんは傾きセンサを使ったアプリでしたが惜しくも完成に至らず。。。</p>\n<p>発表後の審査投票では、<a href=\"http://twitter.com/hide621\">@hide621</a> さん（なんと私と同じ校区に済んでいるのです）を始めとする iPhone チームの 「通信対戦型の時限爆弾アプリ」 と同数票となり、@mackato さんの 「ケモノカメラ」 を使った同点決勝で見事、私が勝利し、Androidチームの優勝となりました♪</p>\n<p>優勝商品はメンバで山分けし、私は Google Developper Day 2010 の Tシャツ をもらいました。<br>\nさすが Google だセンスがイイぜ！</p>\n<p>その後は懇親会。</p>\n<p><a href=\"http://www.flickr.com/photos/bigmac/5234117260/\" title=\"Untitled by mackato, on Flickr\"><img src=\"http://farm6.staticflickr.com/5122/5234117260_109e8293c6.jpg\" width=\"500\" height=\"332\" alt=\"Untitled\"></a></p>\n<p>懇親会では、10歳以上も歳の差のある<a href=\"http://tai.ia.inf.shizuoka.ac.jp/index.php?action=pages_view_main&amp;page_id=43\">静岡大学情報学部 佐藤哲也研究室（通称 おめでてー研 というらしい）</a> の学生さん方々と相席になり、オジサン何話せばいいの？状態でしたが、</p>\n<ul>\n<li>iPhone アプリでガッポガッポな話</li>\n<li>Windows アプリでもガッポガッポな話</li>\n<li>フリーランスで悠々自適な話</li>\n<li>おめ研の就職先＆志望先にｳｯﾋｮｵｰな話</li>\n<li>豊橋カレーうどん は浜松では誰も知らない話</li>\n</ul>\n<p>などで盛り上がり、とても楽しく過ごせました。</p>\n<p>次回は、</p>\n<blockquote>\n<p>次回は3月前半の予定です。テーマとか要望があればTwitterで <a href=\"http://twitter.com/hamackathon\">@hamackathon</a> まで。<br>\nvia <a href=\"http://blog.airs.co.jp/2010/12/06/hamackathon-20101204.html\">blog.airs.co.jp</a></p>\n</blockquote>\n<p>とのことですので、また参加したいと思います。テーマは何がいいかな？<br>\n浜松近郊、また東海地方のエンジニアの皆様、ご参加されると楽しいと思います。</p>\n<p>今回の私の成果物は、</p>\n<p><a href=\"https://github.com/amay077/FollowerMap/tree/hamackathon\">GitHub - amay077 - FollowerMap の hamackathon ブランチ</a> に置いてありますが、あまりにもやっつけ感ありありなので、近々マシにします。リポジトリ名が？なのはご愛嬌。<br>\nアプリとしてももっと育てていきたいので、継続的に開発していきたいと思います！</p>\n<p>主催の <a href=\"http://twitter.com/mackato\">株式会社エアーズ @mackato</a> さん、参加された皆様、楽しい時間をありがとうございました。</p>\n<p>####P.S.<br>\n<a href=\"http://geogames.net/labs/geohex\">#GeoHex</a> の布教活動しましたよ！ <a href=\"http://twitter.com/#!/sa2da\">@sa2da</a> さん！</p>\n",
      "date_published": "2010-12-06T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/01/qcar-xperia-is03/",
      "url": "https://blog.amay077.net/blog/2010/12/01/qcar-xperia-is03/",
      "title": "クアルコムの AR SDK ”QCAR” を Xperia と IS03 で動かしてみた",
      "content_html": "<p>QCAR とは クアルコム社 が<a href=\"http://japanese.engadget.com/2010/10/07/android-ar-sdk/\">提供している</a> Android 用の AR（拡張現実） SDK です。</p>\n<!--more-->\n<p><a href=\"https://ar.qualcomm.com/qdevnet/sdk\">Qualcomm Developper Network - AR SDK ｜ Qualcomm Augmented Reality</a></p>\n<p>こちらの方々</p>\n<ul>\n<li>クアルコムのAndroid向けAR SDK（QCAR）を動かしてみた - kotamzの日記</li>\n<li>QualcommのAR SDK &quot;QCAR&quot; で遊んでみた - hdk_embeddedの日記</li>\n</ul>\n<p>が使い方を説明してくださってますので、自分も（仕事で）やってみました。</p>\n<p>対応している端末は Desire , Nexus One との事でしたが、どちらも持ってないので、手持ちの Xperia (※ Android 2.1 に上げたやつ) と IS03 で試してみました。</p>\n<p>まず Xperia 。</p>\n<p>お、できた！（QCAR というより NDK と Cygwin でかなりてこずりましたが、順番にやれば大丈夫）</p>\n<p><img src=\"https://blog.amay077.net/img/posts/qcar_xperia_1.png\" alt=\"&quot;1&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/qcar_xperia_2.png\" alt=\"&quot;2&quot;\"></p>\n<p>なかなかイイ感じに認識します。</p>\n<p>ただ、MultiImageTargets だけはうまく認識してくれませんでした。せっかく立方体作ったのに…）<br>\nカメラのピントなどを調節すれば認識するのかも知れません。</p>\n<p>(2010.12.2追記)あ、動いた。なかなか認識してくれなかったけど、正面（ライオンがついてない方）をまっすぐ映してじっとしてたらできました。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/qcar_xperia_3.png\" alt=\"&quot;3&quot;\"></p>\n<p>ミンティアの上にポットを載せてみました(^ ^)</p>\n<p><img src=\"https://blog.amay077.net/img/posts/qcar_xperia_4.png\" alt=\"&quot;4&quot;\"></p>\n<p>自分の画像を使うには、Qualcomm Developper Network の AR SDK のページ内にある <a href=\"https://ar.qualcomm.com/qdevnet/projects\">My Trackables</a> へ行き、プロジェクトを作った後、画像（JPG か PNG で 2MB未満）をアップロードします。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/qcar_xperia_5.png\" alt=\"&quot;5&quot;\"></p>\n<p>アップロードできると↑こんな画面になります。たぶん ☆ が多い方が認識しやすい画像です。（試しにホットペッパーの見開き２ページをアップしたら ☆ がひとつも付きませんでした。→追記(2010.12.2)ちゃんとスキャンしてもらってグレイスケールに変換して制限2MBギリギリな画像でアップしたら、☆が4つ付きました。）</p>\n<p>このデータをアプリで使うには、項目をチェックして download selected trackables をクリックすると ZIP がダウンロードできるので、その中身を ImageTargets サンプル の assets フォルダに上書きしてあげると適用できます。（たぶん、複数項目をチェックしてダウンロードすると画像によってポットの色が変わるようになると思います。→追記(2010.12.2)大嘘。JNI 側の ImageTargets.cpp をダウンロードした画像の名前（config.xml を見ると分かる）に合わせて修正してあげないとダメっぽい）</p>\n<p>自分で動かすと相当オモシロイので、是非お試しください！</p>\n<p>次に IS03 ですが、、、動きませんでしたー(^ ^;</p>\n<p>エラーは出ませんが、カメラが起動しないです。<br>\nソースコードを直すと動くかも知れないので、また調べたいと思います。</p>\n<p>今日はこんなところで。</p>\n<h3 id=\"%E8%BF%BD%E8%A8%98%EF%BC%882010.12.2%EF%BC%89%EF%BC%9Axperia-%E3%81%A7%E3%81%AF%E3%83%90%E3%82%B0%E3%81%8C%E3%81%82%E3%82%8B%E3%82%89%E3%81%97%E3%81%84\">追記（2010.12.2）：Xperia ではバグがあるらしい <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98%EF%BC%882010.12.2%EF%BC%89%EF%BC%9Axperia-%E3%81%A7%E3%81%AF%E3%83%90%E3%82%B0%E3%81%8C%E3%81%82%E3%82%8B%E3%82%89%E3%81%97%E3%81%84\">#</a></h3>\n<p>QCAR SDK のページに 「Xperia で動かすとバグがある」的な情報が載ってました。MultiImageTargets サンプルがうまく動いてくれなかったのはこの為かなあ？</p>\n<blockquote>\n<p>Note: We have currently identified a bug that prevents the SDK from working correctly on the Sony Ericsson Xperia X10i (QSD 8250) running Android 2.1. This page will be updated once it is fixed.</p>\n<p>via <a href=\"https://ar.qualcomm.com/qdevnet/sdk\">AR SDK ｜ Qualcomm Augmented Realit</a></p>\n</blockquote>\n<h3 id=\"%E8%BF%BD%E8%A8%98%EF%BC%882010.12.2%EF%BC%89%EF%BC%9A%E8%AA%8D%E8%AD%98%E3%81%A7%E3%81%8D%E3%82%8B%E7%94%BB%E5%83%8F%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">追記（2010.12.2）：認識できる画像について <a class=\"direct-link\" href=\"#%E8%BF%BD%E8%A8%98%EF%BC%882010.12.2%EF%BC%89%EF%BC%9A%E8%AA%8D%E8%AD%98%E3%81%A7%E3%81%8D%E3%82%8B%E7%94%BB%E5%83%8F%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">#</a></h3>\n<ul>\n<li>アルゴリズムは良く分からないけど、画像から特徴点を算出している。これに色は関係ないみたい。カラー画像もアップしたらグレイスケールに変換されてた。</li>\n<li>認識率のよい（☆がいっぱい付く）画像は、ごちゃごちゃしている画像。</li>\n<li>ホットペッパーの各ページは、構図は似ているけど、店の写真がそれぞれ違うので認識率は高い。</li>\n<li>店内写真だけ切り抜いてアップしたら、写真によってバラつきがある。下の左の写真は認識率が高いが、右は低い。</li>\n</ul>\n<p><img src=\"https://blog.amay077.net/img/posts/qcar_xperia_6.png\" alt=\"&quot;6&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/qcar_xperia_7.png\" alt=\"&quot;7&quot;\"></p>\n",
      "date_published": "2010-12-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/12/01/openstreetmap-bing/",
      "url": "https://blog.amay077.net/blog/2010/12/01/openstreetmap-bing/",
      "title": "OpenStreetMap で Bing の衛星写真が使えるようになった！けどズレが気になる…",
      "content_html": "<p><a href=\"http://journal.mycom.co.jp/news/2010/11/26/078/\">OpenStreetMap のエラい人が Microsoft に加入した</a>事を受け、OpenStreetMap（以下 OSM） の背景地図に Bing Map の衛星写真が重ねられるようになりました。</p>\n<!--more-->\n<ul>\n<li><a href=\"http://wiki.openstreetmap.org/wiki/JA:Bing\">JA:Bing - OpenStreetMap Wiki</a></li>\n</ul>\n<p>これで、鮮明な衛星写真を元に GPSログ がなくても地図が描けるようになりましたね。</p>\n<p>って少し気になることが。</p>\n<p>たしか Googleマップ もそうだったですけど、衛生写真 と通常の地図（ベクトル地図）で少しズレてません？</p>\n<p>というわけで Googleマップ と、OSM で私が最近ロギングして描いた地図で比較してみました。</p>\n<p><img src=\"https://blog.amay077.net/img/posts/osm_bing_1.png\" alt=\"&quot;1&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/osm_bing_2.png\" alt=\"&quot;2&quot;\"></p>\n<p>一つ目が Google 、 二つ目が OSM (Bing) です。</p>\n<p>やっぱりズレてますねー。</p>\n<p>Googleマップ も Bing マップもズレの量はともかく、同じ方向にズレている感じです。</p>\n<p>地点によっては、まったくズレていない所もあるし、画像補正の関係でこうなっちゃうのかな…。</p>\n<p>ということで、OSM に Bing のチカラが加わったのは嬉しいのですが、精度が要求される所では、やっぱり GPS ログを収集しましょう、ということでご注意ください。</p>\n<p>それにしても加入して即、Bing を OSM に持ち込むなんてスゴいですね。まるで メカドックに那智さんが加入して即、サバンナRX-7 をスリーローターに改造しちゃうみたいな。。。(わかるひといるかなー？)</p>\n",
      "date_published": "2010-12-01T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/30/android-nds-setup/",
      "url": "https://blog.amay077.net/blog/2010/11/30/android-nds-setup/",
      "title": "Android NDK のセットアップ方法(バージョン r4b, 2010/11/30時点)",
      "content_html": "<p>Cygwin も NDK もド素人ですが、何とかできました。</p>\n<!--more-->\n<p>NDK 1.5 の時から変わっていて苦労しましたが、解説してくれているサイトやツイート、SDKドキュメントを読んで何とかできましたので、その手順を記録しました。</p>\n<h2 id=\"cygwin-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">Cygwin のインストール <a class=\"direct-link\" href=\"#cygwin-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h2>\n<p><a href=\"http://d.hatena.ne.jp/bs-android/20090707/1246952991#\">AndroidのNDK 1.5でHelloJNIを動かす手順 – Android(アンドロイド)情報-ブリリアントサービス</a> を参考にして進めました。</p>\n<p>ダウンロードした Cygwin は 1.7.7 でした。</p>\n<p>途中、</p>\n<blockquote>\n<p>さらにスクロールし、gccのパッケージを選択(※赤丸のしるしの部分をクリック)します。自動的にgcc-coreなどにもチェックが入りますが、そのままにしておきます。</p>\n</blockquote>\n<p>とありましたが、勝手にチェックが入らなかったので、手動で同じようにチェックを入れました。</p>\n<h2 id=\"ndk-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">NDK のインストール <a class=\"direct-link\" href=\"#ndk-%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">#</a></h2>\n<p>引き続き <a href=\"http://d.hatena.ne.jp/bs-android/20090707/1246952991#\">AndroidのNDK 1.5でHelloJNIを動かす手順 – Android(アンドロイド)情報-ブリリアントサービス</a> を参考にしました。</p>\n<p>android-ndk-r4b-windows.zip を</p>\n<blockquote>\n<p>c:\\cygwin\\home\\h_oku</p>\n</blockquote>\n<p>に解凍しましたが、</p>\n<blockquote>\n<p>\\android-ndk-r4b-windows\\android-ndk-r4b</p>\n</blockquote>\n<p>となってしまって混乱したので、</p>\n<blockquote>\n<p>c:\\cygwin\\home\\h_oku\\android-ndk-r4b</p>\n</blockquote>\n<p>となるようにしました。</p>\n<p>次に、</p>\n<blockquote>\n<p>$ sh build/host-setup.sh</p>\n</blockquote>\n<p>としてもコマンドが無い（確かにファイルを検索しても <a href=\"http://host-setup.sh\">host-setup.sh</a> がない）ので焦りましたが、</p>\n<blockquote>\n<p>@saltpp (Tomoki Shiono)</p>\n<p>build/host-setup.sh が無くなって、アプリのトップディレクトリで、ndk-build コマンドを実行すれば、ビルドできるようになってるね。&gt;NDKr4</p>\n<p>5月21日 TweetDeckから</p>\n</blockquote>\n<p>とのだったので、</p>\n<blockquote>\n<p>$ sh ndk-build</p>\n</blockquote>\n<p>を実行しました。</p>\n<p>…がエラーが出ました。</p>\n<blockquote>\n<p>$ sh ndk-build<br>\nAndroid NDK: Could not find application project directory !<br>\nAndroid NDK: Please define the NDK_PROJECT_PATH variable to point to it.<br>\n/home/h_oku/android-ndk-r4b/build/core/build-local.mk:85: ***<br>\nAndroid NDK: Aborting    .  Stop.</p>\n</blockquote>\n<p>NDK_PROJECT_PATH を定義しろ、といってるようだったので、 HOME と同じように環境変数に 「/home/h_oku/project」 と定義しました。</p>\n<h2 id=\"%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92-ndk-%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89\">サンプルを NDK でビルド <a class=\"direct-link\" href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%82%92-ndk-%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89\">#</a></h2>\n<p><a href=\"http://developer.android.com/sdk/ndk/index.html\">Android NDK ｜ Android Developers</a> の</p>\n<p>Getting Started with the NDK</p>\n<p>に</p>\n<blockquote>\n<ol>\n<li>Place your native sources under /jni/…</li>\n<li>Create /jni/Android.mk to describe your native sources to the NDK build system</li>\n<li>Optional: Create /jni/Application.mk.</li>\n</ol>\n</blockquote>\n<p>とあったので、</p>\n<blockquote>\n<p>C:\\cygwin\\home\\h_oku\\android-ndk-r4b\\samples\\hello-jni</p>\n</blockquote>\n<p>のフォルダとファイルを</p>\n<blockquote>\n<p>C:\\cygwin\\home\\h_okuyama\\project</p>\n</blockquote>\n<p>にコピーしました。</p>\n<p>次に、</p>\n<blockquote>\n<p>Build your native code by running the ‘ndk-build’ script from your projet’s directory. It is located in the top-level NDK directory: $ cd $ /ndk-build</p>\n</blockquote>\n<p>とあったので、</p>\n<blockquote>\n<p>C:\\cygwin\\home\\h_oku\\project</p>\n</blockquote>\n<p>に CD で移動し、</p>\n<blockquote>\n<p>C:\\cygwin\\home\\h_oku\\android-ndk-r4b\\ndk-build</p>\n</blockquote>\n<p>を実行しました。怒られました。</p>\n<blockquote>\n<p>C:/cygwin/home/h_oku/android-ndk-r4b/ndk-build</p>\n</blockquote>\n<p>でうまくいきました（\\ と / が違ってました）。</p>\n<p>こんな感じの出力がされました。</p>\n<blockquote>\n<p>$ C:/cygwin/home/h_oku/android-ndk-r4b/ndk-build<br>\nCompile thumb  : hello-jni &lt;= /home/h_oku/project/jni/hello-jni.c<br>\nSharedLibrary  : <a href=\"http://libhello-jni.so\">libhello-jni.so</a><br>\nInstall        : <a href=\"http://libhello-jni.so\">libhello-jni.so</a> =&gt; /home/h_oku/project/libs/armeabi<br>\nそして、おお！</p>\n</blockquote>\n<blockquote>\n<p>C:\\cygwin\\home\\h_oku\\project\\libs</p>\n</blockquote>\n<p>とか</p>\n<blockquote>\n<p>C:\\cygwin\\home\\h_oku\\project\\obj</p>\n</blockquote>\n<p>ができている！</p>\n<h2 id=\"eclipse-%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E3%80%82%E3%81%9D%E3%81%97%E3%81%A6%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%AE%9F%E8%A1%8C\">Eclipse でビルド。そしてアプリの実行 <a class=\"direct-link\" href=\"#eclipse-%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89%E3%80%82%E3%81%9D%E3%81%97%E3%81%A6%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E5%AE%9F%E8%A1%8C\">#</a></h2>\n<p>再び <a href=\"http://d.hatena.ne.jp/bs-android/20090707/1246952991#\">AndroidのNDK 1.5でHelloJNIを動かす手順 – Android(アンドロイド)情報-ブリリアントサービス</a> に戻り、 Eclipse で Android Project を作成し、既存の project フォルダを指定しました。</p>\n<p>プロジェクト名やビルド・ターゲットが自動で設定されましたが、Android 2.2 がチェックされ、上部に</p>\n<blockquote>\n<p>The API level for the selected SDK target does not match the Min SDK Version.</p>\n</blockquote>\n<p>と警告が出ています。とりあえず無視して完了しました。</p>\n<p>プロジェクトをビルド→実行し、Android 2.2 のエミュレータ上で動作を確認することができました。</p>\n<p>NDK 側のソースを修正したら、Cygwin で、</p>\n<blockquote>\n<p>CD C:\\cygwin\\home\\h_oku\\project<br>\nC:/cygwin/home/h_oku/android-ndk-r4b/ndk-build</p>\n</blockquote>\n<p>として、C:\\cygwin\\home\\h_oku\\project\\libs\\armeabi\\<a href=\"http://libhello-jni.so\">libhello-jni.so</a> を再作成し、Eclipse 側で F5 を押して読み込みなおして実行しなおせば反映されます。</p>\n<p>※ちなみに全角文字を表示しようとしたら落ちました…orz</p>\n",
      "date_published": "2010-11-30T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/25/map-g-vs-mapi-vs-y-vs-ms/",
      "url": "https://blog.amay077.net/blog/2010/11/25/map-g-vs-mapi-vs-y-vs-ms/",
      "title": "主要地図サービスの表現比較",
      "content_html": "<p>日本で主要な地図サービス、Google マップ, マピオン、 Yahoo! 地図、Bing Map<br>\nの表現の違いを比べてみました。（完全に同じ縮尺にできなかったのでだいたいですが）</p>\n<!--more-->\n<p>情報量が一番多いのはマピオンかな。しかしその分ごちゃごちゃしている印象も。</p>\n<p>Google マップ と Yahoo! 地図 はあっさりした印象。<br>\n前者は町名を目立たせていて、後者は駅名を目立たせている感じ。余談ですが Yahoo<br>\nには地下街マップ（ <a href=\"http://map.yahoo.co.jp/chika\">http://map.yahoo.co.jp/chika</a> ）もありますからね。駅周りに力を入れているのかもしれません。</p>\n<p>Bing Map は…ガンガレ！</p>\n<p>しかし、見た目は違えど地図データはすべて ゼンリン提供。おそるべしゼンリン！<br>\nそれからデザインの努力でこうも印象が変わるもんですねぇ。デザイナーさんおそるべし！</p>\n<p><img src=\"https://blog.amay077.net/img/posts/map_vs_yahoo.png\" alt=\"&quot;yahoo&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/map_vs_bing.png\" alt=\"&quot;bing&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/map_vs_google.png\" alt=\"&quot;google&quot;\"><br>\n<img src=\"https://blog.amay077.net/img/posts/map_vs_mapion.png\" alt=\"&quot;mapion&quot;\"></p>\n",
      "date_published": "2010-11-25T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/24/asynctask-cancel-4/",
      "url": "https://blog.amay077.net/blog/2010/11/24/asynctask-cancel-4/",
      "title": "AsyncTask を cancel した時の動き【その３】",
      "content_html": "<p>さて前回は、AsyncTask の doInBackground 内で isCancelled をチェックして処理を中断する方法を確認しました。</p>\n<!--more-->\n<p>しかし前回の処理では、カウンタ値が 101 (期待するのは 100) になってしまいました。</p>\n<p>今回は、AsyncTask というよりもマルチスレッド処理では必須な排他制御を行います。</p>\n<p>またいきなり回答なんですが、前回のコードを以下のように修正します。</p>\n<p>AsyncTask のテストプログラム３</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncTestActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Object</span> objLock <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">Button</span> btn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>Button01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        btn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>                <span class=\"token comment\">// タスク A を実行</span><br>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taskA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// ５秒待つ</span><br>                <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// タスク A を中断</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// タスク B を実行</span><br>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taskB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">/** 非同期で加算を行う内部クラス */</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AsyncTask</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">/** 非同期処理 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// 複数スレッドで同時に処理されないように保護する。</span><br>            <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span>objLock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// count を 0～100 まで 100ms 毎に加算する処理</span><br>                count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token comment\">// キャンセルされたら抜ける</span><br>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>                    <span class=\"token punctuation\">}</span><br><br>                    <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br><br>                <span class=\"token comment\">// 処理にかかった時間を返す</span><br>                <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">/** doInBackground が終わったら呼び出される。 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 結果を表示 \"タスク名 - カウンタ値 - 処理時間ms\"</span><br>            <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncTestActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><br>                name <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <br>                            <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br><br>        <span class=\"token comment\">/** cancel() がコールされると呼び出される。 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 結果を表示 \"タスク名 - cancel() が呼ばれました。\"</span><br>            <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncTestActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><br>                name <span class=\"token operator\">+</span> <span class=\"token string\">\" - cancel() が呼ばれました。\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>AsyncTestActivity で objLock を定義・生成し、doInBackground の処理を synchronized(objLock) で囲みます。</p>\n<p>こうすることで、囲まれた内部処理は、複数スレッドから並列処理されなくなります（あとから実行されたスレッドは、synchronized の箇所で待つことになります）。</p>\n<p>この内容は、AsyncTask というより Java (というより一般的なプログラム言語) のイロハだと思いますので、詳しい説明は、他のサイトに譲ります。</p>\n<p>このプログラムの実行結果は次のようになります。</p>\n<blockquote>\n<p>taskA - cancel() が呼ばれました。<br>\ntaskB - 100 - 100030ms</p>\n</blockquote>\n<p>今度は、taskB の結果が確実に 100 になります。synchronized によって、taskA が処理されている間(キャンセルされるまで)は taskB は待っているため、正しくカウンタが初期化・加算されます。</p>\n<p>という事で 前々回、前回 からのまとめです。</p>\n<ul>\n<li>AsyncTask.cancel を呼んでも処理は継続中である</li>\n<li>処理を中断するには、doInBackground 内で isCancelled をチェックして中断処理を行う</li>\n<li>マルチスレッド処理では synchronized で共有情報を保護しよう</li>\n</ul>\n<p>これで AsyncTask のキャンセル処理がだいたい理解できたかなーと思います。 次は、AsyncTask.cancel() の引数「mayInterruptIfRunning」について突っ込んでみたいと思います。true と false で何か変わるの？</p>\n",
      "date_published": "2010-11-24T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/22/python-13/",
      "url": "https://blog.amay077.net/blog/2010/11/22/python-13/",
      "title": "Python東海 第13回勉強会に参加してきました",
      "content_html": "<p><a href=\"https://sites.google.com/site/pythontokai/13th\">Python東海 第13回勉強会</a> に参加してきました。感想というか議事録というか。</p>\n<!--more-->\n<h3 id=\"%E3%82%82%E3%81%8F%E3%81%98\">もくじ <a class=\"direct-link\" href=\"#%E3%82%82%E3%81%8F%E3%81%98\">#</a></h3>\n<ul>\n<li>(前回に引き続き)GAE ハンズオン by <a href=\"http://twitter.com/itouakihiro\">@itouakihiro</a> さん</li>\n<li>Pygmentsでソースコードに色をつけまくろう by <a href=\"http://twitter.com/higebobo\">@higebobo</a> さん</li>\n</ul>\n<h2 id=\"gae-%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E3%81%AE%E7%B6%9A%E3%81%8D\">GAE ハンズオンの続き <a class=\"direct-link\" href=\"#gae-%E3%83%8F%E3%83%B3%E3%82%BA%E3%82%AA%E3%83%B3%E3%81%AE%E7%B6%9A%E3%81%8D\">#</a></h2>\n<p><a href=\"http://code.google.com/intl/ja/appengine/docs/python/gettingstarted/\">スタート ガイド: Python – Google App Engine</a> の 「<a href=\"http://code.google.com/intl/ja/appengine/docs/python/gettingstarted/templates.html\">テンプレートの使用</a>」から「<a href=\"http://code.google.com/intl/ja/appengine/docs/python/gettingstarted/uploading.html\">アプリケーションのアップロード</a>」まで。</p>\n<ul>\n<li>テンプレート使うのは良いとして、index.html とかを Webデザイナーさんがいじるのかな？</li>\n<li>index.html を Shift-jis で保存していて、日本語使ったら文字化けした。UTF-8 にしましょう。</li>\n<li>静的ファイルの使用は普通にできた。</li>\n<li>アップロードの時に ‘<a href=\"http://appcfg.py\">appcfg.py</a> update helloworld/’ を実行するとあるけど、自分の環境には <a href=\"http://appcfg.py\">appcfg.py</a> がなくてハマった。appcfg.exe はあったので ‘appcfg update helloworld/’ でうまく行った。@higebobo さんに助けていただいた。</li>\n<li><a href=\"http://twitter.com/kei10in\">@kei10in</a> さん曰く、Application Identifier で available! って言われるのに登録できない。GMail のメアドとも重複するとダメらしい。なら available! って言うなよゴルァ！ とのこと。</li>\n<li>かくして、めでたくデプロイ完了。記念すべき最初の GAE アプリがコレ→ <a href=\"http://amay077-helloworld.appspot.com/\">http://amay077-helloworld.appspot.com/</a> 。まあスタートガイドに沿ってやればここまでは誰でもできる。ここからが大変。</li>\n<li>PDB でデバッグもできるよ。 参照→ <a href=\"http://www.python.jp/Zope/articles/tips/pdb-howto-1\">http://www.python.jp/Zope/articles/tips/pdb-howto-1</a></li>\n<li>GAE は英語だから英語サイトも要チェック！</li>\n</ul>\n<h2 id=\"pygments%E3%81%A7%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E8%89%B2%E3%82%92%E3%81%A4%E3%81%91%E3%81%BE%E3%81%8F%E3%82%8D%E3%81%86\">Pygmentsでソースコードに色をつけまくろう <a class=\"direct-link\" href=\"#pygments%E3%81%A7%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%AB%E8%89%B2%E3%82%92%E3%81%A4%E3%81%91%E3%81%BE%E3%81%8F%E3%82%8D%E3%81%86\">#</a></h2>\n<ul>\n<li>Syntax-Hilighting を行う Python 製のツール。</li>\n<li>Python じゃなくても使えるよ。</li>\n<li>メチャクチャたくさんの言語に対応してるし、自分で拡張もできるよ。</li>\n<li>trac でもコードハイライト使えるんだ、知らんかった。</li>\n<li>画像にも出せるよ。（サンプルコードでっす。って言って画像で渡すとか鬼畜かな？写経して理解しろという愛かな？）</li>\n<li>自分の中では posterous の MarkDown がアツいのでしばらく頑張ってみようかと。</li>\n</ul>\n<h2 id=\"%E6%87%87%E8%A6%AA%E4%BC%9A%E3%81%B8\">懇親会へ <a class=\"direct-link\" href=\"#%E6%87%87%E8%A6%AA%E4%BC%9A%E3%81%B8\">#</a></h2>\n<p>近場の飲み屋さんにて。18時前に入店して、21時過ぎまで居た気が…。 相変わらず何話してたかよく覚えてないけど、 「中国の文字コード関連は鬼畜」 事を言ってたような…。 そういう事を気にしなくて良い仕事ばかりしてきた（今もだけど）身としてはラッキーだったなーと。</p>\n<p>今回は2回目という事でそんなに緊張することもなく入り込めました。 一口にITエンジニアといっても、色んな仕事があって、色んな考え方で皆さん頑張っていらっしゃる。 そんなお話を聞かせていただくと、刺激を受けるというと大げさかも知れないし、比較というものでもない…とにかく揺さぶられるものがありますね。</p>\n<p>主催して頂いた @itouakihiro さん、会場提供の <a href=\"http://www.vish.co.jp/\">VISH</a> さん（会場提供の見返りは”宣伝” ですよねｗ）、及び 参加された方々、どうもありがとうございました。</p>\n<p>自己紹介で「来年何したい？」の問いに「GAE使って何か作る！」と言ってしまった手前、どげんかせんといかんね。</p>\n",
      "date_published": "2010-11-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/22/asynctask-cancel/",
      "url": "https://blog.amay077.net/blog/2010/11/22/asynctask-cancel/",
      "title": "AsyncTask を cancel した時の動き【その２】",
      "content_html": "<p>さて 前回 は、タスク実行中に AsyncTask.cancel を呼んでも、処理自体は中断されない事を確認しました。</p>\n<!--more-->\n<p>今回をそれを中断させる方法を確認していきます。</p>\n<p>いきなり答えなんですが、処理を中断させるには、doInBackgroud の要所要所で、AsyncTask.isCancelled() をチェックして、 true なら処理を中断するコードを自力でコーディングします。</p>\n<p>AsyncTask のテストプログラム２</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncTestActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">Button</span> btn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>Button01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        btn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>                <span class=\"token comment\">// タスク A を実行</span><br>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taskA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// ５秒待つ</span><br>                <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// タスク A を中断</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// タスク B を実行</span><br>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taskB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">/** 非同期で加算を行う内部クラス */</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AsyncTask</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">/** 非同期処理 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// count を 0～100 まで 100ms 毎に加算する処理</span><br>            count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token comment\">// キャンセルされたら抜ける</span><br>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>                <span class=\"token punctuation\">}</span><br><br>                <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token comment\">// 処理にかかった時間を返す</span><br>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">/** doInBackground が終わったら呼び出される。 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 結果を表示 \"タスク名 - カウンタ値 - 処理時間ms\"</span><br>            <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncTestActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><br>                name <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <br>                            <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br><br>        <span class=\"token comment\">/** cancel() がコールされると呼び出される。 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 結果を表示 \"タスク名 - cancel() が呼ばれました。\"</span><br>            <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncTestActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><br>                name <span class=\"token operator\">+</span> <span class=\"token string\">\" - cancel() が呼ばれました。\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span></code></pre>\n<p>doInBackground のループ内で isCancelled が true だったら抜ける、という処理を追加しています。</p>\n<p>また、cancel を呼んだらメッセージが表示されるように onCancelled にメッセージ処理を追加しています。</p>\n<p>このプログラムの実行結果は次のようになります。</p>\n<blockquote>\n<p>taskA - cancel() が呼ばれました。<br>\ntaskB - 101 - 100029ms</p>\n</blockquote>\n<p>taskA で cancel を実行しているので、まず1行目が出力されます。</p>\n<p>ここでの注意点は、onCancelled が呼び出されるのは処理が中断された時ではなく、cancel が呼び出された後、だという事です。</p>\n<p>また、前回の出力でも分かる事ですが、cancel を呼んだ時は、onPostExecute は呼び出されません。 なので、例えば onPreExecute でプログレスダイアログを表示している場合は、キャンセルを考慮するなら、onPostExecute だけでなく onCancelled でもダイアログを閉じる処理をしなければなりません。</p>\n<p>2行目の出力ですが、前回は 151 までカウンタが加算されてしまった事に比べればマシになりましたが、まだ完全ではないです。 count は タスク A と B で共有しているので、確実に排他をかける必要があるでしょう。</p>\n<p>では、今回のまとめです。</p>\n<ul>\n<li>cancel を実行すると、AsyncTask.isCancelled() が true を返す。</li>\n<li>doInBackground で this.isCancelled をチェックして true になったら中止する処理を実装する。</li>\n<li>でも排他処理は必要</li>\n</ul>\n<p>という事で<a href=\"/blog/2010/11/24/asynctask-cancel-4/\">次回</a>は、排他制御について書きます。</p>\n",
      "date_published": "2010-11-22T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/17/asynctask-cancel-doinbk/",
      "url": "https://blog.amay077.net/blog/2010/11/17/asynctask-cancel-doinbk/",
      "title": "AsyncTask を cancel した時の動き【その１】",
      "content_html": "<p>Android 開発でユーザービリティを向上させるのに良く利用する AsyncTask ですが、cancel した時の内部の動作が不明だったので調べまてみました。 知りたいのは、 「cancel を呼び出したら、doInBackgroud で行われている処理はどうなるのか？」 です。</p>\n<!--more-->\n<p>そこで用意したのが下のプログラムです。 これはクラス変数 count を MyTask によって 100 まで加算します。 MyTask のインスタンスを二つ用意し、</p>\n<ol>\n<li>タスクAを開始</li>\n<li>５秒待つ</li>\n<li>タスクAをキャンセル</li>\n<li>タスクBを開始</li>\n</ol>\n<p>という処理をしています。 タスク A と B で count は共有しています。</p>\n<p>AsyncTask のテストプログラム１</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AsyncTestActivity</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Activity</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">MyTask</span> task <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token annotation punctuation\">@Override</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Bundle</span> savedInstanceState<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">onCreate</span><span class=\"token punctuation\">(</span>savedInstanceState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token function\">setContentView</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>layout<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">Button</span> btn <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>Button01<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        btn<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>            <span class=\"token annotation punctuation\">@Override</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> view<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br><br>                <span class=\"token comment\">// タスク A を実行</span><br>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taskA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// ５秒待つ</span><br>                <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">5000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// タスク A を中断</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">cancel</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>                <span class=\"token comment\">// タスク B を実行</span><br>                task <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"taskB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                task<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><br>    <span class=\"token comment\">/** 非同期で加算を行う内部クラス */</span><br>    <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyTask</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AsyncTask</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">MyTask</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">/** 非同期処理 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">doInBackground</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> params<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>            <span class=\"token comment\">// count を 0～100 まで 100ms 毎に加算する処理</span><br>            count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><br>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br><br>            <span class=\"token comment\">// 処理にかかった時間を返す</span><br>            <span class=\"token keyword\">return</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">/** doInBackground が終わったら呼び出される。 */</span><br>        <span class=\"token annotation punctuation\">@Override</span><br>        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostExecute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token comment\">// 結果を表示 \"タスク名 - カウンタ値 - 処理時間ms\"</span><br>            <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span><span class=\"token function\">makeText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AsyncTestActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span><br>                name <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" - \"</span> <br>                            <span class=\"token operator\">+</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"ms\"</span><span class=\"token punctuation\">,</span><br>                <span class=\"token class-name\">Toast</span><span class=\"token punctuation\">.</span>LENGTH_LONG<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><br><br>まず前提として、タスクを１つだけ実行した時は、こんな結果になります。<br><br>###タスク <span class=\"token class-name\">A</span> だけを実行した時の結果<br><br><span class=\"token operator\">></span>taskA <span class=\"token operator\">-</span> <span class=\"token number\">100</span> <span class=\"token operator\">-</span> <span class=\"token number\">100029</span>ms<br><br><span class=\"token number\">100</span>ミリ秒毎に<span class=\"token number\">100</span>回加算しているので、妥当な結果といえます。<br><br>このコードを実行すると次のような結果になりました。<br><br>#### テストプログラム１の結果<br><br><span class=\"token operator\">></span>taskB <span class=\"token operator\">-</span> <span class=\"token number\">151</span> <span class=\"token operator\">-</span> <span class=\"token number\">100031</span>ms<br><br>taskA の結果は出力されないので cancel した場合は onPostExecute は呼び出されない事が分かります。<br><br>しかし、カウント値が <span class=\"token number\">151</span> と異常になってます。 どうやら taskA と taskB が並列処理されてしまっているようです。 なので、cancel を呼び出しても、doInBackground の処理は継続して行われている事が分かります。<br><br>今回分かったことは<br><br><span class=\"token operator\">*</span> <span class=\"token class-name\">AsyncTask</span><span class=\"token punctuation\">.</span>cancel を呼ぶと、onPostExecute は呼び出されない。<br><span class=\"token operator\">*</span> <span class=\"token class-name\">AsyncTask</span><span class=\"token punctuation\">.</span>cancel を呼んだだけでは doInBackground の処理は中断されない。<br>です。<br><br>じゃあ、どうやって中断させようか、という事で次回↓へ続く。<br></code></pre>\n",
      "date_published": "2010-11-17T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/16/wps/",
      "url": "https://blog.amay077.net/blog/2010/11/16/wps/",
      "title": "略語「WPS」って何？",
      "content_html": "<!--more-->\n<ul>\n<li>WiFi Positioning System : WiFi 基地局から位置を推定するアレ</li>\n<li>Wi-Fi Protected Setup : 無線LAN の設定をするアレ</li>\n<li>Web Prosessing Service : OSGeo 業界でサーバー側で空間情報を処理するプロトコル？ Wikipedia には英語でしか載ってない。 仲間に WMS（Web Map Server）、 WFS（Web Feature Server） がある。</li>\n</ul>\n<p>なんかいろいろあってもぅ〜って感じ。紛らわしい。</p>\n",
      "date_published": "2010-11-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/16/asynctask-cancel-froyo22/",
      "url": "https://blog.amay077.net/blog/2010/11/16/asynctask-cancel-froyo22/",
      "title": "AsyncTask の cancel メソッドにはバグがあるよ、Froyo(2.2)以降で直されるかもよ→Gingerbread（2.3）で直ったよ",
      "content_html": "<h3 id=\"2010.12.16-%E8%BF%BD%E8%A8%98\">2010.12.16 追記 <a class=\"direct-link\" href=\"#2010.12.16-%E8%BF%BD%E8%A8%98\">#</a></h3>\n<p>Gingerbread (Android 2.3) では修正されているとの事です。</p>\n<!--more-->\n<blockquote>\n<p>Romain Guy:<br>\nThis AyncTask's cancel bug was fixed in Gingerbread?<br>\nIt was fixed in Gingerbread yes :)<br>\nvia <a href=\"http://groups.google.com/group/android-developers/browse_thread/thread/6dccc5cbd7bb9205/aae9a3136945890c#\">groups.google.com - AyncTask's cancel bug was fixed in Gingerbread?</a></p>\n</blockquote>\n<p>2.3 のコードが公開されれば、2.2 でも ”正しく” 修正できますね。</p>\n<ul>\n<li>追記ここまで -</li>\n</ul>\n<p>[AsyncTaskの cancel()には問題があり、Froyoの次で修正される。</p>\n<ul>\n<li>kinneko@転職先募集中の日記](<a href=\"http://d.hatena.ne.jp/kinneko/20100730/p9\">http://d.hatena.ne.jp/kinneko/20100730/p9</a>)</li>\n</ul>\n<p>で教えてもらった話。</p>\n<blockquote>\n<p>Eric Mill:</p>\n<ol>\n<li>\n<p>onDestroy(), calls task.cancel()</p>\n</li>\n<li>\n<p>task's onPostExecute runs, isCancelled() returns false, so I have<br>\nno conditional to stop the flow</p>\n</li>\n</ol>\n<p>and that's it. onCancelled never runs.</p>\n<p>via <a href=\"http://groups.google.com/group/android-developers/browse_thread/thread/07ea01892ee7a5f4/9f71428217c2cd44?\">groups.google.com</a></p>\n</blockquote>\n<p>Activity.onDestroy で AsyncTask.cancel を呼ぶと、</p>\n<ul>\n<li>キャンセル時は呼ばれないハズの onPostExecute が呼ばれちゃう。</li>\n<li>isCancelled は false を返すし、</li>\n<li>onCancelled も呼ばれないし、</li>\n</ul>\n<p>から、なんとかしてぇ！ということらしい。</p>\n<p>んで Google の Romain さんが、</p>\n<blockquote>\n<p>Romain Guy:<br>\nThere was a race in the cancel() code that we fixed post-froyo.</p>\n</blockquote>\n<p>と言ってるけど、&quot;post-froyo&quot; というのは、<br>\nPost-froyo  means after froyo, so not in froyo :)<br>\nだそうで、”Froyo の後” つまり、Gingerbread (Android 2.3) での修正らしい。<br>\n（けど &quot;gingerbread!&quot;  って断言してないからもっと先かも知れないなあ。）<br>\nなので、しばらくは、いや当分は自力で flag でも用意して回避するしかないみたい。<br>\nけど AsyncTask.cancel は final メソッドで override できないから、何とも不自然なコードになりそう。。。</p>\n",
      "date_published": "2010-11-16T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/15/ar-car-navi/",
      "url": "https://blog.amay077.net/blog/2010/11/15/ar-car-navi/",
      "title": "ARカーナビとな？",
      "content_html": "<!--more-->\n<ul>\n<li><a href=\"https://player.vimeo.com/video/11870382\">Wikitude Drive - Test Drivers Wanted from Wikitude on Vimeo</a></li>\n</ul>\n<p>カッコいいなあ。 やりたいなあ。たぶんできないけど。<br>\n必要なものを推測してみる。</p>\n<ul>\n<li>道路ネットワークデータ</li>\n<li>GPS</li>\n<li>カメラ</li>\n<li>カメラ（目線）の高さ</li>\n<li>カメラの角度</li>\n<li>方位角</li>\n</ul>\n<p>こんなもんで、映像に道路を重ねられるのかな？</p>\n<p>これができたら、さ、カーナビの3D表示とか要らないね。</p>\n<p>あと振動センサと連動させてドライブレコーダーにもなりそうだし。</p>\n<p>いろいろアイデア膨らむなぁ、たぶんどこかが既に着手してるんだろうな。</p>\n",
      "date_published": "2010-11-15T00:00:00Z"
    },{
      "id": "https://blog.amay077.net/blog/2010/11/14/dialog-duplicate-do-not-open/",
      "url": "https://blog.amay077.net/blog/2010/11/14/dialog-duplicate-do-not-open/",
      "title": "ダイアログを二重に開かないようにする",
      "content_html": "<p>Android なのか Java なのかどっちの仕様か知らないですが、どうやらこちらの世界には「モーダルダイアログ」という概念がないみたいで。</p>\n<!--more-->\n<p>なので以下のようなコードを書くと、連続でボタンをタップすると、ダイアログが二重三重に表示されてしまいます。</p>\n<p>ダイアログが二重に開いちゃうコード</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>Button1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>button<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 再現しやすいように少し負荷をかける</span><br>        <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        <span class=\"token class-name\">AlertDialog</span> dlg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AlertDialog<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ほげ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ほげほげ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">setButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"閉じる\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DialogInterface<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DialogInterface</span> dialog<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                dialog<span class=\"token punctuation\">.</span><span class=\"token function\">dismiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>で自分が考えた対策がこれ。</p>\n<p>二重に開かないコード</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">Button</span> button <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Button</span><span class=\"token punctuation\">)</span><span class=\"token function\">findViewById</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">.</span>Button1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>stopButton<span class=\"token punctuation\">.</span><span class=\"token function\">setOnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">View<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>    <span class=\"token comment\">// メンバとして宣言</span><br>    <span class=\"token class-name\">AlertDialog</span> dlg <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AlertDialog<span class=\"token punctuation\">.</span>Builder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LoggingActivity</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">View</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>        <span class=\"token comment\">// 表示されてたら何もしない</span><br>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dlg<span class=\"token punctuation\">.</span><span class=\"token function\">isShowing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span><br>        <span class=\"token punctuation\">}</span><br><br>        <span class=\"token comment\">// 再現しやすいように少し負荷をかける</span><br>        <span class=\"token class-name\">SystemClock</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">setTitle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ほげ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">setMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ほげほげ\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">setButton</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"閉じる\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DialogInterface<span class=\"token punctuation\">.</span>OnClickListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>            <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DialogInterface</span> dialog<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> which<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><br>                dialog<span class=\"token punctuation\">.</span><span class=\"token function\">dismiss</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>            <span class=\"token punctuation\">}</span><br>        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>        dlg<span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><br>    <span class=\"token punctuation\">}</span><br><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<p>匿名クラスではコンストラクタが使えないので、dlg.setTitle とか何回もよばれちゃうのが気に入らないけど、まあ目的は達成できたのでこれでいいかなと。 C# なら 2〜3行で書けるのに〜。</p>\n",
      "date_published": "2010-11-14T00:00:00Z"
    }
  ]
}
